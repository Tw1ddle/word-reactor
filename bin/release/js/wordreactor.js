(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var TrainingDatas = function() { };
TrainingDatas.__name__ = true;
var UserData = function(container,topic,text,type,rotationLimitDegrees) {
	if(container == null) {
		throw haxe_Exception.thrown("FAIL: container != null");
	}
	if(topic == null) {
		throw haxe_Exception.thrown("FAIL: topic != null");
	}
	this.container = container;
	if(type == 0) {
		this.set_text(StringTools.replace(topic.name,"_"," "));
	} else {
		if(text == null) {
			throw haxe_Exception.thrown("FAIL: text != null");
		}
		this.set_text(text);
	}
	this.topic = topic;
	this.type = type;
	this.rotationLimitDegrees = rotationLimitDegrees;
};
UserData.__name__ = true;
UserData.prototype = {
	set_text: function(text) {
		if(!(text != null && text.length > 0)) {
			throw haxe_Exception.thrown("FAIL: text != null && text.length > 0");
		}
		this.text = text;
		this.container.getElementsByClassName("innerContent")[0].innerHTML = text;
		return this.text;
	}
};
var GeneratorTriePair = function(generator,trie) {
	this.generator = generator;
	this.trie = trie;
};
GeneratorTriePair.__name__ = true;
var Topic = function(name,color) {
	this.name = StringTools.replace(name.toLowerCase()," ","_");
	this.color = color;
};
Topic.__name__ = true;
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Main = function() {
	this.lastAnimationTime = 0.0;
	this.div = window.document.getElementById("simulation");
	this.currentTopicGroupCounter = 0;
	window.onload = $bind(this,this.onWindowLoaded);
};
Main.__name__ = true;
Main.main = function() {
	var main = new Main();
};
Main.prototype = {
	onWindowLoaded: function() {
		var _gthis = this;
		this.generatorMap = new haxe_ds_StringMap();
		this.napeGravity = new nape_geom_Vec2(0,600);
		var _gthis1 = this;
		while(this.div.firstChild != null) this.div.removeChild(this.div.firstChild);
		this.lastAnimationTime = 0.0;
		var screenWidth = window.innerWidth;
		var screenHeight = window.innerHeight;
		this.wordFontSizePixels = Math.max(Math.min(screenWidth,screenHeight) * 0.015,12) | 0;
		this.wordBallPixelPadding = this.wordFontSizePixels * 2;
		this.topicFontSizePixels = Math.max(Math.min(screenWidth,screenHeight) * 0.02,18) | 0;
		this.topicBallPixelPadding = this.topicFontSizePixels * 2;
		this.napeSpace = new nape_space_Space(this.napeGravity);
		var tmp = this.napeSpace.zpp_inner.__static;
		var x = 0;
		var y = 0;
		var weak = true;
		if(weak == null) {
			weak = false;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp1;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp1 = ret.zpp_inner.y == y;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = weak;
		var x = 0;
		var y = 0;
		var weak = true;
		if(weak == null) {
			weak = false;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret1;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret1 = new nape_geom_Vec2();
		} else {
			ret1 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret1.zpp_pool;
			ret1.zpp_pool = null;
			ret1.zpp_disp = false;
			if(ret1 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret1.zpp_inner == null) {
			var ret2;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret2 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret2 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret2.next;
				ret2.next = null;
			}
			ret2.weak = false;
			ret2._immutable = false;
			ret2.x = x;
			ret2.y = y;
			ret1.zpp_inner = ret2;
			ret1.zpp_inner.outer = ret1;
		} else {
			if(ret1 != null && ret1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret1.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp1;
			if(ret1 != null && ret1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret1.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret1.zpp_inner.x == x) {
				if(ret1 != null && ret1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret1.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp1 = ret1.zpp_inner.y == y;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				ret1.zpp_inner.x = x;
				ret1.zpp_inner.y = y;
				var _this = ret1.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret1.zpp_inner.weak = weak;
		this.napeHand = new nape_constraint_PivotJoint(tmp,null,ret,ret1);
		var _this = this.napeHand;
		if(_this.zpp_inner.active != false) {
			if(_this.zpp_inner.component != null) {
				_this.zpp_inner.component.woken = false;
			}
			_this.zpp_inner.clearcache();
			if(_this.zpp_inner.space != null) {
				_this.zpp_inner.wake();
				_this.zpp_inner.space.live_constraints.remove(_this.zpp_inner);
			}
			_this.zpp_inner.active = false;
			_this.zpp_inner.deactivate();
		}
		var _this = this.napeHand;
		if(_this.zpp_inner.stiff != false) {
			_this.zpp_inner.stiff = false;
			_this.zpp_inner.wake();
		}
		var _this = this.napeHand;
		if(_this.zpp_inner.maxForce != 1500000) {
			_this.zpp_inner.maxForce = 1500000;
			_this.zpp_inner.wake();
		}
		var _this = this.napeHand;
		var space = this.napeSpace;
		if(_this.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Constraint belonging to" + " a Compound, only the root Compound space can be set");
		}
		if((_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer) != space) {
			if(_this.zpp_inner.component != null) {
				_this.zpp_inner.component.woken = false;
			}
			_this.zpp_inner.clearcache();
			if(_this.zpp_inner.space != null) {
				_this.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(_this);
			}
			if(space != null) {
				var _this1 = space.zpp_inner.wrap_constraints;
				if(_this1.zpp_inner.reverse_flag) {
					_this1.push(_this);
				} else {
					_this1.unshift(_this);
				}
			} else {
				_this.zpp_inner.space = null;
			}
		}
		var tmp = _this.zpp_inner.space == null;
		var width = window.innerWidth;
		var height = window.innerHeight;
		if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var bounds = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC);
		var _this = bounds.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Polygon(nape_shape_Polygon.rect(0,-100,width,100));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var _this = bounds.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Polygon(nape_shape_Polygon.rect(0,height,width,100));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var _this = bounds.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Polygon(nape_shape_Polygon.rect(-100,0,100,height));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var _this = bounds.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Polygon(nape_shape_Polygon.rect(width,0,100,height));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		this.worldBorder = bounds;
		var _this = this.worldBorder;
		var space = this.napeSpace;
		if(_this.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		_this.zpp_inner.immutable_midstep("Body::space");
		if(_this.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if((_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer) != space) {
			if((_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer) != null) {
				_this.zpp_inner.component.woken = false;
			}
			if((_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer) != null) {
				(_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(_this);
			}
			if(space != null) {
				var _this1 = space.zpp_inner.wrap_bodies;
				if(_this1.zpp_inner.reverse_flag) {
					_this1.push(_this);
				} else {
					_this1.unshift(_this);
				}
			}
		}
		var tmp = _this.zpp_inner.space == null;
		this.wordBallCollisionType = new nape_callbacks_CbType();
		var _this = this.napeSpace.zpp_inner.wrap_listeners;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var obj = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var obj1 = new nape_callbacks_InteractionListener(obj,zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION,this.wordBallCollisionType,this.wordBallCollisionType,$bind(this,this.wordOnWordCollision));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj1);
		} else {
			_this.unshift(obj1);
		}
		this.topicBallCollisionType = new nape_callbacks_CbType();
		var _this = this.napeSpace.zpp_inner.wrap_listeners;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var obj = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var obj1 = new nape_callbacks_InteractionListener(obj,zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION,this.topicBallCollisionType,this.topicBallCollisionType,$bind(this,this.topicOnTopicCollision));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj1);
		} else {
			_this.unshift(obj1);
		}
		this.topicBalls = new nape_phys_BodyList();
		this.currentTopicGroup = this.getNextTopicGroup();
		var _g = 0;
		var _g1 = this.currentTopicGroup.length;
		while(_g < _g1) {
			var i = _g++;
			var _this = this.topicBalls;
			var startX = screenWidth * 0.5;
			var startY = screenHeight * 0.5;
			var topic = this.currentTopicGroup[i];
			var fontSize = this.topicFontSizePixels;
			var outer = window.document.createElement("div");
			outer.className = "contentWrapper";
			var inner = window.document.createElement("span");
			inner.className = "innerContent";
			inner.innerHTML = "";
			if(fontSize != null) {
				inner.style.fontSize = Std.string(fontSize) + "px";
			}
			outer.appendChild(inner);
			var content = outer;
			var radius = topic.name.length * this.topicFontSizePixels * 0.5 + this.topicBallPixelPadding;
			var fillTechnique = null;
			var container = window.document.createElement("div");
			container.className = "ballContainer";
			container.style.width = Std.string(radius) + "px";
			container.style.height = Std.string(radius) + "px";
			container.style.left = Std.string(startX) + "px";
			container.style.top = Std.string(startY) + "px";
			var circle = window.document.createElement("canvas");
			circle.width = radius | 0;
			circle.height = radius | 0;
			var ctx = circle.getContext("2d",null);
			if(fillTechnique != null) {
				fillTechnique(ctx,radius | 0,radius | 0);
			} else {
				ctx.fillStyle = topic.color;
				ctx.beginPath();
				ctx.arc(radius / 2,radius / 2,radius / 2,0,Math.PI * 2);
				ctx.closePath();
				ctx.fill();
			}
			container.appendChild(circle);
			container.appendChild(content);
			var circleContainer = container;
			this.div.appendChild(circleContainer);
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this1 = ball.zpp_inner.wrap_pos;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = _this1.zpp_inner;
			if(_this2._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this2._isimmutable != null) {
				_this2._isimmutable();
			}
			if(startX != startX || startY != startY) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this3 = _this1.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			if(_this1.zpp_inner.x == startX) {
				if(_this1 != null && _this1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this4 = _this1.zpp_inner;
				if(_this4._validate != null) {
					_this4._validate();
				}
				tmp = _this1.zpp_inner.y == startY;
			} else {
				tmp = false;
			}
			if(!tmp) {
				_this1.zpp_inner.x = startX;
				_this1.zpp_inner.y = startY;
				var _this5 = _this1.zpp_inner;
				if(_this5._invalidate != null) {
					_this5._invalidate(_this5);
				}
			}
			var _this6 = ball.zpp_inner.wrap_shapes;
			var obj = new nape_shape_Circle(radius / 2 | 0);
			if(_this6.zpp_inner.reverse_flag) {
				_this6.push(obj);
			} else {
				_this6.unshift(obj);
			}
			var space = this.napeSpace;
			if(ball.zpp_inner.compound != null) {
				throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
			}
			ball.zpp_inner.immutable_midstep("Body::space");
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					ball.zpp_inner.component.woken = false;
				}
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
				}
				if(space != null) {
					var _this7 = space.zpp_inner.wrap_bodies;
					if(_this7.zpp_inner.reverse_flag) {
						_this7.push(ball);
					} else {
						_this7.unshift(ball);
					}
				}
			}
			var tmp1 = ball.zpp_inner.space == null;
			var angularVel = Math.random() * 2 - 1;
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if(ball.zpp_inner.angvel != angularVel) {
				if(angularVel != angularVel) {
					throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
				}
				if(ball.zpp_inner.type == 1) {
					throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
				}
				ball.zpp_inner.angvel = angularVel;
				ball.zpp_inner.wake();
			}
			var ball1 = ball;
			if(ball1.zpp_inner_i.userData == null) {
				ball1.zpp_inner_i.userData = { };
			}
			ball1.zpp_inner_i.userData.sprite = new UserData(circleContainer,topic,null,0,10 + Math.random() * 35);
			if(ball1.zpp_inner_i.wrap_cbTypes == null) {
				ball1.zpp_inner_i.setupcbTypes();
			}
			var _this8 = ball1.zpp_inner_i.wrap_cbTypes;
			var obj1 = this.topicBallCollisionType;
			if(_this8.zpp_inner.reverse_flag) {
				_this8.push(obj1);
			} else {
				_this8.unshift(obj1);
			}
			var obj2 = ball1;
			if(_this.zpp_inner.reverse_flag) {
				_this.push(obj2);
			} else {
				_this.unshift(obj2);
			}
		}
		this.wordBalls = new nape_phys_BodyList();
		var startX = screenWidth * 0.5;
		var startY = screenHeight * 0.5;
		var fontSize = null;
		var outer = window.document.createElement("div");
		outer.className = "contentWrapper";
		var inner = window.document.createElement("span");
		inner.className = "innerContent";
		inner.innerHTML = "";
		if(fontSize != null) {
			inner.style.fontSize = Std.string(fontSize) + "px";
		}
		outer.appendChild(inner);
		var content = outer;
		var span = content.childNodes[0];
		span.innerHTML = "<h1>Word Reactor</h1><br/><span style=\"font-size:15px;\"><strong>Instructions:</strong><br/><br/>1. Drag and collide balls.<br/>2. Tap the background.<br/>3. Tap reset ball.<br/>4. Have fun!</span>";
		var topic = this.currentTopicGroup[0];
		var fillTechnique = null;
		var container = window.document.createElement("div");
		container.className = "ballContainer";
		container.style.width = "300" + "px";
		container.style.height = "300" + "px";
		container.style.left = Std.string(startX) + "px";
		container.style.top = Std.string(startY) + "px";
		var circle = window.document.createElement("canvas");
		circle.width = 300;
		circle.height = 300;
		var ctx = circle.getContext("2d",null);
		if(fillTechnique != null) {
			fillTechnique(ctx,300,300);
		} else {
			ctx.fillStyle = topic.color;
			ctx.beginPath();
			ctx.arc(150.,150.,150.,0,Math.PI * 2);
			ctx.closePath();
			ctx.fill();
		}
		container.appendChild(circle);
		container.appendChild(content);
		var circleContainer = container;
		this.div.appendChild(circleContainer);
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
		if(ball.zpp_inner.wrap_pos == null) {
			ball.zpp_inner.setupPosition();
		}
		var _this = ball.zpp_inner.wrap_pos;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(startX != startX || startY != startY) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(_this.zpp_inner.x == startX) {
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			tmp = _this.zpp_inner.y == startY;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_this.zpp_inner.x = startX;
			_this.zpp_inner.y = startY;
			var _this1 = _this.zpp_inner;
			if(_this1._invalidate != null) {
				_this1._invalidate(_this1);
			}
		}
		var _this = ball.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Circle(150. | 0);
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var space = this.napeSpace;
		if(ball.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		ball.zpp_inner.immutable_midstep("Body::space");
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				ball.zpp_inner.component.woken = false;
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
			}
			if(space != null) {
				var _this = space.zpp_inner.wrap_bodies;
				if(_this.zpp_inner.reverse_flag) {
					_this.push(ball);
				} else {
					_this.unshift(ball);
				}
			}
		}
		var tmp = ball.zpp_inner.space == null;
		var angularVel = Math.random() * 2 - 1;
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if(ball.zpp_inner.angvel != angularVel) {
			if(angularVel != angularVel) {
				throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
			}
			if(ball.zpp_inner.type == 1) {
				throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
			}
			ball.zpp_inner.angvel = angularVel;
			ball.zpp_inner.wake();
		}
		var ball1 = ball;
		if(ball1.zpp_inner_i.userData == null) {
			ball1.zpp_inner_i.userData = { };
		}
		ball1.zpp_inner_i.userData.sprite = circleContainer;
		this.instructionsBall = ball1;
		var startX = screenWidth * 0.2;
		var startY = screenHeight * 0.1;
		var fontSize = null;
		var outer = window.document.createElement("div");
		outer.className = "contentWrapper";
		var inner = window.document.createElement("span");
		inner.className = "innerContent";
		inner.innerHTML = "";
		if(fontSize != null) {
			inner.style.fontSize = Std.string(fontSize) + "px";
		}
		outer.appendChild(inner);
		var content = outer;
		var topic = Main.topicGroups[0][0];
		var useCanvas = false;
		var fillTechnique = null;
		if(useCanvas == null) {
			useCanvas = true;
		}
		var container = window.document.createElement("div");
		container.className = "ballContainer";
		container.style.width = "96" + "px";
		container.style.height = "96" + "px";
		container.style.left = Std.string(startX) + "px";
		container.style.top = Std.string(startY) + "px";
		if(useCanvas) {
			var circle = window.document.createElement("canvas");
			circle.width = 96;
			circle.height = 96;
			var ctx = circle.getContext("2d",null);
			if(fillTechnique != null) {
				fillTechnique(ctx,96,96);
			} else {
				ctx.fillStyle = topic.color;
				ctx.beginPath();
				ctx.arc(48.,48.,48.,0,Math.PI * 2);
				ctx.closePath();
				ctx.fill();
			}
			container.appendChild(circle);
		}
		container.appendChild(content);
		var circleContainer = container;
		this.div.appendChild(circleContainer);
		circleContainer.addEventListener("click",function(e) {
			window.open("https://github.com/Tw1ddle/word-reactor");
		},false);
		circleContainer.addEventListener("touchstart",function(e) {
			window.open("https://github.com/Tw1ddle/word-reactor");
		},false);
		circleContainer.innerHTML = "<img src=\"assets/images/githublogo.png\" />";
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
		if(ball.zpp_inner.wrap_pos == null) {
			ball.zpp_inner.setupPosition();
		}
		var _this = ball.zpp_inner.wrap_pos;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(startX != startX || startY != startY) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(_this.zpp_inner.x == startX) {
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			tmp = _this.zpp_inner.y == startY;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_this.zpp_inner.x = startX;
			_this.zpp_inner.y = startY;
			var _this1 = _this.zpp_inner;
			if(_this1._invalidate != null) {
				_this1._invalidate(_this1);
			}
		}
		var _this = ball.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Circle(48. | 0);
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var space = this.napeSpace;
		if(ball.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		ball.zpp_inner.immutable_midstep("Body::space");
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				ball.zpp_inner.component.woken = false;
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
			}
			if(space != null) {
				var _this = space.zpp_inner.wrap_bodies;
				if(_this.zpp_inner.reverse_flag) {
					_this.push(ball);
				} else {
					_this.unshift(ball);
				}
			}
		}
		var tmp = ball.zpp_inner.space == null;
		var angularVel = Math.random() * 2 - 1;
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if(ball.zpp_inner.angvel != angularVel) {
			if(angularVel != angularVel) {
				throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
			}
			if(ball.zpp_inner.type == 1) {
				throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
			}
			ball.zpp_inner.angvel = angularVel;
			ball.zpp_inner.wake();
		}
		var ball1 = ball;
		if(ball1.zpp_inner_i.userData == null) {
			ball1.zpp_inner_i.userData = { };
		}
		ball1.zpp_inner_i.userData.sprite = circleContainer;
		this.githubBall = ball1;
		var startX = screenWidth * 0.5;
		var startY = screenHeight * 0.1;
		var fontSize = null;
		var outer = window.document.createElement("div");
		outer.className = "contentWrapper";
		var inner = window.document.createElement("span");
		inner.className = "innerContent";
		inner.innerHTML = "";
		if(fontSize != null) {
			inner.style.fontSize = Std.string(fontSize) + "px";
		}
		outer.appendChild(inner);
		var content = outer;
		var topic = Main.topicGroups[0][0];
		var useCanvas = false;
		var fillTechnique = null;
		if(useCanvas == null) {
			useCanvas = true;
		}
		var container = window.document.createElement("div");
		container.className = "ballContainer";
		container.style.width = "96" + "px";
		container.style.height = "96" + "px";
		container.style.left = Std.string(startX) + "px";
		container.style.top = Std.string(startY) + "px";
		if(useCanvas) {
			var circle = window.document.createElement("canvas");
			circle.width = 96;
			circle.height = 96;
			var ctx = circle.getContext("2d",null);
			if(fillTechnique != null) {
				fillTechnique(ctx,96,96);
			} else {
				ctx.fillStyle = topic.color;
				ctx.beginPath();
				ctx.arc(48.,48.,48.,0,Math.PI * 2);
				ctx.closePath();
				ctx.fill();
			}
			container.appendChild(circle);
		}
		container.appendChild(content);
		var circleContainer = container;
		this.div.appendChild(circleContainer);
		circleContainer.addEventListener("click",function(e) {
			window.open("https://twitter.com/Sam_Twidale/status/756230840821092352");
		},false);
		circleContainer.addEventListener("touchstart",function(e) {
			window.open("https://twitter.com/Sam_Twidale/status/756230840821092352");
		},false);
		circleContainer.innerHTML = "<img src=\"assets/images/twitterlogo.png\" />";
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
		if(ball.zpp_inner.wrap_pos == null) {
			ball.zpp_inner.setupPosition();
		}
		var _this = ball.zpp_inner.wrap_pos;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(startX != startX || startY != startY) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(_this.zpp_inner.x == startX) {
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			tmp = _this.zpp_inner.y == startY;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_this.zpp_inner.x = startX;
			_this.zpp_inner.y = startY;
			var _this1 = _this.zpp_inner;
			if(_this1._invalidate != null) {
				_this1._invalidate(_this1);
			}
		}
		var _this = ball.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Circle(48. | 0);
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var space = this.napeSpace;
		if(ball.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		ball.zpp_inner.immutable_midstep("Body::space");
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				ball.zpp_inner.component.woken = false;
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
			}
			if(space != null) {
				var _this = space.zpp_inner.wrap_bodies;
				if(_this.zpp_inner.reverse_flag) {
					_this.push(ball);
				} else {
					_this.unshift(ball);
				}
			}
		}
		var tmp = ball.zpp_inner.space == null;
		var angularVel = Math.random() * 2 - 1;
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if(ball.zpp_inner.angvel != angularVel) {
			if(angularVel != angularVel) {
				throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
			}
			if(ball.zpp_inner.type == 1) {
				throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
			}
			ball.zpp_inner.angvel = angularVel;
			ball.zpp_inner.wake();
		}
		var ball1 = ball;
		if(ball1.zpp_inner_i.userData == null) {
			ball1.zpp_inner_i.userData = { };
		}
		ball1.zpp_inner_i.userData.sprite = circleContainer;
		this.twitterBall = ball1;
		var startX = screenWidth * 0.8;
		var startY = screenHeight * 0.1;
		var callback = function() {
			var _gthis = _gthis1;
			while(_gthis1.div.firstChild != null) _gthis1.div.removeChild(_gthis1.div.firstChild);
			_gthis1.lastAnimationTime = 0.0;
			var screenWidth = window.innerWidth;
			var screenHeight = window.innerHeight;
			_gthis1.wordFontSizePixels = Math.max(Math.min(screenWidth,screenHeight) * 0.015,12) | 0;
			_gthis1.wordBallPixelPadding = _gthis1.wordFontSizePixels * 2;
			_gthis1.topicFontSizePixels = Math.max(Math.min(screenWidth,screenHeight) * 0.02,18) | 0;
			_gthis1.topicBallPixelPadding = _gthis1.topicFontSizePixels * 2;
			_gthis1.napeSpace = new nape_space_Space(_gthis1.napeGravity);
			var _gthis2 = _gthis1.napeSpace.zpp_inner.__static;
			var x = 0;
			var y = 0;
			var weak = true;
			if(weak == null) {
				weak = false;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var ret;
			if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
				ret = new nape_geom_Vec2();
			} else {
				ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
				ret.zpp_pool = null;
				ret.zpp_disp = false;
				if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
				}
			}
			if(ret.zpp_inner == null) {
				var ret1;
				if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
					ret1 = new zpp_$nape_geom_ZPP_$Vec2();
				} else {
					ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.weak = false;
				ret1._immutable = false;
				ret1.x = x;
				ret1.y = y;
				ret.zpp_inner = ret1;
				ret.zpp_inner.outer = ret;
			} else {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._immutable) {
					throw haxe_Exception.thrown("Error: Vec2 is immutable");
				}
				if(_this._isimmutable != null) {
					_this._isimmutable();
				}
				if(x != x || y != y) {
					throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
				}
				var callback;
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				if(ret.zpp_inner.x == x) {
					if(ret != null && ret.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this = ret.zpp_inner;
					if(_this._validate != null) {
						_this._validate();
					}
					callback = ret.zpp_inner.y == y;
				} else {
					callback = false;
				}
				if(!callback) {
					ret.zpp_inner.x = x;
					ret.zpp_inner.y = y;
					var _this = ret.zpp_inner;
					if(_this._invalidate != null) {
						_this._invalidate(_this);
					}
				}
			}
			ret.zpp_inner.weak = weak;
			var x = 0;
			var y = 0;
			var weak = true;
			if(weak == null) {
				weak = false;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var ret1;
			if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
				ret1 = new nape_geom_Vec2();
			} else {
				ret1 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret1.zpp_pool;
				ret1.zpp_pool = null;
				ret1.zpp_disp = false;
				if(ret1 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
				}
			}
			if(ret1.zpp_inner == null) {
				var ret2;
				if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
					ret2 = new zpp_$nape_geom_ZPP_$Vec2();
				} else {
					ret2 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.weak = false;
				ret2._immutable = false;
				ret2.x = x;
				ret2.y = y;
				ret1.zpp_inner = ret2;
				ret1.zpp_inner.outer = ret1;
			} else {
				if(ret1 != null && ret1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret1.zpp_inner;
				if(_this._immutable) {
					throw haxe_Exception.thrown("Error: Vec2 is immutable");
				}
				if(_this._isimmutable != null) {
					_this._isimmutable();
				}
				if(x != x || y != y) {
					throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
				}
				var callback;
				if(ret1 != null && ret1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret1.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				if(ret1.zpp_inner.x == x) {
					if(ret1 != null && ret1.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this = ret1.zpp_inner;
					if(_this._validate != null) {
						_this._validate();
					}
					callback = ret1.zpp_inner.y == y;
				} else {
					callback = false;
				}
				if(!callback) {
					ret1.zpp_inner.x = x;
					ret1.zpp_inner.y = y;
					var _this = ret1.zpp_inner;
					if(_this._invalidate != null) {
						_this._invalidate(_this);
					}
				}
			}
			ret1.zpp_inner.weak = weak;
			_gthis1.napeHand = new nape_constraint_PivotJoint(_gthis2,null,ret,ret1);
			var _this = _gthis1.napeHand;
			if(_this.zpp_inner.active != false) {
				if(_this.zpp_inner.component != null) {
					_this.zpp_inner.component.woken = false;
				}
				_this.zpp_inner.clearcache();
				if(_this.zpp_inner.space != null) {
					_this.zpp_inner.wake();
					_this.zpp_inner.space.live_constraints.remove(_this.zpp_inner);
				}
				_this.zpp_inner.active = false;
				_this.zpp_inner.deactivate();
			}
			var _this = _gthis1.napeHand;
			if(_this.zpp_inner.stiff != false) {
				_this.zpp_inner.stiff = false;
				_this.zpp_inner.wake();
			}
			var _this = _gthis1.napeHand;
			if(_this.zpp_inner.maxForce != 1500000) {
				_this.zpp_inner.maxForce = 1500000;
				_this.zpp_inner.wake();
			}
			var _this = _gthis1.napeHand;
			var space = _gthis1.napeSpace;
			if(_this.zpp_inner.compound != null) {
				throw haxe_Exception.thrown("Error: Cannot set the space of a Constraint belonging to" + " a Compound, only the root Compound space can be set");
			}
			if((_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer) != space) {
				if(_this.zpp_inner.component != null) {
					_this.zpp_inner.component.woken = false;
				}
				_this.zpp_inner.clearcache();
				if(_this.zpp_inner.space != null) {
					_this.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(_this);
				}
				if(space != null) {
					var _this1 = space.zpp_inner.wrap_constraints;
					if(_this1.zpp_inner.reverse_flag) {
						_this1.push(_this);
					} else {
						_this1.unshift(_this);
					}
				} else {
					_this.zpp_inner.space = null;
				}
			}
			var callback = _this.zpp_inner.space == null;
			var width = window.innerWidth;
			var height = window.innerHeight;
			if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			var bounds = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC);
			var _this = bounds.zpp_inner.wrap_shapes;
			var obj = new nape_shape_Polygon(nape_shape_Polygon.rect(0,-100,width,100));
			if(_this.zpp_inner.reverse_flag) {
				_this.push(obj);
			} else {
				_this.unshift(obj);
			}
			var _this = bounds.zpp_inner.wrap_shapes;
			var obj = new nape_shape_Polygon(nape_shape_Polygon.rect(0,height,width,100));
			if(_this.zpp_inner.reverse_flag) {
				_this.push(obj);
			} else {
				_this.unshift(obj);
			}
			var _this = bounds.zpp_inner.wrap_shapes;
			var obj = new nape_shape_Polygon(nape_shape_Polygon.rect(-100,0,100,height));
			if(_this.zpp_inner.reverse_flag) {
				_this.push(obj);
			} else {
				_this.unshift(obj);
			}
			var _this = bounds.zpp_inner.wrap_shapes;
			var obj = new nape_shape_Polygon(nape_shape_Polygon.rect(width,0,100,height));
			if(_this.zpp_inner.reverse_flag) {
				_this.push(obj);
			} else {
				_this.unshift(obj);
			}
			_gthis1.worldBorder = bounds;
			var _this = _gthis1.worldBorder;
			var space = _gthis1.napeSpace;
			if(_this.zpp_inner.compound != null) {
				throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
			}
			_this.zpp_inner.immutable_midstep("Body::space");
			if(_this.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if((_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer) != space) {
				if((_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer) != null) {
					_this.zpp_inner.component.woken = false;
				}
				if((_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer) != null) {
					(_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(_this);
				}
				if(space != null) {
					var _this1 = space.zpp_inner.wrap_bodies;
					if(_this1.zpp_inner.reverse_flag) {
						_this1.push(_this);
					} else {
						_this1.unshift(_this);
					}
				}
			}
			var callback = _this.zpp_inner.space == null;
			_gthis1.wordBallCollisionType = new nape_callbacks_CbType();
			var _this = _gthis1.napeSpace.zpp_inner.wrap_listeners;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			var obj = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			var obj1 = new nape_callbacks_InteractionListener(obj,zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION,_gthis1.wordBallCollisionType,_gthis1.wordBallCollisionType,$bind(_gthis1,_gthis1.wordOnWordCollision));
			if(_this.zpp_inner.reverse_flag) {
				_this.push(obj1);
			} else {
				_this.unshift(obj1);
			}
			_gthis1.topicBallCollisionType = new nape_callbacks_CbType();
			var _this = _gthis1.napeSpace.zpp_inner.wrap_listeners;
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			var obj = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			var obj1 = new nape_callbacks_InteractionListener(obj,zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION,_gthis1.topicBallCollisionType,_gthis1.topicBallCollisionType,$bind(_gthis1,_gthis1.topicOnTopicCollision));
			if(_this.zpp_inner.reverse_flag) {
				_this.push(obj1);
			} else {
				_this.unshift(obj1);
			}
			_gthis1.topicBalls = new nape_phys_BodyList();
			_gthis1.currentTopicGroup = _gthis1.getNextTopicGroup();
			var _g = 0;
			var _g1 = _gthis1.currentTopicGroup.length;
			while(_g < _g1) {
				var i = _g++;
				var _this = _gthis1.topicBalls;
				var startX = screenWidth * 0.5;
				var startY = screenHeight * 0.5;
				var topic = _gthis1.currentTopicGroup[i];
				var fontSize = _gthis1.topicFontSizePixels;
				var outer = window.document.createElement("div");
				outer.className = "contentWrapper";
				var inner = window.document.createElement("span");
				inner.className = "innerContent";
				inner.innerHTML = "";
				if(fontSize != null) {
					inner.style.fontSize = Std.string(fontSize) + "px";
				}
				outer.appendChild(inner);
				var content = outer;
				var radius = topic.name.length * _gthis1.topicFontSizePixels * 0.5 + _gthis1.topicBallPixelPadding;
				var fillTechnique = null;
				var container = window.document.createElement("div");
				container.className = "ballContainer";
				container.style.width = Std.string(radius) + "px";
				container.style.height = Std.string(radius) + "px";
				container.style.left = Std.string(startX) + "px";
				container.style.top = Std.string(startY) + "px";
				var circle = window.document.createElement("canvas");
				circle.width = radius | 0;
				circle.height = radius | 0;
				var ctx = circle.getContext("2d",null);
				if(fillTechnique != null) {
					fillTechnique(ctx,radius | 0,radius | 0);
				} else {
					ctx.fillStyle = topic.color;
					ctx.beginPath();
					ctx.arc(radius / 2,radius / 2,radius / 2,0,Math.PI * 2);
					ctx.closePath();
					ctx.fill();
				}
				container.appendChild(circle);
				container.appendChild(content);
				var circleContainer = container;
				_gthis1.div.appendChild(circleContainer);
				if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
				if(ball.zpp_inner.wrap_pos == null) {
					ball.zpp_inner.setupPosition();
				}
				var _this1 = ball.zpp_inner.wrap_pos;
				if(_this1 != null && _this1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = _this1.zpp_inner;
				if(_this2._immutable) {
					throw haxe_Exception.thrown("Error: Vec2 is immutable");
				}
				if(_this2._isimmutable != null) {
					_this2._isimmutable();
				}
				if(startX != startX || startY != startY) {
					throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
				}
				var callback;
				if(_this1 != null && _this1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = _this1.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				if(_this1.zpp_inner.x == startX) {
					if(_this1 != null && _this1.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this4 = _this1.zpp_inner;
					if(_this4._validate != null) {
						_this4._validate();
					}
					callback = _this1.zpp_inner.y == startY;
				} else {
					callback = false;
				}
				if(!callback) {
					_this1.zpp_inner.x = startX;
					_this1.zpp_inner.y = startY;
					var _this5 = _this1.zpp_inner;
					if(_this5._invalidate != null) {
						_this5._invalidate(_this5);
					}
				}
				var _this6 = ball.zpp_inner.wrap_shapes;
				var obj = new nape_shape_Circle(radius / 2 | 0);
				if(_this6.zpp_inner.reverse_flag) {
					_this6.push(obj);
				} else {
					_this6.unshift(obj);
				}
				var space = _gthis1.napeSpace;
				if(ball.zpp_inner.compound != null) {
					throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
				}
				ball.zpp_inner.immutable_midstep("Body::space");
				if(ball.zpp_inner.world) {
					throw haxe_Exception.thrown("Error: Space::world is immutable");
				}
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
					if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
						ball.zpp_inner.component.woken = false;
					}
					if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
						(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
					}
					if(space != null) {
						var _this7 = space.zpp_inner.wrap_bodies;
						if(_this7.zpp_inner.reverse_flag) {
							_this7.push(ball);
						} else {
							_this7.unshift(ball);
						}
					}
				}
				var callback1 = ball.zpp_inner.space == null;
				var angularVel = Math.random() * 2 - 1;
				if(ball.zpp_inner.world) {
					throw haxe_Exception.thrown("Error: Space::world is immutable");
				}
				if(ball.zpp_inner.angvel != angularVel) {
					if(angularVel != angularVel) {
						throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
					}
					if(ball.zpp_inner.type == 1) {
						throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
					}
					ball.zpp_inner.angvel = angularVel;
					ball.zpp_inner.wake();
				}
				var ball1 = ball;
				if(ball1.zpp_inner_i.userData == null) {
					ball1.zpp_inner_i.userData = { };
				}
				ball1.zpp_inner_i.userData.sprite = new UserData(circleContainer,topic,null,0,10 + Math.random() * 35);
				if(ball1.zpp_inner_i.wrap_cbTypes == null) {
					ball1.zpp_inner_i.setupcbTypes();
				}
				var _this8 = ball1.zpp_inner_i.wrap_cbTypes;
				var obj1 = _gthis1.topicBallCollisionType;
				if(_this8.zpp_inner.reverse_flag) {
					_this8.push(obj1);
				} else {
					_this8.unshift(obj1);
				}
				var obj2 = ball1;
				if(_this.zpp_inner.reverse_flag) {
					_this.push(obj2);
				} else {
					_this.unshift(obj2);
				}
			}
			_gthis1.wordBalls = new nape_phys_BodyList();
			var startX = screenWidth * 0.5;
			var startY = screenHeight * 0.5;
			var fontSize = null;
			var outer = window.document.createElement("div");
			outer.className = "contentWrapper";
			var inner = window.document.createElement("span");
			inner.className = "innerContent";
			inner.innerHTML = "";
			if(fontSize != null) {
				inner.style.fontSize = Std.string(fontSize) + "px";
			}
			outer.appendChild(inner);
			var content = outer;
			var span = content.childNodes[0];
			span.innerHTML = "<h1>Word Reactor</h1><br/><span style=\"font-size:15px;\"><strong>Instructions:</strong><br/><br/>1. Drag and collide balls.<br/>2. Tap the background.<br/>3. Tap reset ball.<br/>4. Have fun!</span>";
			var topic = _gthis1.currentTopicGroup[0];
			var fillTechnique = null;
			var container = window.document.createElement("div");
			container.className = "ballContainer";
			container.style.width = "300" + "px";
			container.style.height = "300" + "px";
			container.style.left = Std.string(startX) + "px";
			container.style.top = Std.string(startY) + "px";
			var circle = window.document.createElement("canvas");
			circle.width = 300;
			circle.height = 300;
			var ctx = circle.getContext("2d",null);
			if(fillTechnique != null) {
				fillTechnique(ctx,300,300);
			} else {
				ctx.fillStyle = topic.color;
				ctx.beginPath();
				ctx.arc(150.,150.,150.,0,Math.PI * 2);
				ctx.closePath();
				ctx.fill();
			}
			container.appendChild(circle);
			container.appendChild(content);
			var circleContainer = container;
			_gthis1.div.appendChild(circleContainer);
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this = ball.zpp_inner.wrap_pos;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(startX != startX || startY != startY) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var callback;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(_this.zpp_inner.x == startX) {
				if(_this != null && _this.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = _this.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				callback = _this.zpp_inner.y == startY;
			} else {
				callback = false;
			}
			if(!callback) {
				_this.zpp_inner.x = startX;
				_this.zpp_inner.y = startY;
				var _this1 = _this.zpp_inner;
				if(_this1._invalidate != null) {
					_this1._invalidate(_this1);
				}
			}
			var _this = ball.zpp_inner.wrap_shapes;
			var obj = new nape_shape_Circle(150. | 0);
			if(_this.zpp_inner.reverse_flag) {
				_this.push(obj);
			} else {
				_this.unshift(obj);
			}
			var space = _gthis1.napeSpace;
			if(ball.zpp_inner.compound != null) {
				throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
			}
			ball.zpp_inner.immutable_midstep("Body::space");
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					ball.zpp_inner.component.woken = false;
				}
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
				}
				if(space != null) {
					var _this = space.zpp_inner.wrap_bodies;
					if(_this.zpp_inner.reverse_flag) {
						_this.push(ball);
					} else {
						_this.unshift(ball);
					}
				}
			}
			var callback = ball.zpp_inner.space == null;
			var angularVel = Math.random() * 2 - 1;
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if(ball.zpp_inner.angvel != angularVel) {
				if(angularVel != angularVel) {
					throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
				}
				if(ball.zpp_inner.type == 1) {
					throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
				}
				ball.zpp_inner.angvel = angularVel;
				ball.zpp_inner.wake();
			}
			var ball1 = ball;
			if(ball1.zpp_inner_i.userData == null) {
				ball1.zpp_inner_i.userData = { };
			}
			ball1.zpp_inner_i.userData.sprite = circleContainer;
			_gthis1.instructionsBall = ball1;
			var startX = screenWidth * 0.2;
			var startY = screenHeight * 0.1;
			var fontSize = null;
			var outer = window.document.createElement("div");
			outer.className = "contentWrapper";
			var inner = window.document.createElement("span");
			inner.className = "innerContent";
			inner.innerHTML = "";
			if(fontSize != null) {
				inner.style.fontSize = Std.string(fontSize) + "px";
			}
			outer.appendChild(inner);
			var content = outer;
			var topic = Main.topicGroups[0][0];
			var useCanvas = false;
			var fillTechnique = null;
			if(useCanvas == null) {
				useCanvas = true;
			}
			var container = window.document.createElement("div");
			container.className = "ballContainer";
			container.style.width = "96" + "px";
			container.style.height = "96" + "px";
			container.style.left = Std.string(startX) + "px";
			container.style.top = Std.string(startY) + "px";
			if(useCanvas) {
				var circle = window.document.createElement("canvas");
				circle.width = 96;
				circle.height = 96;
				var ctx = circle.getContext("2d",null);
				if(fillTechnique != null) {
					fillTechnique(ctx,96,96);
				} else {
					ctx.fillStyle = topic.color;
					ctx.beginPath();
					ctx.arc(48.,48.,48.,0,Math.PI * 2);
					ctx.closePath();
					ctx.fill();
				}
				container.appendChild(circle);
			}
			container.appendChild(content);
			var circleContainer = container;
			_gthis1.div.appendChild(circleContainer);
			circleContainer.addEventListener("click",function(e) {
				window.open("https://github.com/Tw1ddle/word-reactor");
			},false);
			circleContainer.addEventListener("touchstart",function(e) {
				window.open("https://github.com/Tw1ddle/word-reactor");
			},false);
			circleContainer.innerHTML = "<img src=\"assets/images/githublogo.png\" />";
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this = ball.zpp_inner.wrap_pos;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(startX != startX || startY != startY) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var callback;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(_this.zpp_inner.x == startX) {
				if(_this != null && _this.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = _this.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				callback = _this.zpp_inner.y == startY;
			} else {
				callback = false;
			}
			if(!callback) {
				_this.zpp_inner.x = startX;
				_this.zpp_inner.y = startY;
				var _this1 = _this.zpp_inner;
				if(_this1._invalidate != null) {
					_this1._invalidate(_this1);
				}
			}
			var _this = ball.zpp_inner.wrap_shapes;
			var obj = new nape_shape_Circle(48. | 0);
			if(_this.zpp_inner.reverse_flag) {
				_this.push(obj);
			} else {
				_this.unshift(obj);
			}
			var space = _gthis1.napeSpace;
			if(ball.zpp_inner.compound != null) {
				throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
			}
			ball.zpp_inner.immutable_midstep("Body::space");
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					ball.zpp_inner.component.woken = false;
				}
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
				}
				if(space != null) {
					var _this = space.zpp_inner.wrap_bodies;
					if(_this.zpp_inner.reverse_flag) {
						_this.push(ball);
					} else {
						_this.unshift(ball);
					}
				}
			}
			var callback = ball.zpp_inner.space == null;
			var angularVel = Math.random() * 2 - 1;
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if(ball.zpp_inner.angvel != angularVel) {
				if(angularVel != angularVel) {
					throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
				}
				if(ball.zpp_inner.type == 1) {
					throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
				}
				ball.zpp_inner.angvel = angularVel;
				ball.zpp_inner.wake();
			}
			var ball1 = ball;
			if(ball1.zpp_inner_i.userData == null) {
				ball1.zpp_inner_i.userData = { };
			}
			ball1.zpp_inner_i.userData.sprite = circleContainer;
			_gthis1.githubBall = ball1;
			var startX = screenWidth * 0.5;
			var startY = screenHeight * 0.1;
			var fontSize = null;
			var outer = window.document.createElement("div");
			outer.className = "contentWrapper";
			var inner = window.document.createElement("span");
			inner.className = "innerContent";
			inner.innerHTML = "";
			if(fontSize != null) {
				inner.style.fontSize = Std.string(fontSize) + "px";
			}
			outer.appendChild(inner);
			var content = outer;
			var topic = Main.topicGroups[0][0];
			var useCanvas = false;
			var fillTechnique = null;
			if(useCanvas == null) {
				useCanvas = true;
			}
			var container = window.document.createElement("div");
			container.className = "ballContainer";
			container.style.width = "96" + "px";
			container.style.height = "96" + "px";
			container.style.left = Std.string(startX) + "px";
			container.style.top = Std.string(startY) + "px";
			if(useCanvas) {
				var circle = window.document.createElement("canvas");
				circle.width = 96;
				circle.height = 96;
				var ctx = circle.getContext("2d",null);
				if(fillTechnique != null) {
					fillTechnique(ctx,96,96);
				} else {
					ctx.fillStyle = topic.color;
					ctx.beginPath();
					ctx.arc(48.,48.,48.,0,Math.PI * 2);
					ctx.closePath();
					ctx.fill();
				}
				container.appendChild(circle);
			}
			container.appendChild(content);
			var circleContainer = container;
			_gthis1.div.appendChild(circleContainer);
			circleContainer.addEventListener("click",function(e) {
				window.open("https://twitter.com/Sam_Twidale/status/756230840821092352");
			},false);
			circleContainer.addEventListener("touchstart",function(e) {
				window.open("https://twitter.com/Sam_Twidale/status/756230840821092352");
			},false);
			circleContainer.innerHTML = "<img src=\"assets/images/twitterlogo.png\" />";
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this = ball.zpp_inner.wrap_pos;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(startX != startX || startY != startY) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var callback;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(_this.zpp_inner.x == startX) {
				if(_this != null && _this.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = _this.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				callback = _this.zpp_inner.y == startY;
			} else {
				callback = false;
			}
			if(!callback) {
				_this.zpp_inner.x = startX;
				_this.zpp_inner.y = startY;
				var _this1 = _this.zpp_inner;
				if(_this1._invalidate != null) {
					_this1._invalidate(_this1);
				}
			}
			var _this = ball.zpp_inner.wrap_shapes;
			var obj = new nape_shape_Circle(48. | 0);
			if(_this.zpp_inner.reverse_flag) {
				_this.push(obj);
			} else {
				_this.unshift(obj);
			}
			var space = _gthis1.napeSpace;
			if(ball.zpp_inner.compound != null) {
				throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
			}
			ball.zpp_inner.immutable_midstep("Body::space");
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					ball.zpp_inner.component.woken = false;
				}
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
				}
				if(space != null) {
					var _this = space.zpp_inner.wrap_bodies;
					if(_this.zpp_inner.reverse_flag) {
						_this.push(ball);
					} else {
						_this.unshift(ball);
					}
				}
			}
			var callback = ball.zpp_inner.space == null;
			var angularVel = Math.random() * 2 - 1;
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if(ball.zpp_inner.angvel != angularVel) {
				if(angularVel != angularVel) {
					throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
				}
				if(ball.zpp_inner.type == 1) {
					throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
				}
				ball.zpp_inner.angvel = angularVel;
				ball.zpp_inner.wake();
			}
			var ball1 = ball;
			if(ball1.zpp_inner_i.userData == null) {
				ball1.zpp_inner_i.userData = { };
			}
			ball1.zpp_inner_i.userData.sprite = circleContainer;
			_gthis1.twitterBall = ball1;
			var startX = screenWidth * 0.8;
			var startY = screenHeight * 0.1;
			var callback = function() {
				_gthis.resetSimulation();
			};
			var fontSize = null;
			var outer = window.document.createElement("div");
			outer.className = "contentWrapper";
			var inner = window.document.createElement("span");
			inner.className = "innerContent";
			inner.innerHTML = "";
			if(fontSize != null) {
				inner.style.fontSize = Std.string(fontSize) + "px";
			}
			outer.appendChild(inner);
			var content = outer;
			var topic = Main.topicGroups[0][0];
			var useCanvas = false;
			var fillTechnique = null;
			if(useCanvas == null) {
				useCanvas = true;
			}
			var container = window.document.createElement("div");
			container.className = "ballContainer";
			container.style.width = "96" + "px";
			container.style.height = "96" + "px";
			container.style.left = Std.string(startX) + "px";
			container.style.top = Std.string(startY) + "px";
			if(useCanvas) {
				var circle = window.document.createElement("canvas");
				circle.width = 96;
				circle.height = 96;
				var ctx = circle.getContext("2d",null);
				if(fillTechnique != null) {
					fillTechnique(ctx,96,96);
				} else {
					ctx.fillStyle = topic.color;
					ctx.beginPath();
					ctx.arc(48.,48.,48.,0,Math.PI * 2);
					ctx.closePath();
					ctx.fill();
				}
				container.appendChild(circle);
			}
			container.appendChild(content);
			var circleContainer = container;
			_gthis1.div.appendChild(circleContainer);
			circleContainer.addEventListener("click",function(e) {
				callback();
			},false);
			circleContainer.addEventListener("touchstart",function(e) {
				callback();
			},false);
			circleContainer.innerHTML = "<img src=\"assets/images/reseticon.png\" />";
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this = ball.zpp_inner.wrap_pos;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(startX != startX || startY != startY) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var callback1;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(_this.zpp_inner.x == startX) {
				if(_this != null && _this.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = _this.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				callback1 = _this.zpp_inner.y == startY;
			} else {
				callback1 = false;
			}
			if(!callback1) {
				_this.zpp_inner.x = startX;
				_this.zpp_inner.y = startY;
				var _this1 = _this.zpp_inner;
				if(_this1._invalidate != null) {
					_this1._invalidate(_this1);
				}
			}
			var _this = ball.zpp_inner.wrap_shapes;
			var obj = new nape_shape_Circle(48. | 0);
			if(_this.zpp_inner.reverse_flag) {
				_this.push(obj);
			} else {
				_this.unshift(obj);
			}
			var space = _gthis1.napeSpace;
			if(ball.zpp_inner.compound != null) {
				throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
			}
			ball.zpp_inner.immutable_midstep("Body::space");
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					ball.zpp_inner.component.woken = false;
				}
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
				}
				if(space != null) {
					var _this = space.zpp_inner.wrap_bodies;
					if(_this.zpp_inner.reverse_flag) {
						_this.push(ball);
					} else {
						_this.unshift(ball);
					}
				}
			}
			var callback1 = ball.zpp_inner.space == null;
			var angularVel = Math.random() * 2 - 1;
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if(ball.zpp_inner.angvel != angularVel) {
				if(angularVel != angularVel) {
					throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
				}
				if(ball.zpp_inner.type == 1) {
					throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
				}
				ball.zpp_inner.angvel = angularVel;
				ball.zpp_inner.wake();
			}
			var ball1 = ball;
			if(ball1.zpp_inner_i.userData == null) {
				ball1.zpp_inner_i.userData = { };
			}
			ball1.zpp_inner_i.userData.sprite = circleContainer;
			_gthis1.resetBall = ball1;
			_gthis1.isPointerDown = false;
			_gthis1.pointerPosition = new nape_geom_Vec2(0,0);
		};
		var fontSize = null;
		var outer = window.document.createElement("div");
		outer.className = "contentWrapper";
		var inner = window.document.createElement("span");
		inner.className = "innerContent";
		inner.innerHTML = "";
		if(fontSize != null) {
			inner.style.fontSize = Std.string(fontSize) + "px";
		}
		outer.appendChild(inner);
		var content = outer;
		var topic = Main.topicGroups[0][0];
		var useCanvas = false;
		var fillTechnique = null;
		if(useCanvas == null) {
			useCanvas = true;
		}
		var container = window.document.createElement("div");
		container.className = "ballContainer";
		container.style.width = "96" + "px";
		container.style.height = "96" + "px";
		container.style.left = Std.string(startX) + "px";
		container.style.top = Std.string(startY) + "px";
		if(useCanvas) {
			var circle = window.document.createElement("canvas");
			circle.width = 96;
			circle.height = 96;
			var ctx = circle.getContext("2d",null);
			if(fillTechnique != null) {
				fillTechnique(ctx,96,96);
			} else {
				ctx.fillStyle = topic.color;
				ctx.beginPath();
				ctx.arc(48.,48.,48.,0,Math.PI * 2);
				ctx.closePath();
				ctx.fill();
			}
			container.appendChild(circle);
		}
		container.appendChild(content);
		var circleContainer = container;
		this.div.appendChild(circleContainer);
		circleContainer.addEventListener("click",function(e) {
			callback();
		},false);
		circleContainer.addEventListener("touchstart",function(e) {
			callback();
		},false);
		circleContainer.innerHTML = "<img src=\"assets/images/reseticon.png\" />";
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
		if(ball.zpp_inner.wrap_pos == null) {
			ball.zpp_inner.setupPosition();
		}
		var _this = ball.zpp_inner.wrap_pos;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(startX != startX || startY != startY) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(_this.zpp_inner.x == startX) {
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			tmp = _this.zpp_inner.y == startY;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_this.zpp_inner.x = startX;
			_this.zpp_inner.y = startY;
			var _this1 = _this.zpp_inner;
			if(_this1._invalidate != null) {
				_this1._invalidate(_this1);
			}
		}
		var _this = ball.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Circle(48. | 0);
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var space = this.napeSpace;
		if(ball.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		ball.zpp_inner.immutable_midstep("Body::space");
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				ball.zpp_inner.component.woken = false;
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
			}
			if(space != null) {
				var _this = space.zpp_inner.wrap_bodies;
				if(_this.zpp_inner.reverse_flag) {
					_this.push(ball);
				} else {
					_this.unshift(ball);
				}
			}
		}
		var tmp = ball.zpp_inner.space == null;
		var angularVel = Math.random() * 2 - 1;
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if(ball.zpp_inner.angvel != angularVel) {
			if(angularVel != angularVel) {
				throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
			}
			if(ball.zpp_inner.type == 1) {
				throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
			}
			ball.zpp_inner.angvel = angularVel;
			ball.zpp_inner.wake();
		}
		var ball1 = ball;
		if(ball1.zpp_inner_i.userData == null) {
			ball1.zpp_inner_i.userData = { };
		}
		ball1.zpp_inner_i.userData.sprite = circleContainer;
		this.resetBall = ball1;
		this.isPointerDown = false;
		this.pointerPosition = new nape_geom_Vec2(0,0);
		var onPointerDown = function(x,y) {
			_gthis.isPointerDown = true;
			var _this = _gthis.napeHand;
			if(_this.zpp_inner_zn.wrap_a1 == null) {
				_this.zpp_inner_zn.setup_a1();
			}
			var _this1 = _this.zpp_inner_zn.wrap_a1;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = _this1.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var onPointerDown;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = _this1.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(_this1.zpp_inner.x == x) {
				if(_this1 != null && _this1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = _this1.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				onPointerDown = _this1.zpp_inner.y == y;
			} else {
				onPointerDown = false;
			}
			if(!onPointerDown) {
				_this1.zpp_inner.x = x;
				_this1.zpp_inner.y = y;
				var _this = _this1.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
			var _this = _gthis.pointerPosition;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var onPointerDown;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(_this.zpp_inner.x == x) {
				if(_this != null && _this.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = _this.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				onPointerDown = _this.zpp_inner.y == y;
			} else {
				onPointerDown = false;
			}
			if(!onPointerDown) {
				_this.zpp_inner.x = x;
				_this.zpp_inner.y = y;
				var _this1 = _this.zpp_inner;
				if(_this1._invalidate != null) {
					_this1._invalidate(_this1);
				}
			}
			var bodies = new nape_phys_BodyList();
			bodies = _gthis.napeSpace.bodiesUnderPoint(_gthis.pointerPosition,null,bodies);
			var onPointerDown;
			if(bodies != null) {
				bodies.zpp_inner.valmod();
				if(bodies.zpp_inner.zip_length) {
					bodies.zpp_inner.zip_length = false;
					bodies.zpp_inner.user_length = bodies.zpp_inner.inner.length;
				}
				onPointerDown = bodies.zpp_inner.user_length == 0;
			} else {
				onPointerDown = true;
			}
			if(onPointerDown) {
				_gthis.currentTopicCounter++;
				var topic = _gthis.currentTopicGroup[_gthis.currentTopicCounter % _gthis.currentTopicGroup.length];
				Main.backgroundTappingTopic = topic;
			}
			bodies.zpp_inner.valmod();
			var _g = nape_phys_BodyIterator.get(bodies);
			while(true) {
				_g.zpp_inner.zpp_inner.valmod();
				var _this = _g.zpp_inner;
				_this.zpp_inner.valmod();
				if(_this.zpp_inner.zip_length) {
					_this.zpp_inner.zip_length = false;
					_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
				}
				var length = _this.zpp_inner.user_length;
				_g.zpp_critical = true;
				var onPointerDown;
				if(_g.zpp_i < length) {
					onPointerDown = true;
				} else {
					_g.zpp_next = nape_phys_BodyIterator.zpp_pool;
					nape_phys_BodyIterator.zpp_pool = _g;
					_g.zpp_inner = null;
					onPointerDown = false;
				}
				if(!onPointerDown) {
					break;
				}
				_g.zpp_critical = false;
				var body = _g.zpp_inner.at(_g.zpp_i++);
				if(body.zpp_inner.type == 2) {
					var _this1 = _gthis.napeHand;
					_this1.zpp_inner.immutable_midstep("Constraint::" + "body2");
					var inbody2 = body == null ? null : body.zpp_inner;
					if(inbody2 != _this1.zpp_inner_zn.b2) {
						if(_this1.zpp_inner_zn.b2 != null) {
							if((_this1.zpp_inner.space == null ? null : _this1.zpp_inner.space.outer) != null && _this1.zpp_inner_zn.b1 != _this1.zpp_inner_zn.b2) {
								if(_this1.zpp_inner_zn.b2 != null) {
									_this1.zpp_inner_zn.b2.constraints.remove(_this1.zpp_inner);
								}
							}
							if(_this1.zpp_inner.active && (_this1.zpp_inner.space == null ? null : _this1.zpp_inner.space.outer) != null) {
								_this1.zpp_inner_zn.b2.wake();
							}
						}
						_this1.zpp_inner_zn.b2 = inbody2;
						if((_this1.zpp_inner.space == null ? null : _this1.zpp_inner.space.outer) != null && inbody2 != null && _this1.zpp_inner_zn.b1 != inbody2) {
							if(inbody2 != null) {
								inbody2.constraints.add(_this1.zpp_inner);
							}
						}
						if(_this1.zpp_inner.active && (_this1.zpp_inner.space == null ? null : _this1.zpp_inner.space.outer) != null) {
							_this1.zpp_inner.wake();
							if(inbody2 != null) {
								inbody2.wake();
							}
						}
					}
					var onPointerDown1 = _this1.zpp_inner_zn.b2 == null;
					var _this2 = _gthis.napeHand;
					var anchor2 = body.worldPointToLocal(_gthis.pointerPosition,true);
					if(anchor2 != null && anchor2.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					if(anchor2 == null) {
						throw haxe_Exception.thrown("Error: Constraint::" + "anchor2" + " cannot be null");
					}
					if(_this2.zpp_inner_zn.wrap_a2 == null) {
						_this2.zpp_inner_zn.setup_a2();
					}
					var _this3 = _this2.zpp_inner_zn.wrap_a2;
					if(_this3 != null && _this3.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					if(anchor2 != null && anchor2.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this4 = _this3.zpp_inner;
					if(_this4._immutable) {
						throw haxe_Exception.thrown("Error: Vec2 is immutable");
					}
					if(_this4._isimmutable != null) {
						_this4._isimmutable();
					}
					if(anchor2 == null) {
						throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
					}
					if(anchor2 != null && anchor2.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this5 = anchor2.zpp_inner;
					if(_this5._validate != null) {
						_this5._validate();
					}
					var x = anchor2.zpp_inner.x;
					if(anchor2 != null && anchor2.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this6 = anchor2.zpp_inner;
					if(_this6._validate != null) {
						_this6._validate();
					}
					var y = anchor2.zpp_inner.y;
					if(_this3 != null && _this3.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this7 = _this3.zpp_inner;
					if(_this7._immutable) {
						throw haxe_Exception.thrown("Error: Vec2 is immutable");
					}
					if(_this7._isimmutable != null) {
						_this7._isimmutable();
					}
					if(x != x || y != y) {
						throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
					}
					var onPointerDown2;
					if(_this3 != null && _this3.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this8 = _this3.zpp_inner;
					if(_this8._validate != null) {
						_this8._validate();
					}
					if(_this3.zpp_inner.x == x) {
						if(_this3 != null && _this3.zpp_disp) {
							throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this9 = _this3.zpp_inner;
						if(_this9._validate != null) {
							_this9._validate();
						}
						onPointerDown2 = _this3.zpp_inner.y == y;
					} else {
						onPointerDown2 = false;
					}
					if(!onPointerDown2) {
						_this3.zpp_inner.x = x;
						_this3.zpp_inner.y = y;
						var _this10 = _this3.zpp_inner;
						if(_this10._invalidate != null) {
							_this10._invalidate(_this10);
						}
					}
					var ret = _this3;
					if(anchor2.zpp_inner.weak) {
						if(anchor2 != null && anchor2.zpp_disp) {
							throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this11 = anchor2.zpp_inner;
						if(_this11._immutable) {
							throw haxe_Exception.thrown("Error: Vec2 is immutable");
						}
						if(_this11._isimmutable != null) {
							_this11._isimmutable();
						}
						if(anchor2.zpp_inner._inuse) {
							throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
						}
						var inner = anchor2.zpp_inner;
						anchor2.zpp_inner.outer = null;
						anchor2.zpp_inner = null;
						var o = anchor2;
						o.zpp_pool = null;
						if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
							zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
						} else {
							zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
						}
						zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
						o.zpp_disp = true;
						var o1 = inner;
						if(o1.outer != null) {
							o1.outer.zpp_inner = null;
							o1.outer = null;
						}
						o1._isimmutable = null;
						o1._validate = null;
						o1._invalidate = null;
						o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
					}
					if(_this2.zpp_inner_zn.wrap_a2 == null) {
						_this2.zpp_inner_zn.setup_a2();
					}
					var _this12 = _gthis.napeHand;
					if(_this12.zpp_inner.active != true) {
						if(_this12.zpp_inner.component != null) {
							_this12.zpp_inner.component.woken = false;
						}
						_this12.zpp_inner.clearcache();
						_this12.zpp_inner.active = true;
						_this12.zpp_inner.activate();
						if(_this12.zpp_inner.space != null) {
							if(_this12.zpp_inner.component != null) {
								_this12.zpp_inner.component.sleeping = true;
							}
							_this12.zpp_inner.space.wake_constraint(_this12.zpp_inner,true);
						}
					}
					break;
				}
			}
		};
		var onPointerMove = function(x,y) {
			var _this = _gthis.napeHand;
			if(_this.zpp_inner_zn.wrap_a1 == null) {
				_this.zpp_inner_zn.setup_a1();
			}
			var _this1 = _this.zpp_inner_zn.wrap_a1;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = _this1.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var onPointerMove;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = _this1.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(_this1.zpp_inner.x == x) {
				if(_this1 != null && _this1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = _this1.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				onPointerMove = _this1.zpp_inner.y == y;
			} else {
				onPointerMove = false;
			}
			if(!onPointerMove) {
				_this1.zpp_inner.x = x;
				_this1.zpp_inner.y = y;
				var _this = _this1.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
			var _this = _gthis.pointerPosition;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var onPointerMove;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(_this.zpp_inner.x == x) {
				if(_this != null && _this.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = _this.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				onPointerMove = _this.zpp_inner.y == y;
			} else {
				onPointerMove = false;
			}
			if(!onPointerMove) {
				_this.zpp_inner.x = x;
				_this.zpp_inner.y = y;
				var _this1 = _this.zpp_inner;
				if(_this1._invalidate != null) {
					_this1._invalidate(_this1);
				}
			}
		};
		var onPointerUp = function() {
			_gthis.isPointerDown = false;
			var _this = _gthis.napeHand;
			if(_this.zpp_inner.active != false) {
				if(_this.zpp_inner.component != null) {
					_this.zpp_inner.component.woken = false;
				}
				_this.zpp_inner.clearcache();
				if(_this.zpp_inner.space != null) {
					_this.zpp_inner.wake();
					_this.zpp_inner.space.live_constraints.remove(_this.zpp_inner);
				}
				_this.zpp_inner.active = false;
				_this.zpp_inner.deactivate();
			}
		};
		window.document.addEventListener("mousedown",function(e) {
			onPointerDown(e.clientX,e.clientY);
			e.preventDefault();
		},true);
		window.document.addEventListener("mousemove",function(e) {
			onPointerMove(e.clientX,e.clientY);
			e.preventDefault();
		},true);
		window.document.addEventListener("mouseup",function(e) {
			onPointerUp();
			e.preventDefault();
		},true);
		window.document.addEventListener("touchstart",function(e) {
			onPointerDown(e.touches[0].clientX,e.touches[0].clientY);
			e.preventDefault();
		},true);
		window.document.addEventListener("touchmove",function(e) {
			onPointerMove(e.touches[0].clientX,e.touches[0].clientY);
			e.preventDefault();
		},true);
		window.document.addEventListener("touchend",function(e) {
			onPointerUp();
			e.preventDefault();
		},true);
		window.document.addEventListener("touchcancel",function(e) {
			onPointerUp();
			e.preventDefault();
		},true);
		window.addEventListener("resize",function() {
		},true);
		window.addEventListener("orientationchange",function() {
			switch(window.orientation) {
			case -90:case 90:
				var x = 600;
				var y = 0;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var x1 = x;
				var y1 = y;
				var weak = true;
				if(weak == null) {
					weak = false;
				}
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				if(x1 != x1 || y1 != y1) {
					throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
				}
				var ret;
				if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
					ret = new nape_geom_Vec2();
				} else {
					ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
					ret.zpp_pool = null;
					ret.zpp_disp = false;
					if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
					}
				}
				if(ret.zpp_inner == null) {
					var ret1;
					if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
						ret1 = new zpp_$nape_geom_ZPP_$Vec2();
					} else {
						ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
						ret1.next = null;
					}
					ret1.weak = false;
					ret1._immutable = false;
					ret1.x = x1;
					ret1.y = y1;
					ret.zpp_inner = ret1;
					ret.zpp_inner.outer = ret;
				} else {
					if(ret != null && ret.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this = ret.zpp_inner;
					if(_this._immutable) {
						throw haxe_Exception.thrown("Error: Vec2 is immutable");
					}
					if(_this._isimmutable != null) {
						_this._isimmutable();
					}
					if(x1 != x1 || y1 != y1) {
						throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
					}
					var tmp;
					if(ret != null && ret.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this = ret.zpp_inner;
					if(_this._validate != null) {
						_this._validate();
					}
					if(ret.zpp_inner.x == x1) {
						if(ret != null && ret.zpp_disp) {
							throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this = ret.zpp_inner;
						if(_this._validate != null) {
							_this._validate();
						}
						tmp = ret.zpp_inner.y == y1;
					} else {
						tmp = false;
					}
					if(!tmp) {
						ret.zpp_inner.x = x1;
						ret.zpp_inner.y = y1;
						var _this = ret.zpp_inner;
						if(_this._invalidate != null) {
							_this._invalidate(_this);
						}
					}
				}
				ret.zpp_inner.weak = weak;
				_gthis.napeGravity = ret;
				break;
			default:
				var x = 0;
				var y = 600;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var x1 = x;
				var y1 = y;
				var weak = true;
				if(weak == null) {
					weak = false;
				}
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				if(x1 != x1 || y1 != y1) {
					throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
				}
				var ret;
				if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
					ret = new nape_geom_Vec2();
				} else {
					ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
					ret.zpp_pool = null;
					ret.zpp_disp = false;
					if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
					}
				}
				if(ret.zpp_inner == null) {
					var ret1;
					if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
						ret1 = new zpp_$nape_geom_ZPP_$Vec2();
					} else {
						ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
						ret1.next = null;
					}
					ret1.weak = false;
					ret1._immutable = false;
					ret1.x = x1;
					ret1.y = y1;
					ret.zpp_inner = ret1;
					ret.zpp_inner.outer = ret;
				} else {
					if(ret != null && ret.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this = ret.zpp_inner;
					if(_this._immutable) {
						throw haxe_Exception.thrown("Error: Vec2 is immutable");
					}
					if(_this._isimmutable != null) {
						_this._isimmutable();
					}
					if(x1 != x1 || y1 != y1) {
						throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
					}
					var tmp;
					if(ret != null && ret.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this = ret.zpp_inner;
					if(_this._validate != null) {
						_this._validate();
					}
					if(ret.zpp_inner.x == x1) {
						if(ret != null && ret.zpp_disp) {
							throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this = ret.zpp_inner;
						if(_this._validate != null) {
							_this._validate();
						}
						tmp = ret.zpp_inner.y == y1;
					} else {
						tmp = false;
					}
					if(!tmp) {
						ret.zpp_inner.x = x1;
						ret.zpp_inner.y = y1;
						var _this = ret.zpp_inner;
						if(_this._invalidate != null) {
							_this._invalidate(_this);
						}
					}
				}
				ret.zpp_inner.weak = weak;
				_gthis.napeGravity = ret;
			}
		});
		window.requestAnimationFrame($bind(this,this.animate));
	}
	,animate: function(time) {
		var dt = (time - this.lastAnimationTime) * 0.001;
		this.lastAnimationTime = time;
		if(dt > 3) {
			window.requestAnimationFrame($bind(this,this.animate));
			return;
		}
		this.napeSpace.step(dt,10,10);
		if(this.napeHand.zpp_inner.active) {
			var _this = this.napeHand;
			var fh = _this.zpp_inner_zn.b2 == null ? null : _this.zpp_inner_zn.b2.outer;
			var angularVel = fh.zpp_inner.angvel * 0.95;
			if(fh.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if(fh.zpp_inner.angvel != angularVel) {
				if(angularVel != angularVel) {
					throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
				}
				if(fh.zpp_inner.type == 1) {
					throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
				}
				fh.zpp_inner.angvel = angularVel;
				fh.zpp_inner.wake();
			}
		} else if(this.isPointerDown) {
			var _this = this.wordBalls;
			var _this1 = this.pointerPosition;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = _this1.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			var startX = _this1.zpp_inner.x;
			var _this1 = this.pointerPosition;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = _this1.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			var startY = _this1.zpp_inner.y;
			var topic = Main.backgroundTappingTopic;
			var fontSize = this.wordFontSizePixels;
			var outer = window.document.createElement("div");
			outer.className = "contentWrapper";
			var inner = window.document.createElement("span");
			inner.className = "innerContent";
			inner.innerHTML = "";
			if(fontSize != null) {
				inner.style.fontSize = Std.string(fontSize) + "px";
			}
			outer.appendChild(inner);
			var content = outer;
			var words = Reflect.field(TrainingDatas,topic.name);
			if(words == null) {
				throw haxe_Exception.thrown("FAIL: words != null");
			}
			var topic1 = topic.name;
			var pair = this.generatorMap.h[topic1];
			if(pair == null) {
				var data = Reflect.field(TrainingDatas,topic1);
				if(data == null) {
					throw haxe_Exception.thrown("FAIL: data != null");
				}
				var generator = new markov_namegen_Generator(data,3,0,false);
				var trie = new markov_util_PrefixTrie();
				var _g = 0;
				while(_g < data.length) {
					var word = data[_g];
					++_g;
					trie.insert(word);
				}
				pair = new GeneratorTriePair(generator,trie);
				this.generatorMap.h[topic1] = pair;
			}
			var pair1 = pair;
			var makeWord = function() {
				var word = "";
				while(word == null || word.length == 0) word = pair1.generator.generate();
				return StringTools.replace(word,"#","");
			};
			var word = makeWord();
			while(pair1.trie.find(word) || (word.length < 5 || word.length > 13)) word = makeWord();
			var firstLetter = word.charAt(0).toUpperCase();
			var word1 = firstLetter + word.substring(1,word.length);
			var radius = word1.length * this.wordFontSizePixels * 0.5 + this.wordBallPixelPadding;
			var fillTechnique = null;
			var container = window.document.createElement("div");
			container.className = "ballContainer";
			container.style.width = Std.string(radius) + "px";
			container.style.height = Std.string(radius) + "px";
			container.style.left = Std.string(startX) + "px";
			container.style.top = Std.string(startY) + "px";
			var circle = window.document.createElement("canvas");
			circle.width = radius | 0;
			circle.height = radius | 0;
			var ctx = circle.getContext("2d",null);
			if(fillTechnique != null) {
				fillTechnique(ctx,radius | 0,radius | 0);
			} else {
				ctx.fillStyle = topic.color;
				ctx.beginPath();
				ctx.arc(radius / 2,radius / 2,radius / 2,0,Math.PI * 2);
				ctx.closePath();
				ctx.fill();
			}
			container.appendChild(circle);
			container.appendChild(content);
			var circleContainer = container;
			this.div.appendChild(circleContainer);
			var userData = new UserData(circleContainer,topic,word1,1,20 + Math.random() * 35);
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this1 = ball.zpp_inner.wrap_pos;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = _this1.zpp_inner;
			if(_this2._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this2._isimmutable != null) {
				_this2._isimmutable();
			}
			if(startX != startX || startY != startY) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = _this1.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			if(_this1.zpp_inner.x == startX) {
				if(_this1 != null && _this1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = _this1.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = _this1.zpp_inner.y == startY;
			} else {
				tmp = false;
			}
			if(!tmp) {
				_this1.zpp_inner.x = startX;
				_this1.zpp_inner.y = startY;
				var _this2 = _this1.zpp_inner;
				if(_this2._invalidate != null) {
					_this2._invalidate(_this2);
				}
			}
			var _this1 = ball.zpp_inner.wrap_shapes;
			var obj = new nape_shape_Circle(radius / 2 | 0);
			if(_this1.zpp_inner.reverse_flag) {
				_this1.push(obj);
			} else {
				_this1.unshift(obj);
			}
			var space = this.napeSpace;
			if(ball.zpp_inner.compound != null) {
				throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
			}
			ball.zpp_inner.immutable_midstep("Body::space");
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					ball.zpp_inner.component.woken = false;
				}
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
				}
				if(space != null) {
					var _this1 = space.zpp_inner.wrap_bodies;
					if(_this1.zpp_inner.reverse_flag) {
						_this1.push(ball);
					} else {
						_this1.unshift(ball);
					}
				}
			}
			var tmp = ball.zpp_inner.space == null;
			var angularVel = Math.random() * 2 - 1;
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if(ball.zpp_inner.angvel != angularVel) {
				if(angularVel != angularVel) {
					throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
				}
				if(ball.zpp_inner.type == 1) {
					throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
				}
				ball.zpp_inner.angvel = angularVel;
				ball.zpp_inner.wake();
			}
			var ball1 = ball;
			if(ball1.zpp_inner_i.userData == null) {
				ball1.zpp_inner_i.userData = { };
			}
			ball1.zpp_inner_i.userData.sprite = userData;
			if(ball1.zpp_inner_i.wrap_cbTypes == null) {
				ball1.zpp_inner_i.setupcbTypes();
			}
			var _this1 = ball1.zpp_inner_i.wrap_cbTypes;
			var obj = this.wordBallCollisionType;
			if(_this1.zpp_inner.reverse_flag) {
				_this1.push(obj);
			} else {
				_this1.unshift(obj);
			}
			var obj = ball1;
			if(_this.zpp_inner.reverse_flag) {
				_this.push(obj);
			} else {
				_this.unshift(obj);
			}
		}
		var _this = this.wordBalls;
		_this.zpp_inner.valmod();
		var _g = nape_phys_BodyIterator.get(_this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_BodyIterator.zpp_pool;
				nape_phys_BodyIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var ball = _g.zpp_inner.at(_g.zpp_i++);
			if(ball.zpp_inner_i.userData == null) {
				ball.zpp_inner_i.userData = { };
			}
			var style = ball.zpp_inner_i.userData.sprite.container.style;
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this1 = ball.zpp_inner.wrap_pos;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = _this1.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			var x = _this1.zpp_inner.x;
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this3 = ball.zpp_inner.wrap_pos;
			if(_this3 != null && _this3.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this4 = _this3.zpp_inner;
			if(_this4._validate != null) {
				_this4._validate();
			}
			var y = _this3.zpp_inner.y;
			var rotation = ball.zpp_inner.rot;
			if(ball.zpp_inner_i.userData == null) {
				ball.zpp_inner_i.userData = { };
			}
			var rotationLimit = ball.zpp_inner_i.userData.sprite.rotationLimitDegrees;
			style.left = Std.string(x - (parseFloat(StringTools.replace(style.width,"px","")) / 2 | 0)) + "px";
			style.top = Std.string(y - (parseFloat(StringTools.replace(style.height,"px","")) / 2 | 0)) + "px";
			var degrees = rotation * 57.2957795;
			degrees = degrees < 0 ? Math.max(-rotationLimit,degrees) : Math.min(rotationLimit,degrees);
			var transform = "rotate(" + degrees + "deg) translateZ(0)";
			style.WebkitTransform = transform;
			style.MozTransform = transform;
			style.OTransform = transform;
			style.msTransform = transform;
			style.transform = transform;
		}
		var _this = this.topicBalls;
		_this.zpp_inner.valmod();
		var _g = nape_phys_BodyIterator.get(_this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_BodyIterator.zpp_pool;
				nape_phys_BodyIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var ball = _g.zpp_inner.at(_g.zpp_i++);
			if(ball.zpp_inner_i.userData == null) {
				ball.zpp_inner_i.userData = { };
			}
			var style = ball.zpp_inner_i.userData.sprite.container.style;
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this1 = ball.zpp_inner.wrap_pos;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = _this1.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			var x = _this1.zpp_inner.x;
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this3 = ball.zpp_inner.wrap_pos;
			if(_this3 != null && _this3.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this4 = _this3.zpp_inner;
			if(_this4._validate != null) {
				_this4._validate();
			}
			var y = _this3.zpp_inner.y;
			var rotation = ball.zpp_inner.rot;
			if(ball.zpp_inner_i.userData == null) {
				ball.zpp_inner_i.userData = { };
			}
			var rotationLimit = ball.zpp_inner_i.userData.sprite.rotationLimitDegrees;
			style.left = Std.string(x - (parseFloat(StringTools.replace(style.width,"px","")) / 2 | 0)) + "px";
			style.top = Std.string(y - (parseFloat(StringTools.replace(style.height,"px","")) / 2 | 0)) + "px";
			var degrees = rotation * 57.2957795;
			degrees = degrees < 0 ? Math.max(-rotationLimit,degrees) : Math.min(rotationLimit,degrees);
			var transform = "rotate(" + degrees + "deg) translateZ(0)";
			style.WebkitTransform = transform;
			style.MozTransform = transform;
			style.OTransform = transform;
			style.msTransform = transform;
			style.transform = transform;
		}
		var ball = this.instructionsBall;
		if(ball != null) {
			if(ball.zpp_inner_i.userData == null) {
				ball.zpp_inner_i.userData = { };
			}
			var style = ball.zpp_inner_i.userData.sprite.style;
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this = ball.zpp_inner.wrap_pos;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			var x = _this.zpp_inner.x;
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this = ball.zpp_inner.wrap_pos;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			var y = _this.zpp_inner.y;
			var rotation = ball.zpp_inner.rot;
			if(ball.zpp_inner_i.userData == null) {
				ball.zpp_inner_i.userData = { };
			}
			var rotationLimit = ball.zpp_inner_i.userData.sprite.rotationLimitDegrees;
			style.left = Std.string(x - (parseFloat(StringTools.replace(style.width,"px","")) / 2 | 0)) + "px";
			style.top = Std.string(y - (parseFloat(StringTools.replace(style.height,"px","")) / 2 | 0)) + "px";
			var degrees = rotation * 57.2957795;
			degrees = degrees < 0 ? Math.max(-rotationLimit,degrees) : Math.min(rotationLimit,degrees);
			var transform = "rotate(" + degrees + "deg) translateZ(0)";
			style.WebkitTransform = transform;
			style.MozTransform = transform;
			style.OTransform = transform;
			style.msTransform = transform;
			style.transform = transform;
		}
		var ball = this.githubBall;
		if(ball != null) {
			if(ball.zpp_inner_i.userData == null) {
				ball.zpp_inner_i.userData = { };
			}
			var style = ball.zpp_inner_i.userData.sprite.style;
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this = ball.zpp_inner.wrap_pos;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			var x = _this.zpp_inner.x;
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this = ball.zpp_inner.wrap_pos;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			var y = _this.zpp_inner.y;
			var rotation = ball.zpp_inner.rot;
			if(ball.zpp_inner_i.userData == null) {
				ball.zpp_inner_i.userData = { };
			}
			var rotationLimit = ball.zpp_inner_i.userData.sprite.rotationLimitDegrees;
			style.left = Std.string(x - (parseFloat(StringTools.replace(style.width,"px","")) / 2 | 0)) + "px";
			style.top = Std.string(y - (parseFloat(StringTools.replace(style.height,"px","")) / 2 | 0)) + "px";
			var degrees = rotation * 57.2957795;
			degrees = degrees < 0 ? Math.max(-rotationLimit,degrees) : Math.min(rotationLimit,degrees);
			var transform = "rotate(" + degrees + "deg) translateZ(0)";
			style.WebkitTransform = transform;
			style.MozTransform = transform;
			style.OTransform = transform;
			style.msTransform = transform;
			style.transform = transform;
		}
		var ball = this.twitterBall;
		if(ball != null) {
			if(ball.zpp_inner_i.userData == null) {
				ball.zpp_inner_i.userData = { };
			}
			var style = ball.zpp_inner_i.userData.sprite.style;
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this = ball.zpp_inner.wrap_pos;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			var x = _this.zpp_inner.x;
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this = ball.zpp_inner.wrap_pos;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			var y = _this.zpp_inner.y;
			var rotation = ball.zpp_inner.rot;
			if(ball.zpp_inner_i.userData == null) {
				ball.zpp_inner_i.userData = { };
			}
			var rotationLimit = ball.zpp_inner_i.userData.sprite.rotationLimitDegrees;
			style.left = Std.string(x - (parseFloat(StringTools.replace(style.width,"px","")) / 2 | 0)) + "px";
			style.top = Std.string(y - (parseFloat(StringTools.replace(style.height,"px","")) / 2 | 0)) + "px";
			var degrees = rotation * 57.2957795;
			degrees = degrees < 0 ? Math.max(-rotationLimit,degrees) : Math.min(rotationLimit,degrees);
			var transform = "rotate(" + degrees + "deg) translateZ(0)";
			style.WebkitTransform = transform;
			style.MozTransform = transform;
			style.OTransform = transform;
			style.msTransform = transform;
			style.transform = transform;
		}
		var ball = this.resetBall;
		if(ball != null) {
			if(ball.zpp_inner_i.userData == null) {
				ball.zpp_inner_i.userData = { };
			}
			var style = ball.zpp_inner_i.userData.sprite.style;
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this = ball.zpp_inner.wrap_pos;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			var x = _this.zpp_inner.x;
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this = ball.zpp_inner.wrap_pos;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			var y = _this.zpp_inner.y;
			var rotation = ball.zpp_inner.rot;
			if(ball.zpp_inner_i.userData == null) {
				ball.zpp_inner_i.userData = { };
			}
			var rotationLimit = ball.zpp_inner_i.userData.sprite.rotationLimitDegrees;
			style.left = Std.string(x - (parseFloat(StringTools.replace(style.width,"px","")) / 2 | 0)) + "px";
			style.top = Std.string(y - (parseFloat(StringTools.replace(style.height,"px","")) / 2 | 0)) + "px";
			var degrees = rotation * 57.2957795;
			degrees = degrees < 0 ? Math.max(-rotationLimit,degrees) : Math.min(rotationLimit,degrees);
			var transform = "rotate(" + degrees + "deg) translateZ(0)";
			style.WebkitTransform = transform;
			style.MozTransform = transform;
			style.OTransform = transform;
			style.msTransform = transform;
			style.transform = transform;
		}
		window.requestAnimationFrame($bind(this,this.animate));
	}
	,resetSimulation: function() {
		var _gthis = this;
		while(this.div.firstChild != null) this.div.removeChild(this.div.firstChild);
		this.lastAnimationTime = 0.0;
		var screenWidth = window.innerWidth;
		var screenHeight = window.innerHeight;
		this.wordFontSizePixels = Math.max(Math.min(screenWidth,screenHeight) * 0.015,12) | 0;
		this.wordBallPixelPadding = this.wordFontSizePixels * 2;
		this.topicFontSizePixels = Math.max(Math.min(screenWidth,screenHeight) * 0.02,18) | 0;
		this.topicBallPixelPadding = this.topicFontSizePixels * 2;
		this.napeSpace = new nape_space_Space(this.napeGravity);
		var tmp = this.napeSpace.zpp_inner.__static;
		var x = 0;
		var y = 0;
		var weak = true;
		if(weak == null) {
			weak = false;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp1;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp1 = ret.zpp_inner.y == y;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = weak;
		var x = 0;
		var y = 0;
		var weak = true;
		if(weak == null) {
			weak = false;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret1;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret1 = new nape_geom_Vec2();
		} else {
			ret1 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret1.zpp_pool;
			ret1.zpp_pool = null;
			ret1.zpp_disp = false;
			if(ret1 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret1.zpp_inner == null) {
			var ret2;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret2 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret2 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret2.next;
				ret2.next = null;
			}
			ret2.weak = false;
			ret2._immutable = false;
			ret2.x = x;
			ret2.y = y;
			ret1.zpp_inner = ret2;
			ret1.zpp_inner.outer = ret1;
		} else {
			if(ret1 != null && ret1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret1.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp1;
			if(ret1 != null && ret1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret1.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret1.zpp_inner.x == x) {
				if(ret1 != null && ret1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret1.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp1 = ret1.zpp_inner.y == y;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				ret1.zpp_inner.x = x;
				ret1.zpp_inner.y = y;
				var _this = ret1.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret1.zpp_inner.weak = weak;
		this.napeHand = new nape_constraint_PivotJoint(tmp,null,ret,ret1);
		var _this = this.napeHand;
		if(_this.zpp_inner.active != false) {
			if(_this.zpp_inner.component != null) {
				_this.zpp_inner.component.woken = false;
			}
			_this.zpp_inner.clearcache();
			if(_this.zpp_inner.space != null) {
				_this.zpp_inner.wake();
				_this.zpp_inner.space.live_constraints.remove(_this.zpp_inner);
			}
			_this.zpp_inner.active = false;
			_this.zpp_inner.deactivate();
		}
		var _this = this.napeHand;
		if(_this.zpp_inner.stiff != false) {
			_this.zpp_inner.stiff = false;
			_this.zpp_inner.wake();
		}
		var _this = this.napeHand;
		if(_this.zpp_inner.maxForce != 1500000) {
			_this.zpp_inner.maxForce = 1500000;
			_this.zpp_inner.wake();
		}
		var _this = this.napeHand;
		var space = this.napeSpace;
		if(_this.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Constraint belonging to" + " a Compound, only the root Compound space can be set");
		}
		if((_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer) != space) {
			if(_this.zpp_inner.component != null) {
				_this.zpp_inner.component.woken = false;
			}
			_this.zpp_inner.clearcache();
			if(_this.zpp_inner.space != null) {
				_this.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(_this);
			}
			if(space != null) {
				var _this1 = space.zpp_inner.wrap_constraints;
				if(_this1.zpp_inner.reverse_flag) {
					_this1.push(_this);
				} else {
					_this1.unshift(_this);
				}
			} else {
				_this.zpp_inner.space = null;
			}
		}
		var tmp = _this.zpp_inner.space == null;
		var width = window.innerWidth;
		var height = window.innerHeight;
		if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var bounds = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC);
		var _this = bounds.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Polygon(nape_shape_Polygon.rect(0,-100,width,100));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var _this = bounds.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Polygon(nape_shape_Polygon.rect(0,height,width,100));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var _this = bounds.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Polygon(nape_shape_Polygon.rect(-100,0,100,height));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var _this = bounds.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Polygon(nape_shape_Polygon.rect(width,0,100,height));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		this.worldBorder = bounds;
		var _this = this.worldBorder;
		var space = this.napeSpace;
		if(_this.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		_this.zpp_inner.immutable_midstep("Body::space");
		if(_this.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if((_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer) != space) {
			if((_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer) != null) {
				_this.zpp_inner.component.woken = false;
			}
			if((_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer) != null) {
				(_this.zpp_inner.space == null ? null : _this.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(_this);
			}
			if(space != null) {
				var _this1 = space.zpp_inner.wrap_bodies;
				if(_this1.zpp_inner.reverse_flag) {
					_this1.push(_this);
				} else {
					_this1.unshift(_this);
				}
			}
		}
		var tmp = _this.zpp_inner.space == null;
		this.wordBallCollisionType = new nape_callbacks_CbType();
		var _this = this.napeSpace.zpp_inner.wrap_listeners;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var obj = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var obj1 = new nape_callbacks_InteractionListener(obj,zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION,this.wordBallCollisionType,this.wordBallCollisionType,$bind(this,this.wordOnWordCollision));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj1);
		} else {
			_this.unshift(obj1);
		}
		this.topicBallCollisionType = new nape_callbacks_CbType();
		var _this = this.napeSpace.zpp_inner.wrap_listeners;
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var obj = zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var obj1 = new nape_callbacks_InteractionListener(obj,zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION,this.topicBallCollisionType,this.topicBallCollisionType,$bind(this,this.topicOnTopicCollision));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj1);
		} else {
			_this.unshift(obj1);
		}
		this.topicBalls = new nape_phys_BodyList();
		this.currentTopicGroup = this.getNextTopicGroup();
		var _g = 0;
		var _g1 = this.currentTopicGroup.length;
		while(_g < _g1) {
			var i = _g++;
			var _this = this.topicBalls;
			var startX = screenWidth * 0.5;
			var startY = screenHeight * 0.5;
			var topic = this.currentTopicGroup[i];
			var fontSize = this.topicFontSizePixels;
			var outer = window.document.createElement("div");
			outer.className = "contentWrapper";
			var inner = window.document.createElement("span");
			inner.className = "innerContent";
			inner.innerHTML = "";
			if(fontSize != null) {
				inner.style.fontSize = Std.string(fontSize) + "px";
			}
			outer.appendChild(inner);
			var content = outer;
			var radius = topic.name.length * this.topicFontSizePixels * 0.5 + this.topicBallPixelPadding;
			var fillTechnique = null;
			var container = window.document.createElement("div");
			container.className = "ballContainer";
			container.style.width = Std.string(radius) + "px";
			container.style.height = Std.string(radius) + "px";
			container.style.left = Std.string(startX) + "px";
			container.style.top = Std.string(startY) + "px";
			var circle = window.document.createElement("canvas");
			circle.width = radius | 0;
			circle.height = radius | 0;
			var ctx = circle.getContext("2d",null);
			if(fillTechnique != null) {
				fillTechnique(ctx,radius | 0,radius | 0);
			} else {
				ctx.fillStyle = topic.color;
				ctx.beginPath();
				ctx.arc(radius / 2,radius / 2,radius / 2,0,Math.PI * 2);
				ctx.closePath();
				ctx.fill();
			}
			container.appendChild(circle);
			container.appendChild(content);
			var circleContainer = container;
			this.div.appendChild(circleContainer);
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
			if(ball.zpp_inner.wrap_pos == null) {
				ball.zpp_inner.setupPosition();
			}
			var _this1 = ball.zpp_inner.wrap_pos;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = _this1.zpp_inner;
			if(_this2._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this2._isimmutable != null) {
				_this2._isimmutable();
			}
			if(startX != startX || startY != startY) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(_this1 != null && _this1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this3 = _this1.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			if(_this1.zpp_inner.x == startX) {
				if(_this1 != null && _this1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this4 = _this1.zpp_inner;
				if(_this4._validate != null) {
					_this4._validate();
				}
				tmp = _this1.zpp_inner.y == startY;
			} else {
				tmp = false;
			}
			if(!tmp) {
				_this1.zpp_inner.x = startX;
				_this1.zpp_inner.y = startY;
				var _this5 = _this1.zpp_inner;
				if(_this5._invalidate != null) {
					_this5._invalidate(_this5);
				}
			}
			var _this6 = ball.zpp_inner.wrap_shapes;
			var obj = new nape_shape_Circle(radius / 2 | 0);
			if(_this6.zpp_inner.reverse_flag) {
				_this6.push(obj);
			} else {
				_this6.unshift(obj);
			}
			var space = this.napeSpace;
			if(ball.zpp_inner.compound != null) {
				throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
			}
			ball.zpp_inner.immutable_midstep("Body::space");
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					ball.zpp_inner.component.woken = false;
				}
				if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
					(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
				}
				if(space != null) {
					var _this7 = space.zpp_inner.wrap_bodies;
					if(_this7.zpp_inner.reverse_flag) {
						_this7.push(ball);
					} else {
						_this7.unshift(ball);
					}
				}
			}
			var tmp1 = ball.zpp_inner.space == null;
			var angularVel = Math.random() * 2 - 1;
			if(ball.zpp_inner.world) {
				throw haxe_Exception.thrown("Error: Space::world is immutable");
			}
			if(ball.zpp_inner.angvel != angularVel) {
				if(angularVel != angularVel) {
					throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
				}
				if(ball.zpp_inner.type == 1) {
					throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
				}
				ball.zpp_inner.angvel = angularVel;
				ball.zpp_inner.wake();
			}
			var ball1 = ball;
			if(ball1.zpp_inner_i.userData == null) {
				ball1.zpp_inner_i.userData = { };
			}
			ball1.zpp_inner_i.userData.sprite = new UserData(circleContainer,topic,null,0,10 + Math.random() * 35);
			if(ball1.zpp_inner_i.wrap_cbTypes == null) {
				ball1.zpp_inner_i.setupcbTypes();
			}
			var _this8 = ball1.zpp_inner_i.wrap_cbTypes;
			var obj1 = this.topicBallCollisionType;
			if(_this8.zpp_inner.reverse_flag) {
				_this8.push(obj1);
			} else {
				_this8.unshift(obj1);
			}
			var obj2 = ball1;
			if(_this.zpp_inner.reverse_flag) {
				_this.push(obj2);
			} else {
				_this.unshift(obj2);
			}
		}
		this.wordBalls = new nape_phys_BodyList();
		var startX = screenWidth * 0.5;
		var startY = screenHeight * 0.5;
		var fontSize = null;
		var outer = window.document.createElement("div");
		outer.className = "contentWrapper";
		var inner = window.document.createElement("span");
		inner.className = "innerContent";
		inner.innerHTML = "";
		if(fontSize != null) {
			inner.style.fontSize = Std.string(fontSize) + "px";
		}
		outer.appendChild(inner);
		var content = outer;
		var span = content.childNodes[0];
		span.innerHTML = "<h1>Word Reactor</h1><br/><span style=\"font-size:15px;\"><strong>Instructions:</strong><br/><br/>1. Drag and collide balls.<br/>2. Tap the background.<br/>3. Tap reset ball.<br/>4. Have fun!</span>";
		var topic = this.currentTopicGroup[0];
		var fillTechnique = null;
		var container = window.document.createElement("div");
		container.className = "ballContainer";
		container.style.width = "300" + "px";
		container.style.height = "300" + "px";
		container.style.left = Std.string(startX) + "px";
		container.style.top = Std.string(startY) + "px";
		var circle = window.document.createElement("canvas");
		circle.width = 300;
		circle.height = 300;
		var ctx = circle.getContext("2d",null);
		if(fillTechnique != null) {
			fillTechnique(ctx,300,300);
		} else {
			ctx.fillStyle = topic.color;
			ctx.beginPath();
			ctx.arc(150.,150.,150.,0,Math.PI * 2);
			ctx.closePath();
			ctx.fill();
		}
		container.appendChild(circle);
		container.appendChild(content);
		var circleContainer = container;
		this.div.appendChild(circleContainer);
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
		if(ball.zpp_inner.wrap_pos == null) {
			ball.zpp_inner.setupPosition();
		}
		var _this = ball.zpp_inner.wrap_pos;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(startX != startX || startY != startY) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(_this.zpp_inner.x == startX) {
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			tmp = _this.zpp_inner.y == startY;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_this.zpp_inner.x = startX;
			_this.zpp_inner.y = startY;
			var _this1 = _this.zpp_inner;
			if(_this1._invalidate != null) {
				_this1._invalidate(_this1);
			}
		}
		var _this = ball.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Circle(150. | 0);
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var space = this.napeSpace;
		if(ball.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		ball.zpp_inner.immutable_midstep("Body::space");
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				ball.zpp_inner.component.woken = false;
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
			}
			if(space != null) {
				var _this = space.zpp_inner.wrap_bodies;
				if(_this.zpp_inner.reverse_flag) {
					_this.push(ball);
				} else {
					_this.unshift(ball);
				}
			}
		}
		var tmp = ball.zpp_inner.space == null;
		var angularVel = Math.random() * 2 - 1;
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if(ball.zpp_inner.angvel != angularVel) {
			if(angularVel != angularVel) {
				throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
			}
			if(ball.zpp_inner.type == 1) {
				throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
			}
			ball.zpp_inner.angvel = angularVel;
			ball.zpp_inner.wake();
		}
		var ball1 = ball;
		if(ball1.zpp_inner_i.userData == null) {
			ball1.zpp_inner_i.userData = { };
		}
		ball1.zpp_inner_i.userData.sprite = circleContainer;
		this.instructionsBall = ball1;
		var startX = screenWidth * 0.2;
		var startY = screenHeight * 0.1;
		var fontSize = null;
		var outer = window.document.createElement("div");
		outer.className = "contentWrapper";
		var inner = window.document.createElement("span");
		inner.className = "innerContent";
		inner.innerHTML = "";
		if(fontSize != null) {
			inner.style.fontSize = Std.string(fontSize) + "px";
		}
		outer.appendChild(inner);
		var content = outer;
		var topic = Main.topicGroups[0][0];
		var useCanvas = false;
		var fillTechnique = null;
		if(useCanvas == null) {
			useCanvas = true;
		}
		var container = window.document.createElement("div");
		container.className = "ballContainer";
		container.style.width = "96" + "px";
		container.style.height = "96" + "px";
		container.style.left = Std.string(startX) + "px";
		container.style.top = Std.string(startY) + "px";
		if(useCanvas) {
			var circle = window.document.createElement("canvas");
			circle.width = 96;
			circle.height = 96;
			var ctx = circle.getContext("2d",null);
			if(fillTechnique != null) {
				fillTechnique(ctx,96,96);
			} else {
				ctx.fillStyle = topic.color;
				ctx.beginPath();
				ctx.arc(48.,48.,48.,0,Math.PI * 2);
				ctx.closePath();
				ctx.fill();
			}
			container.appendChild(circle);
		}
		container.appendChild(content);
		var circleContainer = container;
		this.div.appendChild(circleContainer);
		circleContainer.addEventListener("click",function(e) {
			window.open("https://github.com/Tw1ddle/word-reactor");
		},false);
		circleContainer.addEventListener("touchstart",function(e) {
			window.open("https://github.com/Tw1ddle/word-reactor");
		},false);
		circleContainer.innerHTML = "<img src=\"assets/images/githublogo.png\" />";
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
		if(ball.zpp_inner.wrap_pos == null) {
			ball.zpp_inner.setupPosition();
		}
		var _this = ball.zpp_inner.wrap_pos;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(startX != startX || startY != startY) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(_this.zpp_inner.x == startX) {
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			tmp = _this.zpp_inner.y == startY;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_this.zpp_inner.x = startX;
			_this.zpp_inner.y = startY;
			var _this1 = _this.zpp_inner;
			if(_this1._invalidate != null) {
				_this1._invalidate(_this1);
			}
		}
		var _this = ball.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Circle(48. | 0);
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var space = this.napeSpace;
		if(ball.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		ball.zpp_inner.immutable_midstep("Body::space");
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				ball.zpp_inner.component.woken = false;
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
			}
			if(space != null) {
				var _this = space.zpp_inner.wrap_bodies;
				if(_this.zpp_inner.reverse_flag) {
					_this.push(ball);
				} else {
					_this.unshift(ball);
				}
			}
		}
		var tmp = ball.zpp_inner.space == null;
		var angularVel = Math.random() * 2 - 1;
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if(ball.zpp_inner.angvel != angularVel) {
			if(angularVel != angularVel) {
				throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
			}
			if(ball.zpp_inner.type == 1) {
				throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
			}
			ball.zpp_inner.angvel = angularVel;
			ball.zpp_inner.wake();
		}
		var ball1 = ball;
		if(ball1.zpp_inner_i.userData == null) {
			ball1.zpp_inner_i.userData = { };
		}
		ball1.zpp_inner_i.userData.sprite = circleContainer;
		this.githubBall = ball1;
		var startX = screenWidth * 0.5;
		var startY = screenHeight * 0.1;
		var fontSize = null;
		var outer = window.document.createElement("div");
		outer.className = "contentWrapper";
		var inner = window.document.createElement("span");
		inner.className = "innerContent";
		inner.innerHTML = "";
		if(fontSize != null) {
			inner.style.fontSize = Std.string(fontSize) + "px";
		}
		outer.appendChild(inner);
		var content = outer;
		var topic = Main.topicGroups[0][0];
		var useCanvas = false;
		var fillTechnique = null;
		if(useCanvas == null) {
			useCanvas = true;
		}
		var container = window.document.createElement("div");
		container.className = "ballContainer";
		container.style.width = "96" + "px";
		container.style.height = "96" + "px";
		container.style.left = Std.string(startX) + "px";
		container.style.top = Std.string(startY) + "px";
		if(useCanvas) {
			var circle = window.document.createElement("canvas");
			circle.width = 96;
			circle.height = 96;
			var ctx = circle.getContext("2d",null);
			if(fillTechnique != null) {
				fillTechnique(ctx,96,96);
			} else {
				ctx.fillStyle = topic.color;
				ctx.beginPath();
				ctx.arc(48.,48.,48.,0,Math.PI * 2);
				ctx.closePath();
				ctx.fill();
			}
			container.appendChild(circle);
		}
		container.appendChild(content);
		var circleContainer = container;
		this.div.appendChild(circleContainer);
		circleContainer.addEventListener("click",function(e) {
			window.open("https://twitter.com/Sam_Twidale/status/756230840821092352");
		},false);
		circleContainer.addEventListener("touchstart",function(e) {
			window.open("https://twitter.com/Sam_Twidale/status/756230840821092352");
		},false);
		circleContainer.innerHTML = "<img src=\"assets/images/twitterlogo.png\" />";
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
		if(ball.zpp_inner.wrap_pos == null) {
			ball.zpp_inner.setupPosition();
		}
		var _this = ball.zpp_inner.wrap_pos;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(startX != startX || startY != startY) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(_this.zpp_inner.x == startX) {
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			tmp = _this.zpp_inner.y == startY;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_this.zpp_inner.x = startX;
			_this.zpp_inner.y = startY;
			var _this1 = _this.zpp_inner;
			if(_this1._invalidate != null) {
				_this1._invalidate(_this1);
			}
		}
		var _this = ball.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Circle(48. | 0);
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var space = this.napeSpace;
		if(ball.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		ball.zpp_inner.immutable_midstep("Body::space");
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				ball.zpp_inner.component.woken = false;
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
			}
			if(space != null) {
				var _this = space.zpp_inner.wrap_bodies;
				if(_this.zpp_inner.reverse_flag) {
					_this.push(ball);
				} else {
					_this.unshift(ball);
				}
			}
		}
		var tmp = ball.zpp_inner.space == null;
		var angularVel = Math.random() * 2 - 1;
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if(ball.zpp_inner.angvel != angularVel) {
			if(angularVel != angularVel) {
				throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
			}
			if(ball.zpp_inner.type == 1) {
				throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
			}
			ball.zpp_inner.angvel = angularVel;
			ball.zpp_inner.wake();
		}
		var ball1 = ball;
		if(ball1.zpp_inner_i.userData == null) {
			ball1.zpp_inner_i.userData = { };
		}
		ball1.zpp_inner_i.userData.sprite = circleContainer;
		this.twitterBall = ball1;
		var startX = screenWidth * 0.8;
		var startY = screenHeight * 0.1;
		var callback = function() {
			_gthis.resetSimulation();
		};
		var fontSize = null;
		var outer = window.document.createElement("div");
		outer.className = "contentWrapper";
		var inner = window.document.createElement("span");
		inner.className = "innerContent";
		inner.innerHTML = "";
		if(fontSize != null) {
			inner.style.fontSize = Std.string(fontSize) + "px";
		}
		outer.appendChild(inner);
		var content = outer;
		var topic = Main.topicGroups[0][0];
		var useCanvas = false;
		var fillTechnique = null;
		if(useCanvas == null) {
			useCanvas = true;
		}
		var container = window.document.createElement("div");
		container.className = "ballContainer";
		container.style.width = "96" + "px";
		container.style.height = "96" + "px";
		container.style.left = Std.string(startX) + "px";
		container.style.top = Std.string(startY) + "px";
		if(useCanvas) {
			var circle = window.document.createElement("canvas");
			circle.width = 96;
			circle.height = 96;
			var ctx = circle.getContext("2d",null);
			if(fillTechnique != null) {
				fillTechnique(ctx,96,96);
			} else {
				ctx.fillStyle = topic.color;
				ctx.beginPath();
				ctx.arc(48.,48.,48.,0,Math.PI * 2);
				ctx.closePath();
				ctx.fill();
			}
			container.appendChild(circle);
		}
		container.appendChild(content);
		var circleContainer = container;
		this.div.appendChild(circleContainer);
		circleContainer.addEventListener("click",function(e) {
			callback();
		},false);
		circleContainer.addEventListener("touchstart",function(e) {
			callback();
		},false);
		circleContainer.innerHTML = "<img src=\"assets/images/reseticon.png\" />";
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
		if(ball.zpp_inner.wrap_pos == null) {
			ball.zpp_inner.setupPosition();
		}
		var _this = ball.zpp_inner.wrap_pos;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(startX != startX || startY != startY) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(_this.zpp_inner.x == startX) {
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			tmp = _this.zpp_inner.y == startY;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_this.zpp_inner.x = startX;
			_this.zpp_inner.y = startY;
			var _this1 = _this.zpp_inner;
			if(_this1._invalidate != null) {
				_this1._invalidate(_this1);
			}
		}
		var _this = ball.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Circle(48. | 0);
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var space = this.napeSpace;
		if(ball.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		ball.zpp_inner.immutable_midstep("Body::space");
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				ball.zpp_inner.component.woken = false;
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
			}
			if(space != null) {
				var _this = space.zpp_inner.wrap_bodies;
				if(_this.zpp_inner.reverse_flag) {
					_this.push(ball);
				} else {
					_this.unshift(ball);
				}
			}
		}
		var tmp = ball.zpp_inner.space == null;
		var angularVel = Math.random() * 2 - 1;
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if(ball.zpp_inner.angvel != angularVel) {
			if(angularVel != angularVel) {
				throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
			}
			if(ball.zpp_inner.type == 1) {
				throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
			}
			ball.zpp_inner.angvel = angularVel;
			ball.zpp_inner.wake();
		}
		var ball1 = ball;
		if(ball1.zpp_inner_i.userData == null) {
			ball1.zpp_inner_i.userData = { };
		}
		ball1.zpp_inner_i.userData.sprite = circleContainer;
		this.resetBall = ball1;
		this.isPointerDown = false;
		this.pointerPosition = new nape_geom_Vec2(0,0);
	}
	,wordOnWordCollision: function(cb) {
	}
	,topicOnTopicCollision: function(cb) {
		var _this = cb.zpp_inner.int1.outer_i;
		if(_this.zpp_inner_i.userData == null) {
			_this.zpp_inner_i.userData = { };
		}
		var word1 = _this.zpp_inner_i.userData.sprite;
		var _this = cb.zpp_inner.int2.outer_i;
		if(_this.zpp_inner_i.userData == null) {
			_this.zpp_inner_i.userData = { };
		}
		var word2 = _this.zpp_inner_i.userData.sprite;
		var _this = cb.zpp_inner.int1.outer_i;
		var _this1 = _this.zpp_inner_i.ibody != null ? _this.zpp_inner_i.ibody.outer : null;
		if(_this1.zpp_inner.wrap_pos == null) {
			_this1.zpp_inner.setupPosition();
		}
		var _this = _this1.zpp_inner.wrap_pos;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		var startX = _this.zpp_inner.x | 0;
		var _this = cb.zpp_inner.int1.outer_i;
		var _this1 = _this.zpp_inner_i.ibody != null ? _this.zpp_inner_i.ibody.outer : null;
		if(_this1.zpp_inner.wrap_pos == null) {
			_this1.zpp_inner.setupPosition();
		}
		var _this = _this1.zpp_inner.wrap_pos;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		var startY = _this.zpp_inner.y | 0;
		var topic = word1.topic;
		var fontSize = this.wordFontSizePixels;
		var outer = window.document.createElement("div");
		outer.className = "contentWrapper";
		var inner = window.document.createElement("span");
		inner.className = "innerContent";
		inner.innerHTML = "";
		if(fontSize != null) {
			inner.style.fontSize = Std.string(fontSize) + "px";
		}
		outer.appendChild(inner);
		var content = outer;
		var words = Reflect.field(TrainingDatas,topic.name);
		if(words == null) {
			throw haxe_Exception.thrown("FAIL: words != null");
		}
		var topic1 = topic.name;
		var pair = this.generatorMap.h[topic1];
		if(pair == null) {
			var data = Reflect.field(TrainingDatas,topic1);
			if(data == null) {
				throw haxe_Exception.thrown("FAIL: data != null");
			}
			var generator = new markov_namegen_Generator(data,3,0,false);
			var trie = new markov_util_PrefixTrie();
			var _g = 0;
			while(_g < data.length) {
				var word = data[_g];
				++_g;
				trie.insert(word);
			}
			pair = new GeneratorTriePair(generator,trie);
			this.generatorMap.h[topic1] = pair;
		}
		var pair1 = pair;
		var makeWord = function() {
			var word = "";
			while(word == null || word.length == 0) word = pair1.generator.generate();
			return StringTools.replace(word,"#","");
		};
		var word = makeWord();
		while(pair1.trie.find(word) || (word.length < 5 || word.length > 13)) word = makeWord();
		var firstLetter = word.charAt(0).toUpperCase();
		var word1 = firstLetter + word.substring(1,word.length);
		var radius = word1.length * this.wordFontSizePixels * 0.5 + this.wordBallPixelPadding;
		var fillTechnique = null;
		var container = window.document.createElement("div");
		container.className = "ballContainer";
		container.style.width = Std.string(radius) + "px";
		container.style.height = Std.string(radius) + "px";
		container.style.left = Std.string(startX) + "px";
		container.style.top = Std.string(startY) + "px";
		var circle = window.document.createElement("canvas");
		circle.width = radius | 0;
		circle.height = radius | 0;
		var ctx = circle.getContext("2d",null);
		if(fillTechnique != null) {
			fillTechnique(ctx,radius | 0,radius | 0);
		} else {
			ctx.fillStyle = topic.color;
			ctx.beginPath();
			ctx.arc(radius / 2,radius / 2,radius / 2,0,Math.PI * 2);
			ctx.closePath();
			ctx.fill();
		}
		container.appendChild(circle);
		container.appendChild(content);
		var circleContainer = container;
		this.div.appendChild(circleContainer);
		var userData = new UserData(circleContainer,topic,word1,1,20 + Math.random() * 35);
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		var ball = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC);
		if(ball.zpp_inner.wrap_pos == null) {
			ball.zpp_inner.setupPosition();
		}
		var _this = ball.zpp_inner.wrap_pos;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(startX != startX || startY != startY) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(_this.zpp_inner.x == startX) {
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			tmp = _this.zpp_inner.y == startY;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_this.zpp_inner.x = startX;
			_this.zpp_inner.y = startY;
			var _this1 = _this.zpp_inner;
			if(_this1._invalidate != null) {
				_this1._invalidate(_this1);
			}
		}
		var _this = ball.zpp_inner.wrap_shapes;
		var obj = new nape_shape_Circle(radius / 2 | 0);
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var space = this.napeSpace;
		if(ball.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		ball.zpp_inner.immutable_midstep("Body::space");
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != space) {
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				ball.zpp_inner.component.woken = false;
			}
			if((ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer) != null) {
				(ball.zpp_inner.space == null ? null : ball.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(ball);
			}
			if(space != null) {
				var _this = space.zpp_inner.wrap_bodies;
				if(_this.zpp_inner.reverse_flag) {
					_this.push(ball);
				} else {
					_this.unshift(ball);
				}
			}
		}
		var tmp = ball.zpp_inner.space == null;
		var angularVel = Math.random() * 2 - 1;
		if(ball.zpp_inner.world) {
			throw haxe_Exception.thrown("Error: Space::world is immutable");
		}
		if(ball.zpp_inner.angvel != angularVel) {
			if(angularVel != angularVel) {
				throw haxe_Exception.thrown("Error: Body::angularVel cannot be NaN");
			}
			if(ball.zpp_inner.type == 1) {
				throw haxe_Exception.thrown("Error: A static object cannot be given a velocity");
			}
			ball.zpp_inner.angvel = angularVel;
			ball.zpp_inner.wake();
		}
		var ball1 = ball;
		if(ball1.zpp_inner_i.userData == null) {
			ball1.zpp_inner_i.userData = { };
		}
		ball1.zpp_inner_i.userData.sprite = userData;
		if(ball1.zpp_inner_i.wrap_cbTypes == null) {
			ball1.zpp_inner_i.setupcbTypes();
		}
		var _this = ball1.zpp_inner_i.wrap_cbTypes;
		var obj = this.wordBallCollisionType;
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		var ball = ball1;
		var _this = this.wordBalls;
		if(_this.zpp_inner.reverse_flag) {
			_this.push(ball);
		} else {
			_this.unshift(ball);
		}
	}
	,getNextTopicGroup: function() {
		this.currentTopicCounter = 0;
		var group = Main.topicGroups[this.currentTopicGroupCounter % Main.topicGroups.length];
		this.currentTopicGroupCounter++;
		return group;
	}
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var UInt = {};
UInt.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var markov_namegen_Generator = function(data,order,prior,backoff) {
	if(data == null) {
		throw haxe_Exception.thrown("FAIL: data != null");
	}
	if(!UInt.gte(order,1)) {
		throw haxe_Exception.thrown("FAIL: order >= 1");
	}
	if(!(prior >= 0)) {
		throw haxe_Exception.thrown("FAIL: prior >= 0");
	}
	this.order = order;
	this.prior = prior;
	this.backoff = backoff;
	var letters = markov_util_ArraySet.create();
	var _g = 0;
	while(_g < data.length) {
		var word = data[_g];
		++_g;
		var _g1 = 0;
		var _g2 = word.length;
		while(_g1 < _g2) {
			var i = _g1++;
			markov_util_ArraySet.add(letters,word.charAt(i));
		}
	}
	letters.sort(function(a,b) {
		if(a < b) {
			return -1;
		}
		if(a > b) {
			return 1;
		}
		return 0;
	});
	var domain = markov_util_ArraySet.toArray(letters);
	domain.splice(0,0,"#");
	this.models = [];
	if(this.backoff) {
		var _g = 0;
		var _g1 = order;
		while(_g < _g1) {
			var i = _g++;
			this.models.push(new markov_namegen_Model(data.slice(),order - i,prior,domain));
		}
	} else {
		this.models.push(new markov_namegen_Model(data.slice(),order,prior,domain));
	}
};
markov_namegen_Generator.__name__ = true;
markov_namegen_Generator.prototype = {
	generate: function() {
		var times = this.order;
		if(times < 1) {
			throw haxe_Exception.thrown("FAIL: times >= 1");
		}
		var output = "";
		var _g = 0;
		var _g1 = times;
		while(_g < _g1) {
			var i = _g++;
			output += "#";
		}
		var word = output;
		var letter = this.getLetter(word);
		while(letter != "#" && letter != null) {
			if(letter != null) {
				word += letter;
			}
			letter = this.getLetter(word);
		}
		return word;
	}
	,getLetter: function(word) {
		if(word == null) {
			throw haxe_Exception.thrown("FAIL: word != null");
		}
		if(word.length <= 0) {
			throw haxe_Exception.thrown("FAIL: word.length > 0");
		}
		var letter = null;
		var context = word.substring(word.length - this.order,word.length);
		var _g = 0;
		var _g1 = this.models;
		while(_g < _g1.length) {
			var model = _g1[_g];
			++_g;
			letter = model.generate(context);
			if(letter == null || letter == "#") {
				context = context.substring(1);
			} else {
				break;
			}
		}
		return letter;
	}
};
var markov_namegen_Model = function(data,order,prior,alphabet) {
	if(!(alphabet != null && data != null)) {
		throw haxe_Exception.thrown("FAIL: alphabet != null && data != null");
	}
	if(!(alphabet.length > 0 && data.length > 0)) {
		throw haxe_Exception.thrown("FAIL: alphabet.length > 0 && data.length > 0");
	}
	if(!(prior >= 0 && prior <= 1)) {
		throw haxe_Exception.thrown("FAIL: prior >= 0 && prior <= 1");
	}
	this.order = order;
	this.prior = prior;
	this.alphabet = alphabet;
	this.observations = new haxe_ds_StringMap();
	this.train(data);
	this.buildChains();
};
markov_namegen_Model.__name__ = true;
markov_namegen_Model.selectIndex = function(chain) {
	var totals = [];
	var accumulator = 0;
	var _g = 0;
	while(_g < chain.length) {
		var weight = chain[_g];
		++_g;
		accumulator += weight;
		totals.push(accumulator);
	}
	var rand = Math.random() * accumulator;
	var _g = 0;
	var _g1 = totals.length;
	while(_g < _g1) {
		var i = _g++;
		if(rand < totals[i]) {
			return i;
		}
	}
	return 0;
};
markov_namegen_Model.prototype = {
	generate: function(context) {
		if(context == null) {
			throw haxe_Exception.thrown("FAIL: context != null");
		}
		var chain = this.chains.h[context];
		if(chain == null) {
			return null;
		} else {
			if(chain.length <= 0) {
				throw haxe_Exception.thrown("FAIL: chain.length > 0");
			}
			return this.alphabet[markov_namegen_Model.selectIndex(chain)];
		}
	}
	,train: function(data) {
		while(data.length != 0) {
			var d = data.pop();
			var times = this.order;
			if(times < 1) {
				throw haxe_Exception.thrown("FAIL: times >= 1");
			}
			var output = "";
			var _g = 0;
			var _g1 = times;
			while(_g < _g1) {
				var i = _g++;
				output += "#";
			}
			d = output + d + "#";
			var _g2 = 0;
			var _g3 = d.length - this.order;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var key = d.substring(i1,i1 + this.order);
				var value = this.observations.h[key];
				if(value == null) {
					value = [];
					this.observations.h[key] = value;
				}
				value.push(d.charAt(i1 + this.order));
			}
		}
	}
	,buildChains: function() {
		this.chains = new haxe_ds_StringMap();
		var h = this.observations.h;
		var context_h = h;
		var context_keys = Object.keys(h);
		var context_length = context_keys.length;
		var context_current = 0;
		while(context_current < context_length) {
			var context = context_keys[context_current++];
			var _g = 0;
			var _g1 = this.alphabet;
			while(_g < _g1.length) {
				var prediction = _g1[_g];
				++_g;
				var value = this.chains.h[context];
				if(value == null) {
					value = [];
					this.chains.h[context] = value;
				}
				var tmp = this.prior;
				var arr = this.observations.h[context];
				var tmp1;
				if(arr == null) {
					tmp1 = 0;
				} else {
					var i = 0;
					var _g2 = 0;
					while(_g2 < arr.length) {
						var s = arr[_g2];
						++_g2;
						if(s == prediction) {
							++i;
						}
					}
					tmp1 = i;
				}
				value.push(tmp + tmp1);
			}
		}
	}
};
var markov_util_ArraySet = {};
markov_util_ArraySet.create = function(array) {
	if(array == null) {
		var this1 = [];
		return this1;
	}
	return markov_util_ArraySet.toSet(array);
};
markov_util_ArraySet.add = function(this1,element) {
	if(element == null) {
		throw haxe_Exception.thrown("FAIL: element != null");
	}
	if(markov_util_ArraySet.contains(this1,element)) {
		return false;
	}
	this1.push(element);
	return true;
};
markov_util_ArraySet.contains = function(this1,element) {
	var _g = 0;
	while(_g < this1.length) {
		var i = this1[_g];
		++_g;
		if(i == element) {
			return true;
		}
	}
	return false;
};
markov_util_ArraySet.toArray = function(this1) {
	return this1.slice();
};
markov_util_ArraySet.toSet = function(array) {
	var this1 = [];
	var set = this1;
	var _g = 0;
	while(_g < array.length) {
		var v = array[_g];
		++_g;
		markov_util_ArraySet.add(set,v);
	}
	return set;
};
var markov_util_PrefixTrie = function() {
	this.root = new markov_util_PrefixNode(null,"",0);
};
markov_util_PrefixTrie.__name__ = true;
markov_util_PrefixTrie.findChild = function(node,letter) {
	var _g = 0;
	var _g1 = node.children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		if(child.letter == letter) {
			return child;
		}
	}
	return null;
};
markov_util_PrefixTrie.prototype = {
	insert: function(word) {
		var current = this.root;
		var _g = 0;
		var _g1 = word.length;
		while(_g < _g1) {
			var i = _g++;
			var ch = word.charAt(i);
			var child = markov_util_PrefixTrie.findChild(current,ch);
			if(child == null) {
				child = new markov_util_PrefixNode(current,ch,i);
				current.children.push(child);
			} else {
				child.frequency++;
			}
			current = child;
		}
		current.word = true;
		return current.frequency;
	}
	,find: function(word) {
		var current = this.root;
		var _g = 0;
		var _g1 = word.length;
		while(_g < _g1) {
			var i = _g++;
			current = markov_util_PrefixTrie.findChild(current,word.charAt(i));
			if(current == null) {
				return false;
			}
		}
		if(!current.word) {
			return false;
		}
		return true;
	}
};
var markov_util_PrefixNode = function(parent,letter,depth) {
	if(!(letter.length == 1 || parent == null && depth == 0)) {
		throw haxe_Exception.thrown("FAIL: letter.length == 1 || (parent == null && depth == 0)");
	}
	this.parent = parent;
	this.children = [];
	this.letter = letter;
	this.depth = depth;
	this.frequency = 1;
	this.word = false;
};
markov_util_PrefixNode.__name__ = true;
var nape_Config = function() { };
nape_Config.__name__ = true;
var nape_callbacks_Callback = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_callbacks_ZPP_$Callback.internal) {
		throw haxe_Exception.thrown("Error: Callback cannot be instantiated derp!");
	}
};
nape_callbacks_Callback.__name__ = true;
nape_callbacks_Callback.prototype = {
	toString: function() {
		return "";
	}
};
var nape_callbacks_BodyCallback = function() {
	nape_callbacks_Callback.call(this);
};
nape_callbacks_BodyCallback.__name__ = true;
nape_callbacks_BodyCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_BodyCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP"][this.zpp_inner.event - 2];
		ret += ":" + this.zpp_inner.body.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
});
var nape_callbacks_Listener = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_callbacks_ZPP_$Listener.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate Listener derp!");
	}
};
nape_callbacks_Listener.__name__ = true;
nape_callbacks_Listener.prototype = {
	toString: function() {
		var event = ["BEGIN","END","WAKE","SLEEP","BREAK","PRE","ONGOING"][this.zpp_inner.event];
		if(this.zpp_inner.type == 0) {
			var body = this.zpp_inner.body;
			return "BodyListener{" + event + "::" + Std.string(body.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else if(this.zpp_inner.type == 1) {
			var con = this.zpp_inner.constraint;
			return "ConstraintListener{" + event + "::" + Std.string(con.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else {
			var con = this.zpp_inner.interaction;
			var itype;
			switch(con.itype) {
			case 1:
				itype = "COLLISION";
				break;
			case 2:
				itype = "SENSOR";
				break;
			case 4:
				itype = "FLUID";
				break;
			default:
				itype = "ALL";
			}
			return (this.zpp_inner.type == 2 ? "InteractionListener{" + event + "#" + itype + "::" + Std.string(con.outer_zni.zpp_inner_zn.options1.outer) + ":" + Std.string(con.outer_zni.zpp_inner_zn.options2.outer) + "}" : "PreListener{" + itype + "::" + Std.string(con.outer_znp.zpp_inner_zn.options1.outer) + ":" + Std.string(con.outer_znp.zpp_inner_zn.options2.outer) + "}") + " precedence=" + this.zpp_inner.precedence;
		}
	}
};
var nape_callbacks_BodyListener = function(event,options,handler,precedence) {
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.internal = true;
	nape_callbacks_Listener.call(this);
	zpp_$nape_callbacks_ZPP_$Listener.internal = false;
	if(handler == null) {
		throw haxe_Exception.thrown("Error: BodyListener::handler cannot be null");
	}
	var xevent = -1;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE) {
		xevent = 2;
	} else {
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP) {
			xevent = 3;
		} else {
			throw haxe_Exception.thrown("Error: cbEvent '" + event.toString() + "' is not a valid event type for a BodyListener");
		}
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$BodyListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
nape_callbacks_BodyListener.__name__ = true;
nape_callbacks_BodyListener.__super__ = nape_callbacks_Listener;
nape_callbacks_BodyListener.prototype = $extend(nape_callbacks_Listener.prototype,{
});
var nape_callbacks_CbEvent = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "CbEvent" + " derp!");
	}
};
nape_callbacks_CbEvent.__name__ = true;
nape_callbacks_CbEvent.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN) {
			return "BEGIN";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING) {
				return "ONGOING";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_END) {
					return "END";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE) {
						return "WAKE";
					} else {
						if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
							zpp_$nape_util_ZPP_$Flags.internal = true;
							zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
							zpp_$nape_util_ZPP_$Flags.internal = false;
						}
						if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP) {
							return "SLEEP";
						} else {
							if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
								zpp_$nape_util_ZPP_$Flags.internal = true;
								zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
								zpp_$nape_util_ZPP_$Flags.internal = false;
							}
							if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK) {
								return "BREAK";
							} else {
								if(zpp_$nape_util_ZPP_$Flags.CbEvent_PRE == null) {
									zpp_$nape_util_ZPP_$Flags.internal = true;
									zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = new nape_callbacks_CbEvent();
									zpp_$nape_util_ZPP_$Flags.internal = false;
								}
								if(this == zpp_$nape_util_ZPP_$Flags.CbEvent_PRE) {
									return "PRE";
								} else {
									return "";
								}
							}
						}
					}
				}
			}
		}
	}
};
var nape_callbacks_CbType = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_callbacks_ZPP_$CbType();
	this.zpp_inner.outer = this;
};
nape_callbacks_CbType.__name__ = true;
nape_callbacks_CbType.prototype = {
	toString: function() {
		if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY) {
			return "ANY_BODY";
		} else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE) {
			return "ANY_SHAPE";
		} else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND) {
			return "ANY_COMPOUND";
		} else if(this == zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT) {
			return "ANY_CONSTRAINT";
		} else {
			return "CbType#" + this.zpp_inner.id;
		}
	}
};
var nape_callbacks_CbTypeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$CbTypeList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "CbType" + "Iterator derp!");
	}
};
nape_callbacks_CbTypeIterator.__name__ = true;
nape_callbacks_CbTypeIterator.get = function(list) {
	var ret;
	if(nape_callbacks_CbTypeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CbTypeList.internal = true;
		var ret1 = new nape_callbacks_CbTypeIterator();
		zpp_$nape_util_ZPP_$CbTypeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_CbTypeIterator.zpp_pool;
		nape_callbacks_CbTypeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_CbTypeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
			nape_callbacks_CbTypeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_callbacks_CbTypeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$CbTypeList();
	this.zpp_inner.outer = this;
};
nape_callbacks_CbTypeList.__name__ = true;
nape_callbacks_CbTypeList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "CbType" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "CbType" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_callbacks_CbTypeIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
				nape_callbacks_CbTypeIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_callbacks_ConstraintCallback = function() {
	nape_callbacks_Callback.call(this);
};
nape_callbacks_ConstraintCallback.__name__ = true;
nape_callbacks_ConstraintCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_ConstraintCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP","BREAK"][this.zpp_inner.event - 2];
		ret += ":" + this.zpp_inner.constraint.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
});
var nape_callbacks_ConstraintListener = function(event,options,handler,precedence) {
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.internal = true;
	nape_callbacks_Listener.call(this);
	zpp_$nape_callbacks_ZPP_$Listener.internal = false;
	if(handler == null) {
		throw haxe_Exception.thrown("Error: ConstraintListener::handler cannot be null");
	}
	var xevent = -1;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE) {
		xevent = 2;
	} else {
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP) {
			xevent = 3;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK) {
				xevent = 4;
			} else {
				throw haxe_Exception.thrown("Error: cbEvent '" + event.toString() + "' is not a valid event type for a ConstraintListener");
			}
		}
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$ConstraintListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
nape_callbacks_ConstraintListener.__name__ = true;
nape_callbacks_ConstraintListener.__super__ = nape_callbacks_Listener;
nape_callbacks_ConstraintListener.prototype = $extend(nape_callbacks_Listener.prototype,{
});
var nape_callbacks_InteractionCallback = function() {
	nape_callbacks_Callback.call(this);
};
nape_callbacks_InteractionCallback.__name__ = true;
nape_callbacks_InteractionCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_InteractionCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret += ["BEGIN","END","","","","","ONGOING"][this.zpp_inner.event];
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.wrap_arbiters.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
});
var nape_callbacks_InteractionListener = function(event,interactionType,options1,options2,handler,precedence) {
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.internal = true;
	nape_callbacks_Listener.call(this);
	zpp_$nape_callbacks_ZPP_$Listener.internal = false;
	if(handler == null) {
		throw haxe_Exception.thrown("Error: InteractionListener::handler cannot be null");
	}
	if(event == null) {
		throw haxe_Exception.thrown("Error: CbEvent cannot be null for InteractionListener");
	}
	var xevent = -1;
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN) {
		xevent = 0;
	} else {
		if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_END) {
			xevent = 1;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(event == zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING) {
				xevent = 6;
			} else {
				throw haxe_Exception.thrown("Error: CbEvent '" + event.toString() + "' is not a valid event type for InteractionListener");
			}
		}
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$InteractionListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options1),zpp_$nape_callbacks_ZPP_$OptionType.argument(options2),xevent,2);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zni = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.handleri = handler;
	if(interactionType == null) {
		throw haxe_Exception.thrown("Error: Cannot set listener interaction type to null");
	}
	var ret = this.zpp_inner_zn.itype;
	var tmp;
	if(ret == 1) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
	} else if(ret == 2) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
	} else if(ret == 4) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
	} else if(ret == 7) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
	} else {
		tmp = null;
	}
	if(tmp != interactionType) {
		var xtype;
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION) {
			xtype = 1;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR) {
				xtype = 2;
			} else {
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				xtype = interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID ? 4 : 7;
			}
		}
		this.zpp_inner_zn.itype = xtype;
	}
	var ret = this.zpp_inner_zn.itype;
	if(ret == 1) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret == 2) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret == 4) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret == 7) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	}
};
nape_callbacks_InteractionListener.__name__ = true;
nape_callbacks_InteractionListener.__super__ = nape_callbacks_Listener;
nape_callbacks_InteractionListener.prototype = $extend(nape_callbacks_Listener.prototype,{
});
var nape_callbacks_InteractionType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "InteractionType" + " derp!");
	}
};
nape_callbacks_InteractionType.__name__ = true;
nape_callbacks_InteractionType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION) {
			return "COLLISION";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR) {
				return "SENSOR";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID) {
					return "FLUID";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.InteractionType_ANY) {
						return "ANY";
					} else {
						return "";
					}
				}
			}
		}
	}
};
var nape_callbacks_ListenerIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ListenerList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "Listener" + "Iterator derp!");
	}
};
nape_callbacks_ListenerIterator.__name__ = true;
nape_callbacks_ListenerIterator.get = function(list) {
	var ret;
	if(nape_callbacks_ListenerIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ListenerList.internal = true;
		var ret1 = new nape_callbacks_ListenerIterator();
		zpp_$nape_util_ZPP_$ListenerList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_ListenerIterator.zpp_pool;
		nape_callbacks_ListenerIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_ListenerIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_callbacks_ListenerIterator.zpp_pool;
			nape_callbacks_ListenerIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_callbacks_ListenerList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ListenerList();
	this.zpp_inner.outer = this;
};
nape_callbacks_ListenerList.__name__ = true;
nape_callbacks_ListenerList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Listener" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Listener" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Listener" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_callbacks_ListenerIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_callbacks_ListenerIterator.zpp_pool;
				nape_callbacks_ListenerIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_callbacks_ListenerType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "ListenerType" + " derp!");
	}
};
nape_callbacks_ListenerType.__name__ = true;
nape_callbacks_ListenerType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ListenerType_PRE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ListenerType_PRE = new nape_callbacks_ListenerType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_PRE) {
			return "PRE";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ListenerType_BODY == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ListenerType_BODY = new nape_callbacks_ListenerType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_BODY) {
				return "BODY";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT = new nape_callbacks_ListenerType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT) {
					return "CONSTRAINT";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION = new nape_callbacks_ListenerType();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION) {
						return "INTERACTION";
					} else {
						return "";
					}
				}
			}
		}
	}
};
var nape_callbacks_OptionType = function(includes,excludes) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_callbacks_ZPP_$OptionType();
	this.zpp_inner.outer = this;
	if(includes != null) {
		this.including(includes);
	}
	if(excludes != null) {
		this.excluding(excludes);
	}
};
nape_callbacks_OptionType.__name__ = true;
nape_callbacks_OptionType.prototype = {
	including: function(includes) {
		this.zpp_inner.append(this.zpp_inner.includes,includes);
		return this;
	}
	,excluding: function(excludes) {
		this.zpp_inner.append(this.zpp_inner.excludes,excludes);
		return this;
	}
	,toString: function() {
		if(this.zpp_inner.wrap_includes == null) {
			this.zpp_inner.setup_includes();
		}
		var inc = this.zpp_inner.wrap_includes.toString();
		if(this.zpp_inner.wrap_excludes == null) {
			this.zpp_inner.setup_excludes();
		}
		var exc = this.zpp_inner.wrap_excludes.toString();
		return "@{" + inc + " excluding " + exc + "}";
	}
};
var nape_callbacks_PreCallback = function() {
	nape_callbacks_Callback.call(this);
};
nape_callbacks_PreCallback.__name__ = true;
nape_callbacks_PreCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_PreCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	toString: function() {
		var ret = "Cb:PRE:";
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.pre_arbiter.wrapper().toString();
		ret += " : listnener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
});
var nape_callbacks_PreFlag = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "PreFlag" + " derp!");
	}
};
nape_callbacks_PreFlag.__name__ = true;
nape_callbacks_PreFlag.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT) {
			return "ACCEPT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE) {
				return "IGNORE";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE) {
					return "ACCEPT_ONCE";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE) {
						return "IGNORE_ONCE";
					} else {
						return "";
					}
				}
			}
		}
	}
};
var nape_callbacks_PreListener = function(interactionType,options1,options2,handler,precedence,pure) {
	if(pure == null) {
		pure = false;
	}
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.internal = true;
	nape_callbacks_Listener.call(this);
	zpp_$nape_callbacks_ZPP_$Listener.internal = false;
	if(handler == null) {
		throw haxe_Exception.thrown("Error: PreListener must take a handler!");
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$InteractionListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options1),zpp_$nape_callbacks_ZPP_$OptionType.argument(options2),5,3);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_znp = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.pure = pure;
	this.zpp_inner_zn.handlerp = handler;
	if(interactionType == null) {
		throw haxe_Exception.thrown("Error: Cannot set listener interaction type to null");
	}
	var ret = this.zpp_inner_zn.itype;
	var tmp;
	if(ret == 1) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
	} else if(ret == 2) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
	} else if(ret == 4) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
	} else if(ret == 7) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
	} else {
		tmp = null;
	}
	if(tmp != interactionType) {
		var xtype;
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION) {
			xtype = 1;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR) {
				xtype = 2;
			} else {
				if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				xtype = interactionType == zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID ? 4 : 7;
			}
		}
		this.zpp_inner_zn.itype = xtype;
	}
	var ret = this.zpp_inner_zn.itype;
	if(ret == 1) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret == 2) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret == 4) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	} else if(ret == 7) {
		if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
	}
};
nape_callbacks_PreListener.__name__ = true;
nape_callbacks_PreListener.__super__ = nape_callbacks_Listener;
nape_callbacks_PreListener.prototype = $extend(nape_callbacks_Listener.prototype,{
});
var nape_constraint_Constraint = function() {
	this.zpp_inner.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT.zpp_inner);
	if(!nape_constraint_Constraint.zpp_internalAlloc) {
		throw haxe_Exception.thrown("Error: Constraint cannot be instantiated derp!");
	}
};
nape_constraint_Constraint.__name__ = true;
nape_constraint_Constraint.prototype = {
	toString: function() {
		return "{Constraint}";
	}
};
var nape_constraint_AngleJoint = function(body1,body2,jointMin,jointMax,ratio) {
	if(ratio == null) {
		ratio = 1.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$AngleJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b2 == null;
	this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
	if(jointMin != jointMin) {
		throw haxe_Exception.thrown("Error: AngleJoint::jointMin cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
	if(jointMax != jointMax) {
		throw haxe_Exception.thrown("Error: AngleJoint::jointMax cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("AngleJoint::ratio");
	if(ratio != ratio) {
		throw haxe_Exception.thrown("Error: AngleJoint::ratio cannot be NaN");
	}
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
};
nape_constraint_AngleJoint.__name__ = true;
nape_constraint_AngleJoint.__super__ = nape_constraint_Constraint;
nape_constraint_AngleJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
});
var nape_constraint_ConstraintIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ConstraintList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "Constraint" + "Iterator derp!");
	}
};
nape_constraint_ConstraintIterator.__name__ = true;
nape_constraint_ConstraintIterator.get = function(list) {
	var ret;
	if(nape_constraint_ConstraintIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConstraintList.internal = true;
		var ret1 = new nape_constraint_ConstraintIterator();
		zpp_$nape_util_ZPP_$ConstraintList.internal = false;
		ret = ret1;
	} else {
		var r = nape_constraint_ConstraintIterator.zpp_pool;
		nape_constraint_ConstraintIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_constraint_ConstraintIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
			nape_constraint_ConstraintIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_constraint_ConstraintList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ConstraintList();
	this.zpp_inner.outer = this;
};
nape_constraint_ConstraintList.__name__ = true;
nape_constraint_ConstraintList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Constraint" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Constraint" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Constraint" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_constraint_ConstraintIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
				nape_constraint_ConstraintIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_constraint_DistanceJoint = function(body1,body2,anchor1,anchor2,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$DistanceJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b2 == null;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw haxe_Exception.thrown("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor1.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor1.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this1 = _this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var ret = _this;
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = anchor1.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		var o = anchor1;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw haxe_Exception.thrown("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this = this.zpp_inner_zn.wrap_a2;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor2 == null) {
		throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor2.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor2.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = anchor2.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this1 = _this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var ret = _this;
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = anchor2.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
		}
		var inner = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		var o = anchor2;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
	if(jointMin != jointMin) {
		throw haxe_Exception.thrown("Error: DistanceJoint::jointMin cannot be NaN");
	}
	if(jointMin < 0) {
		throw haxe_Exception.thrown("Error: DistanceJoint::jointMin must be >= 0");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
	if(jointMax != jointMax) {
		throw haxe_Exception.thrown("Error: DistanceJoint::jointMax cannot be NaN");
	}
	if(jointMax < 0) {
		throw haxe_Exception.thrown("Error: DistanceJoint::jointMax must be >= 0");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
};
nape_constraint_DistanceJoint.__name__ = true;
nape_constraint_DistanceJoint.__super__ = nape_constraint_Constraint;
nape_constraint_DistanceJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
});
var nape_constraint_LineJoint = function(body1,body2,anchor1,anchor2,direction,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$LineJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b2 == null;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw haxe_Exception.thrown("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor1.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor1.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this1 = _this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var ret = _this;
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = anchor1.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		var o = anchor1;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw haxe_Exception.thrown("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this = this.zpp_inner_zn.wrap_a2;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor2 == null) {
		throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor2.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor2.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = anchor2.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this1 = _this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var ret = _this;
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = anchor2.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
		}
		var inner = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		var o = anchor2;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	if(direction != null && direction.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(direction == null) {
		throw haxe_Exception.thrown("Error: Constraint::" + "direction" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_n == null) {
		this.zpp_inner_zn.setup_n();
	}
	var _this = this.zpp_inner_zn.wrap_n;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(direction != null && direction.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(direction == null) {
		throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
	}
	if(direction != null && direction.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = direction.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = direction.zpp_inner.x;
	if(direction != null && direction.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = direction.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = direction.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this1 = _this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var ret = _this;
	if(direction.zpp_inner.weak) {
		if(direction != null && direction.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = direction.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(direction.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
		}
		var inner = direction.zpp_inner;
		direction.zpp_inner.outer = null;
		direction.zpp_inner = null;
		var o = direction;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	}
	if(this.zpp_inner_zn.wrap_n == null) {
		this.zpp_inner_zn.setup_n();
	}
	this.zpp_inner.immutable_midstep("LineJoint::jointMin");
	if(jointMin != jointMin) {
		throw haxe_Exception.thrown("Error: AngleJoint::jointMin cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("LineJoint::jointMax");
	if(jointMax != jointMax) {
		throw haxe_Exception.thrown("Error: AngleJoint::jointMax cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
};
nape_constraint_LineJoint.__name__ = true;
nape_constraint_LineJoint.__super__ = nape_constraint_Constraint;
nape_constraint_LineJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
});
var nape_constraint_MotorJoint = function(body1,body2,rate,ratio) {
	if(ratio == null) {
		ratio = 1.0;
	}
	if(rate == null) {
		rate = 0.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$MotorJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b2 == null;
	this.zpp_inner.immutable_midstep("MotorJoint::rate");
	if(rate != rate) {
		throw haxe_Exception.thrown("Error: MotorJoint::rate cannot be NaN");
	}
	if(this.zpp_inner_zn.rate != rate) {
		this.zpp_inner_zn.rate = rate;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("MotorJoint::ratio");
	if(ratio != ratio) {
		throw haxe_Exception.thrown("Error: MotorJoint::ratio cannot be NaN");
	}
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
};
nape_constraint_MotorJoint.__name__ = true;
nape_constraint_MotorJoint.__super__ = nape_constraint_Constraint;
nape_constraint_MotorJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
});
var nape_constraint_PivotJoint = function(body1,body2,anchor1,anchor2) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$PivotJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b2 == null;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw haxe_Exception.thrown("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor1.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor1.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this1 = _this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var ret = _this;
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = anchor1.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		var o = anchor1;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw haxe_Exception.thrown("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this = this.zpp_inner_zn.wrap_a2;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor2 == null) {
		throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor2.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor2.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = anchor2.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this1 = _this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var ret = _this;
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = anchor2.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
		}
		var inner = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		var o = anchor2;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
};
nape_constraint_PivotJoint.__name__ = true;
nape_constraint_PivotJoint.__super__ = nape_constraint_Constraint;
nape_constraint_PivotJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
});
var nape_constraint_PulleyJoint = function(body1,body2,body3,body4,anchor1,anchor2,anchor3,anchor4,jointMin,jointMax,ratio) {
	if(ratio == null) {
		ratio = 1.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$PulleyJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1 && this.zpp_inner_zn.b3 != inbody1 && this.zpp_inner_zn.b4 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2 && this.zpp_inner_zn.b3 != inbody2 && this.zpp_inner_zn.b4 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b2 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body3");
	var inbody3 = body3 == null ? null : body3.zpp_inner;
	if(inbody3 != this.zpp_inner_zn.b3) {
		if(this.zpp_inner_zn.b3 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b3) {
				if(this.zpp_inner_zn.b3 != null) {
					this.zpp_inner_zn.b3.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b3.wake();
			}
		}
		this.zpp_inner_zn.b3 = inbody3;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody3 != null && this.zpp_inner_zn.b1 != inbody3 && this.zpp_inner_zn.b2 != inbody3 && this.zpp_inner_zn.b4 != inbody3) {
			if(inbody3 != null) {
				inbody3.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody3 != null) {
				inbody3.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b3 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body4");
	var inbody4 = body4 == null ? null : body4.zpp_inner;
	if(inbody4 != this.zpp_inner_zn.b4) {
		if(this.zpp_inner_zn.b4 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b4) {
				if(this.zpp_inner_zn.b4 != null) {
					this.zpp_inner_zn.b4.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b4.wake();
			}
		}
		this.zpp_inner_zn.b4 = inbody4;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody4 != null && this.zpp_inner_zn.b1 != inbody4 && this.zpp_inner_zn.b2 != inbody4 && this.zpp_inner_zn.b3 != inbody4) {
			if(inbody4 != null) {
				inbody4.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody4 != null) {
				inbody4.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b4 == null;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw haxe_Exception.thrown("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor1.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor1.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this1 = _this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var ret = _this;
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = anchor1.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		var o = anchor1;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw haxe_Exception.thrown("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this = this.zpp_inner_zn.wrap_a2;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor2 == null) {
		throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor2.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor2.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = anchor2.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this1 = _this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var ret = _this;
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = anchor2.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
		}
		var inner = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		var o = anchor2;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	if(anchor3 != null && anchor3.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor3 == null) {
		throw haxe_Exception.thrown("Error: Constraint::" + "anchor3" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a3 == null) {
		this.zpp_inner_zn.setup_a3();
	}
	var _this = this.zpp_inner_zn.wrap_a3;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor3 != null && anchor3.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor3 == null) {
		throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
	}
	if(anchor3 != null && anchor3.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor3.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = anchor3.zpp_inner.x;
	if(anchor3 != null && anchor3.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor3.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = anchor3.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this1 = _this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var ret = _this;
	if(anchor3.zpp_inner.weak) {
		if(anchor3 != null && anchor3.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = anchor3.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(anchor3.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
		}
		var inner = anchor3.zpp_inner;
		anchor3.zpp_inner.outer = null;
		anchor3.zpp_inner = null;
		var o = anchor3;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	}
	if(this.zpp_inner_zn.wrap_a3 == null) {
		this.zpp_inner_zn.setup_a3();
	}
	if(anchor4 != null && anchor4.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor4 == null) {
		throw haxe_Exception.thrown("Error: Constraint::" + "anchor4" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a4 == null) {
		this.zpp_inner_zn.setup_a4();
	}
	var _this = this.zpp_inner_zn.wrap_a4;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor4 != null && anchor4.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor4 == null) {
		throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
	}
	if(anchor4 != null && anchor4.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor4.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = anchor4.zpp_inner.x;
	if(anchor4 != null && anchor4.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor4.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = anchor4.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this1 = _this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var ret = _this;
	if(anchor4.zpp_inner.weak) {
		if(anchor4 != null && anchor4.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = anchor4.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(anchor4.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
		}
		var inner = anchor4.zpp_inner;
		anchor4.zpp_inner.outer = null;
		anchor4.zpp_inner = null;
		var o = anchor4;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	}
	if(this.zpp_inner_zn.wrap_a4 == null) {
		this.zpp_inner_zn.setup_a4();
	}
	this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
	if(ratio != ratio) {
		throw haxe_Exception.thrown("Error: PulleyJoint::ratio cannot be NaN");
	}
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
	if(jointMin != jointMin) {
		throw haxe_Exception.thrown("Error: PulleyJoint::jointMin cannot be NaN");
	}
	if(jointMin < 0) {
		throw haxe_Exception.thrown("Error: PulleyJoint::jointMin must be >= 0");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
	if(jointMax != jointMax) {
		throw haxe_Exception.thrown("Error: PulleyJoint::jointMax cannot be NaN");
	}
	if(jointMax < 0) {
		throw haxe_Exception.thrown("Error: PulleyJoint::jointMax must be >= 0");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
};
nape_constraint_PulleyJoint.__name__ = true;
nape_constraint_PulleyJoint.__super__ = nape_constraint_Constraint;
nape_constraint_PulleyJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
});
var nape_constraint_UserConstraint = function(dimensions,velocityOnly) {
	if(velocityOnly == null) {
		velocityOnly = false;
	}
	this.zpp_inner_zn = null;
	if(dimensions < 1) {
		throw haxe_Exception.thrown("Error: Constraint dimension must be at least 1");
	}
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$UserConstraint(dimensions,velocityOnly);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
};
nape_constraint_UserConstraint.__name__ = true;
nape_constraint_UserConstraint.__super__ = nape_constraint_Constraint;
nape_constraint_UserConstraint.prototype = $extend(nape_constraint_Constraint.prototype,{
	__broken: function() {
	}
	,__validate: function() {
	}
	,__prepare: function() {
	}
	,__position: function(err) {
		throw haxe_Exception.thrown("Error: UserConstraint::__position must be overriden");
	}
	,__velocity: function(err) {
		throw haxe_Exception.thrown("Error: Userconstraint::__velocity must be overriden");
	}
	,__eff_mass: function(eff) {
		throw haxe_Exception.thrown("Error: UserConstraint::__eff_mass must be overriden");
	}
	,__clamp: function(jAcc) {
	}
	,__impulse: function(imp,body,out) {
		throw haxe_Exception.thrown("Error: UserConstraint::__impulse must be overriden");
	}
});
var nape_constraint_WeldJoint = function(body1,body2,anchor1,anchor2,phase) {
	if(phase == null) {
		phase = 0.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$WeldJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.zpp_internalAlloc = true;
	nape_constraint_Constraint.call(this);
	nape_constraint_Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null ? null : body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b1 == null;
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null ? null : body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null ? null : this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	var tmp = this.zpp_inner_zn.b2 == null;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw haxe_Exception.thrown("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor1.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor1.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this1 = _this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var ret = _this;
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = anchor1.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		var o = anchor1;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw haxe_Exception.thrown("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this = this.zpp_inner_zn.wrap_a2;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor2 == null) {
		throw haxe_Exception.thrown("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor2.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = anchor2.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = anchor2.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw haxe_Exception.thrown("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this1 = _this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var ret = _this;
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = anchor2.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
		}
		var inner = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		var o = anchor2;
		o.zpp_pool = null;
		if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
		} else {
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		}
		zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	this.zpp_inner.immutable_midstep("WeldJoint::phase");
	if(phase != phase) {
		throw haxe_Exception.thrown("Error: WeldJoint::phase cannot be NaN");
	}
	if(this.zpp_inner_zn.phase != phase) {
		this.zpp_inner_zn.phase = phase;
		this.zpp_inner.wake();
	}
};
nape_constraint_WeldJoint.__name__ = true;
nape_constraint_WeldJoint.__super__ = nape_constraint_Constraint;
nape_constraint_WeldJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
});
var nape_dynamics_Arbiter = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_dynamics_ZPP_$Arbiter.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate Arbiter derp!");
	}
};
nape_dynamics_Arbiter.__name__ = true;
nape_dynamics_Arbiter.prototype = {
	toString: function() {
		var ret = this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL ? "CollisionArbiter" : this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID ? "FluidArbiter" : "SensorArbiter";
		if(this.zpp_inner.cleared) {
			return ret + "(object-pooled)";
		} else {
			if(!this.zpp_inner.active) {
				throw haxe_Exception.thrown("Error: Arbiter not currently in use");
			}
			var tmp = ret + "(" + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id ? this.zpp_inner.ws2.outer : this.zpp_inner.ws1.outer).toString() + "|";
			if(!this.zpp_inner.active) {
				throw haxe_Exception.thrown("Error: Arbiter not currently in use");
			}
			var tmp1 = tmp + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id ? this.zpp_inner.ws1.outer : this.zpp_inner.ws2.outer).toString() + ")";
			var tmp = this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL ? "[" + ["SD","DD"][this.zpp_inner.colarb.stat ? 0 : 1] + "]" : "";
			if(!this.zpp_inner.active) {
				throw haxe_Exception.thrown("Error: Arbiter not currently in use");
			}
			var tmp2;
			var _g = this.zpp_inner.immState;
			var x = _g;
			if(x == 5) {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				tmp2 = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
			} else if(_g == 1) {
				if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				tmp2 = zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
			} else {
				var x = _g;
				if(x == 6) {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					tmp2 = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
				} else {
					if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					tmp2 = zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE;
				}
			}
			return tmp1 + tmp + "<-" + tmp2.toString();
		}
	}
};
var nape_dynamics_ArbiterIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ArbiterList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "Arbiter" + "Iterator derp!");
	}
};
nape_dynamics_ArbiterIterator.__name__ = true;
nape_dynamics_ArbiterIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ArbiterIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ArbiterList.internal = true;
		var ret1 = new nape_dynamics_ArbiterIterator();
		zpp_$nape_util_ZPP_$ArbiterList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ArbiterIterator.zpp_pool;
		nape_dynamics_ArbiterIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ArbiterIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
			nape_dynamics_ArbiterIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_dynamics_ArbiterList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ArbiterList();
	this.zpp_inner.outer = this;
};
nape_dynamics_ArbiterList.__name__ = true;
nape_dynamics_ArbiterList.prototype = {
	zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) {
					this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			index = this.zpp_gl() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.head;
			while(true) {
				var x = this.zpp_inner.at_ite.elt;
				if(x.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x = this.zpp_inner.at_ite.elt;
				if(x.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_dynamics_ArbiterIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var length = _g.zpp_inner.zpp_gl();
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
				nape_dynamics_ArbiterIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_dynamics_ArbiterType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "ArbiterType" + " derp!");
	}
};
nape_dynamics_ArbiterType.__name__ = true;
nape_dynamics_ArbiterType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION = new nape_dynamics_ArbiterType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION) {
			return "COLLISION";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR = new nape_dynamics_ArbiterType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR) {
				return "SENSOR";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID = new nape_dynamics_ArbiterType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID) {
					return "FLUID";
				} else {
					return "";
				}
			}
		}
	}
};
var nape_dynamics_CollisionArbiter = function() {
	if(!zpp_$nape_dynamics_ZPP_$Arbiter.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate CollisionArbiter derp!");
	}
	nape_dynamics_Arbiter.call(this);
};
nape_dynamics_CollisionArbiter.__name__ = true;
nape_dynamics_CollisionArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_CollisionArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
});
var nape_dynamics_Contact = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_dynamics_ZPP_$Contact.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate Contact derp!");
	}
};
nape_dynamics_Contact.__name__ = true;
nape_dynamics_Contact.prototype = {
	toString: function() {
		if(this.zpp_inner.arbiter == null || this.zpp_inner.arbiter.cleared) {
			return "{object-pooled}";
		} else {
			return "{Contact}";
		}
	}
};
var nape_dynamics_ContactIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ContactList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "Contact" + "Iterator derp!");
	}
};
nape_dynamics_ContactIterator.__name__ = true;
nape_dynamics_ContactIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ContactIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ContactList.internal = true;
		var ret1 = new nape_dynamics_ContactIterator();
		zpp_$nape_util_ZPP_$ContactList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ContactIterator.zpp_pool;
		nape_dynamics_ContactIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ContactIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = 0;
			var cx_ite = _this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) {
					_this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_ContactIterator.zpp_pool;
			nape_dynamics_ContactIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_dynamics_ContactList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ContactList();
	this.zpp_inner.outer = this;
};
nape_dynamics_ContactList.__name__ = true;
nape_dynamics_ContactList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = 0;
				var cx_ite = this.zpp_inner.inner.next;
				while(cx_ite != null) {
					var i = cx_ite;
					if(i.active && i.arbiter.active) {
						this.zpp_inner.user_length++;
					}
					cx_ite = cx_ite.next;
				}
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = 0;
				var cx_ite = this.zpp_inner.inner.next;
				while(cx_ite != null) {
					var i = cx_ite;
					if(i.active && i.arbiter.active) {
						this.zpp_inner.user_length++;
					}
					cx_ite = cx_ite.next;
				}
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.next;
			while(true) {
				var x = this.zpp_inner.at_ite;
				if(x.active && x.arbiter.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x = this.zpp_inner.at_ite;
				if(x.active && x.arbiter.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.wrapper();
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_dynamics_ContactIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = 0;
				var cx_ite = _this.zpp_inner.inner.next;
				while(cx_ite != null) {
					var i = cx_ite;
					if(i.active && i.arbiter.active) {
						_this.zpp_inner.user_length++;
					}
					cx_ite = cx_ite.next;
				}
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_dynamics_ContactIterator.zpp_pool;
				nape_dynamics_ContactIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i1 = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_dynamics_FluidArbiter = function() {
	if(!zpp_$nape_dynamics_ZPP_$Arbiter.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate FluidArbiter derp!");
	}
	nape_dynamics_Arbiter.call(this);
};
nape_dynamics_FluidArbiter.__name__ = true;
nape_dynamics_FluidArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_FluidArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
});
var nape_dynamics_InteractionFilter = function(collisionGroup,collisionMask,sensorGroup,sensorMask,fluidGroup,fluidMask) {
	if(fluidMask == null) {
		fluidMask = -1;
	}
	if(fluidGroup == null) {
		fluidGroup = 1;
	}
	if(sensorMask == null) {
		sensorMask = -1;
	}
	if(sensorGroup == null) {
		sensorGroup = 1;
	}
	if(collisionMask == null) {
		collisionMask = -1;
	}
	if(collisionGroup == null) {
		collisionGroup = 1;
	}
	this.zpp_inner = null;
	if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) {
		this.zpp_inner = new zpp_$nape_dynamics_ZPP_$InteractionFilter();
	} else {
		this.zpp_inner = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	this.zpp_inner.outer = this;
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
};
nape_dynamics_InteractionFilter.__name__ = true;
var nape_dynamics_InteractionGroup = function(ignore) {
	if(ignore == null) {
		ignore = false;
	}
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_dynamics_ZPP_$InteractionGroup();
	this.zpp_inner.outer = this;
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.invalidate(true);
		this.zpp_inner.ignore = ignore;
	}
};
nape_dynamics_InteractionGroup.__name__ = true;
nape_dynamics_InteractionGroup.prototype = {
	toString: function() {
		var ret = "InteractionGroup";
		if(this.zpp_inner.ignore) {
			ret += ":ignore";
		}
		return ret;
	}
};
var nape_dynamics_InteractionGroupIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$InteractionGroupList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "InteractionGroup" + "Iterator derp!");
	}
};
nape_dynamics_InteractionGroupIterator.__name__ = true;
nape_dynamics_InteractionGroupIterator.get = function(list) {
	var ret;
	if(nape_dynamics_InteractionGroupIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = true;
		var ret1 = new nape_dynamics_InteractionGroupIterator();
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_InteractionGroupIterator.zpp_pool;
		nape_dynamics_InteractionGroupIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_InteractionGroupIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_InteractionGroupIterator.zpp_pool;
			nape_dynamics_InteractionGroupIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_dynamics_InteractionGroupList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$InteractionGroupList();
	this.zpp_inner.outer = this;
};
nape_dynamics_InteractionGroupList.__name__ = true;
nape_dynamics_InteractionGroupList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_dynamics_InteractionGroupIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_dynamics_InteractionGroupIterator.zpp_pool;
				nape_dynamics_InteractionGroupIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_geom_AABB = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_inner = null;
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: AABB position cannot be NaN");
	}
	if(width != width || height != height) {
		throw haxe_Exception.thrown("Error: AABB dimensions cannot be NaN");
	}
	var ret;
	if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$AABB();
	} else {
		ret = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = x;
	ret.miny = y;
	ret.maxx = x + width;
	ret.maxy = y + height;
	this.zpp_inner = ret;
	this.zpp_inner.outer = this;
};
nape_geom_AABB.__name__ = true;
nape_geom_AABB.prototype = {
	toString: function() {
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		return this.zpp_inner.toString();
	}
};
var nape_geom_ConvexResult = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_geom_ZPP_$ConvexRayResult.internal) {
		throw haxe_Exception.thrown("Error: ConvexResult cannot be instantiated derp!");
	}
};
nape_geom_ConvexResult.__name__ = true;
nape_geom_ConvexResult.prototype = {
	toString: function() {
		if(this.zpp_inner.next != null) {
			throw haxe_Exception.thrown("Error: This object has been disposed of and cannot be used");
		}
		if(this.zpp_inner.next != null) {
			throw haxe_Exception.thrown("Error: This object has been disposed of and cannot be used");
		}
		var tmp = "{ shape: " + Std.string(this.zpp_inner.shape) + " toi: ";
		if(this.zpp_inner.next != null) {
			throw haxe_Exception.thrown("Error: This object has been disposed of and cannot be used");
		}
		return tmp + this.zpp_inner.toiDistance + " }";
	}
};
var nape_geom_ConvexResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ConvexResultList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "ConvexResult" + "Iterator derp!");
	}
};
nape_geom_ConvexResultIterator.__name__ = true;
nape_geom_ConvexResultIterator.get = function(list) {
	var ret;
	if(nape_geom_ConvexResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConvexResultList.internal = true;
		var ret1 = new nape_geom_ConvexResultIterator();
		zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_ConvexResultIterator.zpp_pool;
		nape_geom_ConvexResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_ConvexResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_ConvexResultIterator.zpp_pool;
			nape_geom_ConvexResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_geom_ConvexResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ConvexResultList();
	this.zpp_inner.outer = this;
};
nape_geom_ConvexResultList.__name__ = true;
nape_geom_ConvexResultList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_geom_ConvexResultIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_ConvexResultIterator.zpp_pool;
				nape_geom_ConvexResultIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_geom_GeomPoly = function(vertices) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$GeomPoly(this);
	if(vertices != null) {
		if(((vertices) instanceof Array)) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) {
					throw haxe_Exception.thrown("Error: Array<Vec2> contains null objects");
				}
				if(!((vite) instanceof nape_geom_Vec2)) {
					throw haxe_Exception.thrown("Error: Array<Vec2> contains non Vec2 objects");
				}
				var v = vite;
				if(v != null && v.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v != null && v.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = v.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				var x = v.zpp_inner.x;
				if(v != null && v.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = v.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				var y = v.zpp_inner.y;
				var ret;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.forced = false;
				ret.x = x;
				ret.y = y;
				var obj = ret;
				if(this.zpp_inner.vertices == null) {
					this.zpp_inner.vertices = obj.prev = obj.next = obj;
				} else {
					obj.prev = this.zpp_inner.vertices;
					obj.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj;
					this.zpp_inner.vertices.next = obj;
				}
				this.zpp_inner.vertices = obj;
			}
		} else if(((vertices) instanceof nape_geom_Vec2List)) {
			var lv = vertices;
			var _g = lv.iterator();
			while(true) {
				_g.zpp_inner.zpp_inner.valmod();
				var length = _g.zpp_inner.zpp_gl();
				_g.zpp_critical = true;
				var tmp;
				if(_g.zpp_i < length) {
					tmp = true;
				} else {
					_g.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
					nape_geom_Vec2Iterator.zpp_pool = _g;
					_g.zpp_inner = null;
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				_g.zpp_critical = false;
				var v = _g.zpp_inner.at(_g.zpp_i++);
				if(v == null) {
					throw haxe_Exception.thrown("Error: Vec2List contains null objects");
				}
				if(v != null && v.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v != null && v.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = v.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				var x = v.zpp_inner.x;
				if(v != null && v.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = v.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				var y = v.zpp_inner.y;
				var ret;
				if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
					ret = new zpp_$nape_geom_ZPP_$GeomVert();
				} else {
					ret = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
					zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.forced = false;
				ret.x = x;
				ret.y = y;
				var obj = ret;
				if(this.zpp_inner.vertices == null) {
					this.zpp_inner.vertices = obj.prev = obj.next = obj;
				} else {
					obj.prev = this.zpp_inner.vertices;
					obj.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj;
					this.zpp_inner.vertices.next = obj;
				}
				this.zpp_inner.vertices = obj;
			}
		} else if(((vertices) instanceof nape_geom_GeomPoly)) {
			var lv = vertices;
			if(lv != null && lv.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			}
			var verts = lv.zpp_inner.vertices;
			if(verts != null) {
				var vite = verts;
				while(true) {
					var x = vite.x;
					var y = vite.y;
					if(y == null) {
						y = 0;
					}
					if(x == null) {
						x = 0;
					}
					if(x != x || y != y) {
						throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
					}
					var ret;
					if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
						ret = new nape_geom_Vec2();
					} else {
						ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
						ret.zpp_pool = null;
						ret.zpp_disp = false;
						if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
							zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
						}
					}
					if(ret.zpp_inner == null) {
						var ret1;
						if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
							ret1 = new zpp_$nape_geom_ZPP_$Vec2();
						} else {
							ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
							zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
							ret1.next = null;
						}
						ret1.weak = false;
						ret1._immutable = false;
						ret1.x = x;
						ret1.y = y;
						ret.zpp_inner = ret1;
						ret.zpp_inner.outer = ret;
					} else {
						if(ret != null && ret.zpp_disp) {
							throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this = ret.zpp_inner;
						if(_this._immutable) {
							throw haxe_Exception.thrown("Error: Vec2 is immutable");
						}
						if(_this._isimmutable != null) {
							_this._isimmutable();
						}
						if(x != x || y != y) {
							throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
						}
						var tmp;
						if(ret != null && ret.zpp_disp) {
							throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this1 = ret.zpp_inner;
						if(_this1._validate != null) {
							_this1._validate();
						}
						if(ret.zpp_inner.x == x) {
							if(ret != null && ret.zpp_disp) {
								throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this2 = ret.zpp_inner;
							if(_this2._validate != null) {
								_this2._validate();
							}
							tmp = ret.zpp_inner.y == y;
						} else {
							tmp = false;
						}
						if(!tmp) {
							ret.zpp_inner.x = x;
							ret.zpp_inner.y = y;
							var _this3 = ret.zpp_inner;
							if(_this3._invalidate != null) {
								_this3._invalidate(_this3);
							}
						}
					}
					ret.zpp_inner.weak = false;
					var v = ret;
					vite = vite.next;
					if(v != null && v.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this4 = v.zpp_inner;
					if(_this4._validate != null) {
						_this4._validate();
					}
					var x1 = v.zpp_inner.x;
					if(v != null && v.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this5 = v.zpp_inner;
					if(_this5._validate != null) {
						_this5._validate();
					}
					var y1 = v.zpp_inner.y;
					var ret2;
					if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
						ret2 = new zpp_$nape_geom_ZPP_$GeomVert();
					} else {
						ret2 = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
						zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret2.next;
						ret2.next = null;
					}
					ret2.forced = false;
					ret2.x = x1;
					ret2.y = y1;
					var obj = ret2;
					if(this.zpp_inner.vertices == null) {
						this.zpp_inner.vertices = obj.prev = obj.next = obj;
					} else {
						obj.prev = this.zpp_inner.vertices;
						obj.next = this.zpp_inner.vertices.next;
						this.zpp_inner.vertices.next.prev = obj;
						this.zpp_inner.vertices.next = obj;
					}
					this.zpp_inner.vertices = obj;
					if(v != null && v.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this6 = v.zpp_inner;
					if(_this6._immutable) {
						throw haxe_Exception.thrown("Error: Vec2 is immutable");
					}
					if(_this6._isimmutable != null) {
						_this6._isimmutable();
					}
					if(v.zpp_inner._inuse) {
						throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
					}
					var inner = v.zpp_inner;
					v.zpp_inner.outer = null;
					v.zpp_inner = null;
					var o = v;
					o.zpp_pool = null;
					if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
					} else {
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
					}
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
					o.zpp_disp = true;
					var o1 = inner;
					if(o1.outer != null) {
						o1.outer.zpp_inner = null;
						o1.outer = null;
					}
					o1._isimmutable = null;
					o1._validate = null;
					o1._invalidate = null;
					o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
					if(vite == verts) {
						break;
					}
				}
			}
		} else {
			throw haxe_Exception.thrown("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>");
		}
		this.skipForward(1);
		if(((vertices) instanceof Array)) {
			var lv = vertices;
			var i = 0;
			while(i < lv.length) {
				var cur = lv[i];
				var tmp;
				if(cur.zpp_inner.weak) {
					if(cur != null && cur.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this = cur.zpp_inner;
					if(_this._immutable) {
						throw haxe_Exception.thrown("Error: Vec2 is immutable");
					}
					if(_this._isimmutable != null) {
						_this._isimmutable();
					}
					if(cur.zpp_inner._inuse) {
						throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
					}
					var inner = cur.zpp_inner;
					cur.zpp_inner.outer = null;
					cur.zpp_inner = null;
					var o = cur;
					o.zpp_pool = null;
					if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
					} else {
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
					}
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
					o.zpp_disp = true;
					var o1 = inner;
					if(o1.outer != null) {
						o1.outer.zpp_inner = null;
						o1.outer = null;
					}
					o1._isimmutable = null;
					o1._validate = null;
					o1._invalidate = null;
					o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
					tmp = true;
				} else {
					tmp = false;
				}
				if(tmp) {
					lv.splice(i,1);
					continue;
				}
				++i;
			}
		} else if(((vertices) instanceof nape_geom_Vec2List)) {
			var lv = vertices;
			if(lv.zpp_inner._validate != null) {
				lv.zpp_inner._validate();
			}
			var ins = lv.zpp_inner.inner;
			var pre = null;
			var cur = ins.head;
			while(cur != null) {
				var x = cur.elt;
				if(x.outer.zpp_inner.weak) {
					cur = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						var _this = x.outer;
						if(_this != null && _this.zpp_disp) {
							throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this1 = _this.zpp_inner;
						if(_this1._immutable) {
							throw haxe_Exception.thrown("Error: Vec2 is immutable");
						}
						if(_this1._isimmutable != null) {
							_this1._isimmutable();
						}
						if(_this.zpp_inner._inuse) {
							throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
						}
						var inner = _this.zpp_inner;
						_this.zpp_inner.outer = null;
						_this.zpp_inner = null;
						var o = _this;
						o.zpp_pool = null;
						if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
							zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
						} else {
							zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
						}
						zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
						o.zpp_disp = true;
						var o1 = inner;
						if(o1.outer != null) {
							o1.outer.zpp_inner = null;
							o1.outer = null;
						}
						o1._isimmutable = null;
						o1._validate = null;
						o1._invalidate = null;
						o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
					}
				} else {
					pre = cur;
					cur = cur.next;
				}
			}
		}
	}
};
nape_geom_GeomPoly.__name__ = true;
nape_geom_GeomPoly.prototype = {
	skipForward: function(times) {
		if(this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		}
		if(this.zpp_inner.vertices != null) {
			if(times > 0) {
				while(times-- > 0) this.zpp_inner.vertices = this.zpp_inner.vertices.next;
			} else if(times < 0) {
				while(times++ < 0) this.zpp_inner.vertices = this.zpp_inner.vertices.prev;
			}
		}
		return this;
	}
	,toString: function() {
		var ret = "GeomPoly[";
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			while(true) {
				var v = nite;
				if(v != this.zpp_inner.vertices) {
					ret += ",";
				}
				ret += "{" + v.x + "," + v.y + "}";
				nite = nite.next;
				if(!(nite != L)) {
					break;
				}
			}
		}
		return ret + "]";
	}
};
var nape_geom_GeomPolyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$GeomPolyList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "GeomPoly" + "Iterator derp!");
	}
};
nape_geom_GeomPolyIterator.__name__ = true;
nape_geom_GeomPolyIterator.get = function(list) {
	var ret;
	if(nape_geom_GeomPolyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$GeomPolyList.internal = true;
		var ret1 = new nape_geom_GeomPolyIterator();
		zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_GeomPolyIterator.zpp_pool;
		nape_geom_GeomPolyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_GeomPolyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_GeomPolyIterator.zpp_pool;
			nape_geom_GeomPolyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_geom_GeomPolyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$GeomPolyList();
	this.zpp_inner.outer = this;
};
nape_geom_GeomPolyList.__name__ = true;
nape_geom_GeomPolyList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_geom_GeomPolyIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_GeomPolyIterator.zpp_pool;
				nape_geom_GeomPolyIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_geom_Mat23 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0.0;
	}
	if(tx == null) {
		tx = 0.0;
	}
	if(d == null) {
		d = 1.0;
	}
	if(c == null) {
		c = 0.0;
	}
	if(b == null) {
		b = 0.0;
	}
	if(a == null) {
		a = 1.0;
	}
	this.zpp_inner = null;
	this.zpp_inner = zpp_$nape_geom_ZPP_$Mat23.get();
	this.zpp_inner.outer = this;
	if(a != a) {
		throw haxe_Exception.thrown("Error: Mat23::" + "a" + " cannot be NaN");
	}
	this.zpp_inner.a = a;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	if(b != b) {
		throw haxe_Exception.thrown("Error: Mat23::" + "b" + " cannot be NaN");
	}
	this.zpp_inner.b = b;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	if(tx != tx) {
		throw haxe_Exception.thrown("Error: Mat23::" + "tx" + " cannot be NaN");
	}
	this.zpp_inner.tx = tx;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	if(c != c) {
		throw haxe_Exception.thrown("Error: Mat23::" + "c" + " cannot be NaN");
	}
	this.zpp_inner.c = c;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	if(d != d) {
		throw haxe_Exception.thrown("Error: Mat23::" + "d" + " cannot be NaN");
	}
	this.zpp_inner.d = d;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	if(ty != ty) {
		throw haxe_Exception.thrown("Error: Mat23::" + "ty" + " cannot be NaN");
	}
	this.zpp_inner.ty = ty;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
};
nape_geom_Mat23.__name__ = true;
nape_geom_Mat23.prototype = {
	toString: function() {
		return "{ a: " + this.zpp_inner.a + " b: " + this.zpp_inner.b + " c: " + this.zpp_inner.c + " d: " + this.zpp_inner.d + " tx: " + this.zpp_inner.tx + " ty: " + this.zpp_inner.ty + " }";
	}
};
var nape_geom_MatMN = function(rows,cols) {
	this.zpp_inner = null;
	if(rows <= 0 || cols <= 0) {
		throw haxe_Exception.thrown("Error: MatMN::dimensions cannot be < 1");
	}
	this.zpp_inner = new zpp_$nape_geom_ZPP_$MatMN(rows,cols);
	this.zpp_inner.outer = this;
};
nape_geom_MatMN.__name__ = true;
nape_geom_MatMN.prototype = {
	toString: function() {
		var ret = "{ ";
		var fst = true;
		var _g = 0;
		var _g1 = this.zpp_inner.m;
		while(_g < _g1) {
			var i = _g++;
			if(!fst) {
				ret += "; ";
			}
			fst = false;
			var _g2 = 0;
			var _g3 = this.zpp_inner.n;
			while(_g2 < _g3) {
				var j = _g2++;
				if(i < 0 || j < 0 || i >= this.zpp_inner.m || j >= this.zpp_inner.n) {
					throw haxe_Exception.thrown("Error: MatMN indices out of range");
				}
				ret += this.zpp_inner.x[i * this.zpp_inner.n + j] + " ";
			}
		}
		ret += "}";
		return ret;
	}
};
var nape_geom_RayResult = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_geom_ZPP_$ConvexRayResult.internal) {
		throw haxe_Exception.thrown("Error: RayResult cannot be instantiated derp!");
	}
};
nape_geom_RayResult.__name__ = true;
nape_geom_RayResult.prototype = {
	toString: function() {
		if(this.zpp_inner.next != null) {
			throw haxe_Exception.thrown("Error: This object has been disposed of and cannot be used");
		}
		if(this.zpp_inner.next != null) {
			throw haxe_Exception.thrown("Error: This object has been disposed of and cannot be used");
		}
		var tmp = "{ shape: " + Std.string(this.zpp_inner.shape) + " distance: ";
		if(this.zpp_inner.next != null) {
			throw haxe_Exception.thrown("Error: This object has been disposed of and cannot be used");
		}
		var tmp1 = tmp + this.zpp_inner.toiDistance + " ?inner: ";
		if(this.zpp_inner.next != null) {
			throw haxe_Exception.thrown("Error: This object has been disposed of and cannot be used");
		}
		return tmp1 + Std.string(this.zpp_inner.inner) + " }";
	}
};
var nape_geom_RayResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$RayResultList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "RayResult" + "Iterator derp!");
	}
};
nape_geom_RayResultIterator.__name__ = true;
nape_geom_RayResultIterator.get = function(list) {
	var ret;
	if(nape_geom_RayResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$RayResultList.internal = true;
		var ret1 = new nape_geom_RayResultIterator();
		zpp_$nape_util_ZPP_$RayResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_RayResultIterator.zpp_pool;
		nape_geom_RayResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_RayResultIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_RayResultIterator.zpp_pool;
			nape_geom_RayResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_geom_RayResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$RayResultList();
	this.zpp_inner.outer = this;
};
nape_geom_RayResultList.__name__ = true;
nape_geom_RayResultList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_geom_RayResultIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_RayResultIterator.zpp_pool;
				nape_geom_RayResultIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_geom_Vec2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_pool = null;
	this.zpp_inner = null;
	if(x != x || y != y) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$Vec2();
	} else {
		ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = false;
	ret.x = x;
	ret.y = y;
	this.zpp_inner = ret;
	this.zpp_inner.outer = this;
};
nape_geom_Vec2.__name__ = true;
nape_geom_Vec2.prototype = {
	toString: function() {
		if(this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		return this.zpp_inner.toString();
	}
};
var nape_geom_Vec2Iterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$Vec2List.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "Vec2" + "Iterator derp!");
	}
};
nape_geom_Vec2Iterator.__name__ = true;
nape_geom_Vec2Iterator.get = function(list) {
	var ret;
	if(nape_geom_Vec2Iterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$Vec2List.internal = true;
		var ret1 = new nape_geom_Vec2Iterator();
		zpp_$nape_util_ZPP_$Vec2List.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_Vec2Iterator.zpp_pool;
		nape_geom_Vec2Iterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_Vec2Iterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
			nape_geom_Vec2Iterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_geom_Vec2List = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$Vec2List();
	this.zpp_inner.outer = this;
};
nape_geom_Vec2List.__name__ = true;
nape_geom_Vec2List.prototype = {
	zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			index = this.zpp_gl() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		var _this = this.zpp_inner.at_ite.elt;
		if(_this.outer == null) {
			_this.outer = new nape_geom_Vec2();
			var o = _this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
			_this.outer.zpp_inner = _this;
		}
		return _this.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_geom_Vec2Iterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var _g = this.iterator();
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var length = _g.zpp_inner.zpp_gl();
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
				nape_geom_Vec2Iterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_geom_Vec3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_pool = null;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$Vec3();
	this.zpp_inner.outer = this;
	if(this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw haxe_Exception.thrown("Error: Vec3 is immutable");
	}
	this.zpp_inner.x = x;
	if(this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	if(this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw haxe_Exception.thrown("Error: Vec3 is immutable");
	}
	this.zpp_inner.y = y;
	if(this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	if(this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw haxe_Exception.thrown("Error: Vec3 is immutable");
	}
	this.zpp_inner.z = z;
	if(this.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
};
nape_geom_Vec3.__name__ = true;
nape_geom_Vec3.get = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec3 == null) {
		ret = new nape_geom_Vec3();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec3;
		zpp_$nape_util_ZPP_$PubPool.poolVec3 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec3) {
			zpp_$nape_util_ZPP_$PubPool.nextVec3 = null;
		}
	}
	ret.setxyz(x,y,z);
	ret.zpp_inner.immutable = false;
	ret.zpp_inner._validate = null;
	return ret;
};
nape_geom_Vec3.prototype = {
	setxyz: function(x,y,z) {
		if(this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		if(this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: Vec3 is immutable");
		}
		this.zpp_inner.x = x;
		if(this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		if(this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: Vec3 is immutable");
		}
		this.zpp_inner.y = y;
		if(this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		if(this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: Vec3 is immutable");
		}
		this.zpp_inner.z = z;
		if(this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		return this;
	}
	,toString: function() {
		if(this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		if(this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		var tmp = "{ x: " + this.zpp_inner.x + " y: ";
		if(this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		var tmp1 = tmp + this.zpp_inner.y + " z: ";
		if(this.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = this.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		return tmp1 + this.zpp_inner.z + " }";
	}
};
var nape_geom_Winding = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "Winding" + " derp!");
	}
};
nape_geom_Winding.__name__ = true;
nape_geom_Winding.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = new nape_geom_Winding();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED) {
			return "UNDEFINED";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE) {
				return "CLOCKWISE";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE = new nape_geom_Winding();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE) {
					return "ANTICLOCKWISE";
				} else {
					return "";
				}
			}
		}
	}
};
var nape_phys_Interactor = function() {
	this.zpp_inner_i = null;
	if(!nape_phys_Interactor.zpp_internalAlloc) {
		throw haxe_Exception.thrown("Error: Cannot instantiate an Interactor, only Shape/Body/Compound");
	}
};
nape_phys_Interactor.__name__ = true;
nape_phys_Interactor.prototype = {
	toString: function() {
		return "";
	}
};
var nape_phys_Body = function(type,position) {
	this.zpp_inner = null;
	nape_phys_Interactor.zpp_internalAlloc = true;
	nape_phys_Interactor.call(this);
	nape_phys_Interactor.zpp_internalAlloc = false;
	this.zpp_inner = new zpp_$nape_phys_ZPP_$Body();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	if(position != null) {
		if(position != null && position.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(position != null && position.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = position.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		this.zpp_inner.posx = position.zpp_inner.x;
		if(position != null && position.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = position.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		this.zpp_inner.posy = position.zpp_inner.y;
	} else {
		this.zpp_inner.posx = 0;
		this.zpp_inner.posy = 0;
	}
	var type1;
	if(type == null) {
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		type1 = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
	} else {
		type1 = type;
	}
	this.zpp_inner.immutable_midstep("Body::type");
	if(this.zpp_inner.world) {
		throw haxe_Exception.thrown("Error: Space::world is immutable");
	}
	if(zpp_$nape_phys_ZPP_$Body.types[this.zpp_inner.type] != type1) {
		if(type1 == null) {
			throw haxe_Exception.thrown("Error: Cannot use null BodyType");
		}
		var ntype;
		if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(type1 == zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC) {
			ntype = 2;
		} else {
			if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			ntype = type1 == zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC ? 3 : 1;
		}
		if(ntype == 1 && this.zpp_inner.space != null) {
			this.zpp_inner.velx = 0;
			this.zpp_inner.vely = 0;
			this.zpp_inner.angvel = 0;
		}
		this.zpp_inner.invalidate_type();
		if(this.zpp_inner.space != null) {
			this.zpp_inner.space.transmitType(this.zpp_inner,ntype);
		} else {
			this.zpp_inner.type = ntype;
		}
	}
	if(position != null) {
		if(position.zpp_inner.weak) {
			if(position != null && position.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = position.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(position.zpp_inner._inuse) {
				throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
			}
			var inner = position.zpp_inner;
			position.zpp_inner.outer = null;
			position.zpp_inner = null;
			var o = position;
			o.zpp_pool = null;
			if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
			} else {
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
			}
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
			o.zpp_disp = true;
			var o = inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		}
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY.zpp_inner);
};
nape_phys_Body.__name__ = true;
nape_phys_Body.__super__ = nape_phys_Interactor;
nape_phys_Body.prototype = $extend(nape_phys_Interactor.prototype,{
	worldPointToLocal: function(point,weak) {
		if(weak == null) {
			weak = false;
		}
		if(point != null && point.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(point == null) {
			throw haxe_Exception.thrown("Error: Cannot transform null Vec2");
		}
		var _this = this.zpp_inner;
		if(_this.zip_axis) {
			_this.zip_axis = false;
			_this.axisx = Math.sin(_this.rot);
			_this.axisy = Math.cos(_this.rot);
		}
		var tempx = 0.0;
		var tempy = 0.0;
		var pointx = 0.0;
		var pointy = 0.0;
		if(point != null && point.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = point.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		pointx = point.zpp_inner.x - this.zpp_inner.posx;
		if(point != null && point.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = point.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		pointy = point.zpp_inner.y - this.zpp_inner.posy;
		tempx = pointx * this.zpp_inner.axisy + pointy * this.zpp_inner.axisx;
		tempy = pointy * this.zpp_inner.axisy - pointx * this.zpp_inner.axisx;
		if(point.zpp_inner.weak) {
			if(point != null && point.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = point.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(point.zpp_inner._inuse) {
				throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
			}
			var inner = point.zpp_inner;
			point.zpp_inner.outer = null;
			point.zpp_inner = null;
			var o = point;
			o.zpp_pool = null;
			if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
			} else {
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
			}
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
			o.zpp_disp = true;
			var o = inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		}
		var x = tempx;
		var y = tempy;
		var weak1 = weak;
		if(weak1 == null) {
			weak1 = false;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = weak1;
		return ret;
	}
	,toString: function() {
		return (this.zpp_inner.world ? "(space::world" : "(" + (this.zpp_inner.type == 2 ? "dynamic" : this.zpp_inner.type == 1 ? "static" : "kinematic")) + ")#" + this.zpp_inner_i.id;
	}
});
var nape_phys_BodyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$BodyList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "Body" + "Iterator derp!");
	}
};
nape_phys_BodyIterator.__name__ = true;
nape_phys_BodyIterator.get = function(list) {
	var ret;
	if(nape_phys_BodyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$BodyList.internal = true;
		var ret1 = new nape_phys_BodyIterator();
		zpp_$nape_util_ZPP_$BodyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_BodyIterator.zpp_pool;
		nape_phys_BodyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_BodyIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_phys_BodyIterator.zpp_pool;
			nape_phys_BodyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_phys_BodyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$BodyList();
	this.zpp_inner.outer = this;
};
nape_phys_BodyList.__name__ = true;
nape_phys_BodyList.prototype = {
	has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Body" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Body" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Body" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_phys_BodyIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_BodyIterator.zpp_pool;
				nape_phys_BodyIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_phys_BodyType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "BodyType" + " derp!");
	}
};
nape_phys_BodyType.__name__ = true;
nape_phys_BodyType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.BodyType_STATIC) {
			return "STATIC";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC) {
				return "DYNAMIC";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC) {
					return "KINEMATIC";
				} else {
					return "";
				}
			}
		}
	}
};
var nape_phys_Compound = function() {
	this.zpp_inner = null;
	nape_phys_Interactor.zpp_internalAlloc = true;
	nape_phys_Interactor.call(this);
	nape_phys_Interactor.zpp_internalAlloc = false;
	this.zpp_inner = new zpp_$nape_phys_ZPP_$Compound();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND.zpp_inner);
};
nape_phys_Compound.__name__ = true;
nape_phys_Compound.__super__ = nape_phys_Interactor;
nape_phys_Compound.prototype = $extend(nape_phys_Interactor.prototype,{
	toString: function() {
		return "Compound" + this.zpp_inner_i.id;
	}
});
var nape_phys_CompoundIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$CompoundList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "Compound" + "Iterator derp!");
	}
};
nape_phys_CompoundIterator.__name__ = true;
nape_phys_CompoundIterator.get = function(list) {
	var ret;
	if(nape_phys_CompoundIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CompoundList.internal = true;
		var ret1 = new nape_phys_CompoundIterator();
		zpp_$nape_util_ZPP_$CompoundList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_CompoundIterator.zpp_pool;
		nape_phys_CompoundIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_CompoundIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_phys_CompoundIterator.zpp_pool;
			nape_phys_CompoundIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_phys_CompoundList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$CompoundList();
	this.zpp_inner.outer = this;
};
nape_phys_CompoundList.__name__ = true;
nape_phys_CompoundList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Compound" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_phys_CompoundIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_CompoundIterator.zpp_pool;
				nape_phys_CompoundIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_phys_FluidProperties = function(density,viscosity) {
	if(viscosity == null) {
		viscosity = 1;
	}
	if(density == null) {
		density = 1;
	}
	this.zpp_inner = null;
	if(zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool == null) {
		this.zpp_inner = new zpp_$nape_phys_ZPP_$FluidProperties();
	} else {
		this.zpp_inner = zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool;
		zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	this.zpp_inner.outer = this;
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) {
			throw haxe_Exception.thrown("Error: FluidProperties::" + "density" + " cannot be NaN");
		}
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate();
	}
	if(viscosity != this.zpp_inner.viscosity) {
		if(viscosity != viscosity) {
			throw haxe_Exception.thrown("Error: FluidProperties::" + "viscosity" + " cannot be NaN");
		}
		if(viscosity < 0) {
			throw haxe_Exception.thrown("Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0");
		}
		this.zpp_inner.viscosity = viscosity / 1;
		this.zpp_inner.invalidate();
	}
};
nape_phys_FluidProperties.__name__ = true;
nape_phys_FluidProperties.prototype = {
	toString: function() {
		return "{ density: " + this.zpp_inner.density * 1000 + " viscosity: " + this.zpp_inner.viscosity + " gravity: " + Std.string(this.zpp_inner.wrap_gravity) + " }";
	}
};
var nape_phys_GravMassMode = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "GravMassMode" + " derp!");
	}
};
nape_phys_GravMassMode.__name__ = true;
nape_phys_GravMassMode.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT) {
			return "DEFAULT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = new nape_phys_GravMassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED) {
				return "FIXED";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED) {
					return "SCALED";
				} else {
					return "";
				}
			}
		}
	}
};
var nape_phys_InertiaMode = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "InertiaMode" + " derp!");
	}
};
nape_phys_InertiaMode.__name__ = true;
nape_phys_InertiaMode.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = new nape_phys_InertiaMode();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT) {
			return "DEFAULT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED) {
				return "FIXED";
			} else {
				return "";
			}
		}
	}
};
var nape_phys_InteractorIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$InteractorList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "Interactor" + "Iterator derp!");
	}
};
nape_phys_InteractorIterator.__name__ = true;
nape_phys_InteractorIterator.get = function(list) {
	var ret;
	if(nape_phys_InteractorIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractorList.internal = true;
		var ret1 = new nape_phys_InteractorIterator();
		zpp_$nape_util_ZPP_$InteractorList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_InteractorIterator.zpp_pool;
		nape_phys_InteractorIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_InteractorIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_phys_InteractorIterator.zpp_pool;
			nape_phys_InteractorIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_phys_InteractorList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$InteractorList();
	this.zpp_inner.outer = this;
};
nape_phys_InteractorList.__name__ = true;
nape_phys_InteractorList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer_i;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_phys_InteractorIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_phys_InteractorIterator.zpp_pool;
				nape_phys_InteractorIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_phys_MassMode = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "MassMode" + " derp!");
	}
};
nape_phys_MassMode.__name__ = true;
nape_phys_MassMode.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT) {
			return "DEFAULT";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.MassMode_FIXED == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = new nape_phys_MassMode();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.MassMode_FIXED) {
				return "FIXED";
			} else {
				return "";
			}
		}
	}
};
var nape_phys_Material = function(elasticity,dynamicFriction,staticFriction,density,rollingFriction) {
	if(rollingFriction == null) {
		rollingFriction = 0.001;
	}
	if(density == null) {
		density = 1;
	}
	if(staticFriction == null) {
		staticFriction = 2.0;
	}
	if(dynamicFriction == null) {
		dynamicFriction = 1.0;
	}
	if(elasticity == null) {
		elasticity = 0.0;
	}
	this.zpp_inner = null;
	if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) {
		this.zpp_inner = new zpp_$nape_phys_ZPP_$Material();
	} else {
		this.zpp_inner = zpp_$nape_phys_ZPP_$Material.zpp_pool;
		zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	this.zpp_inner.outer = this;
	if(elasticity != this.zpp_inner.elasticity) {
		if(elasticity != elasticity) {
			throw haxe_Exception.thrown("Error: Material::" + "elasticity" + " cannot be NaN");
		}
		this.zpp_inner.elasticity = elasticity / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	if(dynamicFriction != this.zpp_inner.dynamicFriction) {
		if(dynamicFriction != dynamicFriction) {
			throw haxe_Exception.thrown("Error: Material::" + "dynamicFriction" + " cannot be NaN");
		}
		if(dynamicFriction < 0) {
			throw haxe_Exception.thrown("Error: Material::" + "dynamicFriction" + " cannot be negative");
		}
		this.zpp_inner.dynamicFriction = dynamicFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ANGDRAG | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	if(staticFriction != this.zpp_inner.staticFriction) {
		if(staticFriction != staticFriction) {
			throw haxe_Exception.thrown("Error: Material::" + "staticFriction" + " cannot be NaN");
		}
		if(staticFriction < 0) {
			throw haxe_Exception.thrown("Error: Material::" + "staticFriction" + " cannot be negative");
		}
		this.zpp_inner.staticFriction = staticFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) {
			throw haxe_Exception.thrown("Error: Material::" + "density" + " cannot be NaN");
		}
		if(density < 0) {
			throw haxe_Exception.thrown("Error: Material::density must be positive");
		}
		if(density < 0) {
			throw haxe_Exception.thrown("Error: Material::" + "density" + " cannot be negative");
		}
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.PROPS);
	}
	if(rollingFriction != this.zpp_inner.rollingFriction) {
		if(rollingFriction != rollingFriction) {
			throw haxe_Exception.thrown("Error: Material::" + "rollingFriction" + " cannot be NaN");
		}
		if(rollingFriction < 0) {
			throw haxe_Exception.thrown("Error: Material::" + "rollingFriction" + " cannot be negative");
		}
		this.zpp_inner.rollingFriction = rollingFriction / 1;
		this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
	}
};
nape_phys_Material.__name__ = true;
nape_phys_Material.prototype = {
	toString: function() {
		return "{ elasticity: " + this.zpp_inner.elasticity + " dynamicFriction: " + this.zpp_inner.dynamicFriction + " staticFriction: " + this.zpp_inner.staticFriction + " density: " + this.zpp_inner.density * 1000 + " rollingFriction: " + this.zpp_inner.rollingFriction + " }";
	}
};
var nape_shape_Shape = function() {
	this.zpp_inner = null;
	nape_phys_Interactor.zpp_internalAlloc = true;
	nape_phys_Interactor.call(this);
	nape_phys_Interactor.zpp_internalAlloc = false;
	if(!nape_shape_Shape.zpp_internalAlloc) {
		throw haxe_Exception.thrown("Error: Shape cannot be instantiated derp!");
	}
};
nape_shape_Shape.__name__ = true;
nape_shape_Shape.__super__ = nape_phys_Interactor;
nape_shape_Shape.prototype = $extend(nape_phys_Interactor.prototype,{
	toString: function() {
		var ret = this.zpp_inner.type == 0 ? "Circle" : "Polygon";
		return ret + "#" + this.zpp_inner_i.id;
	}
});
var nape_shape_Circle = function(radius,localCOM,material,filter) {
	this.zpp_inner_zn = null;
	nape_shape_Shape.zpp_internalAlloc = true;
	nape_shape_Shape.call(this);
	nape_shape_Shape.zpp_internalAlloc = false;
	this.zpp_inner_zn = new zpp_$nape_shape_ZPP_$Circle();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	this.zpp_inner.immutable_midstep("Circle::radius");
	if(this.zpp_inner.body != null && this.zpp_inner.body.type == 1 && this.zpp_inner.body.space != null) {
		throw haxe_Exception.thrown("Error: Cannot modifiy radius of Circle contained in static object once added to space");
	}
	if(radius != this.zpp_inner_zn.radius) {
		if(radius != radius) {
			throw haxe_Exception.thrown("Error: Circle::radius cannot be NaN");
		}
		if(radius < nape_Config.epsilon) {
			throw haxe_Exception.thrown("Error: Circle::radius (" + radius + ") must be > Config.epsilon");
		}
		if(radius > 1e100) {
			throw haxe_Exception.thrown("Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX");
		}
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	if(localCOM == null) {
		this.zpp_inner.localCOMx = 0;
		this.zpp_inner.localCOMy = 0;
	} else {
		if(localCOM != null && localCOM.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(localCOM != null && localCOM.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = localCOM.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		this.zpp_inner.localCOMx = localCOM.zpp_inner.x;
		if(localCOM != null && localCOM.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = localCOM.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		this.zpp_inner.localCOMy = localCOM.zpp_inner.y;
		if(localCOM.zpp_inner.weak) {
			if(localCOM != null && localCOM.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = localCOM.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(localCOM.zpp_inner._inuse) {
				throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
			}
			var inner = localCOM.zpp_inner;
			localCOM.zpp_inner.outer = null;
			localCOM.zpp_inner = null;
			var o = localCOM;
			o.zpp_pool = null;
			if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
			} else {
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
			}
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
			o.zpp_disp = true;
			var o = inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		}
	}
	if(material == null) {
		if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) {
			this.zpp_inner.material = new zpp_$nape_phys_ZPP_$Material();
		} else {
			this.zpp_inner.material = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) {
			throw haxe_Exception.thrown("Error: Cannot assign null as Shape material");
		}
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) {
			this.zpp_inner.filter = new zpp_$nape_dynamics_ZPP_$InteractionFilter();
		} else {
			this.zpp_inner.filter = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) {
			throw haxe_Exception.thrown("Error: Cannot assign null as Shape filter");
		}
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE.zpp_inner);
};
nape_shape_Circle.__name__ = true;
nape_shape_Circle.__super__ = nape_shape_Shape;
nape_shape_Circle.prototype = $extend(nape_shape_Shape.prototype,{
});
var nape_shape_Edge = function() {
	this.zpp_inner = null;
	if(!zpp_$nape_shape_ZPP_$Edge.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate an Edge derp!");
	}
};
nape_shape_Edge.__name__ = true;
nape_shape_Edge.prototype = {
	toString: function() {
		if(this.zpp_inner.polygon == null) {
			return "Edge(object-pooled)";
		} else if(this.zpp_inner.polygon.body == null) {
			this.zpp_inner.polygon.validate_laxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " }";
		} else {
			var _this = this.zpp_inner.polygon;
			if(_this.zip_gaxi) {
				if(_this.body != null) {
					_this.zip_gaxi = false;
					_this.validate_laxi();
					var _this1 = _this.body;
					if(_this1.zip_axis) {
						_this1.zip_axis = false;
						_this1.axisx = Math.sin(_this1.rot);
						_this1.axisy = Math.cos(_this1.rot);
					}
					if(_this.zip_gverts) {
						if(_this.body != null) {
							_this.zip_gverts = false;
							_this.validate_lverts();
							var _this1 = _this.body;
							if(_this1.zip_axis) {
								_this1.zip_axis = false;
								_this1.axisx = Math.sin(_this1.rot);
								_this1.axisy = Math.cos(_this1.rot);
							}
							var li = _this.lverts.next;
							var cx_ite = _this.gverts.next;
							while(cx_ite != null) {
								var g = cx_ite;
								var l = li;
								li = li.next;
								g.x = _this.body.posx + (_this.body.axisy * l.x - _this.body.axisx * l.y);
								g.y = _this.body.posy + (l.x * _this.body.axisx + l.y * _this.body.axisy);
								cx_ite = cx_ite.next;
							}
						}
					}
					var ite = _this.edges.head;
					var cx_ite = _this.gverts.next;
					var u = cx_ite;
					cx_ite = cx_ite.next;
					while(cx_ite != null) {
						var v = cx_ite;
						var e = ite.elt;
						ite = ite.next;
						e.gp0 = u;
						e.gp1 = v;
						e.gnormx = _this.body.axisy * e.lnormx - _this.body.axisx * e.lnormy;
						e.gnormy = e.lnormx * _this.body.axisx + e.lnormy * _this.body.axisy;
						e.gprojection = _this.body.posx * e.gnormx + _this.body.posy * e.gnormy + e.lprojection;
						if(e.wrap_gnorm != null) {
							e.wrap_gnorm.zpp_inner.x = e.gnormx;
							e.wrap_gnorm.zpp_inner.y = e.gnormy;
						}
						e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
						e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
						u = v;
						cx_ite = cx_ite.next;
					}
					var v = _this.gverts.next;
					var e = ite.elt;
					ite = ite.next;
					e.gp0 = u;
					e.gp1 = v;
					e.gnormx = _this.body.axisy * e.lnormx - _this.body.axisx * e.lnormy;
					e.gnormy = e.lnormx * _this.body.axisx + e.lnormy * _this.body.axisy;
					e.gprojection = _this.body.posx * e.gnormx + _this.body.posy * e.gnormy + e.lprojection;
					if(e.wrap_gnorm != null) {
						e.wrap_gnorm.zpp_inner.x = e.gnormx;
						e.wrap_gnorm.zpp_inner.y = e.gnormy;
					}
					e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
					e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
				}
			}
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + this.zpp_inner.gnormx + " y: " + this.zpp_inner.gnormy + " }") + " }";
		}
	}
};
var nape_shape_EdgeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$EdgeList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "Edge" + "Iterator derp!");
	}
};
nape_shape_EdgeIterator.__name__ = true;
nape_shape_EdgeIterator.get = function(list) {
	var ret;
	if(nape_shape_EdgeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$EdgeList.internal = true;
		var ret1 = new nape_shape_EdgeIterator();
		zpp_$nape_util_ZPP_$EdgeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_EdgeIterator.zpp_pool;
		nape_shape_EdgeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_EdgeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_shape_EdgeIterator.zpp_pool;
			nape_shape_EdgeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_shape_EdgeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$EdgeList();
	this.zpp_inner.outer = this;
};
nape_shape_EdgeList.__name__ = true;
nape_shape_EdgeList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			if(index != this.zpp_inner.user_length - 1) {
				this.zpp_inner.valmod();
				if(this.zpp_inner.zip_length) {
					this.zpp_inner.zip_length = false;
					this.zpp_inner.user_length = this.zpp_inner.inner.length;
				}
				index = this.zpp_inner.user_length - 2 - index;
			}
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_shape_EdgeIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_shape_EdgeIterator.zpp_pool;
				nape_shape_EdgeIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_shape_Polygon = function(localVerts,material,filter) {
	this.zpp_inner_zn = null;
	nape_shape_Shape.zpp_internalAlloc = true;
	nape_shape_Shape.call(this);
	nape_shape_Shape.zpp_internalAlloc = false;
	if(localVerts == null) {
		throw haxe_Exception.thrown("Error: localVerts cannot be null");
	}
	this.zpp_inner_zn = new zpp_$nape_shape_ZPP_$Polygon();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	if(((localVerts) instanceof Array)) {
		var lv = localVerts;
		var _g = 0;
		while(_g < lv.length) {
			var vite = lv[_g];
			++_g;
			if(vite == null) {
				throw haxe_Exception.thrown("Error: Array<Vec2> contains null objects");
			}
			if(!((vite) instanceof nape_geom_Vec2)) {
				throw haxe_Exception.thrown("Error: Array<Vec2> contains non Vec2 objects");
			}
			var x = vite;
			if(x != null && x.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			if(this.zpp_inner_zn.wrap_lverts == null) {
				this.zpp_inner_zn.getlverts();
			}
			var tmp = this.zpp_inner_zn.wrap_lverts;
			if(x != null && x.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			if(x.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = x.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			var x1 = x.zpp_inner.x;
			if(x.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = x.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			var y = x.zpp_inner.y;
			var weak = false;
			if(weak == null) {
				weak = false;
			}
			if(y == null) {
				y = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			if(x1 != x1 || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var ret;
			if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
				ret = new nape_geom_Vec2();
			} else {
				ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
				ret.zpp_pool = null;
				ret.zpp_disp = false;
				if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
				}
			}
			if(ret.zpp_inner == null) {
				var ret1;
				if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
					ret1 = new zpp_$nape_geom_ZPP_$Vec2();
				} else {
					ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.weak = false;
				ret1._immutable = false;
				ret1.x = x1;
				ret1.y = y;
				ret.zpp_inner = ret1;
				ret.zpp_inner.outer = ret;
			} else {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._immutable) {
					throw haxe_Exception.thrown("Error: Vec2 is immutable");
				}
				if(_this2._isimmutable != null) {
					_this2._isimmutable();
				}
				if(x1 != x1 || y != y) {
					throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
				}
				var tmp1;
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = ret.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				if(ret.zpp_inner.x == x1) {
					if(ret != null && ret.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this4 = ret.zpp_inner;
					if(_this4._validate != null) {
						_this4._validate();
					}
					tmp1 = ret.zpp_inner.y == y;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					ret.zpp_inner.x = x1;
					ret.zpp_inner.y = y;
					var _this5 = ret.zpp_inner;
					if(_this5._invalidate != null) {
						_this5._invalidate(_this5);
					}
				}
			}
			ret.zpp_inner.weak = weak;
			tmp.push(ret);
		}
	} else if(((localVerts) instanceof nape_geom_Vec2List)) {
		var lv = localVerts;
		var _g = lv.iterator();
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var length = _g.zpp_inner.zpp_gl();
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
				nape_geom_Vec2Iterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var x = _g.zpp_inner.at(_g.zpp_i++);
			if(x == null) {
				throw haxe_Exception.thrown("Error: Vec2List contains null objects");
			}
			if(x != null && x.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			if(this.zpp_inner_zn.wrap_lverts == null) {
				this.zpp_inner_zn.getlverts();
			}
			var tmp1 = this.zpp_inner_zn.wrap_lverts;
			if(x != null && x.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			if(x.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = x.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			var x1 = x.zpp_inner.x;
			if(x.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = x.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			var y = x.zpp_inner.y;
			var weak = false;
			if(weak == null) {
				weak = false;
			}
			if(y == null) {
				y = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			if(x1 != x1 || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var ret;
			if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
				ret = new nape_geom_Vec2();
			} else {
				ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
				ret.zpp_pool = null;
				ret.zpp_disp = false;
				if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
				}
			}
			if(ret.zpp_inner == null) {
				var ret1;
				if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
					ret1 = new zpp_$nape_geom_ZPP_$Vec2();
				} else {
					ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.weak = false;
				ret1._immutable = false;
				ret1.x = x1;
				ret1.y = y;
				ret.zpp_inner = ret1;
				ret.zpp_inner.outer = ret;
			} else {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._immutable) {
					throw haxe_Exception.thrown("Error: Vec2 is immutable");
				}
				if(_this2._isimmutable != null) {
					_this2._isimmutable();
				}
				if(x1 != x1 || y != y) {
					throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
				}
				var tmp2;
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = ret.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				if(ret.zpp_inner.x == x1) {
					if(ret != null && ret.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this4 = ret.zpp_inner;
					if(_this4._validate != null) {
						_this4._validate();
					}
					tmp2 = ret.zpp_inner.y == y;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					ret.zpp_inner.x = x1;
					ret.zpp_inner.y = y;
					var _this5 = ret.zpp_inner;
					if(_this5._invalidate != null) {
						_this5._invalidate(_this5);
					}
				}
			}
			ret.zpp_inner.weak = weak;
			tmp1.push(ret);
		}
	} else if(((localVerts) instanceof nape_geom_GeomPoly)) {
		var lv = localVerts;
		if(lv != null && lv.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		}
		var verts = lv.zpp_inner.vertices;
		if(verts != null) {
			var vite = verts;
			while(true) {
				var x = vite.x;
				var y = vite.y;
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				if(x != x || y != y) {
					throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
				}
				var ret;
				if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
					ret = new nape_geom_Vec2();
				} else {
					ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
					ret.zpp_pool = null;
					ret.zpp_disp = false;
					if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
					}
				}
				if(ret.zpp_inner == null) {
					var ret1;
					if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
						ret1 = new zpp_$nape_geom_ZPP_$Vec2();
					} else {
						ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
						ret1.next = null;
					}
					ret1.weak = false;
					ret1._immutable = false;
					ret1.x = x;
					ret1.y = y;
					ret.zpp_inner = ret1;
					ret.zpp_inner.outer = ret;
				} else {
					if(ret != null && ret.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this = ret.zpp_inner;
					if(_this._immutable) {
						throw haxe_Exception.thrown("Error: Vec2 is immutable");
					}
					if(_this._isimmutable != null) {
						_this._isimmutable();
					}
					if(x != x || y != y) {
						throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
					}
					var tmp;
					if(ret != null && ret.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this1 = ret.zpp_inner;
					if(_this1._validate != null) {
						_this1._validate();
					}
					if(ret.zpp_inner.x == x) {
						if(ret != null && ret.zpp_disp) {
							throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this2 = ret.zpp_inner;
						if(_this2._validate != null) {
							_this2._validate();
						}
						tmp = ret.zpp_inner.y == y;
					} else {
						tmp = false;
					}
					if(!tmp) {
						ret.zpp_inner.x = x;
						ret.zpp_inner.y = y;
						var _this3 = ret.zpp_inner;
						if(_this3._invalidate != null) {
							_this3._invalidate(_this3);
						}
					}
				}
				ret.zpp_inner.weak = false;
				var x1 = ret;
				vite = vite.next;
				if(this.zpp_inner_zn.wrap_lverts == null) {
					this.zpp_inner_zn.getlverts();
				}
				var tmp1 = this.zpp_inner_zn.wrap_lverts;
				if(x1 != null && x1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(x1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this4 = x1.zpp_inner;
				if(_this4._validate != null) {
					_this4._validate();
				}
				var x2 = x1.zpp_inner.x;
				if(x1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this5 = x1.zpp_inner;
				if(_this5._validate != null) {
					_this5._validate();
				}
				var y1 = x1.zpp_inner.y;
				var weak = false;
				if(weak == null) {
					weak = false;
				}
				if(y1 == null) {
					y1 = 0;
				}
				if(x2 == null) {
					x2 = 0;
				}
				if(x2 != x2 || y1 != y1) {
					throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
				}
				var ret2;
				if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
					ret2 = new nape_geom_Vec2();
				} else {
					ret2 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret2.zpp_pool;
					ret2.zpp_pool = null;
					ret2.zpp_disp = false;
					if(ret2 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
					}
				}
				if(ret2.zpp_inner == null) {
					var ret3;
					if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
						ret3 = new zpp_$nape_geom_ZPP_$Vec2();
					} else {
						ret3 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
						zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret3.next;
						ret3.next = null;
					}
					ret3.weak = false;
					ret3._immutable = false;
					ret3.x = x2;
					ret3.y = y1;
					ret2.zpp_inner = ret3;
					ret2.zpp_inner.outer = ret2;
				} else {
					if(ret2 != null && ret2.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this6 = ret2.zpp_inner;
					if(_this6._immutable) {
						throw haxe_Exception.thrown("Error: Vec2 is immutable");
					}
					if(_this6._isimmutable != null) {
						_this6._isimmutable();
					}
					if(x2 != x2 || y1 != y1) {
						throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
					}
					var tmp2;
					if(ret2 != null && ret2.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this7 = ret2.zpp_inner;
					if(_this7._validate != null) {
						_this7._validate();
					}
					if(ret2.zpp_inner.x == x2) {
						if(ret2 != null && ret2.zpp_disp) {
							throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this8 = ret2.zpp_inner;
						if(_this8._validate != null) {
							_this8._validate();
						}
						tmp2 = ret2.zpp_inner.y == y1;
					} else {
						tmp2 = false;
					}
					if(!tmp2) {
						ret2.zpp_inner.x = x2;
						ret2.zpp_inner.y = y1;
						var _this9 = ret2.zpp_inner;
						if(_this9._invalidate != null) {
							_this9._invalidate(_this9);
						}
					}
				}
				ret2.zpp_inner.weak = weak;
				tmp1.push(ret2);
				if(x1 != null && x1.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this10 = x1.zpp_inner;
				if(_this10._immutable) {
					throw haxe_Exception.thrown("Error: Vec2 is immutable");
				}
				if(_this10._isimmutable != null) {
					_this10._isimmutable();
				}
				if(x1.zpp_inner._inuse) {
					throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
				}
				var inner = x1.zpp_inner;
				x1.zpp_inner.outer = null;
				x1.zpp_inner = null;
				var o = x1;
				o.zpp_pool = null;
				if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
					zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
				} else {
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
				}
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
				o.zpp_disp = true;
				var o1 = inner;
				if(o1.outer != null) {
					o1.outer.zpp_inner = null;
					o1.outer = null;
				}
				o1._isimmutable = null;
				o1._validate = null;
				o1._invalidate = null;
				o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
				if(vite == verts) {
					break;
				}
			}
		}
	} else {
		throw haxe_Exception.thrown("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>");
	}
	if(((localVerts) instanceof Array)) {
		var lv = localVerts;
		var i = 0;
		while(i < lv.length) {
			var cur = lv[i];
			var tmp;
			if(cur.zpp_inner.weak) {
				if(cur != null && cur.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = cur.zpp_inner;
				if(_this._immutable) {
					throw haxe_Exception.thrown("Error: Vec2 is immutable");
				}
				if(_this._isimmutable != null) {
					_this._isimmutable();
				}
				if(cur.zpp_inner._inuse) {
					throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
				}
				var inner = cur.zpp_inner;
				cur.zpp_inner.outer = null;
				cur.zpp_inner = null;
				var o = cur;
				o.zpp_pool = null;
				if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
					zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
				} else {
					zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
				}
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
				o.zpp_disp = true;
				var o1 = inner;
				if(o1.outer != null) {
					o1.outer.zpp_inner = null;
					o1.outer = null;
				}
				o1._isimmutable = null;
				o1._validate = null;
				o1._invalidate = null;
				o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				lv.splice(i,1);
				continue;
			}
			++i;
		}
	} else if(((localVerts) instanceof nape_geom_Vec2List)) {
		var lv = localVerts;
		if(lv.zpp_inner._validate != null) {
			lv.zpp_inner._validate();
		}
		var ins = lv.zpp_inner.inner;
		var pre = null;
		var cur = ins.head;
		while(cur != null) {
			var x = cur.elt;
			if(x.outer.zpp_inner.weak) {
				cur = ins.erase(pre);
				if(x.outer.zpp_inner.weak) {
					var _this = x.outer;
					if(_this != null && _this.zpp_disp) {
						throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this1 = _this.zpp_inner;
					if(_this1._immutable) {
						throw haxe_Exception.thrown("Error: Vec2 is immutable");
					}
					if(_this1._isimmutable != null) {
						_this1._isimmutable();
					}
					if(_this.zpp_inner._inuse) {
						throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
					}
					var inner = _this.zpp_inner;
					_this.zpp_inner.outer = null;
					_this.zpp_inner = null;
					var o = _this;
					o.zpp_pool = null;
					if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
						zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
					} else {
						zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
					}
					zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
					o.zpp_disp = true;
					var o1 = inner;
					if(o1.outer != null) {
						o1.outer.zpp_inner = null;
						o1.outer = null;
					}
					o1._isimmutable = null;
					o1._validate = null;
					o1._invalidate = null;
					o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
					zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
				}
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
	}
	if(material == null) {
		if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) {
			this.zpp_inner.material = new zpp_$nape_phys_ZPP_$Material();
		} else {
			this.zpp_inner.material = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) {
			throw haxe_Exception.thrown("Error: Cannot assign null as Shape material");
		}
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) {
			this.zpp_inner.filter = new zpp_$nape_dynamics_ZPP_$InteractionFilter();
		} else {
			this.zpp_inner.filter = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) {
			throw haxe_Exception.thrown("Error: Cannot assign null as Shape filter");
		}
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE.zpp_inner);
};
nape_shape_Polygon.__name__ = true;
nape_shape_Polygon.rect = function(x,y,width,height,weak) {
	if(weak == null) {
		weak = false;
	}
	if(x != x || y != y || width != width || height != height) {
		throw haxe_Exception.thrown("Error: Polygon.rect cannot accept NaN arguments");
	}
	var x1 = x;
	var y1 = y;
	var weak1 = weak;
	if(weak1 == null) {
		weak1 = false;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	if(x1 != x1 || y1 != y1) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret = new nape_geom_Vec2();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret1 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x1;
		ret1.y = y1;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x1 != x1 || y1 != y1) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		if(ret.zpp_inner.x == x1) {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			tmp = ret.zpp_inner.y == y1;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x1;
			ret.zpp_inner.y = y1;
			var _this = ret.zpp_inner;
			if(_this._invalidate != null) {
				_this._invalidate(_this);
			}
		}
	}
	ret.zpp_inner.weak = weak1;
	var x1 = x + width;
	var y1 = y;
	var weak1 = weak;
	if(weak1 == null) {
		weak1 = false;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	if(x1 != x1 || y1 != y1) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var ret1;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret1 = new nape_geom_Vec2();
	} else {
		ret1 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret1.zpp_pool;
		ret1.zpp_pool = null;
		ret1.zpp_disp = false;
		if(ret1 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret1.zpp_inner == null) {
		var ret2;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret2 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret2 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret2.next;
			ret2.next = null;
		}
		ret2.weak = false;
		ret2._immutable = false;
		ret2.x = x1;
		ret2.y = y1;
		ret1.zpp_inner = ret2;
		ret1.zpp_inner.outer = ret1;
	} else {
		if(ret1 != null && ret1.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret1.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x1 != x1 || y1 != y1) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret1 != null && ret1.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret1.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		if(ret1.zpp_inner.x == x1) {
			if(ret1 != null && ret1.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret1.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			tmp = ret1.zpp_inner.y == y1;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret1.zpp_inner.x = x1;
			ret1.zpp_inner.y = y1;
			var _this = ret1.zpp_inner;
			if(_this._invalidate != null) {
				_this._invalidate(_this);
			}
		}
	}
	ret1.zpp_inner.weak = weak1;
	var x1 = x + width;
	var y1 = y + height;
	var weak1 = weak;
	if(weak1 == null) {
		weak1 = false;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	if(x1 != x1 || y1 != y1) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var ret2;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret2 = new nape_geom_Vec2();
	} else {
		ret2 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret2.zpp_pool;
		ret2.zpp_pool = null;
		ret2.zpp_disp = false;
		if(ret2 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret2.zpp_inner == null) {
		var ret3;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret3 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret3 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret3.next;
			ret3.next = null;
		}
		ret3.weak = false;
		ret3._immutable = false;
		ret3.x = x1;
		ret3.y = y1;
		ret2.zpp_inner = ret3;
		ret2.zpp_inner.outer = ret2;
	} else {
		if(ret2 != null && ret2.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret2.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x1 != x1 || y1 != y1) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret2 != null && ret2.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret2.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		if(ret2.zpp_inner.x == x1) {
			if(ret2 != null && ret2.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret2.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			tmp = ret2.zpp_inner.y == y1;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret2.zpp_inner.x = x1;
			ret2.zpp_inner.y = y1;
			var _this = ret2.zpp_inner;
			if(_this._invalidate != null) {
				_this._invalidate(_this);
			}
		}
	}
	ret2.zpp_inner.weak = weak1;
	var x1 = x;
	var y1 = y + height;
	var weak1 = weak;
	if(weak1 == null) {
		weak1 = false;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	if(x1 != x1 || y1 != y1) {
		throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
	}
	var ret3;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret3 = new nape_geom_Vec2();
	} else {
		ret3 = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret3.zpp_pool;
		ret3.zpp_pool = null;
		ret3.zpp_disp = false;
		if(ret3 == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
		}
	}
	if(ret3.zpp_inner == null) {
		var ret4;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret4 = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret4 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret4.next;
			ret4.next = null;
		}
		ret4.weak = false;
		ret4._immutable = false;
		ret4.x = x1;
		ret4.y = y1;
		ret3.zpp_inner = ret4;
		ret3.zpp_inner.outer = ret3;
	} else {
		if(ret3 != null && ret3.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret3.zpp_inner;
		if(_this._immutable) {
			throw haxe_Exception.thrown("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x1 != x1 || y1 != y1) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret3 != null && ret3.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret3.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		if(ret3.zpp_inner.x == x1) {
			if(ret3 != null && ret3.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret3.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			tmp = ret3.zpp_inner.y == y1;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret3.zpp_inner.x = x1;
			ret3.zpp_inner.y = y1;
			var _this = ret3.zpp_inner;
			if(_this._invalidate != null) {
				_this._invalidate(_this);
			}
		}
	}
	ret3.zpp_inner.weak = weak1;
	return [ret,ret1,ret2,ret3];
};
nape_shape_Polygon.__super__ = nape_shape_Shape;
nape_shape_Polygon.prototype = $extend(nape_shape_Shape.prototype,{
});
var nape_shape_ShapeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_$nape_util_ZPP_$ShapeList.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "Shape" + "Iterator derp!");
	}
};
nape_shape_ShapeIterator.__name__ = true;
nape_shape_ShapeIterator.get = function(list) {
	var ret;
	if(nape_shape_ShapeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ShapeList.internal = true;
		var ret1 = new nape_shape_ShapeIterator();
		zpp_$nape_util_ZPP_$ShapeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_ShapeIterator.zpp_pool;
		nape_shape_ShapeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_ShapeIterator.prototype = {
	hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var _this = this.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_shape_ShapeIterator.zpp_pool;
			nape_shape_ShapeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
};
var nape_shape_ShapeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ShapeList();
	this.zpp_inner.outer = this;
};
nape_shape_ShapeList.__name__ = true;
nape_shape_ShapeList.prototype = {
	at: function(index) {
		this.zpp_inner.valmod();
		var tmp;
		if(index >= 0) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			tmp = index >= this.zpp_inner.user_length;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Shape" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Shape" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp;
					if(this.zpp_inner.inner.head == null) {
						tmp = null;
					} else {
						var tmp1 = this.zpp_inner.inner;
						this.zpp_inner.valmod();
						if(this.zpp_inner.zip_length) {
							this.zpp_inner.zip_length = false;
							this.zpp_inner.user_length = this.zpp_inner.inner.length;
						}
						tmp = tmp1.iterator_at(this.zpp_inner.user_length - 1);
					}
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Shape" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		this.zpp_inner.valmod();
		var _g = nape_shape_ShapeIterator.get(this);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = nape_shape_ShapeIterator.zpp_pool;
				nape_shape_ShapeIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			var i = _g.zpp_inner.at(_g.zpp_i++);
			if(!fst) {
				ret += ",";
			}
			ret += i == null ? "NULL" : i.toString();
			fst = false;
		}
		return ret + "]";
	}
};
var nape_shape_ShapeType = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "ShapeType" + " derp!");
	}
};
nape_shape_ShapeType.__name__ = true;
nape_shape_ShapeType.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE = new nape_shape_ShapeType();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE) {
			return "CIRCLE";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON = new nape_shape_ShapeType();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON) {
				return "POLYGON";
			} else {
				return "";
			}
		}
	}
};
var nape_shape_ValidationResult = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "ValidationResult" + " derp!");
	}
};
nape_shape_ValidationResult.__name__ = true;
nape_shape_ValidationResult.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID) {
			return "VALID";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE) {
				return "DEGENERATE";
			} else {
				if(zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = new nape_shape_ValidationResult();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE) {
					return "CONCAVE";
				} else {
					if(zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = new nape_shape_ValidationResult();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(this == zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING) {
						return "SELF_INTERSECTING";
					} else {
						return "";
					}
				}
			}
		}
	}
};
var nape_space_Broadphase = function() {
	if(!zpp_$nape_util_ZPP_$Flags.internal) {
		throw haxe_Exception.thrown("Error: Cannot instantiate " + "Broadphase" + " derp!");
	}
};
nape_space_Broadphase.__name__ = true;
nape_space_Broadphase.prototype = {
	toString: function() {
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(this == zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE) {
			return "DYNAMIC_AABB_TREE";
		} else {
			if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_$nape_util_ZPP_$Flags.internal = true;
				zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
				zpp_$nape_util_ZPP_$Flags.internal = false;
			}
			if(this == zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE) {
				return "SWEEP_AND_PRUNE";
			} else {
				return "";
			}
		}
	}
};
var nape_space_Space = function(gravity,broadphase) {
	this.zpp_inner = null;
	if(gravity != null && gravity.zpp_disp) {
		throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	this.zpp_inner = new zpp_$nape_space_ZPP_$Space(gravity == null ? null : gravity.zpp_inner,broadphase);
	this.zpp_inner.outer = this;
	if(gravity != null) {
		if(gravity.zpp_inner.weak) {
			if(gravity != null && gravity.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = gravity.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(gravity.zpp_inner._inuse) {
				throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
			}
			var inner = gravity.zpp_inner;
			gravity.zpp_inner.outer = null;
			gravity.zpp_inner = null;
			var o = gravity;
			o.zpp_pool = null;
			if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
			} else {
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
			}
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
			o.zpp_disp = true;
			var o = inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		}
	}
};
nape_space_Space.__name__ = true;
nape_space_Space.prototype = {
	step: function(deltaTime,velocityIterations,positionIterations) {
		if(positionIterations == null) {
			positionIterations = 10;
		}
		if(velocityIterations == null) {
			velocityIterations = 10;
		}
		if(deltaTime != deltaTime) {
			throw haxe_Exception.thrown("Error: deltaTime cannot be NaN");
		}
		if(deltaTime <= 0) {
			throw haxe_Exception.thrown("Error: deltaTime must be strictly positive");
		}
		if(velocityIterations <= 0) {
			throw haxe_Exception.thrown("Error: must use atleast one velocity iteration");
		}
		if(positionIterations <= 0) {
			throw haxe_Exception.thrown("Error: must use atleast one position iteration");
		}
		this.zpp_inner.step(deltaTime,velocityIterations,positionIterations);
	}
	,bodiesUnderPoint: function(point,filter,output) {
		if(point != null && point.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(point == null) {
			throw haxe_Exception.thrown("Error: Cannot evaluate objects under a null point :)");
		}
		var ret = this.zpp_inner;
		if(point != null && point.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = point.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		var ret1 = point.zpp_inner.x;
		if(point != null && point.zpp_disp) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = point.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		var ret2 = ret.bodiesUnderPoint(ret1,point.zpp_inner.y,filter == null ? null : filter.zpp_inner,output);
		if(point.zpp_inner.weak) {
			if(point != null && point.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = point.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(point.zpp_inner._inuse) {
				throw haxe_Exception.thrown("Error: This Vec2 is not disposable");
			}
			var inner = point.zpp_inner;
			point.zpp_inner.outer = null;
			point.zpp_inner = null;
			var o = point;
			o.zpp_pool = null;
			if(zpp_$nape_util_ZPP_$PubPool.nextVec2 != null) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2.zpp_pool = o;
			} else {
				zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
			}
			zpp_$nape_util_ZPP_$PubPool.nextVec2 = o;
			o.zpp_disp = true;
			var o = inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		}
		return ret2;
	}
};
var zpp_$nape_ZPP_$ID = function() { };
zpp_$nape_ZPP_$ID.__name__ = true;
zpp_$nape_ZPP_$ID.Interactor = function() {
	return zpp_$nape_ZPP_$ID._Interactor++;
};
zpp_$nape_ZPP_$ID.Constraint = function() {
	return zpp_$nape_ZPP_$ID._Constraint++;
};
zpp_$nape_ZPP_$ID.CbType = function() {
	return zpp_$nape_ZPP_$ID._CbType++;
};
zpp_$nape_ZPP_$ID.CbSet = function() {
	return zpp_$nape_ZPP_$ID._CbSet++;
};
zpp_$nape_ZPP_$ID.Listener = function() {
	return zpp_$nape_ZPP_$ID._Listener++;
};
var zpp_$nape_callbacks_ZPP_$Callback = function() {
	this.constraint = null;
	this.body = null;
	this.pre_swapped = false;
	this.pre_arbiter = null;
	this.wrap_arbiters = null;
	this.set = null;
	this.int2 = null;
	this.int1 = null;
	this.length = 0;
	this.prev = null;
	this.next = null;
	this.listener = null;
	this.event = 0;
	this.outer_int = null;
	this.outer_con = null;
	this.outer_body = null;
	this.length = 0;
};
zpp_$nape_callbacks_ZPP_$Callback.__name__ = true;
zpp_$nape_callbacks_ZPP_$Callback.prototype = {
	wrapper_body: function() {
		if(this.outer_body == null) {
			zpp_$nape_callbacks_ZPP_$Callback.internal = true;
			this.outer_body = new nape_callbacks_BodyCallback();
			zpp_$nape_callbacks_ZPP_$Callback.internal = false;
			this.outer_body.zpp_inner = this;
		}
		return this.outer_body;
	}
	,wrapper_con: function() {
		if(this.outer_con == null) {
			zpp_$nape_callbacks_ZPP_$Callback.internal = true;
			this.outer_con = new nape_callbacks_ConstraintCallback();
			zpp_$nape_callbacks_ZPP_$Callback.internal = false;
			this.outer_con.zpp_inner = this;
		}
		return this.outer_con;
	}
	,wrapper_int: function() {
		if(this.outer_int == null) {
			zpp_$nape_callbacks_ZPP_$Callback.internal = true;
			this.outer_int = new nape_callbacks_InteractionCallback();
			zpp_$nape_callbacks_ZPP_$Callback.internal = false;
			this.outer_int.zpp_inner = this;
		}
		if(this.wrap_arbiters == null) {
			this.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get(this.set.arbiters,true);
		} else {
			this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		}
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
		return this.outer_int;
	}
	,push: function(obj) {
		if(this.prev != null) {
			this.prev.next = obj;
		} else {
			this.next = obj;
		}
		obj.prev = this.prev;
		obj.next = null;
		this.prev = obj;
		this.length++;
	}
	,pop: function() {
		var ret = this.next;
		this.next = ret.next;
		if(this.next == null) {
			this.prev = null;
		} else {
			this.next.prev = null;
		}
		this.length--;
		return ret;
	}
	,empty: function() {
		return this.next == null;
	}
};
var zpp_$nape_callbacks_ZPP_$CbSet = function() {
	this.constraints = null;
	this.interactors = null;
	this.zip_conlisteners = false;
	this.conlisteners = null;
	this.zip_bodylisteners = false;
	this.bodylisteners = null;
	this.zip_listeners = false;
	this.listeners = null;
	this.cbpairs = null;
	this.manager = null;
	this.id = 0;
	this.next = null;
	this.count = 0;
	this.cbTypes = null;
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.zip_listeners = true;
	this.bodylisteners = new zpp_$nape_util_ZNPList_$ZPP_$BodyListener();
	this.zip_bodylisteners = true;
	this.conlisteners = new zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener();
	this.zip_conlisteners = true;
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.id = zpp_$nape_ZPP_$ID.CbSet();
	this.cbpairs = new zpp_$nape_util_ZNPList_$ZPP_$CbSetPair();
};
zpp_$nape_callbacks_ZPP_$CbSet.__name__ = true;
zpp_$nape_callbacks_ZPP_$CbSet.setlt = function(a,b) {
	var i = a.cbTypes.head;
	var j = b.cbTypes.head;
	while(i != null && j != null) {
		var ca = i.elt;
		var cb = j.elt;
		if(ca.id < cb.id) {
			return true;
		}
		if(cb.id < ca.id) {
			return false;
		} else {
			i = i.next;
			j = j.next;
		}
	}
	if(j != null) {
		return i == null;
	} else {
		return false;
	}
};
zpp_$nape_callbacks_ZPP_$CbSet.get = function(cbTypes) {
	var ret;
	if(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool == null) {
		ret = new zpp_$nape_callbacks_ZPP_$CbSet();
	} else {
		ret = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	var ite = null;
	var cx_ite = cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		ite = ret.cbTypes.insert(ite,cb);
		cb.cbsets.add(ret);
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_$nape_callbacks_ZPP_$CbSet.single_intersection = function(a,b,i) {
	var _this = a.manager;
	var ret = null;
	var pairs = a.cbpairs.length < b.cbpairs.length ? a.cbpairs : b.cbpairs;
	var cx_ite = pairs.head;
	while(cx_ite != null) {
		var p = cx_ite.elt;
		if(p.a == a && p.b == b || p.a == b && p.b == a) {
			ret = p;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret == null) {
		var ret1;
		if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
			ret1 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
		} else {
			ret1 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.zip_listeners = true;
		if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b)) {
			ret1.a = a;
			ret1.b = b;
		} else {
			ret1.a = b;
			ret1.b = a;
		}
		ret = ret1;
		a.cbpairs.add(ret);
		if(b != a) {
			b.cbpairs.add(ret);
		}
	}
	if(ret.zip_listeners) {
		ret.zip_listeners = false;
		ret.__validate();
	}
	var ite = ret.listeners.head;
	if(ite != null && ite.elt == i) {
		return ite.next == null;
	} else {
		return false;
	}
};
zpp_$nape_callbacks_ZPP_$CbSet.prototype = {
	invalidate_pairs: function() {
		var cx_ite = this.cbpairs.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_listeners = true;
			cx_ite = cx_ite.next;
		}
	}
	,realvalidate_listeners: function() {
		this.listeners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.listeners.head;
			var cite = cb.listeners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else {
					var tmp;
					if(nite != null) {
						var b = nite.elt;
						tmp = cx.precedence > b.precedence || cx.precedence == b.precedence && cx.id > b.id;
					} else {
						tmp = true;
					}
					if(tmp) {
						if(cx.space == this.manager.space) {
							var _this = this.listeners;
							var ret;
							if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
								ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
							} else {
								ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
								ret.next = null;
							}
							ret.elt = cx;
							var temp = ret;
							if(npre == null) {
								temp.next = _this.head;
								_this.head = temp;
							} else {
								temp.next = npre.next;
								npre.next = temp;
							}
							_this.pushmod = _this.modified = true;
							_this.length++;
							npre = temp;
						}
						cite = cite.next;
					} else {
						npre = nite;
						nite = nite.next;
					}
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,realvalidate_bodylisteners: function() {
		this.bodylisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.bodylisteners.head;
			var cite = cb.bodylisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else {
					var tmp;
					if(nite != null) {
						var b = nite.elt;
						tmp = cx.precedence > b.precedence || cx.precedence == b.precedence && cx.id > b.id;
					} else {
						tmp = true;
					}
					if(tmp) {
						var _this = cx.options;
						if(!_this.nonemptyintersection(this.cbTypes,_this.excludes) && cx.space == this.manager.space) {
							var _this1 = this.bodylisteners;
							var ret;
							if(zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool == null) {
								ret = new zpp_$nape_util_ZNPNode_$ZPP_$BodyListener();
							} else {
								ret = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = ret.next;
								ret.next = null;
							}
							ret.elt = cx;
							var temp = ret;
							if(npre == null) {
								temp.next = _this1.head;
								_this1.head = temp;
							} else {
								temp.next = npre.next;
								npre.next = temp;
							}
							_this1.pushmod = _this1.modified = true;
							_this1.length++;
							npre = temp;
						}
						cite = cite.next;
					} else {
						npre = nite;
						nite = nite.next;
					}
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,realvalidate_conlisteners: function() {
		this.conlisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.conlisteners.head;
			var cite = cb.conlisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else {
					var tmp;
					if(nite != null) {
						var b = nite.elt;
						tmp = cx.precedence > b.precedence || cx.precedence == b.precedence && cx.id > b.id;
					} else {
						tmp = true;
					}
					if(tmp) {
						var _this = cx.options;
						if(!_this.nonemptyintersection(this.cbTypes,_this.excludes) && cx.space == this.manager.space) {
							var _this1 = this.conlisteners;
							var ret;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool == null) {
								ret = new zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener();
							} else {
								ret = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = ret.next;
								ret.next = null;
							}
							ret.elt = cx;
							var temp = ret;
							if(npre == null) {
								temp.next = _this1.head;
								_this1.head = temp;
							} else {
								temp.next = npre.next;
								npre.next = temp;
							}
							_this1.pushmod = _this1.modified = true;
							_this1.length++;
							npre = temp;
						}
						cite = cite.next;
					} else {
						npre = nite;
						nite = nite.next;
					}
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
};
var zpp_$nape_callbacks_ZPP_$CbSetPair = function() {
	this.listeners = null;
	this.zip_listeners = false;
	this.next = null;
	this.b = null;
	this.a = null;
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
};
zpp_$nape_callbacks_ZPP_$CbSetPair.__name__ = true;
zpp_$nape_callbacks_ZPP_$CbSetPair.setlt = function(x,y) {
	if(!zpp_$nape_callbacks_ZPP_$CbSet.setlt(x.a,y.a)) {
		if(x.a == y.a) {
			return zpp_$nape_callbacks_ZPP_$CbSet.setlt(x.b,y.b);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
zpp_$nape_callbacks_ZPP_$CbSetPair.prototype = {
	__validate: function() {
		this.listeners.clear();
		var aite = this.a.listeners.head;
		var bite = this.b.listeners.head;
		while(aite != null && bite != null) {
			var ax = aite.elt;
			var bx = bite.elt;
			if(ax == bx) {
				var tmp;
				var tmp1;
				var _this = ax.options1;
				var xs = this.a.cbTypes;
				if(_this.nonemptyintersection(xs,_this.includes) && !_this.nonemptyintersection(xs,_this.excludes)) {
					var _this1 = ax.options2;
					var xs1 = this.b.cbTypes;
					tmp1 = _this1.nonemptyintersection(xs1,_this1.includes) && !_this1.nonemptyintersection(xs1,_this1.excludes);
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					var _this2 = ax.options2;
					var xs2 = this.a.cbTypes;
					if(_this2.nonemptyintersection(xs2,_this2.includes) && !_this2.nonemptyintersection(xs2,_this2.excludes)) {
						var _this3 = ax.options1;
						var xs3 = this.b.cbTypes;
						tmp = _this3.nonemptyintersection(xs3,_this3.includes) && !_this3.nonemptyintersection(xs3,_this3.excludes);
					} else {
						tmp = false;
					}
				} else {
					tmp = true;
				}
				if(tmp) {
					this.listeners.add(ax);
				}
				aite = aite.next;
				bite = bite.next;
			} else if(ax.precedence > bx.precedence || ax.precedence == bx.precedence && ax.id > bx.id) {
				aite = aite.next;
			} else {
				bite = bite.next;
			}
		}
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			var o = ret;
			o.elt = null;
			o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$BodyListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.prototype = {
	remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			var o = ret;
			o.elt = null;
			o.next = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = o;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.prototype = {
	remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			var o = ret;
			o.elt = null;
			o.next = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = o;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$Constraint = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Constraint.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Constraint.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$Interactor = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Interactor.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Interactor.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$CbSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$CbSet.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CbSet.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
};
var zpp_$nape_callbacks_ZPP_$CbType = function() {
	this.conlisteners = null;
	this.bodylisteners = null;
	this.listeners = null;
	this.cbsets = null;
	this.id = 0;
	this.outer = null;
	this.id = zpp_$nape_ZPP_$ID.CbType();
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.bodylisteners = new zpp_$nape_util_ZNPList_$ZPP_$BodyListener();
	this.conlisteners = new zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.cbsets = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
};
zpp_$nape_callbacks_ZPP_$CbType.__name__ = true;
var zpp_$nape_util_ZPP_$Flags = function() { };
zpp_$nape_util_ZPP_$Flags.__name__ = true;
var zpp_$nape_callbacks_ZPP_$Listener = function() {
	this.space = null;
	this.interaction = null;
	this.constraint = null;
	this.body = null;
	this.precedence = 0;
	this.event = 0;
	this.type = 0;
	this.id = 0;
	this.outer = null;
	this.id = zpp_$nape_ZPP_$ID.Listener();
};
zpp_$nape_callbacks_ZPP_$Listener.__name__ = true;
zpp_$nape_callbacks_ZPP_$Listener.prototype = {
	addedToSpace: function() {
	}
	,removedFromSpace: function() {
	}
};
var zpp_$nape_callbacks_ZPP_$BodyListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.body = this;
	this.type = 0;
	this.options = options.zpp_inner;
};
zpp_$nape_callbacks_ZPP_$BodyListener.__name__ = true;
zpp_$nape_callbacks_ZPP_$BodyListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$BodyListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var pre = null;
			var cx_ite1 = cb.bodylisteners.head;
			while(cx_ite1 != null) {
				var j = cx_ite1.elt;
				if(this.precedence > j.precedence || this.precedence == j.precedence && this.id > j.id) {
					break;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var _this = cb.bodylisteners;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$BodyListener();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = this;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			var cx_ite2 = cb.cbsets.head;
			while(cx_ite2 != null) {
				var cb1 = cx_ite2.elt;
				cb1.zip_bodylisteners = true;
				cx_ite2 = cx_ite2.next;
			}
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.bodylisteners.remove(this);
			var cx_ite1 = cb.cbsets.head;
			while(cx_ite1 != null) {
				var cb1 = cx_ite1.elt;
				cb1.zip_bodylisteners = true;
				cx_ite1 = cx_ite1.next;
			}
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		var _this = this.options;
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = _this.includes.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(cb.id < j.id) {
						break;
					}
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				var _this1 = _this.includes;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = cb;
				var temp = ret;
				if(pre == null) {
					temp.next = _this1.head;
					_this1.head = temp;
				} else {
					temp.next = pre.next;
					pre.next = temp;
				}
				_this1.pushmod = _this1.modified = true;
				_this1.length++;
			} else {
				_this.includes.remove(cb);
			}
		} else if(added) {
			var pre = null;
			var cx_ite = _this.excludes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this1 = _this.excludes;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = cb;
			var temp = ret;
			if(pre == null) {
				temp.next = _this1.head;
				_this1.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this1.pushmod = _this1.modified = true;
			_this1.length++;
		} else {
			_this.excludes.remove(cb);
		}
		this.addedToSpace();
	}
});
var zpp_$nape_callbacks_ZPP_$ConstraintListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.constraint = this;
	this.type = 1;
	this.options = options.zpp_inner;
};
zpp_$nape_callbacks_ZPP_$ConstraintListener.__name__ = true;
zpp_$nape_callbacks_ZPP_$ConstraintListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$ConstraintListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var pre = null;
			var cx_ite1 = cb.conlisteners.head;
			while(cx_ite1 != null) {
				var j = cx_ite1.elt;
				if(this.precedence > j.precedence || this.precedence == j.precedence && this.id > j.id) {
					break;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var _this = cb.conlisteners;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = this;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			var cx_ite2 = cb.cbsets.head;
			while(cx_ite2 != null) {
				var cb1 = cx_ite2.elt;
				cb1.zip_conlisteners = true;
				cx_ite2 = cx_ite2.next;
			}
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.conlisteners.remove(this);
			var cx_ite1 = cb.cbsets.head;
			while(cx_ite1 != null) {
				var cb1 = cx_ite1.elt;
				cb1.zip_conlisteners = true;
				cx_ite1 = cx_ite1.next;
			}
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		var _this = this.options;
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = _this.includes.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(cb.id < j.id) {
						break;
					}
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				var _this1 = _this.includes;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = cb;
				var temp = ret;
				if(pre == null) {
					temp.next = _this1.head;
					_this1.head = temp;
				} else {
					temp.next = pre.next;
					pre.next = temp;
				}
				_this1.pushmod = _this1.modified = true;
				_this1.length++;
			} else {
				_this.includes.remove(cb);
			}
		} else if(added) {
			var pre = null;
			var cx_ite = _this.excludes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this1 = _this.excludes;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = cb;
			var temp = ret;
			if(pre == null) {
				temp.next = _this1.head;
				_this1.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this1.pushmod = _this1.modified = true;
			_this1.length++;
		} else {
			_this.excludes.remove(cb);
		}
		this.addedToSpace();
	}
});
var zpp_$nape_util_ZNPList_$ZPP_$CbType = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$CbType.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CbType.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			var o = ret;
			o.elt = null;
			o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = o;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
};
var zpp_$nape_callbacks_ZPP_$InteractionListener = function(options1,options2,event,type) {
	this.handlerp = null;
	this.pure = false;
	this.allowSleepingCallbacks = false;
	this.handleri = null;
	this.options2 = null;
	this.options1 = null;
	this.itype = 0;
	this.outer_znp = null;
	this.outer_zni = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.type = type;
	this.interaction = this;
	this.event = event;
	this.options1 = options1.zpp_inner;
	this.options2 = options2.zpp_inner;
	this.allowSleepingCallbacks = false;
};
zpp_$nape_callbacks_ZPP_$InteractionListener.__name__ = true;
zpp_$nape_callbacks_ZPP_$InteractionListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$InteractionListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	with_uniquesets: function(fresh) {
		var _gthis = this;
		var set;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
			set = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
		} else {
			set = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = set.next;
			set.next = null;
		}
		set.lt = zpp_$nape_callbacks_ZPP_$CbSetPair.setlt;
		var B = this.options2.includes;
		var U = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbType;
		var V = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbType;
		var W = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbType;
		var aite = this.options1.includes.head;
		var bite = B.head;
		while(aite != null && bite != null) {
			var a = aite.elt;
			var b = bite.elt;
			if(a == b) {
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = a;
				var temp = ret;
				temp.next = W.head;
				W.head = temp;
				W.modified = true;
				W.length++;
				aite = aite.next;
				bite = bite.next;
			} else if(a.id < b.id) {
				var ret1;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.elt = a;
				var temp1 = ret1;
				temp1.next = U.head;
				U.head = temp1;
				U.modified = true;
				U.length++;
				aite = aite.next;
			} else {
				var ret2;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret2 = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.elt = b;
				var temp2 = ret2;
				temp2.next = V.head;
				V.head = temp2;
				V.modified = true;
				V.length++;
				bite = bite.next;
			}
		}
		while(aite != null) {
			var o = aite.elt;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = o;
			var temp = ret;
			temp.next = U.head;
			U.head = temp;
			U.modified = true;
			U.length++;
			aite = aite.next;
		}
		while(bite != null) {
			var o = bite.elt;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = o;
			var temp = ret;
			temp.next = V.head;
			V.head = temp;
			V.modified = true;
			V.length++;
			bite = bite.next;
		}
		while(U.head != null) {
			var x = U.pop_unsafe();
			var cx_ite = B.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				var B1 = y.cbsets;
				var U1 = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
				var V1 = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
				var W1 = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
				var aite = x.cbsets.head;
				var bite = B1.head;
				while(aite != null && bite != null) {
					var a = aite.elt;
					var b = bite.elt;
					if(a == b) {
						var ret;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret.next;
							ret.next = null;
						}
						ret.elt = a;
						var temp = ret;
						temp.next = W1.head;
						W1.head = temp;
						W1.modified = true;
						W1.length++;
						aite = aite.next;
						bite = bite.next;
					} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b)) {
						var ret1;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret1.next;
							ret1.next = null;
						}
						ret1.elt = a;
						var temp1 = ret1;
						temp1.next = U1.head;
						U1.head = temp1;
						U1.modified = true;
						U1.length++;
						aite = aite.next;
					} else {
						var ret2;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret2 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret2.next;
							ret2.next = null;
						}
						ret2.elt = b;
						var temp2 = ret2;
						temp2.next = V1.head;
						V1.head = temp2;
						V1.modified = true;
						V1.length++;
						bite = bite.next;
					}
				}
				while(aite != null) {
					var o = aite.elt;
					var ret3;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret3 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret3.next;
						ret3.next = null;
					}
					ret3.elt = o;
					var temp3 = ret3;
					temp3.next = U1.head;
					U1.head = temp3;
					U1.modified = true;
					U1.length++;
					aite = aite.next;
				}
				while(bite != null) {
					var o1 = bite.elt;
					var ret4;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret4 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret4.next;
						ret4.next = null;
					}
					ret4.elt = o1;
					var temp4 = ret4;
					temp4.next = V1.head;
					V1.head = temp4;
					V1.modified = true;
					V1.length++;
					bite = bite.next;
				}
				while(U1.head != null) {
					var x1 = U1.pop_unsafe();
					var cx_ite1 = B1.head;
					while(cx_ite1 != null) {
						var y1 = cx_ite1.elt;
						x1.validate();
						y1.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x1,y1,_gthis)) {
							var ret5;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret5 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret5 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret5.next;
								ret5.next = null;
							}
							ret5.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x1,y1)) {
								ret5.a = x1;
								ret5.b = y1;
							} else {
								ret5.a = y1;
								ret5.b = x1;
							}
							set.try_insert(ret5);
						}
						cx_ite1 = cx_ite1.next;
					}
				}
				while(V1.head != null) {
					var x2 = V1.pop_unsafe();
					var cx_ite2 = W1.head;
					while(cx_ite2 != null) {
						var y2 = cx_ite2.elt;
						x2.validate();
						y2.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x2,y2,_gthis)) {
							var ret6;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret6 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret6 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret6.next;
								ret6.next = null;
							}
							ret6.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x2,y2)) {
								ret6.a = x2;
								ret6.b = y2;
							} else {
								ret6.a = y2;
								ret6.b = x2;
							}
							set.try_insert(ret6);
						}
						cx_ite2 = cx_ite2.next;
					}
				}
				while(W1.head != null) {
					var x3 = W1.pop_unsafe();
					x3.validate();
					x3.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x3,x3,_gthis)) {
						var ret7;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret7 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret7 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret7.next;
							ret7.next = null;
						}
						ret7.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x3,x3)) {
							ret7.a = x3;
							ret7.b = x3;
						} else {
							ret7.a = x3;
							ret7.b = x3;
						}
						set.try_insert(ret7);
					}
					var cx_ite3 = W1.head;
					while(cx_ite3 != null) {
						var y3 = cx_ite3.elt;
						x3.validate();
						y3.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x3,y3,_gthis)) {
							var ret8;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret8 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret8 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret8.next;
								ret8.next = null;
							}
							ret8.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x3,y3)) {
								ret8.a = x3;
								ret8.b = y3;
							} else {
								ret8.a = y3;
								ret8.b = x3;
							}
							set.try_insert(ret8);
						}
						cx_ite3 = cx_ite3.next;
					}
				}
				cx_ite = cx_ite.next;
			}
		}
		while(V.head != null) {
			var x = V.pop_unsafe();
			var cx_ite = W.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				var B = y.cbsets;
				var U = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
				var V1 = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
				var W1 = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
				var aite = x.cbsets.head;
				var bite = B.head;
				while(aite != null && bite != null) {
					var a = aite.elt;
					var b = bite.elt;
					if(a == b) {
						var ret;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret.next;
							ret.next = null;
						}
						ret.elt = a;
						var temp = ret;
						temp.next = W1.head;
						W1.head = temp;
						W1.modified = true;
						W1.length++;
						aite = aite.next;
						bite = bite.next;
					} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b)) {
						var ret1;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret1.next;
							ret1.next = null;
						}
						ret1.elt = a;
						var temp1 = ret1;
						temp1.next = U.head;
						U.head = temp1;
						U.modified = true;
						U.length++;
						aite = aite.next;
					} else {
						var ret2;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret2 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret2.next;
							ret2.next = null;
						}
						ret2.elt = b;
						var temp2 = ret2;
						temp2.next = V1.head;
						V1.head = temp2;
						V1.modified = true;
						V1.length++;
						bite = bite.next;
					}
				}
				while(aite != null) {
					var o = aite.elt;
					var ret3;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret3 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret3.next;
						ret3.next = null;
					}
					ret3.elt = o;
					var temp3 = ret3;
					temp3.next = U.head;
					U.head = temp3;
					U.modified = true;
					U.length++;
					aite = aite.next;
				}
				while(bite != null) {
					var o1 = bite.elt;
					var ret4;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret4 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret4.next;
						ret4.next = null;
					}
					ret4.elt = o1;
					var temp4 = ret4;
					temp4.next = V1.head;
					V1.head = temp4;
					V1.modified = true;
					V1.length++;
					bite = bite.next;
				}
				while(U.head != null) {
					var x1 = U.pop_unsafe();
					var cx_ite1 = B.head;
					while(cx_ite1 != null) {
						var y1 = cx_ite1.elt;
						x1.validate();
						y1.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x1,y1,_gthis)) {
							var ret5;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret5 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret5 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret5.next;
								ret5.next = null;
							}
							ret5.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x1,y1)) {
								ret5.a = x1;
								ret5.b = y1;
							} else {
								ret5.a = y1;
								ret5.b = x1;
							}
							set.try_insert(ret5);
						}
						cx_ite1 = cx_ite1.next;
					}
				}
				while(V1.head != null) {
					var x2 = V1.pop_unsafe();
					var cx_ite2 = W1.head;
					while(cx_ite2 != null) {
						var y2 = cx_ite2.elt;
						x2.validate();
						y2.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x2,y2,_gthis)) {
							var ret6;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret6 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret6 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret6.next;
								ret6.next = null;
							}
							ret6.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x2,y2)) {
								ret6.a = x2;
								ret6.b = y2;
							} else {
								ret6.a = y2;
								ret6.b = x2;
							}
							set.try_insert(ret6);
						}
						cx_ite2 = cx_ite2.next;
					}
				}
				while(W1.head != null) {
					var x3 = W1.pop_unsafe();
					x3.validate();
					x3.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x3,x3,_gthis)) {
						var ret7;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret7 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret7 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret7.next;
							ret7.next = null;
						}
						ret7.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x3,x3)) {
							ret7.a = x3;
							ret7.b = x3;
						} else {
							ret7.a = x3;
							ret7.b = x3;
						}
						set.try_insert(ret7);
					}
					var cx_ite3 = W1.head;
					while(cx_ite3 != null) {
						var y3 = cx_ite3.elt;
						x3.validate();
						y3.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x3,y3,_gthis)) {
							var ret8;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret8 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret8 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret8.next;
								ret8.next = null;
							}
							ret8.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x3,y3)) {
								ret8.a = x3;
								ret8.b = y3;
							} else {
								ret8.a = y3;
								ret8.b = x3;
							}
							set.try_insert(ret8);
						}
						cx_ite3 = cx_ite3.next;
					}
				}
				cx_ite = cx_ite.next;
			}
		}
		while(W.head != null) {
			var x = W.pop_unsafe();
			var B = x.cbsets;
			var U = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
			var V = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
			var W1 = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
			var aite = x.cbsets.head;
			var bite = B.head;
			while(aite != null && bite != null) {
				var a = aite.elt;
				var b = bite.elt;
				if(a == b) {
					var ret;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret.next;
						ret.next = null;
					}
					ret.elt = a;
					var temp = ret;
					temp.next = W1.head;
					W1.head = temp;
					W1.modified = true;
					W1.length++;
					aite = aite.next;
					bite = bite.next;
				} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b)) {
					var ret1;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret1 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret1.next;
						ret1.next = null;
					}
					ret1.elt = a;
					var temp1 = ret1;
					temp1.next = U.head;
					U.head = temp1;
					U.modified = true;
					U.length++;
					aite = aite.next;
				} else {
					var ret2;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret2 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret2.next;
						ret2.next = null;
					}
					ret2.elt = b;
					var temp2 = ret2;
					temp2.next = V.head;
					V.head = temp2;
					V.modified = true;
					V.length++;
					bite = bite.next;
				}
			}
			while(aite != null) {
				var o = aite.elt;
				var ret3;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
					ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
				} else {
					ret3 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret3.next;
					ret3.next = null;
				}
				ret3.elt = o;
				var temp3 = ret3;
				temp3.next = U.head;
				U.head = temp3;
				U.modified = true;
				U.length++;
				aite = aite.next;
			}
			while(bite != null) {
				var o1 = bite.elt;
				var ret4;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
					ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
				} else {
					ret4 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret4.next;
					ret4.next = null;
				}
				ret4.elt = o1;
				var temp4 = ret4;
				temp4.next = V.head;
				V.head = temp4;
				V.modified = true;
				V.length++;
				bite = bite.next;
			}
			while(U.head != null) {
				var x1 = U.pop_unsafe();
				var cx_ite = B.head;
				while(cx_ite != null) {
					var y = cx_ite.elt;
					x1.validate();
					y.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x1,y,_gthis)) {
						var ret5;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret5 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret5 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret5.next;
							ret5.next = null;
						}
						ret5.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x1,y)) {
							ret5.a = x1;
							ret5.b = y;
						} else {
							ret5.a = y;
							ret5.b = x1;
						}
						set.try_insert(ret5);
					}
					cx_ite = cx_ite.next;
				}
			}
			while(V.head != null) {
				var x2 = V.pop_unsafe();
				var cx_ite1 = W1.head;
				while(cx_ite1 != null) {
					var y1 = cx_ite1.elt;
					x2.validate();
					y1.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x2,y1,_gthis)) {
						var ret6;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret6 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret6 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret6.next;
							ret6.next = null;
						}
						ret6.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x2,y1)) {
							ret6.a = x2;
							ret6.b = y1;
						} else {
							ret6.a = y1;
							ret6.b = x2;
						}
						set.try_insert(ret6);
					}
					cx_ite1 = cx_ite1.next;
				}
			}
			while(W1.head != null) {
				var x3 = W1.pop_unsafe();
				x3.validate();
				x3.validate();
				if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x3,x3,_gthis)) {
					var ret7;
					if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
						ret7 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
					} else {
						ret7 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret7.next;
						ret7.next = null;
					}
					ret7.zip_listeners = true;
					if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x3,x3)) {
						ret7.a = x3;
						ret7.b = x3;
					} else {
						ret7.a = x3;
						ret7.b = x3;
					}
					set.try_insert(ret7);
				}
				var cx_ite2 = W1.head;
				while(cx_ite2 != null) {
					var y2 = cx_ite2.elt;
					x3.validate();
					y2.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x3,y2,_gthis)) {
						var ret8;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret8 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret8 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret8.next;
							ret8.next = null;
						}
						ret8.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x3,y2)) {
							ret8.a = x3;
							ret8.b = y2;
						} else {
							ret8.a = y2;
							ret8.b = x3;
						}
						set.try_insert(ret8);
					}
					cx_ite2 = cx_ite2.next;
				}
			}
			var cx_ite3 = W.head;
			while(cx_ite3 != null) {
				var y3 = cx_ite3.elt;
				var B1 = y3.cbsets;
				var U1 = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
				var V1 = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
				var W2 = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
				var aite1 = x.cbsets.head;
				var bite1 = B1.head;
				while(aite1 != null && bite1 != null) {
					var a1 = aite1.elt;
					var b1 = bite1.elt;
					if(a1 == b1) {
						var ret9;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret9 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret9 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret9.next;
							ret9.next = null;
						}
						ret9.elt = a1;
						var temp5 = ret9;
						temp5.next = W2.head;
						W2.head = temp5;
						W2.modified = true;
						W2.length++;
						aite1 = aite1.next;
						bite1 = bite1.next;
					} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a1,b1)) {
						var ret10;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret10 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret10 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret10.next;
							ret10.next = null;
						}
						ret10.elt = a1;
						var temp6 = ret10;
						temp6.next = U1.head;
						U1.head = temp6;
						U1.modified = true;
						U1.length++;
						aite1 = aite1.next;
					} else {
						var ret11;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
							ret11 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
						} else {
							ret11 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret11.next;
							ret11.next = null;
						}
						ret11.elt = b1;
						var temp7 = ret11;
						temp7.next = V1.head;
						V1.head = temp7;
						V1.modified = true;
						V1.length++;
						bite1 = bite1.next;
					}
				}
				while(aite1 != null) {
					var o2 = aite1.elt;
					var ret12;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret12 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret12 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret12.next;
						ret12.next = null;
					}
					ret12.elt = o2;
					var temp8 = ret12;
					temp8.next = U1.head;
					U1.head = temp8;
					U1.modified = true;
					U1.length++;
					aite1 = aite1.next;
				}
				while(bite1 != null) {
					var o3 = bite1.elt;
					var ret13;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
						ret13 = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
					} else {
						ret13 = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret13.next;
						ret13.next = null;
					}
					ret13.elt = o3;
					var temp9 = ret13;
					temp9.next = V1.head;
					V1.head = temp9;
					V1.modified = true;
					V1.length++;
					bite1 = bite1.next;
				}
				while(U1.head != null) {
					var x4 = U1.pop_unsafe();
					var cx_ite4 = B1.head;
					while(cx_ite4 != null) {
						var y4 = cx_ite4.elt;
						x4.validate();
						y4.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x4,y4,_gthis)) {
							var ret14;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret14 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret14 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret14.next;
								ret14.next = null;
							}
							ret14.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x4,y4)) {
								ret14.a = x4;
								ret14.b = y4;
							} else {
								ret14.a = y4;
								ret14.b = x4;
							}
							set.try_insert(ret14);
						}
						cx_ite4 = cx_ite4.next;
					}
				}
				while(V1.head != null) {
					var x5 = V1.pop_unsafe();
					var cx_ite5 = W2.head;
					while(cx_ite5 != null) {
						var y5 = cx_ite5.elt;
						x5.validate();
						y5.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x5,y5,_gthis)) {
							var ret15;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret15 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret15 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret15.next;
								ret15.next = null;
							}
							ret15.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x5,y5)) {
								ret15.a = x5;
								ret15.b = y5;
							} else {
								ret15.a = y5;
								ret15.b = x5;
							}
							set.try_insert(ret15);
						}
						cx_ite5 = cx_ite5.next;
					}
				}
				while(W2.head != null) {
					var x6 = W2.pop_unsafe();
					x6.validate();
					x6.validate();
					if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x6,x6,_gthis)) {
						var ret16;
						if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
							ret16 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
						} else {
							ret16 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
							zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret16.next;
							ret16.next = null;
						}
						ret16.zip_listeners = true;
						if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x6,x6)) {
							ret16.a = x6;
							ret16.b = x6;
						} else {
							ret16.a = x6;
							ret16.b = x6;
						}
						set.try_insert(ret16);
					}
					var cx_ite6 = W2.head;
					while(cx_ite6 != null) {
						var y6 = cx_ite6.elt;
						x6.validate();
						y6.validate();
						if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(x6,y6,_gthis)) {
							var ret17;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret17 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret17 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret17.next;
								ret17.next = null;
							}
							ret17.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(x6,y6)) {
								ret17.a = x6;
								ret17.b = y6;
							} else {
								ret17.a = y6;
								ret17.b = x6;
							}
							set.try_insert(ret17);
						}
						cx_ite6 = cx_ite6.next;
					}
				}
				cx_ite3 = cx_ite3.next;
			}
		}
		if(set.parent != null) {
			var cur = set.parent;
			while(cur != null) if(cur.prev != null) {
				cur = cur.prev;
			} else if(cur.next != null) {
				cur = cur.next;
			} else {
				var pair = cur.data;
				if(fresh) {
					_gthis.space.freshListenerType(pair.a,pair.b);
				} else {
					_gthis.space.nullListenerType(pair.a,pair.b);
				}
				var o = pair;
				o.a = o.b = null;
				o.listeners.clear();
				o.next = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = o;
				var ret = cur.parent;
				if(ret != null) {
					if(cur == ret.prev) {
						ret.prev = null;
					} else {
						ret.next = null;
					}
					cur.parent = null;
				}
				var o1 = cur;
				o1.data = null;
				o1.lt = null;
				o1.swapped = null;
				o1.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o1;
				cur = ret;
			}
			set.parent = null;
		}
		var o = set;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o;
	}
	,addedToSpace: function() {
		var _gthis = this;
		var pre = this.type == 3;
		var ite1 = this.options1.includes.head;
		var ite2 = this.options2.includes.head;
		while(ite1 != null && ite2 != null) {
			var cb1 = ite1.elt;
			var cb2 = ite2.elt;
			if(cb1 == cb2) {
				var pre1 = null;
				var cx_ite = cb1.listeners.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(_gthis.precedence > j.precedence || _gthis.precedence == j.precedence && _gthis.id > j.id) {
						break;
					}
					pre1 = cx_ite;
					cx_ite = cx_ite.next;
				}
				var _this = cb1.listeners;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = _gthis;
				var temp = ret;
				if(pre1 == null) {
					temp.next = _this.head;
					_this.head = temp;
				} else {
					temp.next = pre1.next;
					pre1.next = temp;
				}
				_this.pushmod = _this.modified = true;
				_this.length++;
				var cx_ite1 = cb1.cbsets.head;
				while(cx_ite1 != null) {
					var cb = cx_ite1.elt;
					cb.zip_listeners = true;
					cb.invalidate_pairs();
					cx_ite1 = cx_ite1.next;
				}
				if(pre) {
					var cx_ite2 = cb1.interactors.head;
					while(cx_ite2 != null) {
						var i = cx_ite2.elt;
						i.wake();
						cx_ite2 = cx_ite2.next;
					}
				}
				ite1 = ite1.next;
				ite2 = ite2.next;
			} else if(cb1.id < cb2.id) {
				var pre2 = null;
				var cx_ite3 = cb1.listeners.head;
				while(cx_ite3 != null) {
					var j1 = cx_ite3.elt;
					if(_gthis.precedence > j1.precedence || _gthis.precedence == j1.precedence && _gthis.id > j1.id) {
						break;
					}
					pre2 = cx_ite3;
					cx_ite3 = cx_ite3.next;
				}
				var _this1 = cb1.listeners;
				var ret1;
				if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
					ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
				} else {
					ret1 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.elt = _gthis;
				var temp1 = ret1;
				if(pre2 == null) {
					temp1.next = _this1.head;
					_this1.head = temp1;
				} else {
					temp1.next = pre2.next;
					pre2.next = temp1;
				}
				_this1.pushmod = _this1.modified = true;
				_this1.length++;
				var cx_ite4 = cb1.cbsets.head;
				while(cx_ite4 != null) {
					var cb3 = cx_ite4.elt;
					cb3.zip_listeners = true;
					cb3.invalidate_pairs();
					cx_ite4 = cx_ite4.next;
				}
				if(pre) {
					var cx_ite5 = cb1.interactors.head;
					while(cx_ite5 != null) {
						var i1 = cx_ite5.elt;
						i1.wake();
						cx_ite5 = cx_ite5.next;
					}
				}
				ite1 = ite1.next;
			} else {
				var pre3 = null;
				var cx_ite6 = cb2.listeners.head;
				while(cx_ite6 != null) {
					var j2 = cx_ite6.elt;
					if(_gthis.precedence > j2.precedence || _gthis.precedence == j2.precedence && _gthis.id > j2.id) {
						break;
					}
					pre3 = cx_ite6;
					cx_ite6 = cx_ite6.next;
				}
				var _this2 = cb2.listeners;
				var ret2;
				if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
					ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
				} else {
					ret2 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.elt = _gthis;
				var temp2 = ret2;
				if(pre3 == null) {
					temp2.next = _this2.head;
					_this2.head = temp2;
				} else {
					temp2.next = pre3.next;
					pre3.next = temp2;
				}
				_this2.pushmod = _this2.modified = true;
				_this2.length++;
				var cx_ite7 = cb2.cbsets.head;
				while(cx_ite7 != null) {
					var cb4 = cx_ite7.elt;
					cb4.zip_listeners = true;
					cb4.invalidate_pairs();
					cx_ite7 = cx_ite7.next;
				}
				if(pre) {
					var cx_ite8 = cb2.interactors.head;
					while(cx_ite8 != null) {
						var i2 = cx_ite8.elt;
						i2.wake();
						cx_ite8 = cx_ite8.next;
					}
				}
				ite2 = ite2.next;
			}
		}
		while(ite1 != null) {
			var cb = ite1.elt;
			var pre1 = null;
			var cx_ite = cb.listeners.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(_gthis.precedence > j.precedence || _gthis.precedence == j.precedence && _gthis.id > j.id) {
					break;
				}
				pre1 = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this = cb.listeners;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = _gthis;
			var temp = ret;
			if(pre1 == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre1.next;
				pre1.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			var cx_ite1 = cb.cbsets.head;
			while(cx_ite1 != null) {
				var cb1 = cx_ite1.elt;
				cb1.zip_listeners = true;
				cb1.invalidate_pairs();
				cx_ite1 = cx_ite1.next;
			}
			if(pre) {
				var cx_ite2 = cb.interactors.head;
				while(cx_ite2 != null) {
					var i = cx_ite2.elt;
					i.wake();
					cx_ite2 = cx_ite2.next;
				}
			}
			ite1 = ite1.next;
		}
		while(ite2 != null) {
			var cb = ite2.elt;
			var pre1 = null;
			var cx_ite = cb.listeners.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(_gthis.precedence > j.precedence || _gthis.precedence == j.precedence && _gthis.id > j.id) {
					break;
				}
				pre1 = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this = cb.listeners;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = _gthis;
			var temp = ret;
			if(pre1 == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre1.next;
				pre1.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			var cx_ite1 = cb.cbsets.head;
			while(cx_ite1 != null) {
				var cb1 = cx_ite1.elt;
				cb1.zip_listeners = true;
				cb1.invalidate_pairs();
				cx_ite1 = cx_ite1.next;
			}
			if(pre) {
				var cx_ite2 = cb.interactors.head;
				while(cx_ite2 != null) {
					var i = cx_ite2.elt;
					i.wake();
					cx_ite2 = cx_ite2.next;
				}
			}
			ite2 = ite2.next;
		}
		this.options1.handler = $bind(this,this.cbtype_change1);
		this.options2.handler = $bind(this,this.cbtype_change2);
		this.with_uniquesets(true);
	}
	,removedFromSpace: function() {
		var _gthis = this;
		this.with_uniquesets(false);
		var pre = this.type == 3;
		var ite1 = this.options1.includes.head;
		var ite2 = this.options2.includes.head;
		while(ite1 != null && ite2 != null) {
			var cb1 = ite1.elt;
			var cb2 = ite2.elt;
			if(cb1 == cb2) {
				cb1.listeners.remove(_gthis);
				var cx_ite = cb1.cbsets.head;
				while(cx_ite != null) {
					var cb = cx_ite.elt;
					cb.zip_listeners = true;
					cb.invalidate_pairs();
					cx_ite = cx_ite.next;
				}
				if(pre) {
					var cx_ite1 = cb1.interactors.head;
					while(cx_ite1 != null) {
						var i = cx_ite1.elt;
						i.wake();
						cx_ite1 = cx_ite1.next;
					}
				}
				ite1 = ite1.next;
				ite2 = ite2.next;
			} else if(cb1.id < cb2.id) {
				cb1.listeners.remove(_gthis);
				var cx_ite2 = cb1.cbsets.head;
				while(cx_ite2 != null) {
					var cb3 = cx_ite2.elt;
					cb3.zip_listeners = true;
					cb3.invalidate_pairs();
					cx_ite2 = cx_ite2.next;
				}
				if(pre) {
					var cx_ite3 = cb1.interactors.head;
					while(cx_ite3 != null) {
						var i1 = cx_ite3.elt;
						i1.wake();
						cx_ite3 = cx_ite3.next;
					}
				}
				ite1 = ite1.next;
			} else {
				cb2.listeners.remove(_gthis);
				var cx_ite4 = cb2.cbsets.head;
				while(cx_ite4 != null) {
					var cb4 = cx_ite4.elt;
					cb4.zip_listeners = true;
					cb4.invalidate_pairs();
					cx_ite4 = cx_ite4.next;
				}
				if(pre) {
					var cx_ite5 = cb2.interactors.head;
					while(cx_ite5 != null) {
						var i2 = cx_ite5.elt;
						i2.wake();
						cx_ite5 = cx_ite5.next;
					}
				}
				ite2 = ite2.next;
			}
		}
		while(ite1 != null) {
			var cb = ite1.elt;
			cb.listeners.remove(_gthis);
			var cx_ite = cb.cbsets.head;
			while(cx_ite != null) {
				var cb1 = cx_ite.elt;
				cb1.zip_listeners = true;
				cb1.invalidate_pairs();
				cx_ite = cx_ite.next;
			}
			if(pre) {
				var cx_ite1 = cb.interactors.head;
				while(cx_ite1 != null) {
					var i = cx_ite1.elt;
					i.wake();
					cx_ite1 = cx_ite1.next;
				}
			}
			ite1 = ite1.next;
		}
		while(ite2 != null) {
			var cb = ite2.elt;
			cb.listeners.remove(_gthis);
			var cx_ite = cb.cbsets.head;
			while(cx_ite != null) {
				var cb1 = cx_ite.elt;
				cb1.zip_listeners = true;
				cb1.invalidate_pairs();
				cx_ite = cx_ite.next;
			}
			if(pre) {
				var cx_ite1 = cb.interactors.head;
				while(cx_ite1 != null) {
					var i = cx_ite1.elt;
					i.wake();
					cx_ite1 = cx_ite1.next;
				}
			}
			ite2 = ite2.next;
		}
		this.options1.handler = null;
		this.options2.handler = null;
	}
	,cbtype_change1: function(cb,included,added) {
		this.cbtype_change(this.options1,cb,included,added);
	}
	,cbtype_change2: function(cb,included,added) {
		this.cbtype_change(this.options2,cb,included,added);
	}
	,cbtype_change: function(options,cb,included,added) {
		this.removedFromSpace();
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = options.includes.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(cb.id < j.id) {
						break;
					}
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				var _this = options.includes;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = cb;
				var temp = ret;
				if(pre == null) {
					temp.next = _this.head;
					_this.head = temp;
				} else {
					temp.next = pre.next;
					pre.next = temp;
				}
				_this.pushmod = _this.modified = true;
				_this.length++;
			} else {
				options.includes.remove(cb);
			}
		} else if(added) {
			var pre = null;
			var cx_ite = options.excludes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this = options.excludes;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = cb;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
		} else {
			options.excludes.remove(cb);
		}
		this.addedToSpace();
	}
});
var zpp_$nape_callbacks_ZPP_$OptionType = function() {
	this.wrap_excludes = null;
	this.wrap_includes = null;
	this.excludes = null;
	this.includes = null;
	this.handler = null;
	this.outer = null;
	this.includes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this.excludes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
zpp_$nape_callbacks_ZPP_$OptionType.__name__ = true;
zpp_$nape_callbacks_ZPP_$OptionType.argument = function(val) {
	if(val == null) {
		return new nape_callbacks_OptionType();
	} else if(((val) instanceof nape_callbacks_OptionType)) {
		return val;
	} else {
		return new nape_callbacks_OptionType().including(val);
	}
};
zpp_$nape_callbacks_ZPP_$OptionType.prototype = {
	setup_includes: function() {
		this.wrap_includes = zpp_$nape_util_ZPP_$CbTypeList.get(this.includes,true);
	}
	,setup_excludes: function() {
		this.wrap_excludes = zpp_$nape_util_ZPP_$CbTypeList.get(this.excludes,true);
	}
	,nonemptyintersection: function(xs,ys) {
		var ret = false;
		var xite = xs.head;
		var eite = ys.head;
		while(eite != null && xite != null) {
			var ex = eite.elt;
			var xi = xite.elt;
			if(ex == xi) {
				ret = true;
				break;
			} else if(ex.id < xi.id) {
				eite = eite.next;
			} else {
				xite = xite.next;
			}
		}
		return ret;
	}
	,append_type: function(list,val) {
		if(list == this.includes) {
			if(!this.includes.has(val)) {
				if(!this.excludes.has(val)) {
					if(this.handler != null) {
						this.handler(val,true,true);
					} else {
						var pre = null;
						var cx_ite = this.includes.head;
						while(cx_ite != null) {
							var j = cx_ite.elt;
							if(val.id < j.id) {
								break;
							}
							pre = cx_ite;
							cx_ite = cx_ite.next;
						}
						var _this = this.includes;
						var ret;
						if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
							ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
						} else {
							ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
							ret.next = null;
						}
						ret.elt = val;
						var temp = ret;
						if(pre == null) {
							temp.next = _this.head;
							_this.head = temp;
						} else {
							temp.next = pre.next;
							pre.next = temp;
						}
						_this.pushmod = _this.modified = true;
						_this.length++;
					}
				} else if(this.handler != null) {
					this.handler(val,false,false);
				} else {
					this.excludes.remove(val);
				}
			}
		} else if(!this.excludes.has(val)) {
			if(!this.includes.has(val)) {
				if(this.handler != null) {
					this.handler(val,false,true);
				} else {
					var pre = null;
					var cx_ite = this.excludes.head;
					while(cx_ite != null) {
						var j = cx_ite.elt;
						if(val.id < j.id) {
							break;
						}
						pre = cx_ite;
						cx_ite = cx_ite.next;
					}
					var _this = this.excludes;
					var ret;
					if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
						ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
					} else {
						ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
						ret.next = null;
					}
					ret.elt = val;
					var temp = ret;
					if(pre == null) {
						temp.next = _this.head;
						_this.head = temp;
					} else {
						temp.next = pre.next;
						pre.next = temp;
					}
					_this.pushmod = _this.modified = true;
					_this.length++;
				}
			} else if(this.handler != null) {
				this.handler(val,true,false);
			} else {
				this.includes.remove(val);
			}
		}
	}
	,append: function(list,val) {
		if(val == null) {
			throw haxe_Exception.thrown("Error: Cannot append null, only CbType and CbType list values");
		}
		if(((val) instanceof nape_callbacks_CbType)) {
			var cb = val;
			this.append_type(list,cb.zpp_inner);
		} else if(((val) instanceof nape_callbacks_CbTypeList)) {
			var cbs = val;
			cbs.zpp_inner.valmod();
			var _g = nape_callbacks_CbTypeIterator.get(cbs);
			while(true) {
				_g.zpp_inner.zpp_inner.valmod();
				var _this = _g.zpp_inner;
				_this.zpp_inner.valmod();
				if(_this.zpp_inner.zip_length) {
					_this.zpp_inner.zip_length = false;
					_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
				}
				var length = _this.zpp_inner.user_length;
				_g.zpp_critical = true;
				var tmp;
				if(_g.zpp_i < length) {
					tmp = true;
				} else {
					_g.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
					nape_callbacks_CbTypeIterator.zpp_pool = _g;
					_g.zpp_inner = null;
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				_g.zpp_critical = false;
				var cb = _g.zpp_inner.at(_g.zpp_i++);
				this.append_type(list,cb.zpp_inner);
			}
		} else if(((val) instanceof Array)) {
			var cbs = val;
			var _g = 0;
			while(_g < cbs.length) {
				var cb = cbs[_g];
				++_g;
				if(!((cb) instanceof nape_callbacks_CbType)) {
					throw haxe_Exception.thrown("Error: Cannot append non-CbType or CbType list value");
				}
				var cbx = cb;
				this.append_type(list,cbx.zpp_inner);
			}
		} else {
			throw haxe_Exception.thrown("Error: Cannot append non-CbType or CbType list value");
		}
	}
};
var zpp_$nape_constraint_ZPP_$Constraint = function() {
	this.pre_dt = 0.0;
	this.cbSet = null;
	this.cbTypes = null;
	this.__velocity = false;
	this.ignore = false;
	this.component = null;
	this.removeOnBreak = false;
	this.breakUnderError = false;
	this.breakUnderForce = false;
	this.maxError = 0.0;
	this.maxForce = 0.0;
	this.damping = 0.0;
	this.frequency = 0.0;
	this.stiff = false;
	this.active = false;
	this.space = null;
	this.compound = null;
	this.id = 0;
	this.outer = null;
	this.__velocity = false;
	this.id = zpp_$nape_ZPP_$ID.Constraint();
	this.stiff = true;
	this.active = true;
	this.ignore = false;
	this.frequency = 10;
	this.damping = 1;
	this.maxForce = Infinity;
	this.maxError = Infinity;
	this.breakUnderForce = false;
	this.removeOnBreak = true;
	this.pre_dt = -1.0;
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
zpp_$nape_constraint_ZPP_$Constraint.__name__ = true;
zpp_$nape_constraint_ZPP_$Constraint.prototype = {
	immutable_midstep: function(name) {
		if(this.space != null && this.space.midstep) {
			throw haxe_Exception.thrown("Error: Constraint::" + name + " cannot be set during space step()");
		}
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.constraints.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this = this.cbTypes;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = cb;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		if((this.cbSet = this.space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.constraints.add(this);
		}
	}
	,dealloc_cbSet: function() {
		if(this.cbSet != null) {
			this.cbSet.constraints.remove(this);
			if(--this.cbSet.count == 0) {
				this.space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.listeners.clear();
				o.zip_listeners = true;
				o.bodylisteners.clear();
				o.zip_bodylisteners = true;
				o.conlisteners.clear();
				o.zip_conlisteners = true;
				while(o.cbTypes.head != null) {
					var cb = o.cbTypes.pop_unsafe();
					cb.cbsets.remove(o);
				}
				o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,activate: function() {
		if(this.space != null) {
			this.activeInSpace();
		}
	}
	,deactivate: function() {
		if(this.space != null) {
			this.inactiveOrOutSpace();
		}
	}
	,addedToSpace: function() {
		if(this.active) {
			this.activeInSpace();
		}
		this.activeBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.add(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		if(this.active) {
			this.inactiveOrOutSpace();
		}
		this.inactiveBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.remove(this);
			cx_ite = cx_ite.next;
		}
	}
	,activeInSpace: function() {
		this.alloc_cbSet();
		if(zpp_$nape_space_ZPP_$Component.zpp_pool == null) {
			this.component = new zpp_$nape_space_ZPP_$Component();
		} else {
			this.component = zpp_$nape_space_ZPP_$Component.zpp_pool;
			zpp_$nape_space_ZPP_$Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		this.component.isBody = false;
		this.component.constraint = this;
	}
	,inactiveOrOutSpace: function() {
		this.dealloc_cbSet();
		var o = this.component;
		o.body = null;
		o.constraint = null;
		o.next = zpp_$nape_space_ZPP_$Component.zpp_pool;
		zpp_$nape_space_ZPP_$Component.zpp_pool = o;
		this.component = null;
	}
	,activeBodies: function() {
	}
	,inactiveBodies: function() {
	}
	,clearcache: function() {
	}
	,validate: function() {
	}
	,wake_connected: function() {
	}
	,forest: function() {
	}
	,pair_exists: function(id,di) {
		return false;
	}
	,broken: function() {
	}
	,warmStart: function() {
	}
	,preStep: function(dt) {
		return false;
	}
	,applyImpulseVel: function() {
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,wake: function() {
		if(this.space != null) {
			this.space.wake_constraint(this);
		}
	}
};
var zpp_$nape_constraint_ZPP_$AngleJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.scale = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.ratio = 1;
	this.jAcc = 0;
	this.slack = false;
	this.jMax = Infinity;
	this.stepped = false;
};
zpp_$nape_constraint_ZPP_$AngleJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$AngleJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$AngleJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) {
			throw haxe_Exception.thrown("Error: AngleJoint cannot be simulated null bodies");
		}
		if(this.b1 == this.b2) {
			throw haxe_Exception.thrown("Error: AngleJoint cannot be simulated with body1 == body2");
		}
		if(this.b1.space != this.space || this.b2.space != this.space) {
			throw haxe_Exception.thrown("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		}
		if(this.jointMin > this.jointMax) {
			throw haxe_Exception.thrown("Error: AngleJoint must have jointMin <= jointMax");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw haxe_Exception.thrown("Error: Constraints cannot have both bodies non-dynamic");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr;
			if(this.b2.component == this.b2.component.parent) {
				xr = this.b2.component;
			} else {
				var obj = this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
		this.slack = false;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			this.slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			this.slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			this.slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			this.slack = true;
		}
		var C1 = C;
		if(!this.slack) {
			this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
			if(this.kMass != 0) {
				this.kMass = 1 / this.kMass;
			} else {
				this.jAcc = 0;
			}
			if(!this.stiff) {
				if(this.breakUnderError && C1 * C1 > this.maxError * this.maxError) {
					return true;
				}
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				var biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C1 * biasCoef;
				if(this.bias < -this.maxError) {
					this.bias = -this.maxError;
				} else if(this.bias > this.maxError) {
					this.bias = this.maxError;
				}
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			this.b1.angvel -= this.scale * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) {
			return false;
		}
		var E = this.scale * (this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel);
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) {
			this.jAcc = 0;
		}
		if(this.breakUnderForce && (this.jAcc > this.jMax || this.jAcc < -this.jMax)) {
			return true;
		}
		if(!this.stiff) {
			if(this.jAcc > this.jMax) {
				this.jAcc = this.jMax;
			} else if(this.jAcc < -this.jMax) {
				this.jAcc = -this.jMax;
			}
		}
		j = this.jAcc - jOld;
		this.b1.angvel -= this.scale * this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var j;
		var slack;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			slack = true;
		}
		var E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) {
				return true;
			}
			E *= 0.5;
			j = -E * this.kMass;
			if(this.equal || j < 0) {
				var _this = this.b1;
				var dr = -this.scale * j * this.b1.iinertia;
				_this.rot += dr;
				if(dr * dr > 0.0001) {
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * _this.axisx + dr * _this.axisy) * m;
					_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
					_this.axisx = nx;
				}
				var _this = this.b2;
				var dr = this.ratio * this.scale * j * this.b2.iinertia;
				_this.rot += dr;
				if(dr * dr > 0.0001) {
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * _this.axisx + dr * _this.axisy) * m;
					_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
					_this.axisx = nx;
				}
			}
		}
		return false;
	}
});
var zpp_$nape_constraint_ZPP_$DistanceJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.jAcc = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.cx1 = this.cx2 = 0;
};
zpp_$nape_constraint_ZPP_$DistanceJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$DistanceJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$DistanceJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		var x = this.a1localx;
		var y = this.a1localy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a1 = ret;
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		var x = this.a2localx;
		var y = this.a2localy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a2 = ret;
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) {
			throw haxe_Exception.thrown("Error: DistanceJoint cannot be simulated null bodies");
		}
		if(this.b1 == this.b2) {
			throw haxe_Exception.thrown("Error: DistanceJoint cannot be simulated with body1 == body2");
		}
		if(this.b1.space != this.space || this.b2.space != this.space) {
			throw haxe_Exception.thrown("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		}
		if(this.jointMin > this.jointMax) {
			throw haxe_Exception.thrown("Error: DistanceJoint must have jointMin <= jointMax");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw haxe_Exception.thrown("Error: Constraints cannot have both bodies non-dynamic");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr;
			if(this.b2.component == this.b2.component.parent) {
				xr = this.b2.component;
			} else {
				var obj = this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		this.ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		var C = this.nx * this.nx + this.ny * this.ny;
		if(C < nape_Config.epsilon) {
			this.nx = 0;
			this.ny = 0;
			C = 0;
			this.slack = true;
		} else {
			C = Math.sqrt(C);
			var t = 1.0 / C;
			this.nx *= t;
			this.ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				this.slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				this.nx = -this.nx;
				this.ny = -this.ny;
				this.slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				this.slack = false;
			} else {
				this.nx = 0;
				this.ny = 0;
				C = 0;
				this.slack = true;
			}
		}
		var C1 = C;
		if(!this.slack) {
			this.cx1 = this.ny * this.a1relx - this.nx * this.a1rely;
			this.cx2 = this.ny * this.a2relx - this.nx * this.a2rely;
			this.kMass = this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia;
			if(this.kMass != 0) {
				this.kMass = 1 / this.kMass;
			} else {
				this.jAcc = 0;
			}
			if(!this.stiff) {
				if(this.breakUnderError && C1 * C1 > this.maxError * this.maxError) {
					return true;
				}
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				var biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C1 * biasCoef;
				if(this.bias < -this.maxError) {
					this.bias = -this.maxError;
				} else if(this.bias > this.maxError) {
					this.bias = this.maxError;
				}
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.nx * t;
			this.b1.vely -= this.ny * t;
			var t = this.b2.imass * this.jAcc;
			this.b2.velx += this.nx * t;
			this.b2.vely += this.ny * t;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) {
			return false;
		}
		var E = this.nx * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.ny * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) {
			this.jAcc = 0;
		}
		if(this.breakUnderForce && this.jAcc < -this.jMax) {
			return true;
		}
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) {
				this.jAcc = -this.jMax;
			}
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.nx * t;
		this.b1.vely -= this.ny * t;
		var t = this.b2.imass * j;
		this.b2.velx += this.nx * t;
		this.b2.vely += this.ny * t;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var slack;
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b2.posx + r2x - (this.b1.posx + r1x);
		ny = this.b2.posy + r2y - (this.b1.posy + r1y);
		var C = nx * nx + ny * ny;
		if(C < nape_Config.epsilon) {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		} else {
			C = Math.sqrt(C);
			var t = 1.0 / C;
			nx *= t;
			ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				nx = -nx;
				ny = -ny;
				slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				slack = false;
			} else {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			}
		}
		var E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) {
				return true;
			}
			if(E * E < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
				return false;
			}
			E *= 0.5;
			if(E * E > 6) {
				var k = this.b1.smass + this.b2.smass;
				if(k > nape_Config.epsilon) {
					k = 0.75 / k;
					j = -E * k;
					if(this.equal || j < 0) {
						var t = j * this.b1.imass;
						this.b1.posx -= nx * t;
						this.b1.posy -= ny * t;
						var t = j * this.b2.imass;
						this.b2.posx += nx * t;
						this.b2.posy += ny * t;
						nx = this.b2.posx + r2x - (this.b1.posx + r1x);
						ny = this.b2.posy + r2y - (this.b1.posy + r1y);
						var C = nx * nx + ny * ny;
						if(C < nape_Config.epsilon) {
							nx = 0;
							ny = 0;
							C = 0;
							slack = true;
						} else {
							C = Math.sqrt(C);
							var t = 1.0 / C;
							nx *= t;
							ny *= t;
							if(this.equal) {
								C -= this.jointMax;
								slack = false;
							} else if(C < this.jointMin) {
								C = this.jointMin - C;
								nx = -nx;
								ny = -ny;
								slack = false;
							} else if(C > this.jointMax) {
								C -= this.jointMax;
								slack = false;
							} else {
								nx = 0;
								ny = 0;
								C = 0;
								slack = true;
							}
						}
						E = C;
						E *= 0.5;
					}
				}
			}
			var cx1 = ny * r1x - nx * r1y;
			var cx2 = ny * r2x - nx * r2y;
			var k = this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia;
			if(k != 0) {
				k = 1 / k;
			}
			j = -E * k;
			if(this.equal || j < 0) {
				var t = this.b1.imass * j;
				this.b1.posx -= nx * t;
				this.b1.posy -= ny * t;
				var t = this.b2.imass * j;
				this.b2.posx += nx * t;
				this.b2.posy += ny * t;
				var _this = this.b1;
				var dr = -cx1 * this.b1.iinertia * j;
				_this.rot += dr;
				if(dr * dr > 0.0001) {
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * _this.axisx + dr * _this.axisy) * m;
					_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
					_this.axisx = nx;
				}
				var _this = this.b2;
				var dr = cx2 * this.b2.iinertia * j;
				_this.rot += dr;
				if(dr * dr > 0.0001) {
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * _this.axisx + dr * _this.axisy) * m;
					_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
					_this.axisx = nx;
				}
			}
		}
		return false;
	}
});
var zpp_$nape_constraint_ZPP_$LineJoint = function() {
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_n = null;
	this.nrely = 0.0;
	this.nrelx = 0.0;
	this.nlocaly = 0.0;
	this.nlocalx = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.dot2 = 0.0;
	this.dot1 = 0.0;
	this.equal = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.scale = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.nlocalx = 0;
	this.nlocaly = 0;
	this.nrelx = 0;
	this.nrely = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Infinity;
	this.jointMin = -Infinity;
	this.jointMax = Infinity;
	this.stepped = false;
};
zpp_$nape_constraint_ZPP_$LineJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$LineJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$LineJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		var x = this.a1localx;
		var y = this.a1localy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a1 = ret;
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		var x = this.a2localx;
		var y = this.a2localy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a2 = ret;
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate_n: function() {
		this.wrap_n.zpp_inner.x = this.nlocalx;
		this.wrap_n.zpp_inner.y = this.nlocaly;
	}
	,invalidate_n: function(x) {
		this.immutable_midstep("Constraint::" + "n");
		this.nlocalx = x.x;
		this.nlocaly = x.y;
		this.zip_n = true;
		this.wake();
	}
	,setup_n: function() {
		var x = this.nlocalx;
		var y = this.nlocaly;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_n = ret;
		this.wrap_n.zpp_inner._inuse = true;
		this.wrap_n.zpp_inner._validate = $bind(this,this.validate_n);
		this.wrap_n.zpp_inner._invalidate = $bind(this,this.invalidate_n);
	}
	,validate_norm: function() {
		if(this.zip_n) {
			this.zip_n = false;
			var d = this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			this.nlocalx *= t;
			this.nlocaly *= t;
		}
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) {
			throw haxe_Exception.thrown("Error: AngleJoint cannot be simulated null bodies");
		}
		if(this.b1 == this.b2) {
			throw haxe_Exception.thrown("Error: DistanceJoint cannot be simulated with body1 == body2");
		}
		if(this.b1.space != this.space || this.b2.space != this.space) {
			throw haxe_Exception.thrown("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		}
		if(this.jointMin > this.jointMax) {
			throw haxe_Exception.thrown("Error: DistanceJoint must have jointMin <= jointMax");
		}
		if(this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly < nape_Config.epsilon) {
			throw haxe_Exception.thrown("Error: DistanceJoint direction must be non-degenerate");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw haxe_Exception.thrown("Error: Constraints cannot have both bodies non-dynamic");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr;
			if(this.b2.component == this.b2.component.parent) {
				xr = this.b2.component;
			} else {
				var obj = this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.equal = this.jointMin == this.jointMax;
		this.stepped = true;
		this.validate_norm();
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.nrelx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		this.nrely = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var Cx = 0.0;
		var Cy = 0.0;
		dx = this.b2.posx + this.a2relx - this.b1.posx - this.a1relx;
		dy = this.b2.posy + this.a2rely - this.b1.posy - this.a1rely;
		Cx = dy * this.nrelx - dx * this.nrely;
		Cy = this.nrelx * dx + this.nrely * dy;
		if(this.equal) {
			Cy -= this.jointMin;
			this.scale = 1.0;
		} else if(Cy > this.jointMax) {
			Cy -= this.jointMax;
			this.scale = 1.0;
		} else if(Cy < this.jointMin) {
			Cy = this.jointMin - Cy;
			this.scale = -1.0;
		} else {
			Cy = 0;
			this.scale = 0;
		}
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + this.a1relx;
		dry = dy + this.a1rely;
		this.dot1 = this.nrelx * drx + this.nrely * dry;
		this.cx1 = dry * this.nrelx - drx * this.nrely;
		this.dot2 = this.nrelx * this.a2relx + this.nrely * this.a2rely;
		this.cx2 = this.a2rely * this.nrelx - this.a2relx * this.nrely;
		this.kMassa = this.b1.smass + this.b2.smass + this.dot1 * this.dot1 * this.b1.sinertia + this.dot2 * this.dot2 * this.b2.sinertia;
		this.kMassb = -this.scale * (this.dot1 * this.cx1 * this.b1.sinertia + this.dot2 * this.cx2 * this.b2.sinertia);
		this.kMassc = this.scale * this.scale * (this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia);
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		var flag;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) {
				this.kMassa = 1 / this.kMassa;
			} else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) {
				this.kMassc = 1 / this.kMassc;
			} else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) {
			this.jAccx = 0;
		}
		if((flag & 2) != 0) {
			this.jAccy = 0;
		}
		if(!this.stiff) {
			if(this.breakUnderError && Cx * Cx + Cy * Cy > this.maxError * this.maxError) {
				return true;
			}
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			var X = ig;
			this.kMassa *= X;
			this.kMassb *= X;
			this.kMassc *= X;
			this.biasx = Cx;
			this.biasy = Cy;
			var t = -biasCoef;
			this.biasx *= t;
			this.biasy *= t;
			var t = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t * t) {
				var t1 = t * (1.0 / Math.sqrt(ls));
				this.biasx *= t1;
				this.biasy *= t1;
			}
		} else {
			this.gamma = 0;
			this.biasx = 0;
			this.biasy = 0;
		}
		var t = dtratio;
		this.jAccx *= t;
		this.jAccy *= t;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var J2x = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
		var J2y = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
		var t = this.b1.imass;
		this.b1.velx -= J2x * t;
		this.b1.vely -= J2y * t;
		var t = this.b2.imass;
		this.b2.velx += J2x * t;
		this.b2.vely += J2y * t;
		this.b1.angvel += (this.scale * this.cx1 * this.jAccy - this.dot1 * this.jAccx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * this.jAccx - this.scale * this.cx2 * this.jAccy) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var dvx = 0.0;
		var dvy = 0.0;
		dvx = this.b2.velx - this.b1.velx;
		dvy = this.b2.vely - this.b1.vely;
		dvx += this.b2.kinvelx - this.b1.kinvelx;
		dvy += this.b2.kinvely - this.b1.kinvely;
		Ex = dvy * this.nrelx - dvx * this.nrely + (this.b2.angvel + this.b2.kinangvel) * this.dot2 - (this.b1.angvel + this.b1.kinangvel) * this.dot1;
		Ey = this.scale * (this.nrelx * dvx + this.nrely * dvy - (this.b2.angvel + this.b2.kinangvel) * this.cx2 + (this.b1.angvel + this.b1.kinangvel) * this.cx1);
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t = this.gamma;
		Jx -= this.jAccx * t;
		Jy -= this.jAccy * t;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t = 1.0;
		this.jAccx += Jx * t;
		this.jAccy += Jy * t;
		if(this.jAccy > 0) {
			this.jAccy = 0;
		}
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) {
				return true;
			}
		} else if(!this.stiff) {
			var t = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t * t) {
				var t1 = t * (1.0 / Math.sqrt(ls));
				this.jAccx *= t1;
				this.jAccy *= t1;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var J2x = this.scale * this.nrelx * Jy - this.nrely * Jx;
		var J2y = this.nrelx * Jx + this.scale * this.nrely * Jy;
		var t = this.b1.imass;
		this.b1.velx -= J2x * t;
		this.b1.vely -= J2y * t;
		var t = this.b2.imass;
		this.b2.velx += J2x * t;
		this.b2.vely += J2y * t;
		this.b1.angvel += (this.scale * this.cx1 * Jy - this.dot1 * Jx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * Jx - this.scale * this.cx2 * Jy) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		ny = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var scale;
		var Ex = 0.0;
		var Ey = 0.0;
		dx = this.b2.posx + r2x - this.b1.posx - r1x;
		dy = this.b2.posy + r2y - this.b1.posy - r1y;
		Ex = dy * nx - dx * ny;
		Ey = nx * dx + ny * dy;
		if(this.equal) {
			Ey -= this.jointMin;
			scale = 1.0;
		} else if(Ey > this.jointMax) {
			Ey -= this.jointMax;
			scale = 1.0;
		} else if(Ey < this.jointMin) {
			Ey = this.jointMin - Ey;
			scale = -1.0;
		} else {
			Ey = 0;
			scale = 0;
		}
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) {
			return true;
		}
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			return false;
		}
		var Jx = 0.0;
		var Jy = 0.0;
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.8 / k;
				var Jx1 = k * (ny * Ex - scale * nx * Ey);
				var Jy1 = k * (nx * Ex * scale - ny * Ex);
				var t = this.b1.imass;
				this.b1.posx -= Jx1 * t;
				this.b1.posy -= Jy1 * t;
				var t = this.b2.imass;
				this.b2.posx += Jx1 * t;
				this.b2.posy += Jy1 * t;
				dx = this.b2.posx + r2x - this.b1.posx - r1x;
				dy = this.b2.posy + r2y - this.b1.posy - r1y;
				Ex = dy * nx - dx * ny;
				Ey = nx * dx + ny * dy;
				if(this.equal) {
					Ey -= this.jointMin;
					scale = 1.0;
				} else if(Ey > this.jointMax) {
					Ey -= this.jointMax;
					scale = 1.0;
				} else if(Ey < this.jointMin) {
					Ey = this.jointMin - Ey;
					scale = -1.0;
				} else {
					Ey = 0;
					scale = 0;
				}
				var t = 0.5;
				Ex *= t;
				Ey *= t;
			}
		}
		var dot1;
		var dot2;
		var cx1;
		var cx2;
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + r1x;
		dry = dy + r1y;
		dot1 = nx * drx + ny * dry;
		cx1 = dry * nx - drx * ny;
		dot2 = nx * r2x + ny * r2y;
		cx2 = r2y * nx - r2x * ny;
		Ka = this.b1.smass + this.b2.smass + dot1 * dot1 * this.b1.sinertia + dot2 * dot2 * this.b2.sinertia;
		Kb = -scale * (dot1 * cx1 * this.b1.sinertia + dot2 * cx2 * this.b2.sinertia);
		Kc = scale * scale * (this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia);
		Jx = -Ex;
		Jy = -Ey;
		var det = Ka * Kc - Kb * Kb;
		if(det != det) {
			Jy = 0;
			Jx = Jy;
		} else if(det == 0) {
			if(Ka != 0) {
				Jx /= Ka;
			} else {
				Jx = 0;
			}
			if(Kc != 0) {
				Jy /= Kc;
			} else {
				Jy = 0;
			}
		} else {
			det = 1 / det;
			var t = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t;
		}
		if(Jy > 0) {
			Jy = 0;
		}
		var J2x = scale * nx * Jy - ny * Jx;
		var J2y = nx * Jx + scale * ny * Jy;
		var t = this.b1.imass;
		this.b1.posx -= J2x * t;
		this.b1.posy -= J2y * t;
		var t = this.b2.imass;
		this.b2.posx += J2x * t;
		this.b2.posy += J2y * t;
		var _this = this.b1;
		var dr = (scale * cx1 * Jy - dot1 * Jx) * this.b1.iinertia;
		_this.rot += dr;
		if(dr * dr > 0.0001) {
			_this.axisx = Math.sin(_this.rot);
			_this.axisy = Math.cos(_this.rot);
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx = (p * _this.axisx + dr * _this.axisy) * m;
			_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
			_this.axisx = nx;
		}
		var _this = this.b2;
		var dr = (dot2 * Jx - scale * cx2 * Jy) * this.b2.iinertia;
		_this.rot += dr;
		if(dr * dr > 0.0001) {
			_this.axisx = Math.sin(_this.rot);
			_this.axisy = Math.cos(_this.rot);
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx = (p * _this.axisx + dr * _this.axisy) * m;
			_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
			_this.axisx = nx;
		}
		return false;
	}
});
var zpp_$nape_constraint_ZPP_$MotorJoint = function() {
	this.stepped = false;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.rate = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.jAcc = 0;
	this.stepped = false;
	this.__velocity = true;
};
zpp_$nape_constraint_ZPP_$MotorJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$MotorJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$MotorJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) {
			throw haxe_Exception.thrown("Error: AngleJoint cannot be simulated null bodies");
		}
		if(this.b1 == this.b2) {
			throw haxe_Exception.thrown("Error: MotorJoint cannot be simulated with body1 == body2");
		}
		if(this.b1.space != this.space || this.b2.space != this.space) {
			throw haxe_Exception.thrown("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw haxe_Exception.thrown("Error: Constraints cannot have both bodies non-dynamic");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr;
			if(this.b2.component == this.b2.component.parent) {
				xr = this.b2.component;
			} else {
				var obj = this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
		this.kMass = 1.0 / this.kMass;
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		this.b1.angvel -= this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.ratio * this.b2.iinertia * this.jAcc;
	}
	,applyImpulseVel: function() {
		var E = this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel - this.rate;
		var j = -this.kMass * E;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(this.breakUnderForce) {
			if(this.jAcc > this.jMax || this.jAcc < -this.jMax) {
				return true;
			}
		} else if(this.jAcc < -this.jMax) {
			this.jAcc = -this.jMax;
		} else if(this.jAcc > this.jMax) {
			this.jAcc = this.jMax;
		}
		j = this.jAcc - jOld;
		this.b1.angvel -= this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
});
var zpp_$nape_constraint_ZPP_$PivotJoint = function() {
	this.stepped = false;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.stepped = false;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Infinity;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
zpp_$nape_constraint_ZPP_$PivotJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$PivotJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$PivotJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		var x = this.a1localx;
		var y = this.a1localy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a1 = ret;
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		var x = this.a2localx;
		var y = this.a2localy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a2 = ret;
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) {
			throw haxe_Exception.thrown("Error: PivotJoint cannot be simulated null bodies");
		}
		if(this.b1 == this.b2) {
			throw haxe_Exception.thrown("Error: PivotJoint cannot be simulated with body1 == body2 (body1=body2=" + this.b1.outer.toString() + ")");
		}
		if(this.b1.space != this.space || this.b2.space != this.space) {
			throw haxe_Exception.thrown("Error: Constraints must have each body within the same space to which the constraint has been assigned (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw haxe_Exception.thrown("Error: Constraints cannot have both bodies non-dynamic (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr;
			if(this.b2.component == this.b2.component.parent) {
				xr = this.b2.component;
			} else {
				var obj = this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassc = m;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassc += X * this.a1relx;
		}
		if(this.b2.sinertia != 0) {
			var X = this.a2relx * this.b2.sinertia;
			var Y = this.a2rely * this.b2.sinertia;
			this.kMassa += Y * this.a2rely;
			this.kMassb += -Y * this.a2relx;
			this.kMassc += X * this.a2relx;
		}
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		var flag;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) {
				this.kMassa = 1 / this.kMassa;
			} else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) {
				this.kMassc = 1 / this.kMassc;
			} else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) {
			this.jAccx = 0;
		}
		if((flag & 2) != 0) {
			this.jAccy = 0;
		}
		if(!this.stiff) {
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			var X = ig;
			this.kMassa *= X;
			this.kMassb *= X;
			this.kMassc *= X;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy > this.maxError * this.maxError) {
				return true;
			}
			var t = -biasCoef;
			this.biasx *= t;
			this.biasy *= t;
			var t = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t * t) {
				var t1 = t * (1.0 / Math.sqrt(ls));
				this.biasx *= t1;
				this.biasy *= t1;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.gamma = 0;
		}
		var t = dtratio;
		this.jAccx *= t;
		this.jAccy *= t;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t = this.b2.imass;
		this.b2.velx += this.jAccx * t;
		this.b2.vely += this.jAccy * t;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t = this.gamma;
		Jx -= this.jAccx * t;
		Jy -= this.jAccy * t;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t = 1.0;
		this.jAccx += Jx * t;
		this.jAccy += Jy * t;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) {
				return true;
			}
		} else if(!this.stiff) {
			var t = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t * t) {
				var t1 = t * (1.0 / Math.sqrt(ls));
				this.jAccx *= t1;
				this.jAccy *= t1;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var t = this.b1.imass;
		this.b1.velx -= Jx * t;
		this.b1.vely -= Jy * t;
		var t = this.b2.imass;
		this.b2.velx += Jx * t;
		this.b2.vely += Jy * t;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) {
			return true;
		}
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			return false;
		}
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		var Jx = 0.0;
		var Jy = 0.0;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t * t) {
					var t1 = t * (1.0 / Math.sqrt(ls));
					Jx *= t1;
					Jy *= t1;
				}
				var t = this.b1.imass;
				this.b1.posx -= Jx * t;
				this.b1.posy -= Jy * t;
				var t = this.b2.imass;
				this.b2.posx += Jx * t;
				this.b2.posy += Jy * t;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				var t = 0.5;
				Ex *= t;
				Ey *= t;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kc = m;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kc += X * r1x;
		}
		if(this.b2.sinertia != 0) {
			var X = r2x * this.b2.sinertia;
			var Y = r2y * this.b2.sinertia;
			Ka += Y * r2y;
			Kb += -Y * r2x;
			Kc += X * r2x;
		}
		Jx = -Ex;
		Jy = -Ey;
		var t = 6;
		var ls = Jx * Jx + Jy * Jy;
		if(ls > t * t) {
			var t1 = t * (1.0 / Math.sqrt(ls));
			Jx *= t1;
			Jy *= t1;
		}
		var det = Ka * Kc - Kb * Kb;
		if(det != det) {
			Jy = 0;
			Jx = Jy;
		} else if(det == 0) {
			if(Ka != 0) {
				Jx /= Ka;
			} else {
				Jx = 0;
			}
			if(Kc != 0) {
				Jy /= Kc;
			} else {
				Jy = 0;
			}
		} else {
			det = 1 / det;
			var t = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t;
		}
		var t = this.b1.imass;
		this.b1.posx -= Jx * t;
		this.b1.posy -= Jy * t;
		var t = this.b2.imass;
		this.b2.posx += Jx * t;
		this.b2.posy += Jy * t;
		var _this = this.b1;
		var dr = -(Jy * r1x - Jx * r1y) * this.b1.iinertia;
		_this.rot += dr;
		if(dr * dr > 0.0001) {
			_this.axisx = Math.sin(_this.rot);
			_this.axisy = Math.cos(_this.rot);
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx = (p * _this.axisx + dr * _this.axisy) * m;
			_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
			_this.axisx = nx;
		}
		var _this = this.b2;
		var dr = (Jy * r2x - Jx * r2y) * this.b2.iinertia;
		_this.rot += dr;
		if(dr * dr > 0.0001) {
			_this.axisx = Math.sin(_this.rot);
			_this.axisy = Math.cos(_this.rot);
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx = (p * _this.axisx + dr * _this.axisy) * m;
			_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
			_this.axisx = nx;
		}
		return false;
	}
});
var zpp_$nape_constraint_ZPP_$PulleyJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a4 = null;
	this.a4rely = 0.0;
	this.a4relx = 0.0;
	this.a4localy = 0.0;
	this.a4localx = 0.0;
	this.b4 = null;
	this.wrap_a3 = null;
	this.a3rely = 0.0;
	this.a3relx = 0.0;
	this.a3localy = 0.0;
	this.a3localx = 0.0;
	this.b3 = null;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx4 = 0.0;
	this.cx3 = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.n34y = 0.0;
	this.n34x = 0.0;
	this.n12y = 0.0;
	this.n12x = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 1.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.a3localx = 0;
	this.a3localy = 0;
	this.a3relx = 0;
	this.a3rely = 0;
	this.a4localx = 0;
	this.a4localy = 0;
	this.a4relx = 0;
	this.a4rely = 0;
	this.n12x = 1;
	this.n12y = 0;
	this.n34x = 1;
	this.n34y = 0;
	this.jAcc = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.cx1 = this.cx2 = this.cx3 = this.cx4 = 0;
};
zpp_$nape_constraint_ZPP_$PulleyJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$PulleyJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$PulleyJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) {
				this.b3.constraints.add(this);
			}
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) {
				this.b4.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) {
				this.b3.constraints.remove(this);
			}
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) {
				this.b4.constraints.remove(this);
			}
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		var x = this.a1localx;
		var y = this.a1localy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a1 = ret;
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		var x = this.a2localx;
		var y = this.a2localy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a2 = ret;
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate_a3: function() {
		this.wrap_a3.zpp_inner.x = this.a3localx;
		this.wrap_a3.zpp_inner.y = this.a3localy;
	}
	,invalidate_a3: function(x) {
		this.immutable_midstep("Constraint::" + "a3");
		this.a3localx = x.x;
		this.a3localy = x.y;
		this.wake();
	}
	,setup_a3: function() {
		var x = this.a3localx;
		var y = this.a3localy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a3 = ret;
		this.wrap_a3.zpp_inner._inuse = true;
		this.wrap_a3.zpp_inner._validate = $bind(this,this.validate_a3);
		this.wrap_a3.zpp_inner._invalidate = $bind(this,this.invalidate_a3);
	}
	,validate_a4: function() {
		this.wrap_a4.zpp_inner.x = this.a4localx;
		this.wrap_a4.zpp_inner.y = this.a4localy;
	}
	,invalidate_a4: function(x) {
		this.immutable_midstep("Constraint::" + "a4");
		this.a4localx = x.x;
		this.a4localy = x.y;
		this.wake();
	}
	,setup_a4: function() {
		var x = this.a4localx;
		var y = this.a4localy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a4 = ret;
		this.wrap_a4.zpp_inner._inuse = true;
		this.wrap_a4.zpp_inner._validate = $bind(this,this.validate_a4);
		this.wrap_a4.zpp_inner._invalidate = $bind(this,this.invalidate_a4);
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null || this.b3 == null || this.b4 == null) {
			throw haxe_Exception.thrown("Error: PulleyJoint cannot be simulated with null bodies");
		}
		if(this.b1 == this.b2 || this.b3 == this.b4) {
			throw haxe_Exception.thrown("Error: PulleyJoint cannot have body1==body2 or body3==body4");
		}
		if(this.b1.space != this.space || this.b2.space != this.space || this.b3.space != this.space || this.b4.space != this.space) {
			throw haxe_Exception.thrown("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		}
		if(this.jointMin > this.jointMax) {
			throw haxe_Exception.thrown("Error: PulleyJoint must have jointMin <= jointMax");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw haxe_Exception.thrown("Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic");
		}
		if(this.b3.type != 2 && this.b4.type != 2) {
			throw haxe_Exception.thrown("Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
		if(this.b3 != null && this.b3.type == 2) {
			this.b3.wake();
		}
		if(this.b4 != null && this.b4.type == 2) {
			this.b4.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr;
			if(this.b2.component == this.b2.component.parent) {
				xr = this.b2.component;
			} else {
				var obj = this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b3.type == 2) {
			var xr;
			if(this.b3.component == this.b3.component.parent) {
				xr = this.b3.component;
			} else {
				var obj = this.b3.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b4.type == 2) {
			var xr;
			if(this.b4.component == this.b4.component.parent) {
				xr = this.b4.component;
			} else {
				var obj = this.b4.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && (this.b2.id == di || this.b3.id == di || this.b4.id == di) || this.b2.id == id && (this.b3.id == di || this.b4.id == di || this.b1.id == di) || this.b3.id == id && (this.b4.id == di || this.b1.id == di || this.b2.id == di))) {
			if(this.b4.id == id) {
				if(!(this.b1.id == di || this.b2.id == di)) {
					return this.b3.id == di;
				} else {
					return true;
				}
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
		t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			this.n12x = t12x * t;
			this.n12y = t12y * t;
		}
		if(C34 != 0) {
			var t = 1.0 / C34;
			this.n34x = t34x * t;
			this.n34y = t34y * t;
			var t = this.ratio;
			this.n34x *= t;
			this.n34y *= t;
		} else {
			var t = this.ratio / Math.sqrt(this.n34x * this.n34x + this.n34y * this.n34y);
			this.n34x *= t;
			this.n34y *= t;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			this.slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.n12x = -this.n12x;
			this.n12y = -this.n12y;
			this.n34x = -this.n34x;
			this.n34y = -this.n34y;
			this.slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.slack = false;
		} else {
			this.n12x = 0;
			this.n12y = 0;
			this.n34x = 0;
			this.n34y = 0;
			C = 0;
			this.slack = true;
		}
		var C1 = C;
		if(!this.slack) {
			this.cx1 = this.n12y * this.a1relx - this.n12x * this.a1rely;
			this.cx2 = this.n12y * this.a2relx - this.n12x * this.a2rely;
			this.cx3 = this.n34y * this.a3relx - this.n34x * this.a3rely;
			this.cx4 = this.n34y * this.a4relx - this.n34x * this.a4rely;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * this.cx1 * this.cx1 + this.b2.sinertia * this.cx2 * this.cx2 + this.b3.sinertia * this.cx3 * this.cx3 + this.b4.sinertia * this.cx4 * this.cx4;
			if(this.b1 == this.b4) {
				K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx4 * this.b1.sinertia);
			}
			if(this.b1 == this.b3) {
				K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx3 * this.b1.sinertia);
			}
			if(this.b2 == this.b3) {
				K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx3 * this.b2.sinertia);
			}
			if(this.b2 == this.b4) {
				K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx4 * this.b2.sinertia);
			}
			this.kMass = K;
			if(this.kMass != 0) {
				this.kMass = 1 / this.kMass;
			} else {
				this.jAcc = 0;
			}
			if(!this.stiff) {
				if(this.breakUnderError && C1 * C1 > this.maxError * this.maxError) {
					return true;
				}
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				var biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C1 * biasCoef;
				if(this.bias < -this.maxError) {
					this.bias = -this.maxError;
				} else if(this.bias > this.maxError) {
					this.bias = this.maxError;
				}
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.n12x * t;
			this.b1.vely -= this.n12y * t;
			var t = this.b2.imass * this.jAcc;
			this.b2.velx += this.n12x * t;
			this.b2.vely += this.n12y * t;
			var t = this.b3.imass * this.jAcc;
			this.b3.velx -= this.n34x * t;
			this.b3.vely -= this.n34y * t;
			var t = this.b4.imass * this.jAcc;
			this.b4.velx += this.n34x * t;
			this.b4.vely += this.n34y * t;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
			this.b3.angvel -= this.cx3 * this.b3.iinertia * this.jAcc;
			this.b4.angvel += this.cx4 * this.b4.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) {
			return false;
		}
		var E = this.n12x * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.n12y * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + this.n34x * (this.b4.velx + this.b4.kinvelx - this.b3.velx - this.b3.kinvelx) + this.n34y * (this.b4.vely + this.b4.kinvely - this.b3.vely - this.b3.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1 + (this.b4.angvel + this.b4.kinangvel) * this.cx4 - (this.b3.angvel + this.b3.kinangvel) * this.cx3;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) {
			this.jAcc = 0;
		}
		if(this.breakUnderForce && this.jAcc < -this.jMax) {
			return true;
		}
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) {
				this.jAcc = -this.jMax;
			}
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.n12x * t;
		this.b1.vely -= this.n12y * t;
		var t = this.b2.imass * j;
		this.b2.velx += this.n12x * t;
		this.b2.vely += this.n12y * t;
		var t = this.b3.imass * j;
		this.b3.velx -= this.n34x * t;
		this.b3.vely -= this.n34y * t;
		var t = this.b4.imass * j;
		this.b4.velx += this.n34x * t;
		this.b4.vely += this.n34y * t;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		this.b3.angvel -= this.cx3 * this.b3.iinertia * j;
		this.b4.angvel += this.cx4 * this.b4.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var r3x = 0.0;
		var r3y = 0.0;
		r3x = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		r3y = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		var r4x = 0.0;
		var r4y = 0.0;
		r4x = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		r4y = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var slack;
		var n12x = 0.0;
		var n12y = 0.0;
		var n34x = 0.0;
		var n34y = 0.0;
		n12x = this.n12x;
		n12y = this.n12y;
		n34x = this.n34x;
		n34y = this.n34y;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + r2x - (this.b1.posx + r1x);
		t12y = this.b2.posy + r2y - (this.b1.posy + r1y);
		t34x = this.b4.posx + r4x - (this.b3.posx + r3x);
		t34y = this.b4.posy + r4y - (this.b3.posy + r3y);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			n12x = t12x * t;
			n12y = t12y * t;
		}
		if(C34 != 0) {
			var t = 1.0 / C34;
			n34x = t34x * t;
			n34y = t34y * t;
			var t = this.ratio;
			n34x *= t;
			n34y *= t;
		} else {
			var t = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
			n34x *= t;
			n34y *= t;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			n12x = -n12x;
			n12y = -n12y;
			n34x = -n34x;
			n34y = -n34y;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			n12x = 0;
			n12y = 0;
			n34x = 0;
			n34y = 0;
			C = 0;
			slack = true;
		}
		var E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) {
				return true;
			}
			if(E * E < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
				return false;
			}
			E *= 0.5;
			if(E * E > 6) {
				var k = this.b1.smass + this.b2.smass;
				if(k > nape_Config.epsilon) {
					k = 0.75 / k;
					j = -E * k;
					if(this.equal || j < 0) {
						var t = j * this.b1.imass;
						this.b1.posx -= n12x * t;
						this.b1.posy -= n12y * t;
						var t = j * this.b2.imass;
						this.b2.posx += n12x * t;
						this.b2.posy += n12y * t;
						var t = j * this.b3.imass;
						this.b3.posx -= n34x * t;
						this.b3.posy -= n34y * t;
						var t = j * this.b4.imass;
						this.b4.posx += n34x * t;
						this.b4.posy += n34y * t;
						var t12x = 0.0;
						var t12y = 0.0;
						var t34x = 0.0;
						var t34y = 0.0;
						t12x = this.b2.posx + r2x - (this.b1.posx + r1x);
						t12y = this.b2.posy + r2y - (this.b1.posy + r1y);
						t34x = this.b4.posx + r4x - (this.b3.posx + r3x);
						t34y = this.b4.posy + r4y - (this.b3.posy + r3y);
						var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
						var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
						if(C12 != 0) {
							var t = 1.0 / C12;
							n12x = t12x * t;
							n12y = t12y * t;
						}
						if(C34 != 0) {
							var t = 1.0 / C34;
							n34x = t34x * t;
							n34y = t34y * t;
							var t = this.ratio;
							n34x *= t;
							n34y *= t;
						} else {
							var t = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
							n34x *= t;
							n34y *= t;
						}
						var C = C12 + this.ratio * C34;
						if(this.equal) {
							C -= this.jointMax;
							slack = false;
						} else if(C < this.jointMin) {
							C = this.jointMin - C;
							n12x = -n12x;
							n12y = -n12y;
							n34x = -n34x;
							n34y = -n34y;
							slack = false;
						} else if(C > this.jointMax) {
							C -= this.jointMax;
							slack = false;
						} else {
							n12x = 0;
							n12y = 0;
							n34x = 0;
							n34y = 0;
							C = 0;
							slack = true;
						}
						E = C;
						E *= 0.5;
					}
				}
			}
			var cx1 = n12y * r1x - n12x * r1y;
			var cx2 = n12y * r2x - n12x * r2y;
			var cx3 = n34y * r3x - n34x * r3y;
			var cx4 = n34y * r4x - n34x * r4y;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * cx1 * cx1 + this.b2.sinertia * cx2 * cx2 + this.b3.sinertia * cx3 * cx3 + this.b4.sinertia * cx4 * cx4;
			if(this.b1 == this.b4) {
				K -= 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx4 * this.b1.sinertia);
			}
			if(this.b1 == this.b3) {
				K += 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx3 * this.b1.sinertia);
			}
			if(this.b2 == this.b3) {
				K -= 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx3 * this.b2.sinertia);
			}
			if(this.b2 == this.b4) {
				K += 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx4 * this.b2.sinertia);
			}
			var k = K;
			if(k != 0) {
				k = 1 / k;
			}
			j = -E * k;
			if(this.equal || j < 0) {
				var t = this.b1.imass * j;
				this.b1.posx -= n12x * t;
				this.b1.posy -= n12y * t;
				var t = this.b2.imass * j;
				this.b2.posx += n12x * t;
				this.b2.posy += n12y * t;
				var t = this.b3.imass * j;
				this.b3.posx -= n34x * t;
				this.b3.posy -= n34y * t;
				var t = this.b4.imass * j;
				this.b4.posx += n34x * t;
				this.b4.posy += n34y * t;
				var _this = this.b1;
				var dr = -cx1 * this.b1.iinertia * j;
				_this.rot += dr;
				if(dr * dr > 0.0001) {
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * _this.axisx + dr * _this.axisy) * m;
					_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
					_this.axisx = nx;
				}
				var _this = this.b2;
				var dr = cx2 * this.b2.iinertia * j;
				_this.rot += dr;
				if(dr * dr > 0.0001) {
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * _this.axisx + dr * _this.axisy) * m;
					_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
					_this.axisx = nx;
				}
				var _this = this.b3;
				var dr = -cx3 * this.b3.iinertia * j;
				_this.rot += dr;
				if(dr * dr > 0.0001) {
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * _this.axisx + dr * _this.axisy) * m;
					_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
					_this.axisx = nx;
				}
				var _this = this.b4;
				var dr = cx4 * this.b4.iinertia * j;
				_this.rot += dr;
				if(dr * dr > 0.0001) {
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * _this.axisx + dr * _this.axisy) * m;
					_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
					_this.axisx = nx;
				}
			}
		}
		return false;
	}
});
var zpp_$nape_constraint_ZPP_$UserConstraint = function(dim,velonly) {
	this.jOld = null;
	this.J = null;
	this.vec3 = null;
	this.Keff = null;
	this.jMax = 0.0;
	this.velonly = false;
	this.gamma = 0.0;
	this.soft = 0.0;
	this.y = null;
	this.L = null;
	this.stepped = false;
	this.bias = null;
	this.jAcc = null;
	this.dim = 0;
	this.bodies = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.bodies = [];
	this.dim = dim;
	this.velonly = velonly;
	this.jAcc = [];
	this.bias = [];
	this.L = [];
	this.J = [];
	this.jOld = [];
	this.y = [];
	this.Keff = [];
	this.vec3 = nape_geom_Vec3.get(0,0,0);
	var _g = 0;
	var _g1 = dim;
	while(_g < _g1) {
		var i = _g++;
		var tmp = this.bias[i] = this.J[i] = this.jOld[i] = this.y[i] = 0.0;
		this.jAcc[i] = tmp;
		var _g2 = 0;
		var _g3 = dim;
		while(_g2 < _g3) {
			var j = _g2++;
			this.L[i * dim + j] = 0.0;
		}
	}
	this.stepped = false;
};
zpp_$nape_constraint_ZPP_$UserConstraint.__name__ = true;
zpp_$nape_constraint_ZPP_$UserConstraint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$UserConstraint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) {
				b.body.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) {
				b.body.constraints.remove(this);
			}
		}
	}
	,validate: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.space != this.space) {
				throw haxe_Exception.thrown("Error: Constraints must have each body within the same sapce to which the constraint has been assigned");
			}
		}
		this.outer_zn.__validate();
	}
	,wake_connected: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == 2) {
				b.body.wake();
			}
		}
	}
	,forest: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == 2) {
				var xr;
				if(b.body.component == b.body.component.parent) {
					xr = b.body.component;
				} else {
					var obj = b.body.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt1 = stack.parent;
						stack.parent = obj;
						stack = nxt1;
					}
					xr = obj;
				}
				var yr;
				if(this.component == this.component.parent) {
					yr = this.component;
				} else {
					var obj1 = this.component;
					var stack1 = null;
					while(obj1 != obj1.parent) {
						var nxt2 = obj1.parent;
						obj1.parent = stack1;
						stack1 = obj1;
						obj1 = nxt2;
					}
					while(stack1 != null) {
						var nxt3 = stack1.parent;
						stack1.parent = obj1;
						stack1 = nxt3;
					}
					yr = obj1;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) {
						xr.parent = yr;
					} else if(xr.rank > yr.rank) {
						yr.parent = xr;
					} else {
						yr.parent = xr;
						xr.rank++;
					}
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		var ret = false;
		var bl = this.bodies.length | 0;
		var _g = 0;
		var _g1 = bl;
		while(_g < _g1) {
			var bi = _g++;
			var b = this.bodies[bi].body;
			var _g2 = bi + 1;
			var _g3 = bl;
			while(_g2 < _g3) {
				var ci = _g2++;
				var c = this.bodies[ci].body;
				if(b.id == id && c.id == di || b.id == di && c.id == id) {
					ret = true;
					break;
				}
			}
			if(ret) {
				break;
			}
		}
		return ret;
	}
	,broken: function() {
		this.outer_zn.__broken();
	}
	,clearcache: function() {
		var _g = 0;
		var _g1 = this.dim;
		while(_g < _g1) {
			var i = _g++;
			this.jAcc[i] = 0.0;
		}
		this.pre_dt = -1.0;
	}
	,lsq: function(v) {
		var sum = 0.0;
		var _g = 0;
		var _g1 = this.dim;
		while(_g < _g1) {
			var i = _g++;
			sum += v[i] * v[i];
		}
		return sum;
	}
	,_clamp: function(v,max) {
		var x = this.lsq(v);
		if(x > max * max) {
			var scale = max / Math.sqrt(x);
			var _g = 0;
			var _g1 = this.dim;
			while(_g < _g1) {
				var i = _g++;
				v[i] *= scale;
			}
		}
	}
	,solve: function(m) {
		var ind = 0;
		var _g = 0;
		var _g1 = this.dim;
		while(_g < _g1) {
			var j = _g++;
			var sum = 0.0;
			var _g2 = 0;
			var _g3 = j - 1;
			while(_g2 < _g3) {
				var k = _g2++;
				sum += this.L[j * this.dim + k] * this.L[j * this.dim + k];
			}
			var rec = Math.sqrt(m[ind++] - sum);
			this.L[j * this.dim + j] = rec;
			if(rec != 0) {
				rec = 1.0 / rec;
				var _g4 = j + 1;
				var _g5 = this.dim;
				while(_g4 < _g5) {
					var i = _g4++;
					var sum1 = 0.0;
					var _g6 = 0;
					var _g7 = j - 1;
					while(_g6 < _g7) {
						var k1 = _g6++;
						sum1 += this.L[i * this.dim + k1] * this.L[j * this.dim + k1];
					}
					this.L[i * this.dim + j] = rec * (m[ind++] - sum1);
				}
			} else {
				var _g8 = j + 1;
				var _g9 = this.dim;
				while(_g8 < _g9) {
					var i1 = _g8++;
					this.L[i1 * this.dim + j] = 0.0;
				}
				ind += this.dim - j - 1;
			}
		}
		return this.L;
	}
	,transform: function(L,x) {
		var _g = 0;
		var _g1 = this.dim;
		while(_g < _g1) {
			var i = _g++;
			var sum = x[i];
			var lii = L[i * this.dim + i];
			if(lii != 0) {
				var _g2 = 0;
				var _g3 = i;
				while(_g2 < _g3) {
					var k = _g2++;
					sum -= L[i * this.dim + k] * this.y[k];
				}
				this.y[i] = sum / lii;
			} else {
				this.y[i] = 0.0;
			}
		}
		var _g = 0;
		var _g1 = this.dim;
		while(_g < _g1) {
			var ix = _g++;
			var i = this.dim - 1 - ix;
			var lii = L[i * this.dim + i];
			if(lii != 0) {
				var sum = this.y[i];
				var _g2 = i + 1;
				var _g3 = this.dim;
				while(_g2 < _g3) {
					var k = _g2++;
					sum -= L[k * this.dim + i] * x[k];
				}
				x[i] = sum / lii;
			} else {
				x[i] = 0.0;
			}
		}
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.outer_zn.__prepare();
		this.outer_zn.__eff_mass(this.Keff);
		this.L = this.solve(this.Keff);
		if(!this.stiff && !this.velonly) {
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			var biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			this.soft = ig;
			this.outer_zn.__position(this.bias);
			if(this.breakUnderError && this.lsq(this.bias) > this.maxError * this.maxError) {
				return true;
			}
			var _g = 0;
			var _g1 = this.dim;
			while(_g < _g1) {
				var i = _g++;
				this.bias[i] *= -biasCoef;
			}
			this._clamp(this.bias,this.maxError);
		} else {
			var _g = 0;
			var _g1 = this.dim;
			while(_g < _g1) {
				var i = _g++;
				this.bias[i] = 0.0;
			}
			this.gamma = 0.0;
			this.soft = 1.0;
		}
		var _g = 0;
		var _g1 = this.dim;
		while(_g < _g1) {
			var i = _g++;
			this.jAcc[i] *= dtratio;
		}
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var bs = _g1[_g];
			++_g;
			var b = bs.body;
			this.outer_zn.__impulse(this.jAcc,b.outer,this.vec3);
			var t = b.imass;
			var b1 = b;
			var b2 = b1.velx;
			var _this = this.vec3;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			b1.velx = b2 + _this.zpp_inner.x * t;
			var b3 = b;
			var b4 = b3.vely;
			var _this2 = this.vec3;
			if(_this2 != null && _this2.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this3 = _this2.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			b3.vely = b4 + _this2.zpp_inner.y * t;
			var b5 = b;
			var b6 = b5.angvel;
			var _this4 = this.vec3;
			if(_this4 != null && _this4.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this5 = _this4.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			b5.angvel = b6 + _this4.zpp_inner.z * b.iinertia;
		}
	}
	,applyImpulseVel: function() {
		this.outer_zn.__velocity(this.J);
		var _g = 0;
		var _g1 = this.dim;
		while(_g < _g1) {
			var i = _g++;
			this.J[i] = this.bias[i] - this.J[i];
		}
		this.transform(this.L,this.J);
		var _g = 0;
		var _g1 = this.dim;
		while(_g < _g1) {
			var i = _g++;
			this.jOld[i] = this.jAcc[i];
			this.jAcc[i] += this.J[i] = this.J[i] * this.soft - this.jAcc[i] * this.gamma;
		}
		this.outer_zn.__clamp(this.jAcc);
		if((this.breakUnderForce || !this.stiff) && this.lsq(this.jAcc) > this.jMax * this.jMax) {
			if(this.breakUnderForce) {
				return true;
			} else if(!this.stiff) {
				this._clamp(this.jAcc,this.jMax);
			}
		}
		var _g = 0;
		var _g1 = this.dim;
		while(_g < _g1) {
			var i = _g++;
			this.J[i] = this.jAcc[i] - this.jOld[i];
		}
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var bs = _g1[_g];
			++_g;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			var b1 = b;
			var b2 = b1.velx;
			var _this = this.vec3;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			b1.velx = b2 + _this.zpp_inner.x * t;
			var b3 = b;
			var b4 = b3.vely;
			var _this2 = this.vec3;
			if(_this2 != null && _this2.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this3 = _this2.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			b3.vely = b4 + _this2.zpp_inner.y * t;
			var b5 = b;
			var b6 = b5.angvel;
			var _this4 = this.vec3;
			if(_this4 != null && _this4.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this5 = _this4.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			b5.angvel = b6 + _this4.zpp_inner.z * b.iinertia;
		}
		return false;
	}
	,applyImpulsePos: function() {
		if(this.velonly) {
			return false;
		}
		this.outer_zn.__prepare();
		this.outer_zn.__position(this.J);
		var lj = this.lsq(this.J);
		if(this.breakUnderError && lj > this.maxError * this.maxError) {
			return true;
		} else if(lj < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			return false;
		}
		var _g = 0;
		var _g1 = this.dim;
		while(_g < _g1) {
			var i = _g++;
			this.J[i] *= -1;
		}
		this.outer_zn.__eff_mass(this.Keff);
		this.transform(this.solve(this.Keff),this.J);
		this.outer_zn.__clamp(this.J);
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var bs = _g1[_g];
			++_g;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			var b1 = b;
			var b2 = b1.posx;
			var _this = this.vec3;
			if(_this != null && _this.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			b1.posx = b2 + _this.zpp_inner.x * t;
			var b3 = b;
			var b4 = b3.posy;
			var _this2 = this.vec3;
			if(_this2 != null && _this2.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this3 = _this2.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			b3.posy = b4 + _this2.zpp_inner.y * t;
			var _this4 = this.vec3;
			if(_this4 != null && _this4.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this5 = _this4.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			var dr = _this4.zpp_inner.z * b.iinertia;
			b.rot += dr;
			if(dr * dr > 0.0001) {
				b.axisx = Math.sin(b.rot);
				b.axisy = Math.cos(b.rot);
			} else {
				var d2 = dr * dr;
				var p = 1 - 0.5 * d2;
				var m = 1 - d2 * d2 / 8;
				var nx = (p * b.axisx + dr * b.axisy) * m;
				b.axisy = (p * b.axisy - dr * b.axisx) * m;
				b.axisx = nx;
			}
		}
		return false;
	}
});
var zpp_$nape_constraint_ZPP_$UserBody = function(cnt,body) {
	this.body = null;
	this.cnt = 0;
	this.cnt = cnt;
	this.body = body;
};
zpp_$nape_constraint_ZPP_$UserBody.__name__ = true;
var zpp_$nape_constraint_ZPP_$WeldJoint = function() {
	this.stepped = false;
	this.biasz = 0.0;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccz = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassf = 0.0;
	this.kMasse = 0.0;
	this.kMassc = 0.0;
	this.kMassd = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.phase = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.phase = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
zpp_$nape_constraint_ZPP_$WeldJoint.__name__ = true;
zpp_$nape_constraint_ZPP_$WeldJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$WeldJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		var x = this.a1localx;
		var y = this.a1localy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a1 = ret;
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		var x = this.a2localx;
		var y = this.a2localy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_a2 = ret;
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) {
			throw haxe_Exception.thrown("Error: AngleJoint cannot be simulated null bodies");
		}
		if(this.b1 == this.b2) {
			throw haxe_Exception.thrown("Error: WeldJoint cannot be simulated with body1 == body2");
		}
		if(this.b1.space != this.space || this.b2.space != this.space) {
			throw haxe_Exception.thrown("Error: Constraints must have each body within the same space to which the constraint has been assigned");
		}
		if(this.b1.type != 2 && this.b2.type != 2) {
			throw haxe_Exception.thrown("Error: Constraints cannot have both bodies non-dynamic");
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == 2) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.type == 2) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.type == 2) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == 2) {
			var xr;
			if(this.b2.component == this.b2.component.parent) {
				xr = this.b2.component;
			} else {
				var obj = this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj = this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				yr = obj;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.jAccz = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassd = m;
		this.kMassc = 0;
		this.kMasse = 0;
		this.kMassf = 0;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassd += X * this.a1relx;
			this.kMassc += -Y;
			this.kMasse += X;
			this.kMassf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X = this.a2relx * this.b2.sinertia;
			var Y = this.a2rely * this.b2.sinertia;
			this.kMassa += Y * this.a2rely;
			this.kMassb += -Y * this.a2relx;
			this.kMassd += X * this.a2relx;
			this.kMassc += -Y;
			this.kMasse += X;
			this.kMassf += this.b2.sinertia;
		}
		var det = this.kMassa * (this.kMassd * this.kMassf - this.kMasse * this.kMasse) + this.kMassb * (this.kMassc * this.kMasse - this.kMassb * this.kMassf) + this.kMassc * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
		var flag;
		if(det != det) {
			this.kMassa = 0;
			this.kMassb = 0;
			this.kMassd = 0;
			this.kMassc = 0;
			this.kMasse = 0;
			this.kMassf = 0;
			flag = 7;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) {
				this.kMassa = 1 / this.kMassa;
			} else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassd != 0) {
				this.kMassd = 1 / this.kMassd;
			} else {
				this.kMassd = 0;
				flag1 |= 2;
			}
			if(this.kMassf != 0) {
				this.kMassf = 1 / this.kMassf;
			} else {
				this.kMassf = 0;
				flag1 |= 4;
			}
			this.kMassb = this.kMassc = this.kMasse = 0.0;
			flag = flag1;
		} else {
			det = 1 / det;
			var A = det * (this.kMassd * this.kMassf - this.kMasse * this.kMasse);
			var B = det * (this.kMasse * this.kMassc - this.kMassb * this.kMassf);
			var D = det * (this.kMassa * this.kMassf - this.kMassc * this.kMassc);
			var C = det * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
			var E = det * (this.kMassb * this.kMassc - this.kMassa * this.kMasse);
			var F = det * (this.kMassa * this.kMassd - this.kMassb * this.kMassb);
			this.kMassa = A;
			this.kMassb = B;
			this.kMassd = D;
			this.kMassc = C;
			this.kMasse = E;
			this.kMassf = F;
			flag = 0;
		}
		if((flag & 1) != 0) {
			this.jAccx = 0;
		}
		if((flag & 2) != 0) {
			this.jAccy = 0;
		}
		if((flag & 4) != 0) {
			this.jAccz = 0;
		}
		if(!this.stiff) {
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			var X = ig;
			this.kMassa *= X;
			this.kMassb *= X;
			this.kMassd *= X;
			this.kMassc *= X;
			this.kMasse *= X;
			this.kMassf *= X;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			this.biasz = this.b2.rot - this.b1.rot - this.phase;
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz > this.maxError * this.maxError) {
				return true;
			}
			var t = -biasCoef;
			var t1 = t;
			this.biasx *= t1;
			this.biasy *= t1;
			this.biasz *= t;
			var t = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz;
			if(ls > t * t) {
				var t1 = t * (1.0 / Math.sqrt(ls));
				var t = t1;
				this.biasx *= t;
				this.biasy *= t;
				this.biasz *= t1;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.biasz = 0;
			this.gamma = 0;
		}
		var t = dtratio;
		var t1 = t;
		this.jAccx *= t1;
		this.jAccy *= t1;
		this.jAccz *= t;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t = this.b2.imass;
		this.b2.velx += this.jAccx * t;
		this.b2.vely += this.jAccy * t;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		Ez = this.b2.angvel + this.b2.kinangvel - this.b1.angvel - this.b1.kinangvel;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		Jz = this.biasz - Ez;
		var X = this.kMassa * Jx + this.kMassb * Jy + this.kMassc * Jz;
		var Y = this.kMassb * Jx + this.kMassd * Jy + this.kMasse * Jz;
		Jz = this.kMassc * Jx + this.kMasse * Jy + this.kMassf * Jz;
		Jx = X;
		Jy = Y;
		var t = this.gamma;
		var t1 = t;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		Jz -= this.jAccz * t;
		var jOldx = 0.0;
		var jOldy = 0.0;
		var jOldz = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		jOldz = this.jAccz;
		var t = 1;
		var t1 = t;
		this.jAccx += Jx * t1;
		this.jAccy += Jy * t1;
		this.jAccz += Jz * t;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz > this.jMax * this.jMax) {
				return true;
			}
		} else if(!this.stiff) {
			var t = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz;
			if(ls > t * t) {
				var t1 = t * (1.0 / Math.sqrt(ls));
				var t = t1;
				this.jAccx *= t;
				this.jAccy *= t;
				this.jAccz *= t1;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		Jz = this.jAccz - jOldz;
		var t = this.b1.imass;
		this.b1.velx -= Jx * t;
		this.b1.vely -= Jy * t;
		var t = this.b2.imass;
		this.b2.velx += Jx * t;
		this.b2.vely += Jy * t;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely + Jz) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely + Jz) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		Ez = this.b2.rot - this.b1.rot - this.phase;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		if(this.breakUnderError && Ex * Ex + Ey * Ey + Ez * Ez > this.maxError * this.maxError) {
			return true;
		}
		var cont = true;
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			cont = false;
			Ex = 0;
			Ey = 0;
		}
		var x = nape_Config.constraintAngularSlop;
		if(Ez * Ez < x * x) {
			if(!cont) {
				return false;
			} else {
				Ez = 0;
			}
		}
		var t = 0.5;
		var t1 = t;
		Ex *= t1;
		Ey *= t1;
		Ez *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t * t) {
					var t1 = t * (1.0 / Math.sqrt(ls));
					Jx *= t1;
					Jy *= t1;
				}
				var t = this.b1.imass;
				this.b1.posx -= Jx * t;
				this.b1.posy -= Jy * t;
				var t = this.b2.imass;
				this.b2.posx += Jx * t;
				this.b2.posy += Jy * t;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				Ez = this.b2.rot - this.b1.rot - this.phase;
				var t = 0.5;
				var t1 = t;
				Ex *= t1;
				Ey *= t1;
				Ez *= t;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kd = 0.0;
		var Kc = 0.0;
		var Ke = 0.0;
		var Kf = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kd = m;
		Kc = 0;
		Ke = 0;
		Kf = 0;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kd += X * r1x;
			Kc += -Y;
			Ke += X;
			Kf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X = r2x * this.b2.sinertia;
			var Y = r2y * this.b2.sinertia;
			Ka += Y * r2y;
			Kb += -Y * r2x;
			Kd += X * r2x;
			Kc += -Y;
			Ke += X;
			Kf += this.b2.sinertia;
		}
		Jx = -Ex;
		Jy = -Ey;
		Jz = -Ez;
		var t = 6;
		var ls = Jx * Jx + Jy * Jy;
		if(ls > t * t) {
			var t1 = t * (1.0 / Math.sqrt(ls));
			Jx *= t1;
			Jy *= t1;
		}
		var a = -0.25;
		var tmp = Jz < a;
		var det = Ka * (Kd * Kf - Ke * Ke) + Kb * (Kc * Ke - Kb * Kf) + Kc * (Kb * Ke - Kc * Kd);
		if(det != det) {
			Jz = 0;
			Jy = Jz;
			Jx = Jy;
		} else if(det == 0) {
			if(Ka != 0) {
				Jx /= Ka;
			} else {
				Jx = 0;
			}
			if(Kd != 0) {
				Jy /= Kd;
			} else {
				Jy = 0;
			}
			if(Kf != 0) {
				Jz /= Kf;
			} else {
				Jz = 0;
			}
		} else {
			det = 1 / det;
			var B = Ke * Kc - Kb * Kf;
			var C = Kb * Ke - Kc * Kd;
			var E = Kb * Kc - Ka * Ke;
			var X = det * (Jx * (Kd * Kf - Ke * Ke) + Jy * B + Jz * C);
			var Y = det * (Jx * B + Jy * (Ka * Kf - Kc * Kc) + Jz * E);
			Jz = det * (Jx * C + Jy * E + Jz * (Ka * Kd - Kb * Kb));
			Jx = X;
			Jy = Y;
		}
		var t = this.b1.imass;
		this.b1.posx -= Jx * t;
		this.b1.posy -= Jy * t;
		var t = this.b2.imass;
		this.b2.posx += Jx * t;
		this.b2.posy += Jy * t;
		var _this = this.b1;
		var dr = -(Jy * r1x - Jx * r1y + Jz) * this.b1.iinertia;
		_this.rot += dr;
		if(dr * dr > 0.0001) {
			_this.axisx = Math.sin(_this.rot);
			_this.axisy = Math.cos(_this.rot);
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx = (p * _this.axisx + dr * _this.axisy) * m;
			_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
			_this.axisx = nx;
		}
		var _this = this.b2;
		var dr = (Jy * r2x - Jx * r2y + Jz) * this.b2.iinertia;
		_this.rot += dr;
		if(dr * dr > 0.0001) {
			_this.axisx = Math.sin(_this.rot);
			_this.axisy = Math.cos(_this.rot);
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx = (p * _this.axisx + dr * _this.axisy) * m;
			_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
			_this.axisx = nx;
		}
		return false;
	}
});
var zpp_$nape_dynamics_ZPP_$Arbiter = function() {
	this.sensorarb = null;
	this.fluidarb = null;
	this.colarb = null;
	this.type = 0;
	this.pair = null;
	this.ws2 = null;
	this.ws1 = null;
	this.b2 = null;
	this.b1 = null;
	this.invalidated = false;
	this.immState = 0;
	this.fresh = false;
	this.continuous = false;
	this.presentable = false;
	this.intchange = false;
	this.present = 0;
	this.sleeping = false;
	this.cleared = false;
	this.active = false;
	this.endGenerated = 0;
	this.sleep_stamp = 0;
	this.up_stamp = 0;
	this.stamp = 0;
	this.di = 0;
	this.id = 0;
	this.outer = null;
};
zpp_$nape_dynamics_ZPP_$Arbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$Arbiter.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = true;
			if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				this.colarb.outer_zn = new nape_dynamics_CollisionArbiter();
				this.outer = this.colarb.outer_zn;
			} else if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
				this.fluidarb.outer_zn = new nape_dynamics_FluidArbiter();
				this.outer = this.fluidarb.outer_zn;
			} else {
				this.outer = new nape_dynamics_Arbiter();
			}
			this.outer.zpp_inner = this;
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
		}
		return this.outer;
	}
};
var zpp_$nape_dynamics_ZPP_$SensorArbiter = function() {
	this.next = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR;
	this.sensorarb = this;
};
zpp_$nape_dynamics_ZPP_$SensorArbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$SensorArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$SensorArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
});
var zpp_$nape_dynamics_ZPP_$FluidArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.wrap_position = null;
	this.buoyy = 0.0;
	this.buoyx = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.lgamma = 0.0;
	this.dampy = 0.0;
	this.dampx = 0.0;
	this.vMassc = 0.0;
	this.vMassb = 0.0;
	this.vMassa = 0.0;
	this.agamma = 0.0;
	this.adamp = 0.0;
	this.wMass = 0.0;
	this.nodrag = false;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
	this.overlap = 0.0;
	this.centroidy = 0.0;
	this.centroidx = 0.0;
	this.next = null;
	this.outer_zn = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.FLUID;
	this.fluidarb = this;
	this.buoyx = 0;
	this.buoyy = 0;
	this.pre_dt = -1.0;
};
zpp_$nape_dynamics_ZPP_$FluidArbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$FluidArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$FluidArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
});
var zpp_$nape_dynamics_ZPP_$ColArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.stat = false;
	this.next = null;
	this.hpc2 = false;
	this.hc2 = false;
	this.oc2 = null;
	this.c2 = null;
	this.oc1 = null;
	this.c1 = null;
	this.__ref_vertex = 0;
	this.__ref_edge2 = null;
	this.__ref_edge1 = null;
	this.biasCoef = 0.0;
	this.rev = false;
	this.radius = 0.0;
	this.lproj = 0.0;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.surfacey = 0.0;
	this.surfacex = 0.0;
	this.k2y = 0.0;
	this.k2x = 0.0;
	this.k1y = 0.0;
	this.k1x = 0.0;
	this.rt2b = 0.0;
	this.rn2b = 0.0;
	this.rt2a = 0.0;
	this.rn2a = 0.0;
	this.rt1b = 0.0;
	this.rn1b = 0.0;
	this.rt1a = 0.0;
	this.rn1a = 0.0;
	this.jrAcc = 0.0;
	this.rMass = 0.0;
	this.Kc = 0.0;
	this.Kb = 0.0;
	this.Ka = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_normal = null;
	this.ny = 0.0;
	this.nx = 0.0;
	this.innards = null;
	this.wrap_contacts = null;
	this.contacts = null;
	this.s2 = null;
	this.s1 = null;
	this.userdef_rfric = false;
	this.userdef_restitution = false;
	this.userdef_stat_fric = false;
	this.userdef_dyn_fric = false;
	this.rfric = 0.0;
	this.restitution = 0.0;
	this.stat_fric = 0.0;
	this.dyn_fric = 0.0;
	this.outer_zn = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.pre_dt = -1.0;
	this.contacts = new zpp_$nape_dynamics_ZPP_$Contact();
	this.innards = new zpp_$nape_dynamics_ZPP_$IContact();
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.COL;
	this.colarb = this;
};
zpp_$nape_dynamics_ZPP_$ColArbiter.__name__ = true;
zpp_$nape_dynamics_ZPP_$ColArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$ColArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
});
var zpp_$nape_dynamics_ZPP_$Contact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.elasticity = 0.0;
	this.dist = 0.0;
	this.fresh = false;
	this.hash = 0;
	this.stamp = 0;
	this.posOnly = false;
	this.active = false;
	this.inner = null;
	this.arbiter = null;
	this.py = 0.0;
	this.px = 0.0;
	this.outer = null;
	this.inner = new zpp_$nape_dynamics_ZPP_$IContact();
};
zpp_$nape_dynamics_ZPP_$Contact.__name__ = true;
zpp_$nape_dynamics_ZPP_$Contact.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Contact.internal = true;
			this.outer = new nape_dynamics_Contact();
			zpp_$nape_dynamics_ZPP_$Contact.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
};
var zpp_$nape_dynamics_ZPP_$IContact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.lr2y = 0.0;
	this.lr2x = 0.0;
	this.lr1y = 0.0;
	this.lr1x = 0.0;
	this.jtAcc = 0.0;
	this.jnAcc = 0.0;
	this.friction = 0.0;
	this.bounce = 0.0;
	this.tMass = 0.0;
	this.nMass = 0.0;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
};
zpp_$nape_dynamics_ZPP_$IContact.__name__ = true;
zpp_$nape_dynamics_ZPP_$IContact.prototype = {
	add: function(o) {
		o._inuse = true;
		var temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
};
var zpp_$nape_dynamics_ZPP_$InteractionFilter = function() {
	this.fluidMask = 0;
	this.fluidGroup = 0;
	this.sensorMask = 0;
	this.sensorGroup = 0;
	this.collisionMask = 0;
	this.collisionGroup = 0;
	this.shapes = null;
	this.outer = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.collisionGroup = this.sensorGroup = this.fluidGroup = 1;
	this.collisionMask = this.sensorMask = this.fluidMask = -1;
};
zpp_$nape_dynamics_ZPP_$InteractionFilter.__name__ = true;
zpp_$nape_dynamics_ZPP_$InteractionFilter.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_dynamics_InteractionFilter();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_filter();
			cx_ite = cx_ite.next;
		}
	}
};
var zpp_$nape_dynamics_ZPP_$InteractionGroup = function() {
	this.depth = 0;
	this.interactors = null;
	this.groups = null;
	this.group = null;
	this.ignore = false;
	this.outer = null;
	this.depth = 0;
	this.groups = new zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
};
zpp_$nape_dynamics_ZPP_$InteractionGroup.__name__ = true;
zpp_$nape_dynamics_ZPP_$InteractionGroup.prototype = {
	invalidate: function(force) {
		if(force == null) {
			force = false;
		}
		if(!(force || this.ignore)) {
			return;
		}
		var cx_ite = this.interactors.head;
		while(cx_ite != null) {
			var b = cx_ite.elt;
			if(b.ibody != null) {
				b.ibody.wake();
			} else if(b.ishape != null) {
				b.ishape.body.wake();
			} else {
				b.icompound.wake();
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.groups.head;
		while(cx_ite != null) {
			var g = cx_ite.elt;
			g.invalidate(force);
			cx_ite = cx_ite.next;
		}
	}
};
var zpp_$nape_dynamics_ZPP_$SpaceArbiterList = function() {
	this.at_index_3 = 0;
	this.at_index_2 = 0;
	this.at_index_1 = 0;
	this.at_index_0 = 0;
	this.ite_3 = null;
	this.ite_2 = null;
	this.ite_1 = null;
	this.ite_0 = null;
	this.lengths = null;
	this.zip_length = false;
	this._length = 0;
	this.space = null;
	nape_dynamics_ArbiterList.call(this);
	this.at_index_0 = 0;
	this.at_index_1 = 0;
	this.at_index_2 = 0;
	this.at_index_3 = 0;
	this.zip_length = true;
	this._length = 0;
	this.lengths = [];
	this.lengths.push(0);
	this.lengths.push(0);
	this.lengths.push(0);
	this.lengths.push(0);
};
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.__name__ = true;
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.__super__ = nape_dynamics_ArbiterList;
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.prototype = $extend(nape_dynamics_ArbiterList.prototype,{
	zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var ind = 0;
			var len = 0;
			var cx_ite = this.space.c_arbiters_true.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) {
					++len;
				}
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			var len = 0;
			var cx_ite = this.space.c_arbiters_false.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) {
					++len;
				}
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			var len = 0;
			var cx_ite = this.space.f_arbiters.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) {
					++len;
				}
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			var len = 0;
			var cx_ite = this.space.s_arbiters.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) {
					++len;
				}
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			this.zip_length = false;
		}
		return this._length;
	}
	,zpp_vm: function() {
		var modified = false;
		if(this.space.c_arbiters_true.modified) {
			modified = true;
			this.space.c_arbiters_true.modified = false;
		}
		if(this.space.c_arbiters_false.modified) {
			modified = true;
			this.space.c_arbiters_false.modified = false;
		}
		if(this.space.f_arbiters.modified) {
			modified = true;
			this.space.f_arbiters.modified = false;
		}
		if(this.space.s_arbiters.modified) {
			modified = true;
			this.space.s_arbiters.modified = false;
		}
		if(modified) {
			this.zip_length = true;
			this._length = 0;
			this.ite_0 = null;
			this.ite_1 = null;
			this.ite_2 = null;
			this.ite_3 = null;
		}
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		var ret = null;
		var accum_length = 0;
		if(ret == null) {
			if(index < accum_length + this.lengths[0]) {
				var offset = index - accum_length;
				if(offset < this.at_index_0 || this.ite_0 == null) {
					this.at_index_0 = 0;
					this.ite_0 = this.space.c_arbiters_true.head;
					while(true) {
						var x = this.ite_0.elt;
						if(x.active) {
							break;
						}
						this.ite_0 = this.ite_0.next;
					}
				}
				while(this.at_index_0 != offset) {
					this.at_index_0++;
					this.ite_0 = this.ite_0.next;
					while(true) {
						var x = this.ite_0.elt;
						if(x.active) {
							break;
						}
						this.ite_0 = this.ite_0.next;
					}
				}
				ret = this.ite_0.elt.wrapper();
			} else {
				accum_length += this.lengths[0];
			}
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[1]) {
				var offset = index - accum_length;
				if(offset < this.at_index_1 || this.ite_1 == null) {
					this.at_index_1 = 0;
					this.ite_1 = this.space.c_arbiters_false.head;
					while(true) {
						var x = this.ite_1.elt;
						if(x.active) {
							break;
						}
						this.ite_1 = this.ite_1.next;
					}
				}
				while(this.at_index_1 != offset) {
					this.at_index_1++;
					this.ite_1 = this.ite_1.next;
					while(true) {
						var x = this.ite_1.elt;
						if(x.active) {
							break;
						}
						this.ite_1 = this.ite_1.next;
					}
				}
				ret = this.ite_1.elt.wrapper();
			} else {
				accum_length += this.lengths[1];
			}
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[2]) {
				var offset = index - accum_length;
				if(offset < this.at_index_2 || this.ite_2 == null) {
					this.at_index_2 = 0;
					this.ite_2 = this.space.f_arbiters.head;
					while(true) {
						var x = this.ite_2.elt;
						if(x.active) {
							break;
						}
						this.ite_2 = this.ite_2.next;
					}
				}
				while(this.at_index_2 != offset) {
					this.at_index_2++;
					this.ite_2 = this.ite_2.next;
					while(true) {
						var x = this.ite_2.elt;
						if(x.active) {
							break;
						}
						this.ite_2 = this.ite_2.next;
					}
				}
				ret = this.ite_2.elt.wrapper();
			} else {
				accum_length += this.lengths[2];
			}
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[3]) {
				var offset = index - accum_length;
				if(offset < this.at_index_3 || this.ite_3 == null) {
					this.at_index_3 = 0;
					this.ite_3 = this.space.s_arbiters.head;
					while(true) {
						var x = this.ite_3.elt;
						if(x.active) {
							break;
						}
						this.ite_3 = this.ite_3.next;
					}
				}
				while(this.at_index_3 != offset) {
					this.at_index_3++;
					this.ite_3 = this.ite_3.next;
					while(true) {
						var x = this.ite_3.elt;
						if(x.active) {
							break;
						}
						this.ite_3 = this.ite_3.next;
					}
				}
				ret = this.ite_3.elt.wrapper();
			} else {
				accum_length += this.lengths[3];
			}
		}
		return ret;
	}
});
var zpp_$nape_geom_ZPP_$AABB = function() {
	this.wrap_max = null;
	this.maxy = 0.0;
	this.maxx = 0.0;
	this.wrap_min = null;
	this.miny = 0.0;
	this.minx = 0.0;
	this.next = null;
	this.outer = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
zpp_$nape_geom_ZPP_$AABB.__name__ = true;
zpp_$nape_geom_ZPP_$AABB.prototype = {
	toString: function() {
		return "{ x: " + this.minx + " y: " + this.miny + " w: " + (this.maxx - this.minx) + " h: " + (this.maxy - this.miny) + " }";
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$Vec2 = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Vec2.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Vec2.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		while(this.head != null) {
			var ret = this.head;
			this.head = ret.next;
			var o = ret;
			o.elt = null;
			o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
			if(this.head == null) {
				this.pushmod = true;
			}
			this.modified = true;
			this.length--;
		}
		this.pushmod = true;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
};
var zpp_$nape_geom_ZPP_$Collide = function() { };
zpp_$nape_geom_ZPP_$Collide.__name__ = true;
zpp_$nape_geom_ZPP_$Collide.circleContains = function(c,p) {
	var dx = 0.0;
	var dy = 0.0;
	dx = p.x - c.worldCOMx;
	dy = p.y - c.worldCOMy;
	return dx * dx + dy * dy < c.radius * c.radius;
};
zpp_$nape_geom_ZPP_$Collide.polyContains = function(s,p) {
	var retvar;
	retvar = true;
	var cx_ite = s.edges.head;
	while(cx_ite != null) {
		var a = cx_ite.elt;
		if(a.gnormx * p.x + a.gnormy * p.y <= a.gprojection) {
			cx_ite = cx_ite.next;
			continue;
		} else {
			retvar = false;
			break;
		}
	}
	return retvar;
};
zpp_$nape_geom_ZPP_$Collide.contactCollide = function(s1,s2,arb,rev) {
	if(s2.type == 1) {
		if(s1.type == 1) {
			var cont = true;
			var max = -1e+100;
			var maxmin = -1e+100;
			var maxi = -1;
			var axis1 = null;
			var axis2 = null;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					if(min - ax.gprojection <= max) {
						break;
					}
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min >= 0) {
					cont = false;
					break;
				}
				if(min > max) {
					max = min;
					axis1 = ax;
					maxi = 1;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite = s2.polygon.edges.head;
				while(cx_ite != null) {
					var ax = cx_ite.elt;
					var min = 1e100;
					var cx_ite1 = s1.polygon.gverts.next;
					while(cx_ite1 != null) {
						var v = cx_ite1;
						var k = ax.gnormx * v.x + ax.gnormy * v.y;
						if(k < min) {
							min = k;
						}
						if(min - ax.gprojection <= max) {
							break;
						}
						cx_ite1 = cx_ite1.next;
					}
					min -= ax.gprojection;
					if(min >= 0) {
						cont = false;
						break;
					}
					if(min > max) {
						max = min;
						axis2 = ax;
						maxi = 2;
					}
					cx_ite = cx_ite.next;
				}
				if(!cont) {
					return false;
				} else {
					var q1;
					var q2;
					var ax;
					var scale;
					if(maxi == 1) {
						q1 = s1.polygon;
						q2 = s2.polygon;
						ax = axis1;
						scale = 1.0;
					} else {
						q1 = s2.polygon;
						q2 = s1.polygon;
						ax = axis2;
						scale = -1.0;
					}
					var ay = null;
					var min = 1e100;
					var cx_ite = q2.edges.head;
					while(cx_ite != null) {
						var axis = cx_ite.elt;
						var k = ax.gnormx * axis.gnormx + ax.gnormy * axis.gnormy;
						if(k < min) {
							min = k;
							ay = axis;
						}
						cx_ite = cx_ite.next;
					}
					var c0x = 0.0;
					var c0y = 0.0;
					c0x = ay.gp0.x;
					c0y = ay.gp0.y;
					var c1x = 0.0;
					var c1y = 0.0;
					c1x = ay.gp1.x;
					c1y = ay.gp1.y;
					var dvx = 0.0;
					var dvy = 0.0;
					dvx = c1x - c0x;
					dvy = c1y - c0y;
					var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
					var d1 = ax.gnormy * c1x - ax.gnormx * c1y;
					var den = 1 / (d1 - d0);
					var t = (-ax.tp1 - d0) * den;
					if(t > nape_Config.epsilon) {
						var t1 = t;
						c0x += dvx * t1;
						c0y += dvy * t1;
					}
					var t = (-ax.tp0 - d1) * den;
					if(t < -nape_Config.epsilon) {
						var t1 = t;
						c1x += dvx * t1;
						c1y += dvy * t1;
					}
					var nx = 0.0;
					var ny = 0.0;
					var t = scale;
					nx = ax.gnormx * t;
					ny = ax.gnormy * t;
					arb.lnormx = ax.lnormx;
					arb.lnormy = ax.lnormy;
					arb.lproj = ax.lprojection;
					arb.radius = 0;
					arb.rev = rev != (scale == -1);
					arb.ptype = arb.rev ? 1 : 0;
					var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
					var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
					if(c0d > 0 && c1d > 0) {
						return false;
					} else {
						if(rev) {
							nx = -nx;
							ny = -ny;
						}
						var px = c0x - ax.gnormx * c0d * 0.5;
						var py = c0y - ax.gnormy * c0d * 0.5;
						var hash = arb.rev ? 1 : 0;
						var posOnly = c0d > 0;
						if(posOnly == null) {
							posOnly = false;
						}
						var c = null;
						var cx_ite = arb.contacts.next;
						while(cx_ite != null) {
							var cur = cx_ite;
							if(hash == cur.hash) {
								c = cur;
								break;
							}
							cx_ite = cx_ite.next;
						}
						if(c == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
								c.next = null;
							}
							var ci = c.inner;
							ci.jnAcc = ci.jtAcc = 0;
							c.hash = hash;
							c.fresh = true;
							c.arbiter = arb;
							arb.jrAcc = 0;
							var _this = arb.contacts;
							c._inuse = true;
							var temp = c;
							temp.next = _this.next;
							_this.next = temp;
							_this.modified = true;
							_this.length++;
							arb.innards.add(ci);
						} else {
							c.fresh = false;
						}
						c.px = px;
						c.py = py;
						arb.nx = nx;
						arb.ny = ny;
						c.dist = c0d;
						c.stamp = arb.stamp;
						c.posOnly = posOnly;
						var con = c;
						var t = 1.0;
						c0x -= q2.body.posx * t;
						c0y -= q2.body.posy * t;
						con.inner.lr1x = c0x * q2.body.axisy + c0y * q2.body.axisx;
						con.inner.lr1y = c0y * q2.body.axisy - c0x * q2.body.axisx;
						var px = c1x - ax.gnormx * c1d * 0.5;
						var py = c1y - ax.gnormy * c1d * 0.5;
						var hash = arb.rev ? 0 : 1;
						var posOnly = c1d > 0;
						if(posOnly == null) {
							posOnly = false;
						}
						var c = null;
						var cx_ite = arb.contacts.next;
						while(cx_ite != null) {
							var cur = cx_ite;
							if(hash == cur.hash) {
								c = cur;
								break;
							}
							cx_ite = cx_ite.next;
						}
						if(c == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
								c.next = null;
							}
							var ci = c.inner;
							ci.jnAcc = ci.jtAcc = 0;
							c.hash = hash;
							c.fresh = true;
							c.arbiter = arb;
							arb.jrAcc = 0;
							var _this = arb.contacts;
							c._inuse = true;
							var temp = c;
							temp.next = _this.next;
							_this.next = temp;
							_this.modified = true;
							_this.length++;
							arb.innards.add(ci);
						} else {
							c.fresh = false;
						}
						c.px = px;
						c.py = py;
						arb.nx = nx;
						arb.ny = ny;
						c.dist = c1d;
						c.stamp = arb.stamp;
						c.posOnly = posOnly;
						con = c;
						var t = 1.0;
						c1x -= q2.body.posx * t;
						c1y -= q2.body.posy * t;
						con.inner.lr1x = c1x * q2.body.axisy + c1y * q2.body.axisx;
						con.inner.lr1y = c1y * q2.body.axisy - c1x * q2.body.axisx;
						if(maxi == 1) {
							arb.__ref_edge1 = ax;
							arb.__ref_edge2 = ay;
						} else {
							arb.__ref_edge2 = ax;
							arb.__ref_edge1 = ay;
						}
						return true;
					}
				}
			} else {
				return false;
			}
		} else {
			var max = -1e+100;
			var minmax = -1e+100;
			var cont = true;
			var a0 = null;
			var vi = null;
			var vite = s2.polygon.gverts.next;
			var cx_ite = s2.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont = false;
					break;
				}
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var v0 = vi;
				var v1 = vi.next == null ? s2.polygon.gverts.next : vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
					var distSqr = px * px + py * py;
					var co;
					if(distSqr > minDist * minDist) {
						co = null;
					} else if(distSqr < nape_Config.epsilon * nape_Config.epsilon) {
						var px1 = s1.circle.worldCOMx;
						var py1 = s1.circle.worldCOMy;
						var c = null;
						var cx_ite = arb.contacts.next;
						while(cx_ite != null) {
							var cur = cx_ite;
							if(0 == cur.hash) {
								c = cur;
								break;
							}
							cx_ite = cx_ite.next;
						}
						if(c == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
								c.next = null;
							}
							var ci = c.inner;
							ci.jnAcc = ci.jtAcc = 0;
							c.hash = 0;
							c.fresh = true;
							c.arbiter = arb;
							arb.jrAcc = 0;
							var _this = arb.contacts;
							c._inuse = true;
							var temp = c;
							temp.next = _this.next;
							_this.next = temp;
							_this.modified = true;
							_this.length++;
							arb.innards.add(ci);
						} else {
							c.fresh = false;
						}
						c.px = px1;
						c.py = py1;
						arb.nx = 1;
						arb.ny = 0;
						c.dist = -minDist;
						c.stamp = arb.stamp;
						c.posOnly = false;
						co = c;
					} else {
						var invDist = 1.0 / Math.sqrt(distSqr);
						var dist = invDist < nape_Config.epsilon ? 1e100 : 1.0 / invDist;
						var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
						if(rev) {
							var px1 = s1.circle.worldCOMx + px * df;
							var py1 = s1.circle.worldCOMy + py * df;
							var c = null;
							var cx_ite = arb.contacts.next;
							while(cx_ite != null) {
								var cur = cx_ite;
								if(0 == cur.hash) {
									c = cur;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(c == null) {
								if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
									c = new zpp_$nape_dynamics_ZPP_$Contact();
								} else {
									c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
									zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
									c.next = null;
								}
								var ci = c.inner;
								ci.jnAcc = ci.jtAcc = 0;
								c.hash = 0;
								c.fresh = true;
								c.arbiter = arb;
								arb.jrAcc = 0;
								var _this = arb.contacts;
								c._inuse = true;
								var temp = c;
								temp.next = _this.next;
								_this.next = temp;
								_this.modified = true;
								_this.length++;
								arb.innards.add(ci);
							} else {
								c.fresh = false;
							}
							c.px = px1;
							c.py = py1;
							arb.nx = -px * invDist;
							arb.ny = -py * invDist;
							c.dist = dist - minDist;
							c.stamp = arb.stamp;
							c.posOnly = false;
							co = c;
						} else {
							var px1 = s1.circle.worldCOMx + px * df;
							var py1 = s1.circle.worldCOMy + py * df;
							var c = null;
							var cx_ite = arb.contacts.next;
							while(cx_ite != null) {
								var cur = cx_ite;
								if(0 == cur.hash) {
									c = cur;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(c == null) {
								if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
									c = new zpp_$nape_dynamics_ZPP_$Contact();
								} else {
									c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
									zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
									c.next = null;
								}
								var ci = c.inner;
								ci.jnAcc = ci.jtAcc = 0;
								c.hash = 0;
								c.fresh = true;
								c.arbiter = arb;
								arb.jrAcc = 0;
								var _this = arb.contacts;
								c._inuse = true;
								var temp = c;
								temp.next = _this.next;
								_this.next = temp;
								_this.modified = true;
								_this.length++;
								arb.innards.add(ci);
							} else {
								c.fresh = false;
							}
							c.px = px1;
							c.py = py1;
							arb.nx = px * invDist;
							arb.ny = py * invDist;
							c.dist = dist - minDist;
							c.stamp = arb.stamp;
							c.posOnly = false;
							co = c;
						}
					}
					if(co != null) {
						var con = co.inner;
						arb.ptype = 2;
						var vx = 0.0;
						var vy = 0.0;
						vx = v0.x - s2.polygon.body.posx;
						vy = v0.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = -1;
						if(rev) {
							con.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con.lr2x = s1.circle.localCOMx;
							con.lr2y = s1.circle.localCOMy;
						} else {
							con.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con.lr1x = s1.circle.localCOMx;
							con.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co != null;
				} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v1.x - s1.circle.worldCOMx;
					py = v1.y - s1.circle.worldCOMy;
					var distSqr = px * px + py * py;
					var co;
					if(distSqr > minDist * minDist) {
						co = null;
					} else if(distSqr < nape_Config.epsilon * nape_Config.epsilon) {
						var px1 = s1.circle.worldCOMx;
						var py1 = s1.circle.worldCOMy;
						var c = null;
						var cx_ite = arb.contacts.next;
						while(cx_ite != null) {
							var cur = cx_ite;
							if(0 == cur.hash) {
								c = cur;
								break;
							}
							cx_ite = cx_ite.next;
						}
						if(c == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
								c.next = null;
							}
							var ci = c.inner;
							ci.jnAcc = ci.jtAcc = 0;
							c.hash = 0;
							c.fresh = true;
							c.arbiter = arb;
							arb.jrAcc = 0;
							var _this = arb.contacts;
							c._inuse = true;
							var temp = c;
							temp.next = _this.next;
							_this.next = temp;
							_this.modified = true;
							_this.length++;
							arb.innards.add(ci);
						} else {
							c.fresh = false;
						}
						c.px = px1;
						c.py = py1;
						arb.nx = 1;
						arb.ny = 0;
						c.dist = -minDist;
						c.stamp = arb.stamp;
						c.posOnly = false;
						co = c;
					} else {
						var invDist = 1.0 / Math.sqrt(distSqr);
						var dist = invDist < nape_Config.epsilon ? 1e100 : 1.0 / invDist;
						var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
						if(rev) {
							var px1 = s1.circle.worldCOMx + px * df;
							var py1 = s1.circle.worldCOMy + py * df;
							var c = null;
							var cx_ite = arb.contacts.next;
							while(cx_ite != null) {
								var cur = cx_ite;
								if(0 == cur.hash) {
									c = cur;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(c == null) {
								if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
									c = new zpp_$nape_dynamics_ZPP_$Contact();
								} else {
									c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
									zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
									c.next = null;
								}
								var ci = c.inner;
								ci.jnAcc = ci.jtAcc = 0;
								c.hash = 0;
								c.fresh = true;
								c.arbiter = arb;
								arb.jrAcc = 0;
								var _this = arb.contacts;
								c._inuse = true;
								var temp = c;
								temp.next = _this.next;
								_this.next = temp;
								_this.modified = true;
								_this.length++;
								arb.innards.add(ci);
							} else {
								c.fresh = false;
							}
							c.px = px1;
							c.py = py1;
							arb.nx = -px * invDist;
							arb.ny = -py * invDist;
							c.dist = dist - minDist;
							c.stamp = arb.stamp;
							c.posOnly = false;
							co = c;
						} else {
							var px1 = s1.circle.worldCOMx + px * df;
							var py1 = s1.circle.worldCOMy + py * df;
							var c = null;
							var cx_ite = arb.contacts.next;
							while(cx_ite != null) {
								var cur = cx_ite;
								if(0 == cur.hash) {
									c = cur;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(c == null) {
								if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
									c = new zpp_$nape_dynamics_ZPP_$Contact();
								} else {
									c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
									zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
									c.next = null;
								}
								var ci = c.inner;
								ci.jnAcc = ci.jtAcc = 0;
								c.hash = 0;
								c.fresh = true;
								c.arbiter = arb;
								arb.jrAcc = 0;
								var _this = arb.contacts;
								c._inuse = true;
								var temp = c;
								temp.next = _this.next;
								_this.next = temp;
								_this.modified = true;
								_this.length++;
								arb.innards.add(ci);
							} else {
								c.fresh = false;
							}
							c.px = px1;
							c.py = py1;
							arb.nx = px * invDist;
							arb.ny = py * invDist;
							c.dist = dist - minDist;
							c.stamp = arb.stamp;
							c.posOnly = false;
							co = c;
						}
					}
					if(co != null) {
						var con = co.inner;
						arb.ptype = 2;
						var vx = 0.0;
						var vy = 0.0;
						vx = v1.x - s2.polygon.body.posx;
						vy = v1.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = 1;
						if(rev) {
							con.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con.lr2x = s1.circle.localCOMx;
							con.lr2y = s1.circle.localCOMy;
						} else {
							con.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con.lr1x = s1.circle.localCOMx;
							con.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co != null;
				} else {
					var nx = 0.0;
					var ny = 0.0;
					var t = s1.circle.radius + max * 0.5;
					nx = a0.gnormx * t;
					ny = a0.gnormy * t;
					var px = 0.0;
					var py = 0.0;
					px = s1.circle.worldCOMx - nx;
					py = s1.circle.worldCOMy - ny;
					var con;
					if(rev) {
						var nx = a0.gnormx;
						var ny = a0.gnormy;
						var c = null;
						var cx_ite = arb.contacts.next;
						while(cx_ite != null) {
							var cur = cx_ite;
							if(0 == cur.hash) {
								c = cur;
								break;
							}
							cx_ite = cx_ite.next;
						}
						if(c == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
								c.next = null;
							}
							var ci = c.inner;
							ci.jnAcc = ci.jtAcc = 0;
							c.hash = 0;
							c.fresh = true;
							c.arbiter = arb;
							arb.jrAcc = 0;
							var _this = arb.contacts;
							c._inuse = true;
							var temp = c;
							temp.next = _this.next;
							_this.next = temp;
							_this.modified = true;
							_this.length++;
							arb.innards.add(ci);
						} else {
							c.fresh = false;
						}
						c.px = px;
						c.py = py;
						arb.nx = nx;
						arb.ny = ny;
						c.dist = max;
						c.stamp = arb.stamp;
						c.posOnly = false;
						con = c;
					} else {
						var nx = -a0.gnormx;
						var ny = -a0.gnormy;
						var c = null;
						var cx_ite = arb.contacts.next;
						while(cx_ite != null) {
							var cur = cx_ite;
							if(0 == cur.hash) {
								c = cur;
								break;
							}
							cx_ite = cx_ite.next;
						}
						if(c == null) {
							if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
								c = new zpp_$nape_dynamics_ZPP_$Contact();
							} else {
								c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
								zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
								c.next = null;
							}
							var ci = c.inner;
							ci.jnAcc = ci.jtAcc = 0;
							c.hash = 0;
							c.fresh = true;
							c.arbiter = arb;
							arb.jrAcc = 0;
							var _this = arb.contacts;
							c._inuse = true;
							var temp = c;
							temp.next = _this.next;
							_this.next = temp;
							_this.modified = true;
							_this.length++;
							arb.innards.add(ci);
						} else {
							c.fresh = false;
						}
						c.px = px;
						c.py = py;
						arb.nx = nx;
						arb.ny = ny;
						c.dist = max;
						c.stamp = arb.stamp;
						c.posOnly = false;
						con = c;
					}
					arb.ptype = rev ? 0 : 1;
					arb.lnormx = a0.lnormx;
					arb.lnormy = a0.lnormy;
					arb.rev = !rev;
					arb.lproj = a0.lprojection;
					arb.radius = s1.circle.radius;
					con.inner.lr1x = s1.circle.localCOMx;
					con.inner.lr1y = s1.circle.localCOMy;
					arb.__ref_edge1 = a0;
					arb.__ref_vertex = 0;
					return true;
				}
			} else {
				return false;
			}
		}
	} else {
		var minDist = s1.circle.radius + s2.circle.radius;
		var px = 0.0;
		var py = 0.0;
		px = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr = px * px + py * py;
		var co;
		if(distSqr > minDist * minDist) {
			co = null;
		} else if(distSqr < nape_Config.epsilon * nape_Config.epsilon) {
			var px1 = s1.circle.worldCOMx;
			var py1 = s1.circle.worldCOMy;
			var c = null;
			var cx_ite = arb.contacts.next;
			while(cx_ite != null) {
				var cur = cx_ite;
				if(0 == cur.hash) {
					c = cur;
					break;
				}
				cx_ite = cx_ite.next;
			}
			if(c == null) {
				if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
					c = new zpp_$nape_dynamics_ZPP_$Contact();
				} else {
					c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
					zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
					c.next = null;
				}
				var ci = c.inner;
				ci.jnAcc = ci.jtAcc = 0;
				c.hash = 0;
				c.fresh = true;
				c.arbiter = arb;
				arb.jrAcc = 0;
				var _this = arb.contacts;
				c._inuse = true;
				var temp = c;
				temp.next = _this.next;
				_this.next = temp;
				_this.modified = true;
				_this.length++;
				arb.innards.add(ci);
			} else {
				c.fresh = false;
			}
			c.px = px1;
			c.py = py1;
			arb.nx = 1;
			arb.ny = 0;
			c.dist = -minDist;
			c.stamp = arb.stamp;
			c.posOnly = false;
			co = c;
		} else {
			var invDist = 1.0 / Math.sqrt(distSqr);
			var dist = invDist < nape_Config.epsilon ? 1e100 : 1.0 / invDist;
			var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
			if(rev) {
				var px1 = s1.circle.worldCOMx + px * df;
				var py1 = s1.circle.worldCOMy + py * df;
				var c = null;
				var cx_ite = arb.contacts.next;
				while(cx_ite != null) {
					var cur = cx_ite;
					if(0 == cur.hash) {
						c = cur;
						break;
					}
					cx_ite = cx_ite.next;
				}
				if(c == null) {
					if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
						c = new zpp_$nape_dynamics_ZPP_$Contact();
					} else {
						c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
						zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
						c.next = null;
					}
					var ci = c.inner;
					ci.jnAcc = ci.jtAcc = 0;
					c.hash = 0;
					c.fresh = true;
					c.arbiter = arb;
					arb.jrAcc = 0;
					var _this = arb.contacts;
					c._inuse = true;
					var temp = c;
					temp.next = _this.next;
					_this.next = temp;
					_this.modified = true;
					_this.length++;
					arb.innards.add(ci);
				} else {
					c.fresh = false;
				}
				c.px = px1;
				c.py = py1;
				arb.nx = -px * invDist;
				arb.ny = -py * invDist;
				c.dist = dist - minDist;
				c.stamp = arb.stamp;
				c.posOnly = false;
				co = c;
			} else {
				var px1 = s1.circle.worldCOMx + px * df;
				var py1 = s1.circle.worldCOMy + py * df;
				var c = null;
				var cx_ite = arb.contacts.next;
				while(cx_ite != null) {
					var cur = cx_ite;
					if(0 == cur.hash) {
						c = cur;
						break;
					}
					cx_ite = cx_ite.next;
				}
				if(c == null) {
					if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
						c = new zpp_$nape_dynamics_ZPP_$Contact();
					} else {
						c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
						zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
						c.next = null;
					}
					var ci = c.inner;
					ci.jnAcc = ci.jtAcc = 0;
					c.hash = 0;
					c.fresh = true;
					c.arbiter = arb;
					arb.jrAcc = 0;
					var _this = arb.contacts;
					c._inuse = true;
					var temp = c;
					temp.next = _this.next;
					_this.next = temp;
					_this.modified = true;
					_this.length++;
					arb.innards.add(ci);
				} else {
					c.fresh = false;
				}
				c.px = px1;
				c.py = py1;
				arb.nx = px * invDist;
				arb.ny = py * invDist;
				c.dist = dist - minDist;
				c.stamp = arb.stamp;
				c.posOnly = false;
				co = c;
			}
		}
		if(co != null) {
			var con = co.inner;
			if(rev) {
				con.lr1x = s2.circle.localCOMx;
				con.lr1y = s2.circle.localCOMy;
				con.lr2x = s1.circle.localCOMx;
				con.lr2y = s1.circle.localCOMy;
			} else {
				con.lr1x = s1.circle.localCOMx;
				con.lr1y = s1.circle.localCOMy;
				con.lr2x = s2.circle.localCOMx;
				con.lr2y = s2.circle.localCOMy;
			}
			arb.radius = s1.circle.radius + s2.circle.radius;
			arb.ptype = 2;
			return true;
		} else {
			return false;
		}
	}
};
zpp_$nape_geom_ZPP_$Collide.testCollide_safe = function(s1,s2) {
	if(s2.type == 0) {
		var t = s1;
		s1 = s2;
		s2 = t;
	}
	return zpp_$nape_geom_ZPP_$Collide.testCollide(s1,s2);
};
zpp_$nape_geom_ZPP_$Collide.testCollide = function(s1,s2) {
	if(s2.type == 1) {
		if(s1.type == 1) {
			var cont = true;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite = s2.polygon.edges.head;
				while(cx_ite != null) {
					var ax = cx_ite.elt;
					var min = 1e100;
					var cx_ite1 = s1.polygon.gverts.next;
					while(cx_ite1 != null) {
						var v = cx_ite1;
						var k = ax.gnormx * v.x + ax.gnormy * v.y;
						if(k < min) {
							min = k;
						}
						cx_ite1 = cx_ite1.next;
					}
					min -= ax.gprojection;
					if(min > 0) {
						cont = false;
						break;
					}
					cx_ite = cx_ite.next;
				}
				return cont;
			} else {
				return false;
			}
		} else {
			var a0 = null;
			var vi = null;
			var cont = true;
			var max = -1e+100;
			var vite = s2.polygon.gverts.next;
			var cx_ite = s2.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont = false;
					break;
				}
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var v0 = vi;
				var v1 = vi.next == null ? s2.polygon.gverts.next : vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
					var distSqr = px * px + py * py;
					return distSqr <= minDist * minDist;
				} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v1.x - s1.circle.worldCOMx;
					py = v1.y - s1.circle.worldCOMy;
					var distSqr = px * px + py * py;
					return distSqr <= minDist * minDist;
				} else {
					return true;
				}
			} else {
				return false;
			}
		}
	} else {
		var minDist = s1.circle.radius + s2.circle.radius;
		var px = 0.0;
		var py = 0.0;
		px = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr = px * px + py * py;
		return distSqr <= minDist * minDist;
	}
};
zpp_$nape_geom_ZPP_$Collide.flowCollide = function(s1,s2,arb) {
	if(s2.type == 1) {
		if(s1.type == 1) {
			var out1 = [];
			var out2 = [];
			var cont = true;
			var total = true;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var ind = 0;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					if(k >= ax.gprojection + nape_Config.epsilon) {
						out2[ind] = true;
						total = false;
					}
					++ind;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			if(total) {
				var _this = s2.polygon;
				if(_this.zip_worldCOM) {
					if(_this.body != null) {
						_this.zip_worldCOM = false;
						if(_this.zip_localCOM) {
							_this.zip_localCOM = false;
							if(_this.type == 1) {
								var _this1 = _this.polygon;
								if(_this1.lverts.next == null) {
									throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
								}
								if(_this1.lverts.next.next == null) {
									_this1.localCOMx = _this1.lverts.next.x;
									_this1.localCOMy = _this1.lverts.next.y;
								} else if(_this1.lverts.next.next.next == null) {
									_this1.localCOMx = _this1.lverts.next.x;
									_this1.localCOMy = _this1.lverts.next.y;
									var t = 1.0;
									_this1.localCOMx += _this1.lverts.next.next.x * t;
									_this1.localCOMy += _this1.lverts.next.next.y * t;
									var t = 0.5;
									_this1.localCOMx *= t;
									_this1.localCOMy *= t;
								} else {
									_this1.localCOMx = 0;
									_this1.localCOMy = 0;
									var area = 0.0;
									var cx_ite = _this1.lverts.next;
									var u = cx_ite;
									cx_ite = cx_ite.next;
									var v = cx_ite;
									cx_ite = cx_ite.next;
									while(cx_ite != null) {
										var w = cx_ite;
										area += v.x * (w.y - u.y);
										var cf = w.y * v.x - w.x * v.y;
										_this1.localCOMx += (v.x + w.x) * cf;
										_this1.localCOMy += (v.y + w.y) * cf;
										u = v;
										v = w;
										cx_ite = cx_ite.next;
									}
									cx_ite = _this1.lverts.next;
									var w = cx_ite;
									area += v.x * (w.y - u.y);
									var cf = w.y * v.x - w.x * v.y;
									_this1.localCOMx += (v.x + w.x) * cf;
									_this1.localCOMy += (v.y + w.y) * cf;
									u = v;
									v = w;
									cx_ite = cx_ite.next;
									var w = cx_ite;
									area += v.x * (w.y - u.y);
									var cf = w.y * v.x - w.x * v.y;
									_this1.localCOMx += (v.x + w.x) * cf;
									_this1.localCOMy += (v.y + w.y) * cf;
									area = 1 / (3 * area);
									var t = area;
									_this1.localCOMx *= t;
									_this1.localCOMy *= t;
								}
							}
							if(_this.wrap_localCOM != null) {
								_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
								_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
							}
						}
						var _this1 = _this.body;
						if(_this1.zip_axis) {
							_this1.zip_axis = false;
							_this1.axisx = Math.sin(_this1.rot);
							_this1.axisy = Math.cos(_this1.rot);
						}
						_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
						_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
					}
				}
				arb.overlap = s2.polygon.area;
				arb.centroidx = s2.polygon.worldCOMx;
				arb.centroidy = s2.polygon.worldCOMy;
				return true;
			} else if(cont) {
				total = true;
				var cx_ite = s2.polygon.edges.head;
				while(cx_ite != null) {
					var ax = cx_ite.elt;
					var min = 1e100;
					var ind = 0;
					var cx_ite1 = s1.polygon.gverts.next;
					while(cx_ite1 != null) {
						var v = cx_ite1;
						var k = ax.gnormx * v.x + ax.gnormy * v.y;
						if(k < min) {
							min = k;
						}
						if(k >= ax.gprojection + nape_Config.epsilon) {
							out1[ind] = true;
							total = false;
						}
						++ind;
						cx_ite1 = cx_ite1.next;
					}
					min -= ax.gprojection;
					if(min > 0) {
						cont = false;
						break;
					}
					cx_ite = cx_ite.next;
				}
				if(total) {
					var _this = s1.polygon;
					if(_this.zip_worldCOM) {
						if(_this.body != null) {
							_this.zip_worldCOM = false;
							if(_this.zip_localCOM) {
								_this.zip_localCOM = false;
								if(_this.type == 1) {
									var _this1 = _this.polygon;
									if(_this1.lverts.next == null) {
										throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
									}
									if(_this1.lverts.next.next == null) {
										_this1.localCOMx = _this1.lverts.next.x;
										_this1.localCOMy = _this1.lverts.next.y;
									} else if(_this1.lverts.next.next.next == null) {
										_this1.localCOMx = _this1.lverts.next.x;
										_this1.localCOMy = _this1.lverts.next.y;
										var t = 1.0;
										_this1.localCOMx += _this1.lverts.next.next.x * t;
										_this1.localCOMy += _this1.lverts.next.next.y * t;
										var t = 0.5;
										_this1.localCOMx *= t;
										_this1.localCOMy *= t;
									} else {
										_this1.localCOMx = 0;
										_this1.localCOMy = 0;
										var area = 0.0;
										var cx_ite = _this1.lverts.next;
										var u = cx_ite;
										cx_ite = cx_ite.next;
										var v = cx_ite;
										cx_ite = cx_ite.next;
										while(cx_ite != null) {
											var w = cx_ite;
											area += v.x * (w.y - u.y);
											var cf = w.y * v.x - w.x * v.y;
											_this1.localCOMx += (v.x + w.x) * cf;
											_this1.localCOMy += (v.y + w.y) * cf;
											u = v;
											v = w;
											cx_ite = cx_ite.next;
										}
										cx_ite = _this1.lverts.next;
										var w = cx_ite;
										area += v.x * (w.y - u.y);
										var cf = w.y * v.x - w.x * v.y;
										_this1.localCOMx += (v.x + w.x) * cf;
										_this1.localCOMy += (v.y + w.y) * cf;
										u = v;
										v = w;
										cx_ite = cx_ite.next;
										var w = cx_ite;
										area += v.x * (w.y - u.y);
										var cf = w.y * v.x - w.x * v.y;
										_this1.localCOMx += (v.x + w.x) * cf;
										_this1.localCOMy += (v.y + w.y) * cf;
										area = 1 / (3 * area);
										var t = area;
										_this1.localCOMx *= t;
										_this1.localCOMy *= t;
									}
								}
								if(_this.wrap_localCOM != null) {
									_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
									_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
								}
							}
							var _this1 = _this.body;
							if(_this1.zip_axis) {
								_this1.zip_axis = false;
								_this1.axisx = Math.sin(_this1.rot);
								_this1.axisy = Math.cos(_this1.rot);
							}
							_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
							_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
						}
					}
					arb.overlap = s1.polygon.area;
					arb.centroidx = s1.polygon.worldCOMx;
					arb.centroidy = s1.polygon.worldCOMy;
					return true;
				} else if(cont) {
					while(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null) {
						var p = zpp_$nape_geom_ZPP_$Collide.flowpoly.pop_unsafe();
						if(!p._inuse) {
							var o = p;
							if(o.outer != null) {
								o.outer.zpp_inner = null;
								o.outer = null;
							}
							o._isimmutable = null;
							o._validate = null;
							o._invalidate = null;
							o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
							zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
						}
					}
					var fst_vert = null;
					var poly1 = false;
					var ite1 = s1.polygon.gverts.next;
					var ind1 = 0;
					var ite2 = s2.polygon.gverts.next;
					var ind2 = 0;
					var _g = 0;
					var _g1 = s2.polygon.edgeCnt;
					while(_g < _g1) {
						var i = _g++;
						if(!out2[i]) {
							ind2 = i;
							break;
						} else {
							ite2 = ite2.next;
						}
					}
					if(ite2 == null) {
						ite2 = s2.polygon.gverts.next;
						poly1 = true;
						var _g = 0;
						var _g1 = s1.polygon.edgeCnt;
						while(_g < _g1) {
							var i = _g++;
							if(!out1[i]) {
								ind1 = i;
								break;
							} else {
								ite1 = ite1.next;
							}
						}
						if(ite1 == null) {
							ite1 = s1.polygon.gverts.next;
						} else {
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ite1);
							fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
						}
					} else {
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ite2);
						fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
					}
					var cnt = 1;
					if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null) {
						var cx_cont = true;
						var cx_itei = s1.polygon.gverts.next;
						var u = cx_itei;
						var cx_itej = cx_itei.next;
						while(cx_itej != null) {
							var v = cx_itej;
							var min = 2.0;
							var cx_cont1 = true;
							var cx_itei1 = s2.polygon.gverts.next;
							var a = cx_itei1;
							var cx_itej1 = cx_itei1.next;
							while(cx_itej1 != null) {
								var b = cx_itej1;
								var t = 0.0;
								var _sx = 0.0;
								var _sy = 0.0;
								_sx = u.x - a.x;
								_sy = u.y - a.y;
								var _vx = 0.0;
								var _vy = 0.0;
								_vx = v.x - u.x;
								_vy = v.y - u.y;
								var _qx = 0.0;
								var _qy = 0.0;
								_qx = b.x - a.x;
								_qy = b.y - a.y;
								var den = _vy * _qx - _vx * _qy;
								var tmp;
								if(den * den > nape_Config.epsilon * nape_Config.epsilon) {
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									if(txx > nape_Config.epsilon && txx < 1 - nape_Config.epsilon) {
										var sxx = (_vy * _sx - _vx * _sy) * den;
										if(sxx > nape_Config.epsilon && sxx < 1 - nape_Config.epsilon) {
											t = txx;
											tmp = true;
										} else {
											tmp = false;
										}
									} else {
										tmp = false;
									}
								} else {
									tmp = false;
								}
								if(tmp) {
									if(t < min) {
										min = t;
										ite2 = cx_itei1;
									}
								}
								cx_itei1 = cx_itej1;
								a = b;
								cx_itej1 = cx_itej1.next;
							}
							if(cx_cont1) {
								while(true) {
									cx_itej1 = s2.polygon.gverts.next;
									var b1 = cx_itej1;
									var t1 = 0.0;
									var _sx1 = 0.0;
									var _sy1 = 0.0;
									_sx1 = u.x - a.x;
									_sy1 = u.y - a.y;
									var _vx1 = 0.0;
									var _vy1 = 0.0;
									_vx1 = v.x - u.x;
									_vy1 = v.y - u.y;
									var _qx1 = 0.0;
									var _qy1 = 0.0;
									_qx1 = b1.x - a.x;
									_qy1 = b1.y - a.y;
									var den1 = _vy1 * _qx1 - _vx1 * _qy1;
									var tmp1;
									if(den1 * den1 > nape_Config.epsilon * nape_Config.epsilon) {
										den1 = 1 / den1;
										var txx1 = (_qy1 * _sx1 - _qx1 * _sy1) * den1;
										if(txx1 > nape_Config.epsilon && txx1 < 1 - nape_Config.epsilon) {
											var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
											if(sxx1 > nape_Config.epsilon && sxx1 < 1 - nape_Config.epsilon) {
												t1 = txx1;
												tmp1 = true;
											} else {
												tmp1 = false;
											}
										} else {
											tmp1 = false;
										}
									} else {
										tmp1 = false;
									}
									if(tmp1) {
										if(t1 < min) {
											min = t1;
											ite2 = cx_itei1;
										}
									}
									if(!false) {
										break;
									}
								}
							}
							if(min != 2.0) {
								var cx = 0.0;
								var cy = 0.0;
								var T = min;
								cx = u.x + (v.x - u.x) * T;
								cy = u.y + (v.y - u.y) * T;
								var ret;
								if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
									ret = new zpp_$nape_geom_ZPP_$Vec2();
								} else {
									ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
									zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
									ret.next = null;
								}
								ret.weak = false;
								ret._immutable = false;
								ret.x = cx;
								ret.y = cy;
								fst_vert = ret;
								zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert);
								poly1 = true;
								ite1 = cx_itei;
								cx_cont = false;
								break;
							}
							cx_itei = cx_itej;
							u = v;
							cx_itej = cx_itej.next;
						}
						if(cx_cont) {
							while(true) {
								cx_itej = s1.polygon.gverts.next;
								var v = cx_itej;
								var min = 2.0;
								var cx_cont = true;
								var cx_itei1 = s2.polygon.gverts.next;
								var a = cx_itei1;
								var cx_itej1 = cx_itei1.next;
								while(cx_itej1 != null) {
									var b = cx_itej1;
									var t = 0.0;
									var _sx = 0.0;
									var _sy = 0.0;
									_sx = u.x - a.x;
									_sy = u.y - a.y;
									var _vx = 0.0;
									var _vy = 0.0;
									_vx = v.x - u.x;
									_vy = v.y - u.y;
									var _qx = 0.0;
									var _qy = 0.0;
									_qx = b.x - a.x;
									_qy = b.y - a.y;
									var den = _vy * _qx - _vx * _qy;
									var tmp;
									if(den * den > nape_Config.epsilon * nape_Config.epsilon) {
										den = 1 / den;
										var txx = (_qy * _sx - _qx * _sy) * den;
										if(txx > nape_Config.epsilon && txx < 1 - nape_Config.epsilon) {
											var sxx = (_vy * _sx - _vx * _sy) * den;
											if(sxx > nape_Config.epsilon && sxx < 1 - nape_Config.epsilon) {
												t = txx;
												tmp = true;
											} else {
												tmp = false;
											}
										} else {
											tmp = false;
										}
									} else {
										tmp = false;
									}
									if(tmp) {
										if(t < min) {
											min = t;
											ite2 = cx_itei1;
										}
									}
									cx_itei1 = cx_itej1;
									a = b;
									cx_itej1 = cx_itej1.next;
								}
								if(cx_cont) {
									while(true) {
										cx_itej1 = s2.polygon.gverts.next;
										var b1 = cx_itej1;
										var t1 = 0.0;
										var _sx1 = 0.0;
										var _sy1 = 0.0;
										_sx1 = u.x - a.x;
										_sy1 = u.y - a.y;
										var _vx1 = 0.0;
										var _vy1 = 0.0;
										_vx1 = v.x - u.x;
										_vy1 = v.y - u.y;
										var _qx1 = 0.0;
										var _qy1 = 0.0;
										_qx1 = b1.x - a.x;
										_qy1 = b1.y - a.y;
										var den1 = _vy1 * _qx1 - _vx1 * _qy1;
										var tmp1;
										if(den1 * den1 > nape_Config.epsilon * nape_Config.epsilon) {
											den1 = 1 / den1;
											var txx1 = (_qy1 * _sx1 - _qx1 * _sy1) * den1;
											if(txx1 > nape_Config.epsilon && txx1 < 1 - nape_Config.epsilon) {
												var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
												if(sxx1 > nape_Config.epsilon && sxx1 < 1 - nape_Config.epsilon) {
													t1 = txx1;
													tmp1 = true;
												} else {
													tmp1 = false;
												}
											} else {
												tmp1 = false;
											}
										} else {
											tmp1 = false;
										}
										if(tmp1) {
											if(t1 < min) {
												min = t1;
												ite2 = cx_itei1;
											}
										}
										if(!false) {
											break;
										}
									}
								}
								if(min != 2.0) {
									var cx = 0.0;
									var cy = 0.0;
									var T = min;
									cx = u.x + (v.x - u.x) * T;
									cy = u.y + (v.y - u.y) * T;
									var ret;
									if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
										ret = new zpp_$nape_geom_ZPP_$Vec2();
									} else {
										ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
										zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
										ret.next = null;
									}
									ret.weak = false;
									ret._immutable = false;
									ret.x = cx;
									ret.y = cy;
									fst_vert = ret;
									zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert);
									poly1 = true;
									ite1 = cx_itei;
									break;
								}
								if(!false) {
									break;
								}
							}
						}
						cnt = 2;
					}
					while(true) if(poly1) {
						ite1 = ite1.next;
						++ind1;
						if(ite1 == null) {
							ite1 = s1.polygon.gverts.next;
							ind1 = 0;
						}
						if(!out1[ind1]) {
							var ex = ite1;
							var tmp;
							if(fst_vert != null) {
								var dx = 0.0;
								var dy = 0.0;
								dx = ex.x - fst_vert.x;
								dy = ex.y - fst_vert.y;
								tmp = dx * dx + dy * dy < nape_Config.epsilon;
							} else {
								tmp = false;
							}
							if(tmp) {
								break;
							}
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ex);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							}
							cnt = 1;
						} else {
							var a = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							var b = ite1;
							var u = ite2;
							var itm = ite2.next;
							if(itm == null) {
								itm = s2.polygon.gverts.next;
							}
							var max = -1.0;
							var itmo = null;
							var indo = 0;
							var icnt = 0;
							var beg_ite = itm;
							var cx_ite = itm;
							while(true) {
								var v = cx_ite;
								var t = 0.0;
								var _sx = 0.0;
								var _sy = 0.0;
								_sx = u.x - a.x;
								_sy = u.y - a.y;
								var _vx = 0.0;
								var _vy = 0.0;
								_vx = v.x - u.x;
								_vy = v.y - u.y;
								var _qx = 0.0;
								var _qy = 0.0;
								_qx = b.x - a.x;
								_qy = b.y - a.y;
								var den = _vy * _qx - _vx * _qy;
								var tmp1;
								if(den * den > nape_Config.epsilon * nape_Config.epsilon) {
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									if(txx > nape_Config.epsilon && txx < 1 - nape_Config.epsilon) {
										var sxx = (_vy * _sx - _vx * _sy) * den;
										if(sxx > nape_Config.epsilon && sxx < 1 - nape_Config.epsilon) {
											t = txx;
											tmp1 = true;
										} else {
											tmp1 = false;
										}
									} else {
										tmp1 = false;
									}
								} else {
									tmp1 = false;
								}
								if(tmp1) {
									if(t >= max) {
										itmo = ite2;
										indo = ind2;
										if(++icnt == cnt) {
											max = t;
											cx_ite = beg_ite;
											break;
										} else {
											max = t;
										}
									}
								}
								u = v;
								ite2 = cx_ite;
								++ind2;
								if(ind2 >= s2.polygon.edgeCnt) {
									ind2 = 0;
								}
								cx_ite = cx_ite.next;
								if(cx_ite == null) {
									cx_ite = s2.polygon.gverts.next;
								}
								if(!false) {
									break;
								}
							}
							while(cx_ite != beg_ite) {
								var v1 = cx_ite;
								var t1 = 0.0;
								var _sx1 = 0.0;
								var _sy1 = 0.0;
								_sx1 = u.x - a.x;
								_sy1 = u.y - a.y;
								var _vx1 = 0.0;
								var _vy1 = 0.0;
								_vx1 = v1.x - u.x;
								_vy1 = v1.y - u.y;
								var _qx1 = 0.0;
								var _qy1 = 0.0;
								_qx1 = b.x - a.x;
								_qy1 = b.y - a.y;
								var den1 = _vy1 * _qx1 - _vx1 * _qy1;
								var tmp2;
								if(den1 * den1 > nape_Config.epsilon * nape_Config.epsilon) {
									den1 = 1 / den1;
									var txx1 = (_qy1 * _sx1 - _qx1 * _sy1) * den1;
									if(txx1 > nape_Config.epsilon && txx1 < 1 - nape_Config.epsilon) {
										var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
										if(sxx1 > nape_Config.epsilon && sxx1 < 1 - nape_Config.epsilon) {
											t1 = txx1;
											tmp2 = true;
										} else {
											tmp2 = false;
										}
									} else {
										tmp2 = false;
									}
								} else {
									tmp2 = false;
								}
								if(tmp2) {
									if(t1 >= max) {
										itmo = ite2;
										indo = ind2;
										if(++icnt == cnt) {
											max = t1;
											cx_ite = beg_ite;
											break;
										} else {
											max = t1;
										}
									}
								}
								u = v1;
								ite2 = cx_ite;
								++ind2;
								if(ind2 >= s2.polygon.edgeCnt) {
									ind2 = 0;
								}
								cx_ite = cx_ite.next;
								if(cx_ite == null) {
									cx_ite = s2.polygon.gverts.next;
								}
							}
							if(itmo == null) {
								break;
							}
							var u1 = itmo;
							var itm2 = itmo.next;
							if(itm2 == null) {
								itm2 = s2.polygon.gverts.next;
							}
							var v2 = itm2;
							var cx = 0.0;
							var cy = 0.0;
							var T = max;
							cx = u1.x + (v2.x - u1.x) * T;
							cy = u1.y + (v2.y - u1.y) * T;
							var tmp3;
							if(fst_vert != null) {
								var dx1 = 0.0;
								var dy1 = 0.0;
								dx1 = cx - fst_vert.x;
								dy1 = cy - fst_vert.y;
								tmp3 = dx1 * dx1 + dy1 * dy1 < nape_Config.epsilon;
							} else {
								tmp3 = false;
							}
							if(tmp3) {
								break;
							}
							var tmp4 = zpp_$nape_geom_ZPP_$Collide.flowpoly;
							var ret;
							if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
								ret = new zpp_$nape_geom_ZPP_$Vec2();
							} else {
								ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
								zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
								ret.next = null;
							}
							ret.weak = false;
							ret._immutable = false;
							ret.x = cx;
							ret.y = cy;
							tmp4.add(ret);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							}
							ite2 = itmo;
							ind2 = indo;
							poly1 = !poly1;
							cnt = 2;
						}
					} else {
						ite2 = ite2.next;
						++ind2;
						if(ite2 == null) {
							ite2 = s2.polygon.gverts.next;
							ind2 = 0;
						}
						if(!out2[ind2]) {
							var ex1 = ite2;
							var tmp5;
							if(fst_vert != null) {
								var dx2 = 0.0;
								var dy2 = 0.0;
								dx2 = ex1.x - fst_vert.x;
								dy2 = ex1.y - fst_vert.y;
								tmp5 = dx2 * dx2 + dy2 * dy2 < nape_Config.epsilon;
							} else {
								tmp5 = false;
							}
							if(tmp5) {
								break;
							}
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ex1);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							}
							cnt = 1;
						} else {
							var a1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							var b1 = ite2;
							var u2 = ite1;
							var itm1 = ite1.next;
							if(itm1 == null) {
								itm1 = s1.polygon.gverts.next;
							}
							var max1 = -1.0;
							var itmo1 = null;
							var indo1 = 0;
							var icnt1 = 0;
							var beg_ite1 = itm1;
							var cx_ite1 = itm1;
							while(true) {
								var v3 = cx_ite1;
								var t2 = 0.0;
								var _sx2 = 0.0;
								var _sy2 = 0.0;
								_sx2 = u2.x - a1.x;
								_sy2 = u2.y - a1.y;
								var _vx2 = 0.0;
								var _vy2 = 0.0;
								_vx2 = v3.x - u2.x;
								_vy2 = v3.y - u2.y;
								var _qx2 = 0.0;
								var _qy2 = 0.0;
								_qx2 = b1.x - a1.x;
								_qy2 = b1.y - a1.y;
								var den2 = _vy2 * _qx2 - _vx2 * _qy2;
								var tmp6;
								if(den2 * den2 > nape_Config.epsilon * nape_Config.epsilon) {
									den2 = 1 / den2;
									var txx2 = (_qy2 * _sx2 - _qx2 * _sy2) * den2;
									if(txx2 > nape_Config.epsilon && txx2 < 1 - nape_Config.epsilon) {
										var sxx2 = (_vy2 * _sx2 - _vx2 * _sy2) * den2;
										if(sxx2 > nape_Config.epsilon && sxx2 < 1 - nape_Config.epsilon) {
											t2 = txx2;
											tmp6 = true;
										} else {
											tmp6 = false;
										}
									} else {
										tmp6 = false;
									}
								} else {
									tmp6 = false;
								}
								if(tmp6) {
									if(t2 >= max1) {
										itmo1 = ite1;
										indo1 = ind1;
										if(++icnt1 == cnt) {
											max1 = t2;
											cx_ite1 = beg_ite1;
											break;
										} else {
											max1 = t2;
										}
									}
								}
								u2 = v3;
								ite1 = cx_ite1;
								++ind1;
								if(ind1 >= s1.polygon.edgeCnt) {
									ind1 = 0;
								}
								cx_ite1 = cx_ite1.next;
								if(cx_ite1 == null) {
									cx_ite1 = s1.polygon.gverts.next;
								}
								if(!false) {
									break;
								}
							}
							while(cx_ite1 != beg_ite1) {
								var v4 = cx_ite1;
								var t3 = 0.0;
								var _sx3 = 0.0;
								var _sy3 = 0.0;
								_sx3 = u2.x - a1.x;
								_sy3 = u2.y - a1.y;
								var _vx3 = 0.0;
								var _vy3 = 0.0;
								_vx3 = v4.x - u2.x;
								_vy3 = v4.y - u2.y;
								var _qx3 = 0.0;
								var _qy3 = 0.0;
								_qx3 = b1.x - a1.x;
								_qy3 = b1.y - a1.y;
								var den3 = _vy3 * _qx3 - _vx3 * _qy3;
								var tmp7;
								if(den3 * den3 > nape_Config.epsilon * nape_Config.epsilon) {
									den3 = 1 / den3;
									var txx3 = (_qy3 * _sx3 - _qx3 * _sy3) * den3;
									if(txx3 > nape_Config.epsilon && txx3 < 1 - nape_Config.epsilon) {
										var sxx3 = (_vy3 * _sx3 - _vx3 * _sy3) * den3;
										if(sxx3 > nape_Config.epsilon && sxx3 < 1 - nape_Config.epsilon) {
											t3 = txx3;
											tmp7 = true;
										} else {
											tmp7 = false;
										}
									} else {
										tmp7 = false;
									}
								} else {
									tmp7 = false;
								}
								if(tmp7) {
									if(t3 >= max1) {
										itmo1 = ite1;
										indo1 = ind1;
										if(++icnt1 == cnt) {
											max1 = t3;
											cx_ite1 = beg_ite1;
											break;
										} else {
											max1 = t3;
										}
									}
								}
								u2 = v4;
								ite1 = cx_ite1;
								++ind1;
								if(ind1 >= s1.polygon.edgeCnt) {
									ind1 = 0;
								}
								cx_ite1 = cx_ite1.next;
								if(cx_ite1 == null) {
									cx_ite1 = s1.polygon.gverts.next;
								}
							}
							if(itmo1 == null) {
								break;
							}
							var u3 = itmo1;
							var itm21 = itmo1.next;
							if(itm21 == null) {
								itm21 = s1.polygon.gverts.next;
							}
							var v5 = itm21;
							var cx1 = 0.0;
							var cy1 = 0.0;
							var T1 = max1;
							cx1 = u3.x + (v5.x - u3.x) * T1;
							cy1 = u3.y + (v5.y - u3.y) * T1;
							var tmp8;
							if(fst_vert != null) {
								var dx3 = 0.0;
								var dy3 = 0.0;
								dx3 = cx1 - fst_vert.x;
								dy3 = cy1 - fst_vert.y;
								tmp8 = dx3 * dx3 + dy3 * dy3 < nape_Config.epsilon;
							} else {
								tmp8 = false;
							}
							if(tmp8) {
								break;
							}
							var tmp9 = zpp_$nape_geom_ZPP_$Collide.flowpoly;
							var ret1;
							if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
								ret1 = new zpp_$nape_geom_ZPP_$Vec2();
							} else {
								ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
								zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.weak = false;
							ret1._immutable = false;
							ret1.x = cx1;
							ret1.y = cy1;
							tmp9.add(ret1);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
							}
							ite1 = itmo1;
							ind1 = indo1;
							poly1 = !poly1;
							cnt = 2;
						}
					}
					if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null && zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next != null && zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.next != null) {
						var area = 0.0;
						var COMx = 0.0;
						var COMy = 0.0;
						COMx = 0;
						COMy = 0;
						area = 0.0;
						var cx_ite = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
						var u = cx_ite.elt;
						cx_ite = cx_ite.next;
						var v = cx_ite.elt;
						cx_ite = cx_ite.next;
						while(cx_ite != null) {
							var w = cx_ite.elt;
							area += v.x * (w.y - u.y);
							var cf = w.y * v.x - w.x * v.y;
							COMx += (v.x + w.x) * cf;
							COMy += (v.y + w.y) * cf;
							u = v;
							v = w;
							cx_ite = cx_ite.next;
						}
						cx_ite = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
						var w = cx_ite.elt;
						area += v.x * (w.y - u.y);
						var cf = w.y * v.x - w.x * v.y;
						COMx += (v.x + w.x) * cf;
						COMy += (v.y + w.y) * cf;
						u = v;
						v = w;
						cx_ite = cx_ite.next;
						var w = cx_ite.elt;
						area += v.x * (w.y - u.y);
						var cf = w.y * v.x - w.x * v.y;
						COMx += (v.x + w.x) * cf;
						COMy += (v.y + w.y) * cf;
						area *= 0.5;
						var ia = 1 / (6 * area);
						var t = ia;
						COMx *= t;
						COMy *= t;
						arb.overlap = -area;
						arb.centroidx = COMx;
						arb.centroidy = COMy;
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}
		} else {
			var inte = [];
			var total = true;
			var a0 = null;
			var vi = null;
			var max = -1e+100;
			var cont = true;
			var vite = s2.polygon.gverts.next;
			var ind = 0;
			var cx_ite = s2.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy;
				if(dist > a.gprojection + s1.circle.radius) {
					cont = false;
					break;
				} else if(dist + s1.circle.radius > a.gprojection + nape_Config.epsilon) {
					total = false;
					inte[ind] = true;
				}
				dist -= a.gprojection + s1.circle.radius;
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				++ind;
				cx_ite = cx_ite.next;
			}
			if(cont) {
				if(total) {
					arb.overlap = s1.circle.area;
					arb.centroidx = s1.circle.worldCOMx;
					arb.centroidy = s1.circle.worldCOMy;
					return true;
				} else {
					var v0 = vi;
					var v1 = vi.next == null ? s2.polygon.gverts.next : vi.next;
					var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
					var tmp;
					if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
						var minDist = s1.circle.radius;
						var px = 0.0;
						var py = 0.0;
						px = v0.x - s1.circle.worldCOMx;
						py = v0.y - s1.circle.worldCOMy;
						var distSqr = px * px + py * py;
						tmp = distSqr <= minDist * minDist;
					} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
						var minDist = s1.circle.radius;
						var px = 0.0;
						var py = 0.0;
						px = v1.x - s1.circle.worldCOMx;
						py = v1.y - s1.circle.worldCOMy;
						var distSqr = px * px + py * py;
						tmp = distSqr <= minDist * minDist;
					} else {
						tmp = true;
					}
					if(tmp) {
						var ins = [];
						var ind = 0;
						var total = true;
						var vi = null;
						var vind = 0;
						var cx_ite = s2.polygon.gverts.next;
						while(cx_ite != null) {
							var v = cx_ite;
							var dx = 0.0;
							var dy = 0.0;
							dx = v.x - s1.circle.worldCOMx;
							dy = v.y - s1.circle.worldCOMy;
							var dist = dx * dx + dy * dy;
							if(!(ins[ind] = dist <= s1.circle.radius * s1.circle.radius)) {
								total = false;
							} else {
								vind = ind;
								vi = cx_ite;
							}
							++ind;
							cx_ite = cx_ite.next;
						}
						if(total) {
							var _this = s2.polygon;
							if(_this.zip_worldCOM) {
								if(_this.body != null) {
									_this.zip_worldCOM = false;
									if(_this.zip_localCOM) {
										_this.zip_localCOM = false;
										if(_this.type == 1) {
											var _this1 = _this.polygon;
											if(_this1.lverts.next == null) {
												throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
											}
											if(_this1.lverts.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
											} else if(_this1.lverts.next.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
												var t = 1.0;
												_this1.localCOMx += _this1.lverts.next.next.x * t;
												_this1.localCOMy += _this1.lverts.next.next.y * t;
												var t = 0.5;
												_this1.localCOMx *= t;
												_this1.localCOMy *= t;
											} else {
												_this1.localCOMx = 0;
												_this1.localCOMy = 0;
												var area = 0.0;
												var cx_ite = _this1.lverts.next;
												var u = cx_ite;
												cx_ite = cx_ite.next;
												var v = cx_ite;
												cx_ite = cx_ite.next;
												while(cx_ite != null) {
													var w = cx_ite;
													area += v.x * (w.y - u.y);
													var cf = w.y * v.x - w.x * v.y;
													_this1.localCOMx += (v.x + w.x) * cf;
													_this1.localCOMy += (v.y + w.y) * cf;
													u = v;
													v = w;
													cx_ite = cx_ite.next;
												}
												cx_ite = _this1.lverts.next;
												var w = cx_ite;
												area += v.x * (w.y - u.y);
												var cf = w.y * v.x - w.x * v.y;
												_this1.localCOMx += (v.x + w.x) * cf;
												_this1.localCOMy += (v.y + w.y) * cf;
												u = v;
												v = w;
												cx_ite = cx_ite.next;
												var w = cx_ite;
												area += v.x * (w.y - u.y);
												var cf = w.y * v.x - w.x * v.y;
												_this1.localCOMx += (v.x + w.x) * cf;
												_this1.localCOMy += (v.y + w.y) * cf;
												area = 1 / (3 * area);
												var t = area;
												_this1.localCOMx *= t;
												_this1.localCOMy *= t;
											}
										}
										if(_this.wrap_localCOM != null) {
											_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
											_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
										}
									}
									var _this1 = _this.body;
									if(_this1.zip_axis) {
										_this1.zip_axis = false;
										_this1.axisx = Math.sin(_this1.rot);
										_this1.axisy = Math.cos(_this1.rot);
									}
									_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
									_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
								}
							}
							arb.overlap = s2.polygon.area;
							arb.centroidx = s2.polygon.worldCOMx;
							arb.centroidy = s2.polygon.worldCOMy;
							return true;
						} else {
							while(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null) {
								var p = zpp_$nape_geom_ZPP_$Collide.flowpoly.pop_unsafe();
								if(!p._inuse) {
									var o = p;
									if(o.outer != null) {
										o.outer.zpp_inner = null;
										o.outer = null;
									}
									o._isimmutable = null;
									o._validate = null;
									o._invalidate = null;
									o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
									zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
								}
							}
							zpp_$nape_geom_ZPP_$Collide.flowsegs.clear();
							var fst_vert = null;
							var state = 1;
							if(vi == null) {
								vi = s2.polygon.gverts.next;
								state = 2;
							} else {
								fst_vert = vi;
								zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert);
							}
							while(state != 0) if(state == 1) {
								vi = vi.next;
								if(vi == null) {
									vi = s2.polygon.gverts.next;
								}
								++vind;
								if(vind >= s2.polygon.edgeCnt) {
									vind = 0;
								}
								if(ins[vind]) {
									var dx = 0.0;
									var dy = 0.0;
									dx = fst_vert.x - vi.x;
									dy = fst_vert.y - vi.y;
									if(dx * dx + dy * dy < nape_Config.epsilon) {
										break;
									}
									zpp_$nape_geom_ZPP_$Collide.flowpoly.add(vi);
								} else {
									var u = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
									var v = vi;
									var vx = 0.0;
									var vy = 0.0;
									vx = v.x - u.x;
									vy = v.y - u.y;
									var qx = 0.0;
									var qy = 0.0;
									qx = u.x - s1.circle.worldCOMx;
									qy = u.y - s1.circle.worldCOMy;
									var A = vx * vx + vy * vy;
									var B = 2 * (qx * vx + qy * vy);
									var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
									var D = Math.sqrt(B * B - 4 * A * C);
									A = 1 / (2 * A);
									var t = (-B - D) * A;
									var tval = t < nape_Config.epsilon ? (-B + D) * A : t;
									var cx = 0.0;
									var cy = 0.0;
									var T = tval;
									cx = u.x + (v.x - u.x) * T;
									cy = u.y + (v.y - u.y) * T;
									var dx1 = 0.0;
									var dy1 = 0.0;
									dx1 = fst_vert.x - cx;
									dy1 = fst_vert.y - cy;
									if(dx1 * dx1 + dy1 * dy1 < nape_Config.epsilon) {
										break;
									}
									var tmp = zpp_$nape_geom_ZPP_$Collide.flowpoly;
									var ret;
									if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
										ret = new zpp_$nape_geom_ZPP_$Vec2();
									} else {
										ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
										zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
										ret.next = null;
									}
									ret.weak = false;
									ret._immutable = false;
									ret.x = cx;
									ret.y = cy;
									tmp.add(ret);
									state = 2;
								}
							} else if(state == 2) {
								var vi2 = vi.next;
								if(vi2 == null) {
									vi2 = s2.polygon.gverts.next;
								}
								var u1 = vi;
								state = 0;
								var beg_ite = vi2;
								var cx_ite = vi2;
								while(true) {
									var v1 = cx_ite;
									var vind2 = vind + 1;
									if(vind2 == s2.polygon.edgeCnt) {
										vind2 = 0;
									}
									if(inte[vind]) {
										if(ins[vind2]) {
											var vx1 = 0.0;
											var vy1 = 0.0;
											vx1 = v1.x - u1.x;
											vy1 = v1.y - u1.y;
											var qx1 = 0.0;
											var qy1 = 0.0;
											qx1 = u1.x - s1.circle.worldCOMx;
											qy1 = u1.y - s1.circle.worldCOMy;
											var A1 = vx1 * vx1 + vy1 * vy1;
											var B1 = 2 * (qx1 * vx1 + qy1 * vy1);
											var C1 = qx1 * qx1 + qy1 * qy1 - s1.circle.radius * s1.circle.radius;
											var D1 = Math.sqrt(B1 * B1 - 4 * A1 * C1);
											A1 = 1 / (2 * A1);
											var t1 = (-B1 - D1) * A1;
											var tval1 = t1 < nape_Config.epsilon ? (-B1 + D1) * A1 : t1;
											var cx1 = 0.0;
											var cy1 = 0.0;
											var T1 = tval1;
											cx1 = u1.x + (v1.x - u1.x) * T1;
											cy1 = u1.y + (v1.y - u1.y) * T1;
											var dx2 = 0.0;
											var dy2 = 0.0;
											dx2 = fst_vert.x - cx1;
											dy2 = fst_vert.y - cy1;
											if(dx2 * dx2 + dy2 * dy2 < nape_Config.epsilon) {
												state = 0;
												cx_ite = beg_ite;
												break;
											}
											var ret1;
											if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
												ret1 = new zpp_$nape_geom_ZPP_$Vec2();
											} else {
												ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
												zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
												ret1.next = null;
											}
											ret1.weak = false;
											ret1._immutable = false;
											ret1.x = cx1;
											ret1.y = cy1;
											var cp = ret1;
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp);
											zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp);
											state = 1;
											cx_ite = beg_ite;
											break;
										} else {
											var t0 = 0.0;
											var t11 = 0.0;
											var vx2 = 0.0;
											var vy2 = 0.0;
											vx2 = v1.x - u1.x;
											vy2 = v1.y - u1.y;
											var qx2 = 0.0;
											var qy2 = 0.0;
											qx2 = u1.x - s1.circle.worldCOMx;
											qy2 = u1.y - s1.circle.worldCOMy;
											var A2 = vx2 * vx2 + vy2 * vy2;
											var B2 = 2 * (qx2 * vx2 + qy2 * vy2);
											var C2 = qx2 * qx2 + qy2 * qy2 - s1.circle.radius * s1.circle.radius;
											var D2 = B2 * B2 - 4 * A2 * C2;
											var two;
											if(D2 * D2 < nape_Config.epsilon) {
												if(D2 < 0) {
													t0 = 10.0;
												} else {
													t11 = -B2 / (2 * A2);
													t0 = t11;
												}
												two = false;
											} else {
												D2 = Math.sqrt(D2);
												A2 = 1 / (2 * A2);
												t0 = (-B2 - D2) * A2;
												t11 = (-B2 + D2) * A2;
												two = true;
											}
											if(t0 < 1 - nape_Config.epsilon && t11 > nape_Config.epsilon) {
												var cx2 = 0.0;
												var cy2 = 0.0;
												var T2 = t0;
												cx2 = u1.x + (v1.x - u1.x) * T2;
												cy2 = u1.y + (v1.y - u1.y) * T2;
												var tmp1;
												if(fst_vert != null) {
													var dx3 = 0.0;
													var dy3 = 0.0;
													dx3 = fst_vert.x - cx2;
													dy3 = fst_vert.y - cy2;
													tmp1 = dx3 * dx3 + dy3 * dy3 < nape_Config.epsilon;
												} else {
													tmp1 = false;
												}
												if(tmp1) {
													state = 0;
													cx_ite = beg_ite;
													break;
												}
												var ret2;
												if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
													ret2 = new zpp_$nape_geom_ZPP_$Vec2();
												} else {
													ret2 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
													zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret2.next;
													ret2.next = null;
												}
												ret2.weak = false;
												ret2._immutable = false;
												ret2.x = cx2;
												ret2.y = cy2;
												var cp1 = ret2;
												if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null) {
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp1);
												}
												zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp1);
												if(fst_vert == null) {
													fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
												}
												if(two) {
													var cx3 = 0.0;
													var cy3 = 0.0;
													var T3 = t11;
													cx3 = u1.x + (v1.x - u1.x) * T3;
													cy3 = u1.y + (v1.y - u1.y) * T3;
													var tmp2 = zpp_$nape_geom_ZPP_$Collide.flowpoly;
													var ret3;
													if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
														ret3 = new zpp_$nape_geom_ZPP_$Vec2();
													} else {
														ret3 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
														zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret3.next;
														ret3.next = null;
													}
													ret3.weak = false;
													ret3._immutable = false;
													ret3.x = cx3;
													ret3.y = cy3;
													tmp2.add(ret3);
												}
											}
										}
									}
									u1 = v1;
									vi = cx_ite;
									vind = vind2;
									cx_ite = cx_ite.next;
									if(cx_ite == null) {
										cx_ite = s2.polygon.gverts.next;
									}
									if(!false) {
										break;
									}
								}
								while(cx_ite != beg_ite) {
									var v2 = cx_ite;
									var vind21 = vind + 1;
									if(vind21 == s2.polygon.edgeCnt) {
										vind21 = 0;
									}
									if(inte[vind]) {
										if(ins[vind21]) {
											var vx3 = 0.0;
											var vy3 = 0.0;
											vx3 = v2.x - u1.x;
											vy3 = v2.y - u1.y;
											var qx3 = 0.0;
											var qy3 = 0.0;
											qx3 = u1.x - s1.circle.worldCOMx;
											qy3 = u1.y - s1.circle.worldCOMy;
											var A3 = vx3 * vx3 + vy3 * vy3;
											var B3 = 2 * (qx3 * vx3 + qy3 * vy3);
											var C3 = qx3 * qx3 + qy3 * qy3 - s1.circle.radius * s1.circle.radius;
											var D3 = Math.sqrt(B3 * B3 - 4 * A3 * C3);
											A3 = 1 / (2 * A3);
											var t2 = (-B3 - D3) * A3;
											var tval2 = t2 < nape_Config.epsilon ? (-B3 + D3) * A3 : t2;
											var cx4 = 0.0;
											var cy4 = 0.0;
											var T4 = tval2;
											cx4 = u1.x + (v2.x - u1.x) * T4;
											cy4 = u1.y + (v2.y - u1.y) * T4;
											var dx4 = 0.0;
											var dy4 = 0.0;
											dx4 = fst_vert.x - cx4;
											dy4 = fst_vert.y - cy4;
											if(dx4 * dx4 + dy4 * dy4 < nape_Config.epsilon) {
												state = 0;
												cx_ite = beg_ite;
												break;
											}
											var ret4;
											if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
												ret4 = new zpp_$nape_geom_ZPP_$Vec2();
											} else {
												ret4 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
												zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret4.next;
												ret4.next = null;
											}
											ret4.weak = false;
											ret4._immutable = false;
											ret4.x = cx4;
											ret4.y = cy4;
											var cp2 = ret4;
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp2);
											zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp2);
											state = 1;
											cx_ite = beg_ite;
											break;
										} else {
											var t01 = 0.0;
											var t12 = 0.0;
											var vx4 = 0.0;
											var vy4 = 0.0;
											vx4 = v2.x - u1.x;
											vy4 = v2.y - u1.y;
											var qx4 = 0.0;
											var qy4 = 0.0;
											qx4 = u1.x - s1.circle.worldCOMx;
											qy4 = u1.y - s1.circle.worldCOMy;
											var A4 = vx4 * vx4 + vy4 * vy4;
											var B4 = 2 * (qx4 * vx4 + qy4 * vy4);
											var C4 = qx4 * qx4 + qy4 * qy4 - s1.circle.radius * s1.circle.radius;
											var D4 = B4 * B4 - 4 * A4 * C4;
											var two1;
											if(D4 * D4 < nape_Config.epsilon) {
												if(D4 < 0) {
													t01 = 10.0;
												} else {
													t12 = -B4 / (2 * A4);
													t01 = t12;
												}
												two1 = false;
											} else {
												D4 = Math.sqrt(D4);
												A4 = 1 / (2 * A4);
												t01 = (-B4 - D4) * A4;
												t12 = (-B4 + D4) * A4;
												two1 = true;
											}
											if(t01 < 1 - nape_Config.epsilon && t12 > nape_Config.epsilon) {
												var cx5 = 0.0;
												var cy5 = 0.0;
												var T5 = t01;
												cx5 = u1.x + (v2.x - u1.x) * T5;
												cy5 = u1.y + (v2.y - u1.y) * T5;
												var tmp3;
												if(fst_vert != null) {
													var dx5 = 0.0;
													var dy5 = 0.0;
													dx5 = fst_vert.x - cx5;
													dy5 = fst_vert.y - cy5;
													tmp3 = dx5 * dx5 + dy5 * dy5 < nape_Config.epsilon;
												} else {
													tmp3 = false;
												}
												if(tmp3) {
													state = 0;
													cx_ite = beg_ite;
													break;
												}
												var ret5;
												if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
													ret5 = new zpp_$nape_geom_ZPP_$Vec2();
												} else {
													ret5 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
													zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret5.next;
													ret5.next = null;
												}
												ret5.weak = false;
												ret5._immutable = false;
												ret5.x = cx5;
												ret5.y = cy5;
												var cp3 = ret5;
												if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head != null) {
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp3);
												}
												zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp3);
												if(fst_vert == null) {
													fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt;
												}
												if(two1) {
													var cx6 = 0.0;
													var cy6 = 0.0;
													var T6 = t12;
													cx6 = u1.x + (v2.x - u1.x) * T6;
													cy6 = u1.y + (v2.y - u1.y) * T6;
													var tmp4 = zpp_$nape_geom_ZPP_$Collide.flowpoly;
													var ret6;
													if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
														ret6 = new zpp_$nape_geom_ZPP_$Vec2();
													} else {
														ret6 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
														zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret6.next;
														ret6.next = null;
													}
													ret6.weak = false;
													ret6._immutable = false;
													ret6.x = cx6;
													ret6.y = cy6;
													tmp4.add(ret6);
												}
											}
										}
									}
									u1 = v2;
									vi = cx_ite;
									vind = vind21;
									cx_ite = cx_ite.next;
									if(cx_ite == null) {
										cx_ite = s2.polygon.gverts.next;
									}
								}
							}
							if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head == null) {
								return false;
							} else if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next == null) {
								var all = true;
								var cx_ite = s2.polygon.edges.head;
								while(cx_ite != null) {
									var e = cx_ite.elt;
									var dist = e.gnormx * s1.circle.worldCOMx + e.gnormy * s1.circle.worldCOMy;
									if(dist > e.gprojection) {
										all = false;
										break;
									}
									cx_ite = cx_ite.next;
								}
								if(all) {
									arb.overlap = s1.circle.area;
									arb.centroidx = s1.circle.worldCOMx;
									arb.centroidy = s1.circle.worldCOMy;
									return true;
								} else {
									return false;
								}
							} else {
								var COMx = 0;
								var COMy = 0;
								var area = 0.0;
								if(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.next != null) {
									var parea = 0.0;
									var pCOMx = 0.0;
									var pCOMy = 0.0;
									pCOMx = 0;
									pCOMy = 0;
									parea = 0.0;
									var cx_ite = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
									var u = cx_ite.elt;
									cx_ite = cx_ite.next;
									var v = cx_ite.elt;
									cx_ite = cx_ite.next;
									while(cx_ite != null) {
										var w = cx_ite.elt;
										parea += v.x * (w.y - u.y);
										var cf = w.y * v.x - w.x * v.y;
										pCOMx += (v.x + w.x) * cf;
										pCOMy += (v.y + w.y) * cf;
										u = v;
										v = w;
										cx_ite = cx_ite.next;
									}
									cx_ite = zpp_$nape_geom_ZPP_$Collide.flowpoly.head;
									var w = cx_ite.elt;
									parea += v.x * (w.y - u.y);
									var cf = w.y * v.x - w.x * v.y;
									pCOMx += (v.x + w.x) * cf;
									pCOMy += (v.y + w.y) * cf;
									u = v;
									v = w;
									cx_ite = cx_ite.next;
									var w = cx_ite.elt;
									parea += v.x * (w.y - u.y);
									var cf = w.y * v.x - w.x * v.y;
									pCOMx += (v.x + w.x) * cf;
									pCOMy += (v.y + w.y) * cf;
									parea *= 0.5;
									var ia = 1 / (6 * parea);
									var t = ia;
									pCOMx *= t;
									pCOMy *= t;
									var t = -parea;
									COMx += pCOMx * t;
									COMy += pCOMy * t;
									area -= parea;
								} else {
									zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.elt);
									zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.head.next.elt);
								}
								while(zpp_$nape_geom_ZPP_$Collide.flowsegs.head != null) {
									var u = zpp_$nape_geom_ZPP_$Collide.flowsegs.pop_unsafe();
									var v = zpp_$nape_geom_ZPP_$Collide.flowsegs.pop_unsafe();
									var dx = 0.0;
									var dy = 0.0;
									dx = v.x - u.x;
									dy = v.y - u.y;
									var nx = 0.0;
									var ny = 0.0;
									nx = dx;
									ny = dy;
									var d = nx * nx + ny * ny;
									var imag = 1.0 / Math.sqrt(d);
									var t = imag;
									nx *= t;
									ny *= t;
									var t1 = nx;
									nx = -ny;
									ny = t1;
									var cx = 0.0;
									var cy = 0.0;
									cx = u.x + v.x;
									cy = u.y + v.y;
									var t2 = 0.5;
									cx *= t2;
									cy *= t2;
									var t3 = 1.0;
									cx -= s1.circle.worldCOMx * t3;
									cy -= s1.circle.worldCOMy * t3;
									var xd = nx * cx + ny * cy;
									var carea = 0.0;
									var ccom = 0.0;
									var X = xd;
									var cos = X / s1.circle.radius;
									var sin = Math.sqrt(1 - cos * cos);
									var theta = Math.acos(cos);
									carea = s1.circle.radius * (s1.circle.radius * theta - X * sin);
									ccom = 0.66666666666666663 * s1.circle.radius * sin * sin * sin / (theta - cos * sin);
									cx = s1.circle.worldCOMx;
									cy = s1.circle.worldCOMy;
									var t4 = ccom;
									cx += nx * t4;
									cy += ny * t4;
									var t5 = carea;
									COMx += cx * t5;
									COMy += cy * t5;
									area += carea;
								}
								var t = 1.0 / area;
								COMx *= t;
								COMy *= t;
								arb.overlap = area;
								arb.centroidx = COMx;
								arb.centroidy = COMy;
								return true;
							}
						}
					} else {
						return false;
					}
				}
			} else {
				return false;
			}
		}
	} else {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var deltax = 0.0;
		var deltay = 0.0;
		deltax = c2.worldCOMx - c1.worldCOMx;
		deltay = c2.worldCOMy - c1.worldCOMy;
		var cr = c1.radius + c2.radius;
		var ds = deltax * deltax + deltay * deltay;
		if(ds > cr * cr) {
			return false;
		} else if(ds < nape_Config.epsilon * nape_Config.epsilon) {
			if(c1.radius < c2.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
			} else {
				arb.overlap = c2.area;
				arb.centroidx = c2.worldCOMx;
				arb.centroidy = c2.worldCOMy;
			}
			return true;
		} else {
			var d = Math.sqrt(ds);
			var id = 1 / d;
			var x1 = 0.5 * (d - (c2.radius * c2.radius - c1.radius * c1.radius) * id);
			if(x1 <= -c1.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
			} else {
				var x2 = d - x1;
				if(x2 <= -c2.radius) {
					arb.overlap = c2.area;
					arb.centroidx = c2.worldCOMx;
					arb.centroidy = c2.worldCOMy;
				} else {
					var area1 = 0.0;
					var y1 = 0.0;
					var area2 = 0.0;
					var y2 = 0.0;
					var X = x1;
					var cos = X / c1.radius;
					var sin = Math.sqrt(1 - cos * cos);
					var theta = Math.acos(cos);
					area1 = c1.radius * (c1.radius * theta - X * sin);
					y1 = 0.66666666666666663 * c1.radius * sin * sin * sin / (theta - cos * sin);
					var X = x2;
					var cos = X / c2.radius;
					var sin = Math.sqrt(1 - cos * cos);
					var theta = Math.acos(cos);
					area2 = c2.radius * (c2.radius * theta - X * sin);
					y2 = 0.66666666666666663 * c2.radius * sin * sin * sin / (theta - cos * sin);
					var tarea = area1 + area2;
					var ya = (y1 * area1 + (d - y2) * area2) / tarea * id;
					arb.overlap = tarea;
					arb.centroidx = c1.worldCOMx + deltax * ya;
					arb.centroidy = c1.worldCOMy + deltay * ya;
				}
			}
			return true;
		}
	}
};
var zpp_$nape_geom_ZPP_$ConvexRayResult = function() {
	this.toiDistance = 0.0;
	this.next = null;
	this.inner = false;
	this.shape = null;
};
zpp_$nape_geom_ZPP_$ConvexRayResult.__name__ = true;
var zpp_$nape_geom_ZPP_$GeomVert = function() {
	this.forced = false;
	this.next = null;
	this.prev = null;
	this.y = 0.0;
	this.x = 0.0;
};
zpp_$nape_geom_ZPP_$GeomVert.__name__ = true;
var zpp_$nape_geom_ZPP_$GeomPoly = function(outer) {
	this.vertices = null;
	this.outer = null;
	this.outer = outer;
};
zpp_$nape_geom_ZPP_$GeomPoly.__name__ = true;
var zpp_$nape_geom_ZPP_$Mat23 = function() {
	this.next = null;
	this._invalidate = null;
	this.ty = 0.0;
	this.tx = 0.0;
	this.d = 0.0;
	this.c = 0.0;
	this.b = 0.0;
	this.a = 0.0;
	this.outer = null;
};
zpp_$nape_geom_ZPP_$Mat23.__name__ = true;
zpp_$nape_geom_ZPP_$Mat23.get = function() {
	var ret;
	if(zpp_$nape_geom_ZPP_$Mat23.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$Mat23();
	} else {
		ret = zpp_$nape_geom_ZPP_$Mat23.zpp_pool;
		zpp_$nape_geom_ZPP_$Mat23.zpp_pool = ret.next;
		ret.next = null;
	}
	return ret;
};
var zpp_$nape_geom_ZPP_$MatMN = function(m,n) {
	this.x = null;
	this.n = 0;
	this.m = 0;
	this.outer = null;
	this.m = m;
	this.n = n;
	this.x = [];
	var _g = 0;
	var _g1 = m * n;
	while(_g < _g1) {
		var i = _g++;
		this.x.push(0.0);
	}
};
zpp_$nape_geom_ZPP_$MatMN.__name__ = true;
var zpp_$nape_geom_ZPP_$ToiEvent = function() {
	this.kinematic = false;
	this.failed = false;
	this.slipped = false;
	this.axis = null;
	this.c2 = null;
	this.c1 = null;
	this.frozen2 = false;
	this.frozen1 = false;
	this.arbiter = null;
	this.s2 = null;
	this.s1 = null;
	this.toi = 0.0;
	this.next = null;
	this.c1 = new zpp_$nape_geom_ZPP_$Vec2();
	this.c2 = new zpp_$nape_geom_ZPP_$Vec2();
	this.axis = new zpp_$nape_geom_ZPP_$Vec2();
};
zpp_$nape_geom_ZPP_$ToiEvent.__name__ = true;
var zpp_$nape_geom_ZPP_$SweepDistance = function() { };
zpp_$nape_geom_ZPP_$SweepDistance.__name__ = true;
zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep = function(toi,timeStep,lowerBound,negRadius,userAPI) {
	if(userAPI == null) {
		userAPI = false;
	}
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = b2.velx - b1.velx;
	deltay = b2.vely - b1.vely;
	var ang1 = b1.angvel;
	if(ang1 < 0) {
		ang1 = -ang1;
	}
	var ang2 = b2.angvel;
	if(ang2 < 0) {
		ang2 = -ang2;
	}
	var angBias = s1.sweepCoef * ang1 + s2.sweepCoef * ang2;
	if(!userAPI && !toi.kinematic && deltax * deltax + deltay * deltay < nape_Config.dynamicSweepLinearThreshold * nape_Config.dynamicSweepLinearThreshold && angBias < nape_Config.dynamicSweepAngularThreshold) {
		toi.toi = -1;
		toi.failed = true;
		return;
	}
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		var dt = curTOI * timeStep;
		var delta = dt - b1.sweepTime;
		if(delta != 0) {
			b1.sweepTime = dt;
			var t = delta;
			b1.posx += b1.velx * t;
			b1.posy += b1.vely * t;
			if(b1.angvel != 0) {
				var dr = b1.sweep_angvel * delta;
				b1.rot += dr;
				if(dr * dr > 0.0001) {
					b1.axisx = Math.sin(b1.rot);
					b1.axisy = Math.cos(b1.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * b1.axisx + dr * b1.axisy) * m;
					b1.axisy = (p * b1.axisy - dr * b1.axisx) * m;
					b1.axisx = nx;
				}
			}
		}
		if(s1.type == 0) {
			s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
			s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
		} else {
			var p1 = s1.polygon;
			var li = p1.lverts.next;
			var cx_ite = p1.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = b1.posx + (b1.axisy * l.x - b1.axisx * l.y);
				g.y = b1.posy + (l.x * b1.axisx + l.y * b1.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p1.edges.head;
			var cx_ite1 = p1.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gnormx = b1.axisy * e.lnormx - b1.axisx * e.lnormy;
				e.gnormy = e.lnormx * b1.axisx + e.lnormy * b1.axisy;
				e.gprojection = b1.posx * e.gnormx + b1.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var v1 = p1.gverts.next;
			var e1 = ite.elt;
			ite = ite.next;
			e1.gnormx = b1.axisy * e1.lnormx - b1.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * b1.axisx + e1.lnormy * b1.axisy;
			e1.gprojection = b1.posx * e1.gnormx + b1.posy * e1.gnormy + e1.lprojection;
			e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
			e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
		}
		var dt1 = curTOI * timeStep;
		var delta1 = dt1 - b2.sweepTime;
		if(delta1 != 0) {
			b2.sweepTime = dt1;
			var t1 = delta1;
			b2.posx += b2.velx * t1;
			b2.posy += b2.vely * t1;
			if(b2.angvel != 0) {
				var dr1 = b2.sweep_angvel * delta1;
				b2.rot += dr1;
				if(dr1 * dr1 > 0.0001) {
					b2.axisx = Math.sin(b2.rot);
					b2.axisy = Math.cos(b2.rot);
				} else {
					var d21 = dr1 * dr1;
					var p2 = 1 - 0.5 * d21;
					var m1 = 1 - d21 * d21 / 8;
					var nx1 = (p2 * b2.axisx + dr1 * b2.axisy) * m1;
					b2.axisy = (p2 * b2.axisy - dr1 * b2.axisx) * m1;
					b2.axisx = nx1;
				}
			}
		}
		if(s2.type == 0) {
			s2.worldCOMx = b2.posx + (b2.axisy * s2.localCOMx - b2.axisx * s2.localCOMy);
			s2.worldCOMy = b2.posy + (s2.localCOMx * b2.axisx + s2.localCOMy * b2.axisy);
		} else {
			var p3 = s2.polygon;
			var li1 = p3.lverts.next;
			var cx_ite2 = p3.gverts.next;
			while(cx_ite2 != null) {
				var g1 = cx_ite2;
				var l1 = li1;
				li1 = li1.next;
				g1.x = b2.posx + (b2.axisy * l1.x - b2.axisx * l1.y);
				g1.y = b2.posy + (l1.x * b2.axisx + l1.y * b2.axisy);
				cx_ite2 = cx_ite2.next;
			}
			var ite1 = p3.edges.head;
			var cx_ite3 = p3.gverts.next;
			var u1 = cx_ite3;
			cx_ite3 = cx_ite3.next;
			while(cx_ite3 != null) {
				var v2 = cx_ite3;
				var e2 = ite1.elt;
				ite1 = ite1.next;
				e2.gnormx = b2.axisy * e2.lnormx - b2.axisx * e2.lnormy;
				e2.gnormy = e2.lnormx * b2.axisx + e2.lnormy * b2.axisy;
				e2.gprojection = b2.posx * e2.gnormx + b2.posy * e2.gnormy + e2.lprojection;
				e2.tp0 = u1.y * e2.gnormx - u1.x * e2.gnormy;
				e2.tp1 = v2.y * e2.gnormx - v2.x * e2.gnormy;
				u1 = v2;
				cx_ite3 = cx_ite3.next;
			}
			var v3 = p3.gverts.next;
			var e3 = ite1.elt;
			ite1 = ite1.next;
			e3.gnormx = b2.axisy * e3.lnormx - b2.axisx * e3.lnormy;
			e3.gnormy = e3.lnormx * b2.axisx + e3.lnormy * b2.axisy;
			e3.gprojection = b2.posx * e3.gnormx + b2.posy * e3.gnormy + e3.lprojection;
			e3.tp0 = u1.y * e3.gnormx - u1.x * e3.gnormy;
			e3.tp1 = v3.y * e3.gnormx - v3.x * e3.gnormy;
		}
		var s11 = s1;
		var s21 = s2;
		var w1 = c1;
		var w2 = c2;
		var sep;
		if(s11.type == 0 && s21.type == 0) {
			var c11 = s11.circle;
			var c21 = s21.circle;
			var dist;
			var nx2 = 0.0;
			var ny = 0.0;
			nx2 = c21.worldCOMx - c11.worldCOMx;
			ny = c21.worldCOMy - c11.worldCOMy;
			var len = Math.sqrt(nx2 * nx2 + ny * ny);
			dist = len - (c11.radius + c21.radius);
			if(dist < 1e100) {
				if(len == 0) {
					nx2 = 1;
					ny = 0;
				} else {
					var t2 = 1.0 / len;
					nx2 *= t2;
					ny *= t2;
				}
				var t3 = c11.radius;
				w1.x = c11.worldCOMx + nx2 * t3;
				w1.y = c11.worldCOMy + ny * t3;
				var t4 = -c21.radius;
				w2.x = c21.worldCOMx + nx2 * t4;
				w2.y = c21.worldCOMy + ny * t4;
				axis.x = nx2;
				axis.y = ny;
			}
			sep = dist;
		} else {
			var swapped = false;
			if(s11.type == 0 && s21.type == 1) {
				var tmp = s11;
				s11 = s21;
				s21 = tmp;
				var tmp2 = w1;
				w1 = w2;
				w2 = tmp2;
				swapped = true;
			}
			if(s11.type == 1 && s21.type == 0) {
				var poly = s11.polygon;
				var circle = s21.circle;
				var best = -1e+100;
				var a0 = null;
				var cx_ite4 = poly.edges.head;
				while(cx_ite4 != null) {
					var a = cx_ite4.elt;
					var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
					if(dist1 > 1e100) {
						best = dist1;
						break;
					}
					if(dist1 > 0) {
						if(dist1 > best) {
							best = dist1;
							a0 = a;
						}
					} else if(best < 0 && dist1 > best) {
						best = dist1;
						a0 = a;
					}
					cx_ite4 = cx_ite4.next;
				}
				if(best < 1e100) {
					var v0 = a0.gp0;
					var v11 = a0.gp1;
					var dt2 = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
					if(dt2 <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
						var nx3 = 0.0;
						var ny1 = 0.0;
						nx3 = circle.worldCOMx - v0.x;
						ny1 = circle.worldCOMy - v0.y;
						var len1 = Math.sqrt(nx3 * nx3 + ny1 * ny1);
						best = len1 - circle.radius;
						if(best < 1e100) {
							if(len1 == 0) {
								nx3 = 1;
								ny1 = 0;
							} else {
								var t5 = 1.0 / len1;
								nx3 *= t5;
								ny1 *= t5;
							}
							var t6 = 0;
							w1.x = v0.x + nx3 * t6;
							w1.y = v0.y + ny1 * t6;
							var t7 = -circle.radius;
							w2.x = circle.worldCOMx + nx3 * t7;
							w2.y = circle.worldCOMy + ny1 * t7;
							axis.x = nx3;
							axis.y = ny1;
						}
					} else if(dt2 >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
						var nx4 = 0.0;
						var ny2 = 0.0;
						nx4 = circle.worldCOMx - v11.x;
						ny2 = circle.worldCOMy - v11.y;
						var len2 = Math.sqrt(nx4 * nx4 + ny2 * ny2);
						best = len2 - circle.radius;
						if(best < 1e100) {
							if(len2 == 0) {
								nx4 = 1;
								ny2 = 0;
							} else {
								var t8 = 1.0 / len2;
								nx4 *= t8;
								ny2 *= t8;
							}
							var t9 = 0;
							w1.x = v11.x + nx4 * t9;
							w1.y = v11.y + ny2 * t9;
							var t10 = -circle.radius;
							w2.x = circle.worldCOMx + nx4 * t10;
							w2.y = circle.worldCOMy + ny2 * t10;
							axis.x = nx4;
							axis.y = ny2;
						}
					} else {
						var t11 = -circle.radius;
						w2.x = circle.worldCOMx + a0.gnormx * t11;
						w2.y = circle.worldCOMy + a0.gnormy * t11;
						var t12 = -best;
						w1.x = w2.x + a0.gnormx * t12;
						w1.y = w2.y + a0.gnormy * t12;
						axis.x = a0.gnormx;
						axis.y = a0.gnormy;
					}
				}
				if(swapped) {
					axis.x = -axis.x;
					axis.y = -axis.y;
				}
				sep = best;
			} else {
				var p11 = s11.polygon;
				var p21 = s21.polygon;
				var best1 = -1e+100;
				var a1 = null;
				var a2 = null;
				var besti = 0;
				var cx_ite5 = p11.edges.head;
				while(cx_ite5 != null) {
					var a3 = cx_ite5.elt;
					var min = 1e100;
					var cx_ite6 = p21.gverts.next;
					while(cx_ite6 != null) {
						var v4 = cx_ite6;
						var k = a3.gnormx * v4.x + a3.gnormy * v4.y;
						if(k < min) {
							min = k;
						}
						cx_ite6 = cx_ite6.next;
					}
					min -= a3.gprojection;
					if(min > 1e100) {
						best1 = min;
						break;
					}
					if(min > 0) {
						if(min > best1) {
							best1 = min;
							a1 = a3;
							besti = 1;
						}
					} else if(best1 < 0 && min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
					cx_ite5 = cx_ite5.next;
				}
				if(best1 < 1e100) {
					var cx_ite7 = p21.edges.head;
					while(cx_ite7 != null) {
						var a4 = cx_ite7.elt;
						var min1 = 1e100;
						var cx_ite8 = p11.gverts.next;
						while(cx_ite8 != null) {
							var v5 = cx_ite8;
							var k1 = a4.gnormx * v5.x + a4.gnormy * v5.y;
							if(k1 < min1) {
								min1 = k1;
							}
							cx_ite8 = cx_ite8.next;
						}
						min1 -= a4.gprojection;
						if(min1 > 1e100) {
							best1 = min1;
							break;
						}
						if(min1 > 0) {
							if(min1 > best1) {
								best1 = min1;
								a2 = a4;
								besti = 2;
							}
						} else if(best1 < 0 && min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
						cx_ite7 = cx_ite7.next;
					}
					if(best1 < 1e100) {
						var q1;
						var q2;
						var ax;
						if(besti == 1) {
							q1 = p11;
							q2 = p21;
							ax = a1;
						} else {
							q1 = p21;
							q2 = p11;
							ax = a2;
							var tmp1 = w1;
							w1 = w2;
							w2 = tmp1;
							swapped = !swapped;
						}
						var ay = null;
						var min2 = 1e100;
						var cx_ite9 = q2.edges.head;
						while(cx_ite9 != null) {
							var a5 = cx_ite9.elt;
							var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
							if(k2 < min2) {
								min2 = k2;
								ay = a5;
							}
							cx_ite9 = cx_ite9.next;
						}
						if(swapped) {
							axis.x = -ax.gnormx;
							axis.y = -ax.gnormy;
						} else {
							axis.x = ax.gnormx;
							axis.y = ax.gnormy;
						}
						if(best1 >= 0) {
							var v01 = ax.gp0;
							var v12 = ax.gp1;
							var q0 = ay.gp0;
							var q11 = ay.gp1;
							var vx = 0.0;
							var vy = 0.0;
							var qx = 0.0;
							var qy = 0.0;
							vx = v12.x - v01.x;
							vy = v12.y - v01.y;
							qx = q11.x - q0.x;
							qy = q11.y - q0.y;
							var vdot = 1 / (vx * vx + vy * vy);
							var qdot = 1 / (qx * qx + qy * qy);
							var t13 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
							var t21 = -(vx * (v01.x - q11.x) + vy * (v01.y - q11.y)) * vdot;
							var s12 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
							var s22 = -(qx * (q0.x - v12.x) + qy * (q0.y - v12.y)) * qdot;
							if(t13 < 0) {
								t13 = 0;
							} else if(t13 > 1) {
								t13 = 1;
							}
							if(t21 < 0) {
								t21 = 0;
							} else if(t21 > 1) {
								t21 = 1;
							}
							if(s12 < 0) {
								s12 = 0;
							} else if(s12 > 1) {
								s12 = 1;
							}
							if(s22 < 0) {
								s22 = 0;
							} else if(s22 > 1) {
								s22 = 1;
							}
							var f1x = 0.0;
							var f1y = 0.0;
							var t14 = t13;
							f1x = v01.x + vx * t14;
							f1y = v01.y + vy * t14;
							var f2x = 0.0;
							var f2y = 0.0;
							var t15 = t21;
							f2x = v01.x + vx * t15;
							f2y = v01.y + vy * t15;
							var g1x = 0.0;
							var g1y = 0.0;
							var t16 = s12;
							g1x = q0.x + qx * t16;
							g1y = q0.y + qy * t16;
							var g2x = 0.0;
							var g2y = 0.0;
							var t17 = s22;
							g2x = q0.x + qx * t17;
							g2y = q0.y + qy * t17;
							var dx = 0.0;
							var dy = 0.0;
							dx = f1x - q0.x;
							dy = f1y - q0.y;
							var d1 = dx * dx + dy * dy;
							var dx1 = 0.0;
							var dy1 = 0.0;
							dx1 = f2x - q11.x;
							dy1 = f2y - q11.y;
							var d22 = dx1 * dx1 + dy1 * dy1;
							var dx2 = 0.0;
							var dy2 = 0.0;
							dx2 = g1x - v01.x;
							dy2 = g1y - v01.y;
							var e11 = dx2 * dx2 + dy2 * dy2;
							var dx3 = 0.0;
							var dy3 = 0.0;
							dx3 = g2x - v12.x;
							dy3 = g2y - v12.y;
							var e21 = dx3 * dx3 + dy3 * dy3;
							var minfx = 0.0;
							var minfy = 0.0;
							var minq = null;
							if(d1 < d22) {
								minfx = f1x;
								minfy = f1y;
								minq = q0;
							} else {
								minfx = f2x;
								minfy = f2y;
								minq = q11;
								d1 = d22;
							}
							var mingx = 0.0;
							var mingy = 0.0;
							var minv = null;
							if(e11 < e21) {
								mingx = g1x;
								mingy = g1y;
								minv = v01;
							} else {
								mingx = g2x;
								mingy = g2y;
								minv = v12;
								e11 = e21;
							}
							if(d1 < e11) {
								w1.x = minfx;
								w1.y = minfy;
								w2.x = minq.x;
								w2.y = minq.y;
								best1 = Math.sqrt(d1);
							} else {
								w2.x = mingx;
								w2.y = mingy;
								w1.x = minv.x;
								w1.y = minv.y;
								best1 = Math.sqrt(e11);
							}
							if(best1 != 0) {
								axis.x = w2.x - w1.x;
								axis.y = w2.y - w1.y;
								var t18 = 1.0 / best1;
								axis.x *= t18;
								axis.y *= t18;
								if(swapped) {
									axis.x = -axis.x;
									axis.y = -axis.y;
								}
							}
							sep = best1;
						} else {
							var c0x = 0.0;
							var c0y = 0.0;
							c0x = ay.gp0.x;
							c0y = ay.gp0.y;
							var c1x = 0.0;
							var c1y = 0.0;
							c1x = ay.gp1.x;
							c1y = ay.gp1.y;
							var dvx = 0.0;
							var dvy = 0.0;
							dvx = c1x - c0x;
							dvy = c1y - c0y;
							var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
							var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
							var den = 1 / (d11 - d0);
							var t19 = (-ax.tp1 - d0) * den;
							if(t19 > nape_Config.epsilon) {
								var t20 = t19;
								c0x += dvx * t20;
								c0y += dvy * t20;
							}
							var t22 = (-ax.tp0 - d11) * den;
							if(t22 < -nape_Config.epsilon) {
								var t23 = t22;
								c1x += dvx * t23;
								c1y += dvy * t23;
							}
							var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
							var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
							if(c0d < c1d) {
								w2.x = c0x;
								w2.y = c0y;
								var t24 = -c0d;
								w1.x = w2.x + ax.gnormx * t24;
								w1.y = w2.y + ax.gnormy * t24;
								sep = c0d;
							} else {
								w2.x = c1x;
								w2.y = c1y;
								var t25 = -c1d;
								w1.x = w2.x + ax.gnormx * t25;
								w1.y = w2.y + ax.gnormy * t25;
								sep = c1d;
							}
						}
					} else {
						sep = 1e100;
					}
				} else {
					sep = 1e100;
				}
			}
		}
		var sep1 = sep + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep1 < nape_Config.distanceThresholdCCD) {
			if(userAPI) {
				break;
			}
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var d2x = 0.0;
			var d2y = 0.0;
			d2x = c2.x - b2.posx;
			d2y = c2.y - b2.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y) + b2.sweep_angvel * (axis.y * d2x - axis.x * d2y);
			if(proj > 0) {
				toi.slipped = true;
			}
			if(proj <= 0 || sep1 < nape_Config.distanceThresholdCCD * 0.5) {
				break;
			}
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta2 = sep1 / denom;
		if(delta2 < 1e-6) {
			delta2 = 1e-6;
		}
		curTOI += delta2;
		if(curTOI >= 1) {
			curTOI = 1;
			var dt3 = curTOI * timeStep;
			var delta3 = dt3 - b1.sweepTime;
			if(delta3 != 0) {
				b1.sweepTime = dt3;
				var t26 = delta3;
				b1.posx += b1.velx * t26;
				b1.posy += b1.vely * t26;
				if(b1.angvel != 0) {
					var dr2 = b1.sweep_angvel * delta3;
					b1.rot += dr2;
					if(dr2 * dr2 > 0.0001) {
						b1.axisx = Math.sin(b1.rot);
						b1.axisy = Math.cos(b1.rot);
					} else {
						var d23 = dr2 * dr2;
						var p4 = 1 - 0.5 * d23;
						var m2 = 1 - d23 * d23 / 8;
						var nx5 = (p4 * b1.axisx + dr2 * b1.axisy) * m2;
						b1.axisy = (p4 * b1.axisy - dr2 * b1.axisx) * m2;
						b1.axisx = nx5;
					}
				}
			}
			if(s1.type == 0) {
				s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
				s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
			} else {
				var p5 = s1.polygon;
				var li2 = p5.lverts.next;
				var cx_ite10 = p5.gverts.next;
				while(cx_ite10 != null) {
					var g2 = cx_ite10;
					var l2 = li2;
					li2 = li2.next;
					g2.x = b1.posx + (b1.axisy * l2.x - b1.axisx * l2.y);
					g2.y = b1.posy + (l2.x * b1.axisx + l2.y * b1.axisy);
					cx_ite10 = cx_ite10.next;
				}
				var ite2 = p5.edges.head;
				var cx_ite11 = p5.gverts.next;
				var u2 = cx_ite11;
				cx_ite11 = cx_ite11.next;
				while(cx_ite11 != null) {
					var v6 = cx_ite11;
					var e4 = ite2.elt;
					ite2 = ite2.next;
					e4.gnormx = b1.axisy * e4.lnormx - b1.axisx * e4.lnormy;
					e4.gnormy = e4.lnormx * b1.axisx + e4.lnormy * b1.axisy;
					e4.gprojection = b1.posx * e4.gnormx + b1.posy * e4.gnormy + e4.lprojection;
					e4.tp0 = u2.y * e4.gnormx - u2.x * e4.gnormy;
					e4.tp1 = v6.y * e4.gnormx - v6.x * e4.gnormy;
					u2 = v6;
					cx_ite11 = cx_ite11.next;
				}
				var v7 = p5.gverts.next;
				var e5 = ite2.elt;
				ite2 = ite2.next;
				e5.gnormx = b1.axisy * e5.lnormx - b1.axisx * e5.lnormy;
				e5.gnormy = e5.lnormx * b1.axisx + e5.lnormy * b1.axisy;
				e5.gprojection = b1.posx * e5.gnormx + b1.posy * e5.gnormy + e5.lprojection;
				e5.tp0 = u2.y * e5.gnormx - u2.x * e5.gnormy;
				e5.tp1 = v7.y * e5.gnormx - v7.x * e5.gnormy;
			}
			var dt4 = curTOI * timeStep;
			var delta4 = dt4 - b2.sweepTime;
			if(delta4 != 0) {
				b2.sweepTime = dt4;
				var t27 = delta4;
				b2.posx += b2.velx * t27;
				b2.posy += b2.vely * t27;
				if(b2.angvel != 0) {
					var dr3 = b2.sweep_angvel * delta4;
					b2.rot += dr3;
					if(dr3 * dr3 > 0.0001) {
						b2.axisx = Math.sin(b2.rot);
						b2.axisy = Math.cos(b2.rot);
					} else {
						var d24 = dr3 * dr3;
						var p6 = 1 - 0.5 * d24;
						var m3 = 1 - d24 * d24 / 8;
						var nx6 = (p6 * b2.axisx + dr3 * b2.axisy) * m3;
						b2.axisy = (p6 * b2.axisy - dr3 * b2.axisx) * m3;
						b2.axisx = nx6;
					}
				}
			}
			if(s2.type == 0) {
				s2.worldCOMx = b2.posx + (b2.axisy * s2.localCOMx - b2.axisx * s2.localCOMy);
				s2.worldCOMy = b2.posy + (s2.localCOMx * b2.axisx + s2.localCOMy * b2.axisy);
			} else {
				var p7 = s2.polygon;
				var li3 = p7.lverts.next;
				var cx_ite12 = p7.gverts.next;
				while(cx_ite12 != null) {
					var g3 = cx_ite12;
					var l3 = li3;
					li3 = li3.next;
					g3.x = b2.posx + (b2.axisy * l3.x - b2.axisx * l3.y);
					g3.y = b2.posy + (l3.x * b2.axisx + l3.y * b2.axisy);
					cx_ite12 = cx_ite12.next;
				}
				var ite3 = p7.edges.head;
				var cx_ite13 = p7.gverts.next;
				var u3 = cx_ite13;
				cx_ite13 = cx_ite13.next;
				while(cx_ite13 != null) {
					var v8 = cx_ite13;
					var e6 = ite3.elt;
					ite3 = ite3.next;
					e6.gnormx = b2.axisy * e6.lnormx - b2.axisx * e6.lnormy;
					e6.gnormy = e6.lnormx * b2.axisx + e6.lnormy * b2.axisy;
					e6.gprojection = b2.posx * e6.gnormx + b2.posy * e6.gnormy + e6.lprojection;
					e6.tp0 = u3.y * e6.gnormx - u3.x * e6.gnormy;
					e6.tp1 = v8.y * e6.gnormx - v8.x * e6.gnormy;
					u3 = v8;
					cx_ite13 = cx_ite13.next;
				}
				var v9 = p7.gverts.next;
				var e7 = ite3.elt;
				ite3 = ite3.next;
				e7.gnormx = b2.axisy * e7.lnormx - b2.axisx * e7.lnormy;
				e7.gnormy = e7.lnormx * b2.axisx + e7.lnormy * b2.axisy;
				e7.gprojection = b2.posx * e7.gnormx + b2.posy * e7.gnormy + e7.lprojection;
				e7.tp0 = u3.y * e7.gnormx - u3.x * e7.gnormy;
				e7.tp1 = v9.y * e7.gnormx - v9.x * e7.gnormy;
			}
			var s13 = s1;
			var s23 = s2;
			var w11 = c1;
			var w21 = c2;
			var sep2;
			if(s13.type == 0 && s23.type == 0) {
				var c12 = s13.circle;
				var c22 = s23.circle;
				var dist2;
				var nx7 = 0.0;
				var ny3 = 0.0;
				nx7 = c22.worldCOMx - c12.worldCOMx;
				ny3 = c22.worldCOMy - c12.worldCOMy;
				var len3 = Math.sqrt(nx7 * nx7 + ny3 * ny3);
				dist2 = len3 - (c12.radius + c22.radius);
				if(dist2 < 1e100) {
					if(len3 == 0) {
						nx7 = 1;
						ny3 = 0;
					} else {
						var t28 = 1.0 / len3;
						nx7 *= t28;
						ny3 *= t28;
					}
					var t29 = c12.radius;
					w11.x = c12.worldCOMx + nx7 * t29;
					w11.y = c12.worldCOMy + ny3 * t29;
					var t30 = -c22.radius;
					w21.x = c22.worldCOMx + nx7 * t30;
					w21.y = c22.worldCOMy + ny3 * t30;
					axis.x = nx7;
					axis.y = ny3;
				}
				sep2 = dist2;
			} else {
				var swapped1 = false;
				if(s13.type == 0 && s23.type == 1) {
					var tmp3 = s13;
					s13 = s23;
					s23 = tmp3;
					var tmp21 = w11;
					w11 = w21;
					w21 = tmp21;
					swapped1 = true;
				}
				if(s13.type == 1 && s23.type == 0) {
					var poly1 = s13.polygon;
					var circle1 = s23.circle;
					var best2 = -1e+100;
					var a01 = null;
					var cx_ite14 = poly1.edges.head;
					while(cx_ite14 != null) {
						var a6 = cx_ite14.elt;
						var dist3 = a6.gnormx * circle1.worldCOMx + a6.gnormy * circle1.worldCOMy - a6.gprojection - circle1.radius;
						if(dist3 > 1e100) {
							best2 = dist3;
							break;
						}
						if(dist3 > 0) {
							if(dist3 > best2) {
								best2 = dist3;
								a01 = a6;
							}
						} else if(best2 < 0 && dist3 > best2) {
							best2 = dist3;
							a01 = a6;
						}
						cx_ite14 = cx_ite14.next;
					}
					if(best2 < 1e100) {
						var v02 = a01.gp0;
						var v13 = a01.gp1;
						var dt5 = circle1.worldCOMy * a01.gnormx - circle1.worldCOMx * a01.gnormy;
						if(dt5 <= v02.y * a01.gnormx - v02.x * a01.gnormy) {
							var nx8 = 0.0;
							var ny4 = 0.0;
							nx8 = circle1.worldCOMx - v02.x;
							ny4 = circle1.worldCOMy - v02.y;
							var len4 = Math.sqrt(nx8 * nx8 + ny4 * ny4);
							best2 = len4 - circle1.radius;
							if(best2 < 1e100) {
								if(len4 == 0) {
									nx8 = 1;
									ny4 = 0;
								} else {
									var t31 = 1.0 / len4;
									nx8 *= t31;
									ny4 *= t31;
								}
								var t32 = 0;
								w11.x = v02.x + nx8 * t32;
								w11.y = v02.y + ny4 * t32;
								var t33 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx8 * t33;
								w21.y = circle1.worldCOMy + ny4 * t33;
								axis.x = nx8;
								axis.y = ny4;
							}
						} else if(dt5 >= v13.y * a01.gnormx - v13.x * a01.gnormy) {
							var nx9 = 0.0;
							var ny5 = 0.0;
							nx9 = circle1.worldCOMx - v13.x;
							ny5 = circle1.worldCOMy - v13.y;
							var len5 = Math.sqrt(nx9 * nx9 + ny5 * ny5);
							best2 = len5 - circle1.radius;
							if(best2 < 1e100) {
								if(len5 == 0) {
									nx9 = 1;
									ny5 = 0;
								} else {
									var t34 = 1.0 / len5;
									nx9 *= t34;
									ny5 *= t34;
								}
								var t35 = 0;
								w11.x = v13.x + nx9 * t35;
								w11.y = v13.y + ny5 * t35;
								var t36 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx9 * t36;
								w21.y = circle1.worldCOMy + ny5 * t36;
								axis.x = nx9;
								axis.y = ny5;
							}
						} else {
							var t37 = -circle1.radius;
							w21.x = circle1.worldCOMx + a01.gnormx * t37;
							w21.y = circle1.worldCOMy + a01.gnormy * t37;
							var t38 = -best2;
							w11.x = w21.x + a01.gnormx * t38;
							w11.y = w21.y + a01.gnormy * t38;
							axis.x = a01.gnormx;
							axis.y = a01.gnormy;
						}
					}
					if(swapped1) {
						axis.x = -axis.x;
						axis.y = -axis.y;
					}
					sep2 = best2;
				} else {
					var p12 = s13.polygon;
					var p22 = s23.polygon;
					var best3 = -1e+100;
					var a11 = null;
					var a21 = null;
					var besti1 = 0;
					var cx_ite15 = p12.edges.head;
					while(cx_ite15 != null) {
						var a7 = cx_ite15.elt;
						var min3 = 1e100;
						var cx_ite16 = p22.gverts.next;
						while(cx_ite16 != null) {
							var v10 = cx_ite16;
							var k3 = a7.gnormx * v10.x + a7.gnormy * v10.y;
							if(k3 < min3) {
								min3 = k3;
							}
							cx_ite16 = cx_ite16.next;
						}
						min3 -= a7.gprojection;
						if(min3 > 1e100) {
							best3 = min3;
							break;
						}
						if(min3 > 0) {
							if(min3 > best3) {
								best3 = min3;
								a11 = a7;
								besti1 = 1;
							}
						} else if(best3 < 0 && min3 > best3) {
							best3 = min3;
							a11 = a7;
							besti1 = 1;
						}
						cx_ite15 = cx_ite15.next;
					}
					if(best3 < 1e100) {
						var cx_ite17 = p22.edges.head;
						while(cx_ite17 != null) {
							var a8 = cx_ite17.elt;
							var min4 = 1e100;
							var cx_ite18 = p12.gverts.next;
							while(cx_ite18 != null) {
								var v14 = cx_ite18;
								var k4 = a8.gnormx * v14.x + a8.gnormy * v14.y;
								if(k4 < min4) {
									min4 = k4;
								}
								cx_ite18 = cx_ite18.next;
							}
							min4 -= a8.gprojection;
							if(min4 > 1e100) {
								best3 = min4;
								break;
							}
							if(min4 > 0) {
								if(min4 > best3) {
									best3 = min4;
									a21 = a8;
									besti1 = 2;
								}
							} else if(best3 < 0 && min4 > best3) {
								best3 = min4;
								a21 = a8;
								besti1 = 2;
							}
							cx_ite17 = cx_ite17.next;
						}
						if(best3 < 1e100) {
							var q12;
							var q21;
							var ax1;
							if(besti1 == 1) {
								q12 = p12;
								q21 = p22;
								ax1 = a11;
							} else {
								q12 = p22;
								q21 = p12;
								ax1 = a21;
								var tmp4 = w11;
								w11 = w21;
								w21 = tmp4;
								swapped1 = !swapped1;
							}
							var ay1 = null;
							var min5 = 1e100;
							var cx_ite19 = q21.edges.head;
							while(cx_ite19 != null) {
								var a9 = cx_ite19.elt;
								var k5 = ax1.gnormx * a9.gnormx + ax1.gnormy * a9.gnormy;
								if(k5 < min5) {
									min5 = k5;
									ay1 = a9;
								}
								cx_ite19 = cx_ite19.next;
							}
							if(swapped1) {
								axis.x = -ax1.gnormx;
								axis.y = -ax1.gnormy;
							} else {
								axis.x = ax1.gnormx;
								axis.y = ax1.gnormy;
							}
							if(best3 >= 0) {
								var v03 = ax1.gp0;
								var v15 = ax1.gp1;
								var q01 = ay1.gp0;
								var q13 = ay1.gp1;
								var vx1 = 0.0;
								var vy1 = 0.0;
								var qx1 = 0.0;
								var qy1 = 0.0;
								vx1 = v15.x - v03.x;
								vy1 = v15.y - v03.y;
								qx1 = q13.x - q01.x;
								qy1 = q13.y - q01.y;
								var vdot1 = 1 / (vx1 * vx1 + vy1 * vy1);
								var qdot1 = 1 / (qx1 * qx1 + qy1 * qy1);
								var t110 = -(vx1 * (v03.x - q01.x) + vy1 * (v03.y - q01.y)) * vdot1;
								var t210 = -(vx1 * (v03.x - q13.x) + vy1 * (v03.y - q13.y)) * vdot1;
								var s14 = -(qx1 * (q01.x - v03.x) + qy1 * (q01.y - v03.y)) * qdot1;
								var s24 = -(qx1 * (q01.x - v15.x) + qy1 * (q01.y - v15.y)) * qdot1;
								if(t110 < 0) {
									t110 = 0;
								} else if(t110 > 1) {
									t110 = 1;
								}
								if(t210 < 0) {
									t210 = 0;
								} else if(t210 > 1) {
									t210 = 1;
								}
								if(s14 < 0) {
									s14 = 0;
								} else if(s14 > 1) {
									s14 = 1;
								}
								if(s24 < 0) {
									s24 = 0;
								} else if(s24 > 1) {
									s24 = 1;
								}
								var f1x1 = 0.0;
								var f1y1 = 0.0;
								var t39 = t110;
								f1x1 = v03.x + vx1 * t39;
								f1y1 = v03.y + vy1 * t39;
								var f2x1 = 0.0;
								var f2y1 = 0.0;
								var t40 = t210;
								f2x1 = v03.x + vx1 * t40;
								f2y1 = v03.y + vy1 * t40;
								var g1x1 = 0.0;
								var g1y1 = 0.0;
								var t41 = s14;
								g1x1 = q01.x + qx1 * t41;
								g1y1 = q01.y + qy1 * t41;
								var g2x1 = 0.0;
								var g2y1 = 0.0;
								var t42 = s24;
								g2x1 = q01.x + qx1 * t42;
								g2y1 = q01.y + qy1 * t42;
								var dx4 = 0.0;
								var dy4 = 0.0;
								dx4 = f1x1 - q01.x;
								dy4 = f1y1 - q01.y;
								var d12 = dx4 * dx4 + dy4 * dy4;
								var dx5 = 0.0;
								var dy5 = 0.0;
								dx5 = f2x1 - q13.x;
								dy5 = f2y1 - q13.y;
								var d25 = dx5 * dx5 + dy5 * dy5;
								var dx6 = 0.0;
								var dy6 = 0.0;
								dx6 = g1x1 - v03.x;
								dy6 = g1y1 - v03.y;
								var e12 = dx6 * dx6 + dy6 * dy6;
								var dx7 = 0.0;
								var dy7 = 0.0;
								dx7 = g2x1 - v15.x;
								dy7 = g2y1 - v15.y;
								var e22 = dx7 * dx7 + dy7 * dy7;
								var minfx1 = 0.0;
								var minfy1 = 0.0;
								var minq1 = null;
								if(d12 < d25) {
									minfx1 = f1x1;
									minfy1 = f1y1;
									minq1 = q01;
								} else {
									minfx1 = f2x1;
									minfy1 = f2y1;
									minq1 = q13;
									d12 = d25;
								}
								var mingx1 = 0.0;
								var mingy1 = 0.0;
								var minv1 = null;
								if(e12 < e22) {
									mingx1 = g1x1;
									mingy1 = g1y1;
									minv1 = v03;
								} else {
									mingx1 = g2x1;
									mingy1 = g2y1;
									minv1 = v15;
									e12 = e22;
								}
								if(d12 < e12) {
									w11.x = minfx1;
									w11.y = minfy1;
									w21.x = minq1.x;
									w21.y = minq1.y;
									best3 = Math.sqrt(d12);
								} else {
									w21.x = mingx1;
									w21.y = mingy1;
									w11.x = minv1.x;
									w11.y = minv1.y;
									best3 = Math.sqrt(e12);
								}
								if(best3 != 0) {
									axis.x = w21.x - w11.x;
									axis.y = w21.y - w11.y;
									var t43 = 1.0 / best3;
									axis.x *= t43;
									axis.y *= t43;
									if(swapped1) {
										axis.x = -axis.x;
										axis.y = -axis.y;
									}
								}
								sep2 = best3;
							} else {
								var c0x1 = 0.0;
								var c0y1 = 0.0;
								c0x1 = ay1.gp0.x;
								c0y1 = ay1.gp0.y;
								var c1x1 = 0.0;
								var c1y1 = 0.0;
								c1x1 = ay1.gp1.x;
								c1y1 = ay1.gp1.y;
								var dvx1 = 0.0;
								var dvy1 = 0.0;
								dvx1 = c1x1 - c0x1;
								dvy1 = c1y1 - c0y1;
								var d01 = ax1.gnormy * c0x1 - ax1.gnormx * c0y1;
								var d13 = ax1.gnormy * c1x1 - ax1.gnormx * c1y1;
								var den1 = 1 / (d13 - d01);
								var t44 = (-ax1.tp1 - d01) * den1;
								if(t44 > nape_Config.epsilon) {
									var t45 = t44;
									c0x1 += dvx1 * t45;
									c0y1 += dvy1 * t45;
								}
								var t46 = (-ax1.tp0 - d13) * den1;
								if(t46 < -nape_Config.epsilon) {
									var t47 = t46;
									c1x1 += dvx1 * t47;
									c1y1 += dvy1 * t47;
								}
								var c0d1 = c0x1 * ax1.gnormx + c0y1 * ax1.gnormy - ax1.gprojection;
								var c1d1 = c1x1 * ax1.gnormx + c1y1 * ax1.gnormy - ax1.gprojection;
								if(c0d1 < c1d1) {
									w21.x = c0x1;
									w21.y = c0y1;
									var t48 = -c0d1;
									w11.x = w21.x + ax1.gnormx * t48;
									w11.y = w21.y + ax1.gnormy * t48;
									sep2 = c0d1;
								} else {
									w21.x = c1x1;
									w21.y = c1y1;
									var t49 = -c1d1;
									w11.x = w21.x + ax1.gnormx * t49;
									w11.y = w21.y + ax1.gnormy * t49;
									sep2 = c1d1;
								}
							}
						} else {
							sep2 = 1e100;
						}
					} else {
						sep2 = 1e100;
					}
				}
			}
			var sep3 = sep2 + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep3 < nape_Config.distanceThresholdCCD) {
				if(userAPI) {
					break;
				}
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var d2x1 = 0.0;
				var d2y1 = 0.0;
				d2x1 = c2.x - b2.posx;
				d2y1 = c2.y - b2.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1) + b2.sweep_angvel * (axis.y * d2x1 - axis.x * d2y1);
				if(proj1 > 0) {
					toi.slipped = true;
				}
				if(proj1 <= 0 || sep3 < nape_Config.distanceThresholdCCD * 0.5) {
					break;
				}
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep1 > negRadius) {
				toi.failed = true;
			}
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_$nape_geom_ZPP_$SweepDistance.staticSweep = function(toi,timeStep,lowerBound,negRadius) {
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = -b1.velx;
	deltay = -b1.vely;
	var ang1 = b1.sweep_angvel;
	if(ang1 < 0) {
		ang1 = -ang1;
	}
	var angBias = s1.sweepCoef * ang1;
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		var dt = curTOI * timeStep;
		var delta = dt - b1.sweepTime;
		if(delta != 0) {
			b1.sweepTime = dt;
			var t = delta;
			b1.posx += b1.velx * t;
			b1.posy += b1.vely * t;
			if(b1.angvel != 0) {
				var dr = b1.sweep_angvel * delta;
				b1.rot += dr;
				if(dr * dr > 0.0001) {
					b1.axisx = Math.sin(b1.rot);
					b1.axisy = Math.cos(b1.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * b1.axisx + dr * b1.axisy) * m;
					b1.axisy = (p * b1.axisy - dr * b1.axisx) * m;
					b1.axisx = nx;
				}
			}
		}
		if(s1.type == 0) {
			s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
			s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
		} else {
			var p1 = s1.polygon;
			var li = p1.lverts.next;
			var cx_ite = p1.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = b1.posx + (b1.axisy * l.x - b1.axisx * l.y);
				g.y = b1.posy + (l.x * b1.axisx + l.y * b1.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p1.edges.head;
			var cx_ite1 = p1.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gnormx = b1.axisy * e.lnormx - b1.axisx * e.lnormy;
				e.gnormy = e.lnormx * b1.axisx + e.lnormy * b1.axisy;
				e.gprojection = b1.posx * e.gnormx + b1.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var v1 = p1.gverts.next;
			var e1 = ite.elt;
			ite = ite.next;
			e1.gnormx = b1.axisy * e1.lnormx - b1.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * b1.axisx + e1.lnormy * b1.axisy;
			e1.gprojection = b1.posx * e1.gnormx + b1.posy * e1.gnormy + e1.lprojection;
			e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
			e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
		}
		var s11 = s1;
		var s21 = s2;
		var w1 = c1;
		var w2 = c2;
		var sep;
		if(s11.type == 0 && s21.type == 0) {
			var c11 = s11.circle;
			var c21 = s21.circle;
			var dist;
			var nx1 = 0.0;
			var ny = 0.0;
			nx1 = c21.worldCOMx - c11.worldCOMx;
			ny = c21.worldCOMy - c11.worldCOMy;
			var len = Math.sqrt(nx1 * nx1 + ny * ny);
			dist = len - (c11.radius + c21.radius);
			if(dist < 1e100) {
				if(len == 0) {
					nx1 = 1;
					ny = 0;
				} else {
					var t1 = 1.0 / len;
					nx1 *= t1;
					ny *= t1;
				}
				var t2 = c11.radius;
				w1.x = c11.worldCOMx + nx1 * t2;
				w1.y = c11.worldCOMy + ny * t2;
				var t3 = -c21.radius;
				w2.x = c21.worldCOMx + nx1 * t3;
				w2.y = c21.worldCOMy + ny * t3;
				axis.x = nx1;
				axis.y = ny;
			}
			sep = dist;
		} else {
			var swapped = false;
			if(s11.type == 0 && s21.type == 1) {
				var tmp = s11;
				s11 = s21;
				s21 = tmp;
				var tmp2 = w1;
				w1 = w2;
				w2 = tmp2;
				swapped = true;
			}
			if(s11.type == 1 && s21.type == 0) {
				var poly = s11.polygon;
				var circle = s21.circle;
				var best = -1e+100;
				var a0 = null;
				var cx_ite2 = poly.edges.head;
				while(cx_ite2 != null) {
					var a = cx_ite2.elt;
					var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
					if(dist1 > 1e100) {
						best = dist1;
						break;
					}
					if(dist1 > 0) {
						if(dist1 > best) {
							best = dist1;
							a0 = a;
						}
					} else if(best < 0 && dist1 > best) {
						best = dist1;
						a0 = a;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(best < 1e100) {
					var v0 = a0.gp0;
					var v11 = a0.gp1;
					var dt1 = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
					if(dt1 <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
						var nx2 = 0.0;
						var ny1 = 0.0;
						nx2 = circle.worldCOMx - v0.x;
						ny1 = circle.worldCOMy - v0.y;
						var len1 = Math.sqrt(nx2 * nx2 + ny1 * ny1);
						best = len1 - circle.radius;
						if(best < 1e100) {
							if(len1 == 0) {
								nx2 = 1;
								ny1 = 0;
							} else {
								var t4 = 1.0 / len1;
								nx2 *= t4;
								ny1 *= t4;
							}
							var t5 = 0;
							w1.x = v0.x + nx2 * t5;
							w1.y = v0.y + ny1 * t5;
							var t6 = -circle.radius;
							w2.x = circle.worldCOMx + nx2 * t6;
							w2.y = circle.worldCOMy + ny1 * t6;
							axis.x = nx2;
							axis.y = ny1;
						}
					} else if(dt1 >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
						var nx3 = 0.0;
						var ny2 = 0.0;
						nx3 = circle.worldCOMx - v11.x;
						ny2 = circle.worldCOMy - v11.y;
						var len2 = Math.sqrt(nx3 * nx3 + ny2 * ny2);
						best = len2 - circle.radius;
						if(best < 1e100) {
							if(len2 == 0) {
								nx3 = 1;
								ny2 = 0;
							} else {
								var t7 = 1.0 / len2;
								nx3 *= t7;
								ny2 *= t7;
							}
							var t8 = 0;
							w1.x = v11.x + nx3 * t8;
							w1.y = v11.y + ny2 * t8;
							var t9 = -circle.radius;
							w2.x = circle.worldCOMx + nx3 * t9;
							w2.y = circle.worldCOMy + ny2 * t9;
							axis.x = nx3;
							axis.y = ny2;
						}
					} else {
						var t10 = -circle.radius;
						w2.x = circle.worldCOMx + a0.gnormx * t10;
						w2.y = circle.worldCOMy + a0.gnormy * t10;
						var t11 = -best;
						w1.x = w2.x + a0.gnormx * t11;
						w1.y = w2.y + a0.gnormy * t11;
						axis.x = a0.gnormx;
						axis.y = a0.gnormy;
					}
				}
				if(swapped) {
					axis.x = -axis.x;
					axis.y = -axis.y;
				}
				sep = best;
			} else {
				var p11 = s11.polygon;
				var p2 = s21.polygon;
				var best1 = -1e+100;
				var a1 = null;
				var a2 = null;
				var besti = 0;
				var cx_ite3 = p11.edges.head;
				while(cx_ite3 != null) {
					var a3 = cx_ite3.elt;
					var min = 1e100;
					var cx_ite4 = p2.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k = a3.gnormx * v2.x + a3.gnormy * v2.y;
						if(k < min) {
							min = k;
						}
						cx_ite4 = cx_ite4.next;
					}
					min -= a3.gprojection;
					if(min > 1e100) {
						best1 = min;
						break;
					}
					if(min > 0) {
						if(min > best1) {
							best1 = min;
							a1 = a3;
							besti = 1;
						}
					} else if(best1 < 0 && min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(best1 < 1e100) {
					var cx_ite5 = p2.edges.head;
					while(cx_ite5 != null) {
						var a4 = cx_ite5.elt;
						var min1 = 1e100;
						var cx_ite6 = p11.gverts.next;
						while(cx_ite6 != null) {
							var v3 = cx_ite6;
							var k1 = a4.gnormx * v3.x + a4.gnormy * v3.y;
							if(k1 < min1) {
								min1 = k1;
							}
							cx_ite6 = cx_ite6.next;
						}
						min1 -= a4.gprojection;
						if(min1 > 1e100) {
							best1 = min1;
							break;
						}
						if(min1 > 0) {
							if(min1 > best1) {
								best1 = min1;
								a2 = a4;
								besti = 2;
							}
						} else if(best1 < 0 && min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
						cx_ite5 = cx_ite5.next;
					}
					if(best1 < 1e100) {
						var q1;
						var q2;
						var ax;
						if(besti == 1) {
							q1 = p11;
							q2 = p2;
							ax = a1;
						} else {
							q1 = p2;
							q2 = p11;
							ax = a2;
							var tmp1 = w1;
							w1 = w2;
							w2 = tmp1;
							swapped = !swapped;
						}
						var ay = null;
						var min2 = 1e100;
						var cx_ite7 = q2.edges.head;
						while(cx_ite7 != null) {
							var a5 = cx_ite7.elt;
							var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
							if(k2 < min2) {
								min2 = k2;
								ay = a5;
							}
							cx_ite7 = cx_ite7.next;
						}
						if(swapped) {
							axis.x = -ax.gnormx;
							axis.y = -ax.gnormy;
						} else {
							axis.x = ax.gnormx;
							axis.y = ax.gnormy;
						}
						if(best1 >= 0) {
							var v01 = ax.gp0;
							var v12 = ax.gp1;
							var q0 = ay.gp0;
							var q11 = ay.gp1;
							var vx = 0.0;
							var vy = 0.0;
							var qx = 0.0;
							var qy = 0.0;
							vx = v12.x - v01.x;
							vy = v12.y - v01.y;
							qx = q11.x - q0.x;
							qy = q11.y - q0.y;
							var vdot = 1 / (vx * vx + vy * vy);
							var qdot = 1 / (qx * qx + qy * qy);
							var t12 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
							var t21 = -(vx * (v01.x - q11.x) + vy * (v01.y - q11.y)) * vdot;
							var s12 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
							var s22 = -(qx * (q0.x - v12.x) + qy * (q0.y - v12.y)) * qdot;
							if(t12 < 0) {
								t12 = 0;
							} else if(t12 > 1) {
								t12 = 1;
							}
							if(t21 < 0) {
								t21 = 0;
							} else if(t21 > 1) {
								t21 = 1;
							}
							if(s12 < 0) {
								s12 = 0;
							} else if(s12 > 1) {
								s12 = 1;
							}
							if(s22 < 0) {
								s22 = 0;
							} else if(s22 > 1) {
								s22 = 1;
							}
							var f1x = 0.0;
							var f1y = 0.0;
							var t13 = t12;
							f1x = v01.x + vx * t13;
							f1y = v01.y + vy * t13;
							var f2x = 0.0;
							var f2y = 0.0;
							var t14 = t21;
							f2x = v01.x + vx * t14;
							f2y = v01.y + vy * t14;
							var g1x = 0.0;
							var g1y = 0.0;
							var t15 = s12;
							g1x = q0.x + qx * t15;
							g1y = q0.y + qy * t15;
							var g2x = 0.0;
							var g2y = 0.0;
							var t16 = s22;
							g2x = q0.x + qx * t16;
							g2y = q0.y + qy * t16;
							var dx = 0.0;
							var dy = 0.0;
							dx = f1x - q0.x;
							dy = f1y - q0.y;
							var d1 = dx * dx + dy * dy;
							var dx1 = 0.0;
							var dy1 = 0.0;
							dx1 = f2x - q11.x;
							dy1 = f2y - q11.y;
							var d21 = dx1 * dx1 + dy1 * dy1;
							var dx2 = 0.0;
							var dy2 = 0.0;
							dx2 = g1x - v01.x;
							dy2 = g1y - v01.y;
							var e11 = dx2 * dx2 + dy2 * dy2;
							var dx3 = 0.0;
							var dy3 = 0.0;
							dx3 = g2x - v12.x;
							dy3 = g2y - v12.y;
							var e2 = dx3 * dx3 + dy3 * dy3;
							var minfx = 0.0;
							var minfy = 0.0;
							var minq = null;
							if(d1 < d21) {
								minfx = f1x;
								minfy = f1y;
								minq = q0;
							} else {
								minfx = f2x;
								minfy = f2y;
								minq = q11;
								d1 = d21;
							}
							var mingx = 0.0;
							var mingy = 0.0;
							var minv = null;
							if(e11 < e2) {
								mingx = g1x;
								mingy = g1y;
								minv = v01;
							} else {
								mingx = g2x;
								mingy = g2y;
								minv = v12;
								e11 = e2;
							}
							if(d1 < e11) {
								w1.x = minfx;
								w1.y = minfy;
								w2.x = minq.x;
								w2.y = minq.y;
								best1 = Math.sqrt(d1);
							} else {
								w2.x = mingx;
								w2.y = mingy;
								w1.x = minv.x;
								w1.y = minv.y;
								best1 = Math.sqrt(e11);
							}
							if(best1 != 0) {
								axis.x = w2.x - w1.x;
								axis.y = w2.y - w1.y;
								var t17 = 1.0 / best1;
								axis.x *= t17;
								axis.y *= t17;
								if(swapped) {
									axis.x = -axis.x;
									axis.y = -axis.y;
								}
							}
							sep = best1;
						} else {
							var c0x = 0.0;
							var c0y = 0.0;
							c0x = ay.gp0.x;
							c0y = ay.gp0.y;
							var c1x = 0.0;
							var c1y = 0.0;
							c1x = ay.gp1.x;
							c1y = ay.gp1.y;
							var dvx = 0.0;
							var dvy = 0.0;
							dvx = c1x - c0x;
							dvy = c1y - c0y;
							var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
							var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
							var den = 1 / (d11 - d0);
							var t18 = (-ax.tp1 - d0) * den;
							if(t18 > nape_Config.epsilon) {
								var t19 = t18;
								c0x += dvx * t19;
								c0y += dvy * t19;
							}
							var t20 = (-ax.tp0 - d11) * den;
							if(t20 < -nape_Config.epsilon) {
								var t22 = t20;
								c1x += dvx * t22;
								c1y += dvy * t22;
							}
							var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
							var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
							if(c0d < c1d) {
								w2.x = c0x;
								w2.y = c0y;
								var t23 = -c0d;
								w1.x = w2.x + ax.gnormx * t23;
								w1.y = w2.y + ax.gnormy * t23;
								sep = c0d;
							} else {
								w2.x = c1x;
								w2.y = c1y;
								var t24 = -c1d;
								w1.x = w2.x + ax.gnormx * t24;
								w1.y = w2.y + ax.gnormy * t24;
								sep = c1d;
							}
						}
					} else {
						sep = 1e100;
					}
				} else {
					sep = 1e100;
				}
			}
		}
		var sep1 = sep + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep1 < nape_Config.distanceThresholdCCD) {
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y);
			if(proj > 0) {
				toi.slipped = true;
			}
			if(proj <= 0 || sep1 < nape_Config.distanceThresholdCCD * 0.5) {
				break;
			}
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta1 = sep1 / denom;
		if(delta1 < 1e-6) {
			delta1 = 1e-6;
		}
		curTOI += delta1;
		if(curTOI >= 1) {
			curTOI = 1;
			var dt2 = curTOI * timeStep;
			var delta2 = dt2 - b1.sweepTime;
			if(delta2 != 0) {
				b1.sweepTime = dt2;
				var t25 = delta2;
				b1.posx += b1.velx * t25;
				b1.posy += b1.vely * t25;
				if(b1.angvel != 0) {
					var dr1 = b1.sweep_angvel * delta2;
					b1.rot += dr1;
					if(dr1 * dr1 > 0.0001) {
						b1.axisx = Math.sin(b1.rot);
						b1.axisy = Math.cos(b1.rot);
					} else {
						var d22 = dr1 * dr1;
						var p3 = 1 - 0.5 * d22;
						var m1 = 1 - d22 * d22 / 8;
						var nx4 = (p3 * b1.axisx + dr1 * b1.axisy) * m1;
						b1.axisy = (p3 * b1.axisy - dr1 * b1.axisx) * m1;
						b1.axisx = nx4;
					}
				}
			}
			if(s1.type == 0) {
				s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
				s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
			} else {
				var p4 = s1.polygon;
				var li1 = p4.lverts.next;
				var cx_ite8 = p4.gverts.next;
				while(cx_ite8 != null) {
					var g1 = cx_ite8;
					var l1 = li1;
					li1 = li1.next;
					g1.x = b1.posx + (b1.axisy * l1.x - b1.axisx * l1.y);
					g1.y = b1.posy + (l1.x * b1.axisx + l1.y * b1.axisy);
					cx_ite8 = cx_ite8.next;
				}
				var ite1 = p4.edges.head;
				var cx_ite9 = p4.gverts.next;
				var u1 = cx_ite9;
				cx_ite9 = cx_ite9.next;
				while(cx_ite9 != null) {
					var v4 = cx_ite9;
					var e3 = ite1.elt;
					ite1 = ite1.next;
					e3.gnormx = b1.axisy * e3.lnormx - b1.axisx * e3.lnormy;
					e3.gnormy = e3.lnormx * b1.axisx + e3.lnormy * b1.axisy;
					e3.gprojection = b1.posx * e3.gnormx + b1.posy * e3.gnormy + e3.lprojection;
					e3.tp0 = u1.y * e3.gnormx - u1.x * e3.gnormy;
					e3.tp1 = v4.y * e3.gnormx - v4.x * e3.gnormy;
					u1 = v4;
					cx_ite9 = cx_ite9.next;
				}
				var v5 = p4.gverts.next;
				var e4 = ite1.elt;
				ite1 = ite1.next;
				e4.gnormx = b1.axisy * e4.lnormx - b1.axisx * e4.lnormy;
				e4.gnormy = e4.lnormx * b1.axisx + e4.lnormy * b1.axisy;
				e4.gprojection = b1.posx * e4.gnormx + b1.posy * e4.gnormy + e4.lprojection;
				e4.tp0 = u1.y * e4.gnormx - u1.x * e4.gnormy;
				e4.tp1 = v5.y * e4.gnormx - v5.x * e4.gnormy;
			}
			var s13 = s1;
			var s23 = s2;
			var w11 = c1;
			var w21 = c2;
			var sep2;
			if(s13.type == 0 && s23.type == 0) {
				var c12 = s13.circle;
				var c22 = s23.circle;
				var dist2;
				var nx5 = 0.0;
				var ny3 = 0.0;
				nx5 = c22.worldCOMx - c12.worldCOMx;
				ny3 = c22.worldCOMy - c12.worldCOMy;
				var len3 = Math.sqrt(nx5 * nx5 + ny3 * ny3);
				dist2 = len3 - (c12.radius + c22.radius);
				if(dist2 < 1e100) {
					if(len3 == 0) {
						nx5 = 1;
						ny3 = 0;
					} else {
						var t26 = 1.0 / len3;
						nx5 *= t26;
						ny3 *= t26;
					}
					var t27 = c12.radius;
					w11.x = c12.worldCOMx + nx5 * t27;
					w11.y = c12.worldCOMy + ny3 * t27;
					var t28 = -c22.radius;
					w21.x = c22.worldCOMx + nx5 * t28;
					w21.y = c22.worldCOMy + ny3 * t28;
					axis.x = nx5;
					axis.y = ny3;
				}
				sep2 = dist2;
			} else {
				var swapped1 = false;
				if(s13.type == 0 && s23.type == 1) {
					var tmp3 = s13;
					s13 = s23;
					s23 = tmp3;
					var tmp21 = w11;
					w11 = w21;
					w21 = tmp21;
					swapped1 = true;
				}
				if(s13.type == 1 && s23.type == 0) {
					var poly1 = s13.polygon;
					var circle1 = s23.circle;
					var best2 = -1e+100;
					var a01 = null;
					var cx_ite10 = poly1.edges.head;
					while(cx_ite10 != null) {
						var a6 = cx_ite10.elt;
						var dist3 = a6.gnormx * circle1.worldCOMx + a6.gnormy * circle1.worldCOMy - a6.gprojection - circle1.radius;
						if(dist3 > 1e100) {
							best2 = dist3;
							break;
						}
						if(dist3 > 0) {
							if(dist3 > best2) {
								best2 = dist3;
								a01 = a6;
							}
						} else if(best2 < 0 && dist3 > best2) {
							best2 = dist3;
							a01 = a6;
						}
						cx_ite10 = cx_ite10.next;
					}
					if(best2 < 1e100) {
						var v02 = a01.gp0;
						var v13 = a01.gp1;
						var dt3 = circle1.worldCOMy * a01.gnormx - circle1.worldCOMx * a01.gnormy;
						if(dt3 <= v02.y * a01.gnormx - v02.x * a01.gnormy) {
							var nx6 = 0.0;
							var ny4 = 0.0;
							nx6 = circle1.worldCOMx - v02.x;
							ny4 = circle1.worldCOMy - v02.y;
							var len4 = Math.sqrt(nx6 * nx6 + ny4 * ny4);
							best2 = len4 - circle1.radius;
							if(best2 < 1e100) {
								if(len4 == 0) {
									nx6 = 1;
									ny4 = 0;
								} else {
									var t29 = 1.0 / len4;
									nx6 *= t29;
									ny4 *= t29;
								}
								var t30 = 0;
								w11.x = v02.x + nx6 * t30;
								w11.y = v02.y + ny4 * t30;
								var t31 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx6 * t31;
								w21.y = circle1.worldCOMy + ny4 * t31;
								axis.x = nx6;
								axis.y = ny4;
							}
						} else if(dt3 >= v13.y * a01.gnormx - v13.x * a01.gnormy) {
							var nx7 = 0.0;
							var ny5 = 0.0;
							nx7 = circle1.worldCOMx - v13.x;
							ny5 = circle1.worldCOMy - v13.y;
							var len5 = Math.sqrt(nx7 * nx7 + ny5 * ny5);
							best2 = len5 - circle1.radius;
							if(best2 < 1e100) {
								if(len5 == 0) {
									nx7 = 1;
									ny5 = 0;
								} else {
									var t32 = 1.0 / len5;
									nx7 *= t32;
									ny5 *= t32;
								}
								var t33 = 0;
								w11.x = v13.x + nx7 * t33;
								w11.y = v13.y + ny5 * t33;
								var t34 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx7 * t34;
								w21.y = circle1.worldCOMy + ny5 * t34;
								axis.x = nx7;
								axis.y = ny5;
							}
						} else {
							var t35 = -circle1.radius;
							w21.x = circle1.worldCOMx + a01.gnormx * t35;
							w21.y = circle1.worldCOMy + a01.gnormy * t35;
							var t36 = -best2;
							w11.x = w21.x + a01.gnormx * t36;
							w11.y = w21.y + a01.gnormy * t36;
							axis.x = a01.gnormx;
							axis.y = a01.gnormy;
						}
					}
					if(swapped1) {
						axis.x = -axis.x;
						axis.y = -axis.y;
					}
					sep2 = best2;
				} else {
					var p12 = s13.polygon;
					var p21 = s23.polygon;
					var best3 = -1e+100;
					var a11 = null;
					var a21 = null;
					var besti1 = 0;
					var cx_ite11 = p12.edges.head;
					while(cx_ite11 != null) {
						var a7 = cx_ite11.elt;
						var min3 = 1e100;
						var cx_ite12 = p21.gverts.next;
						while(cx_ite12 != null) {
							var v6 = cx_ite12;
							var k3 = a7.gnormx * v6.x + a7.gnormy * v6.y;
							if(k3 < min3) {
								min3 = k3;
							}
							cx_ite12 = cx_ite12.next;
						}
						min3 -= a7.gprojection;
						if(min3 > 1e100) {
							best3 = min3;
							break;
						}
						if(min3 > 0) {
							if(min3 > best3) {
								best3 = min3;
								a11 = a7;
								besti1 = 1;
							}
						} else if(best3 < 0 && min3 > best3) {
							best3 = min3;
							a11 = a7;
							besti1 = 1;
						}
						cx_ite11 = cx_ite11.next;
					}
					if(best3 < 1e100) {
						var cx_ite13 = p21.edges.head;
						while(cx_ite13 != null) {
							var a8 = cx_ite13.elt;
							var min4 = 1e100;
							var cx_ite14 = p12.gverts.next;
							while(cx_ite14 != null) {
								var v7 = cx_ite14;
								var k4 = a8.gnormx * v7.x + a8.gnormy * v7.y;
								if(k4 < min4) {
									min4 = k4;
								}
								cx_ite14 = cx_ite14.next;
							}
							min4 -= a8.gprojection;
							if(min4 > 1e100) {
								best3 = min4;
								break;
							}
							if(min4 > 0) {
								if(min4 > best3) {
									best3 = min4;
									a21 = a8;
									besti1 = 2;
								}
							} else if(best3 < 0 && min4 > best3) {
								best3 = min4;
								a21 = a8;
								besti1 = 2;
							}
							cx_ite13 = cx_ite13.next;
						}
						if(best3 < 1e100) {
							var q12;
							var q21;
							var ax1;
							if(besti1 == 1) {
								q12 = p12;
								q21 = p21;
								ax1 = a11;
							} else {
								q12 = p21;
								q21 = p12;
								ax1 = a21;
								var tmp4 = w11;
								w11 = w21;
								w21 = tmp4;
								swapped1 = !swapped1;
							}
							var ay1 = null;
							var min5 = 1e100;
							var cx_ite15 = q21.edges.head;
							while(cx_ite15 != null) {
								var a9 = cx_ite15.elt;
								var k5 = ax1.gnormx * a9.gnormx + ax1.gnormy * a9.gnormy;
								if(k5 < min5) {
									min5 = k5;
									ay1 = a9;
								}
								cx_ite15 = cx_ite15.next;
							}
							if(swapped1) {
								axis.x = -ax1.gnormx;
								axis.y = -ax1.gnormy;
							} else {
								axis.x = ax1.gnormx;
								axis.y = ax1.gnormy;
							}
							if(best3 >= 0) {
								var v03 = ax1.gp0;
								var v14 = ax1.gp1;
								var q01 = ay1.gp0;
								var q13 = ay1.gp1;
								var vx1 = 0.0;
								var vy1 = 0.0;
								var qx1 = 0.0;
								var qy1 = 0.0;
								vx1 = v14.x - v03.x;
								vy1 = v14.y - v03.y;
								qx1 = q13.x - q01.x;
								qy1 = q13.y - q01.y;
								var vdot1 = 1 / (vx1 * vx1 + vy1 * vy1);
								var qdot1 = 1 / (qx1 * qx1 + qy1 * qy1);
								var t110 = -(vx1 * (v03.x - q01.x) + vy1 * (v03.y - q01.y)) * vdot1;
								var t210 = -(vx1 * (v03.x - q13.x) + vy1 * (v03.y - q13.y)) * vdot1;
								var s14 = -(qx1 * (q01.x - v03.x) + qy1 * (q01.y - v03.y)) * qdot1;
								var s24 = -(qx1 * (q01.x - v14.x) + qy1 * (q01.y - v14.y)) * qdot1;
								if(t110 < 0) {
									t110 = 0;
								} else if(t110 > 1) {
									t110 = 1;
								}
								if(t210 < 0) {
									t210 = 0;
								} else if(t210 > 1) {
									t210 = 1;
								}
								if(s14 < 0) {
									s14 = 0;
								} else if(s14 > 1) {
									s14 = 1;
								}
								if(s24 < 0) {
									s24 = 0;
								} else if(s24 > 1) {
									s24 = 1;
								}
								var f1x1 = 0.0;
								var f1y1 = 0.0;
								var t37 = t110;
								f1x1 = v03.x + vx1 * t37;
								f1y1 = v03.y + vy1 * t37;
								var f2x1 = 0.0;
								var f2y1 = 0.0;
								var t38 = t210;
								f2x1 = v03.x + vx1 * t38;
								f2y1 = v03.y + vy1 * t38;
								var g1x1 = 0.0;
								var g1y1 = 0.0;
								var t39 = s14;
								g1x1 = q01.x + qx1 * t39;
								g1y1 = q01.y + qy1 * t39;
								var g2x1 = 0.0;
								var g2y1 = 0.0;
								var t40 = s24;
								g2x1 = q01.x + qx1 * t40;
								g2y1 = q01.y + qy1 * t40;
								var dx4 = 0.0;
								var dy4 = 0.0;
								dx4 = f1x1 - q01.x;
								dy4 = f1y1 - q01.y;
								var d12 = dx4 * dx4 + dy4 * dy4;
								var dx5 = 0.0;
								var dy5 = 0.0;
								dx5 = f2x1 - q13.x;
								dy5 = f2y1 - q13.y;
								var d23 = dx5 * dx5 + dy5 * dy5;
								var dx6 = 0.0;
								var dy6 = 0.0;
								dx6 = g1x1 - v03.x;
								dy6 = g1y1 - v03.y;
								var e12 = dx6 * dx6 + dy6 * dy6;
								var dx7 = 0.0;
								var dy7 = 0.0;
								dx7 = g2x1 - v14.x;
								dy7 = g2y1 - v14.y;
								var e21 = dx7 * dx7 + dy7 * dy7;
								var minfx1 = 0.0;
								var minfy1 = 0.0;
								var minq1 = null;
								if(d12 < d23) {
									minfx1 = f1x1;
									minfy1 = f1y1;
									minq1 = q01;
								} else {
									minfx1 = f2x1;
									minfy1 = f2y1;
									minq1 = q13;
									d12 = d23;
								}
								var mingx1 = 0.0;
								var mingy1 = 0.0;
								var minv1 = null;
								if(e12 < e21) {
									mingx1 = g1x1;
									mingy1 = g1y1;
									minv1 = v03;
								} else {
									mingx1 = g2x1;
									mingy1 = g2y1;
									minv1 = v14;
									e12 = e21;
								}
								if(d12 < e12) {
									w11.x = minfx1;
									w11.y = minfy1;
									w21.x = minq1.x;
									w21.y = minq1.y;
									best3 = Math.sqrt(d12);
								} else {
									w21.x = mingx1;
									w21.y = mingy1;
									w11.x = minv1.x;
									w11.y = minv1.y;
									best3 = Math.sqrt(e12);
								}
								if(best3 != 0) {
									axis.x = w21.x - w11.x;
									axis.y = w21.y - w11.y;
									var t41 = 1.0 / best3;
									axis.x *= t41;
									axis.y *= t41;
									if(swapped1) {
										axis.x = -axis.x;
										axis.y = -axis.y;
									}
								}
								sep2 = best3;
							} else {
								var c0x1 = 0.0;
								var c0y1 = 0.0;
								c0x1 = ay1.gp0.x;
								c0y1 = ay1.gp0.y;
								var c1x1 = 0.0;
								var c1y1 = 0.0;
								c1x1 = ay1.gp1.x;
								c1y1 = ay1.gp1.y;
								var dvx1 = 0.0;
								var dvy1 = 0.0;
								dvx1 = c1x1 - c0x1;
								dvy1 = c1y1 - c0y1;
								var d01 = ax1.gnormy * c0x1 - ax1.gnormx * c0y1;
								var d13 = ax1.gnormy * c1x1 - ax1.gnormx * c1y1;
								var den1 = 1 / (d13 - d01);
								var t42 = (-ax1.tp1 - d01) * den1;
								if(t42 > nape_Config.epsilon) {
									var t43 = t42;
									c0x1 += dvx1 * t43;
									c0y1 += dvy1 * t43;
								}
								var t44 = (-ax1.tp0 - d13) * den1;
								if(t44 < -nape_Config.epsilon) {
									var t45 = t44;
									c1x1 += dvx1 * t45;
									c1y1 += dvy1 * t45;
								}
								var c0d1 = c0x1 * ax1.gnormx + c0y1 * ax1.gnormy - ax1.gprojection;
								var c1d1 = c1x1 * ax1.gnormx + c1y1 * ax1.gnormy - ax1.gprojection;
								if(c0d1 < c1d1) {
									w21.x = c0x1;
									w21.y = c0y1;
									var t46 = -c0d1;
									w11.x = w21.x + ax1.gnormx * t46;
									w11.y = w21.y + ax1.gnormy * t46;
									sep2 = c0d1;
								} else {
									w21.x = c1x1;
									w21.y = c1y1;
									var t47 = -c1d1;
									w11.x = w21.x + ax1.gnormx * t47;
									w11.y = w21.y + ax1.gnormy * t47;
									sep2 = c1d1;
								}
							}
						} else {
							sep2 = 1e100;
						}
					} else {
						sep2 = 1e100;
					}
				}
			}
			var sep3 = sep2 + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep3 < nape_Config.distanceThresholdCCD) {
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1);
				if(proj1 > 0) {
					toi.slipped = true;
				}
				if(proj1 <= 0 || sep3 < nape_Config.distanceThresholdCCD * 0.5) {
					break;
				}
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep1 > negRadius) {
				toi.failed = true;
			}
			break;
		}
	}
	toi.toi = curTOI;
};
var zpp_$nape_geom_ZPP_$Vec2 = function() {
	this.y = 0.0;
	this.x = 0.0;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.weak = false;
	this.outer = null;
	this._isimmutable = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
zpp_$nape_geom_ZPP_$Vec2.__name__ = true;
zpp_$nape_geom_ZPP_$Vec2.prototype = {
	add: function(o) {
		o._inuse = true;
		var temp = o;
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		o._inuse = true;
		var temp = o;
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,toString: function() {
		return "{ x: " + this.x + " y: " + this.y + " }";
	}
};
var zpp_$nape_geom_ZPP_$Vec3 = function() {
	this._validate = null;
	this.immutable = false;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.outer = null;
	this.immutable = false;
	this._validate = null;
};
zpp_$nape_geom_ZPP_$Vec3.__name__ = true;
var zpp_$nape_phys_ZPP_$Interactor = function() {
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.group = null;
	this.cbsets = null;
	this.icompound = null;
	this.ibody = null;
	this.ishape = null;
	this.userData = null;
	this.id = 0;
	this.outer_i = null;
	this.id = zpp_$nape_ZPP_$ID.Interactor();
	this.cbsets = new zpp_$nape_util_ZNPList_$ZPP_$CallbackSet();
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
zpp_$nape_phys_ZPP_$Interactor.__name__ = true;
zpp_$nape_phys_ZPP_$Interactor.get = function(i1,i2) {
	var id = i1.id < i2.id ? i1.id : i2.id;
	var di = i1.id < i2.id ? i2.id : i1.id;
	var xs = i1.cbsets.length < i2.cbsets.length ? i1.cbsets : i2.cbsets;
	var ret = null;
	var cx_ite = xs.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x.id == id && x.di == di) {
			ret = x;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_$nape_phys_ZPP_$Interactor.prototype = {
	__iaddedToSpace: function() {
		if(this.group != null) {
			this.group.interactors.add(this);
		}
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.add(this);
			cx_ite = cx_ite.next;
		}
		this.alloc_cbSet();
	}
	,__iremovedFromSpace: function() {
		if(this.group != null) {
			this.group.interactors.remove(this);
		}
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.remove(this);
			cx_ite = cx_ite.next;
		}
		this.dealloc_cbSet();
	}
	,wake: function() {
		if(this.ishape != null) {
			var body = this.ishape.body;
			if(body != null && body.space != null) {
				body.space.non_inlined_wake(body);
			}
		} else if(this.ibody != null) {
			if(this.ibody.space != null) {
				this.ibody.space.non_inlined_wake(this.ibody);
			}
		} else if(this.icompound.space != null) {
			this.icompound.space.wakeCompound(this.icompound);
		}
	}
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_$nape_util_ZPP_$CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
		this.wrap_cbTypes.zpp_inner._modifiable = $bind(this,this.immutable_cbTypes);
	}
	,immutable_cbTypes: function() {
		this.immutable_midstep("Interactor::cbTypes");
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			var space = this.ishape != null ? this.ishape.body == null ? null : this.ishape.body.space : this.ibody != null ? this.ibody.space : this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.remove(this);
			}
			this.cbTypes.remove(cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			var space = this.ishape != null ? this.ishape.body == null ? null : this.ishape.body.space : this.ibody != null ? this.ibody.space : this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this = this.cbTypes;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = cb;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		var space = this.ishape != null ? this.ishape.body == null ? null : this.ishape.body.space : this.ibody != null ? this.ibody.space : this.icompound.space;
		if((this.cbSet = space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.interactors.add(this);
			this.cbSet.validate();
			space.freshInteractorType(this);
		}
	}
	,dealloc_cbSet: function() {
		var space = this.ishape != null ? this.ishape.body == null ? null : this.ishape.body.space : this.ibody != null ? this.ibody.space : this.icompound.space;
		if(this.cbSet != null) {
			this.cbSet.interactors.remove(this);
			space.nullInteractorType(this);
			if(--this.cbSet.count == 0) {
				space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.listeners.clear();
				o.zip_listeners = true;
				o.bodylisteners.clear();
				o.zip_bodylisteners = true;
				o.conlisteners.clear();
				o.zip_conlisteners = true;
				while(o.cbTypes.head != null) {
					var cb = o.cbTypes.pop_unsafe();
					cb.cbsets.remove(o);
				}
				o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,immutable_midstep: function(n) {
		if(this.ibody != null) {
			var _this = this.ibody;
			if(_this.space != null && _this.space.midstep) {
				throw haxe_Exception.thrown("Error: " + n + " cannot be set during a space step()");
			}
		} else if(this.ishape != null) {
			this.ishape.__immutable_midstep(n);
		} else {
			this.icompound.__imutable_midstep(n);
		}
	}
};
var zpp_$nape_phys_ZPP_$Body = function() {
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_aabb = false;
	this.aabb = null;
	this.norotate = false;
	this.sinertia = 0.0;
	this.iinertia = 0.0;
	this.cinertia = 0.0;
	this.zip_inertia = false;
	this.inertia = 0.0;
	this.inertiaMode = 0;
	this.zip_gravMassScale = false;
	this.gravMassScale = 0.0;
	this.gravMassMode = 0;
	this.zip_gravMass = false;
	this.gravMass = 0.0;
	this.nomove = false;
	this.cmass = 0.0;
	this.smass = 0.0;
	this.imass = 0.0;
	this.massMode = 0;
	this.zip_mass = false;
	this.mass = 0.0;
	this.zip_axis = false;
	this.axisy = 0.0;
	this.axisx = 0.0;
	this.rot = 0.0;
	this.pre_rot = 0.0;
	this.kinangvel = 0.0;
	this.torque = 0.0;
	this.angvel = 0.0;
	this.svely = 0.0;
	this.svelx = 0.0;
	this.kinvely = 0.0;
	this.kinvelx = 0.0;
	this.forcey = 0.0;
	this.forcex = 0.0;
	this.vely = 0.0;
	this.velx = 0.0;
	this.wrap_pos = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.pre_posy = 0.0;
	this.pre_posx = 0.0;
	this.disableCCD = false;
	this.bulletEnabled = false;
	this.bullet = false;
	this.sweepRadius = 0.0;
	this.sweepFrozen = false;
	this.sweep_angvel = 0.0;
	this.sweepTime = 0.0;
	this.component = null;
	this.constraints = null;
	this.arbiters = null;
	this.space = null;
	this.wrap_shapes = null;
	this.shapes = null;
	this.compound = null;
	this.type = 0;
	this.world = false;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.ibody = this;
	this.world = false;
	this.bulletEnabled = false;
	this.sweepTime = 0;
	this.sweep_angvel = 0;
	this.norotate = this.nomove = false;
	this.disableCCD = false;
	this.posx = 0;
	this.posy = 0;
	this.rot = 0;
	this.axisx = 0;
	this.axisy = 1;
	this.svelx = 0;
	this.svely = 0;
	this.velx = 0;
	this.vely = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.torque = this.angvel = this.kinangvel = 0;
	this.pre_posx = Infinity;
	this.pre_posy = Infinity;
	this.pre_rot = Infinity;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.zip_aabb = true;
	var ret;
	if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$AABB();
	} else {
		ret = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = 0;
	ret.miny = 0;
	ret.maxx = 0;
	ret.maxy = 0;
	this.aabb = ret;
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.massMode = 0;
	this.gravMassMode = 0;
	this.gravMassScale = 1.0;
	this.inertiaMode = 0;
	this.arbiters = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.wrap_shapes = zpp_$nape_util_ZPP_$ShapeList.get(this.shapes);
	this.wrap_shapes.zpp_inner.adder = $bind(this,this.shapes_adder);
	this.wrap_shapes.zpp_inner.subber = $bind(this,this.shapes_subber);
	this.wrap_shapes.zpp_inner._invalidate = $bind(this,this.shapes_invalidate);
	this.wrap_shapes.zpp_inner._modifiable = $bind(this,this.shapes_modifiable);
	this.kinematicDelaySleep = false;
};
zpp_$nape_phys_ZPP_$Body.__name__ = true;
zpp_$nape_phys_ZPP_$Body.__static = function() {
	if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	var ret = new nape_phys_Body(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC);
	var si = ret.zpp_inner;
	si.world = true;
	si.wrap_shapes.zpp_inner.immutable = true;
	si.smass = si.imass = si.cmass = si.mass = si.gravMass = 0.0;
	si.sinertia = si.iinertia = si.cinertia = si.inertia = 0.0;
	si.cbTypes.clear();
	return ret;
};
zpp_$nape_phys_ZPP_$Body.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Body.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	invalidate_type: function() {
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,invalidate_shapes: function() {
		this.zip_aabb = true;
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,atRest: function(dt) {
		if(this.type != 2) {
			return this.component.sleeping;
		} else {
			var linSq = nape_Config.linearSleepThreshold;
			linSq *= linSq;
			var cansleep;
			if(this.velx * this.velx + this.vely * this.vely > linSq) {
				cansleep = false;
			} else {
				var dx = 0.0;
				var dy = 0.0;
				dx = this.posx - this.pre_posx;
				dy = this.posy - this.pre_posy;
				if(dx * dx + dy * dy > 0.25 * linSq * dt * dt) {
					cansleep = false;
				} else {
					var dx = 0.0;
					var dy = 0.0;
					dx = this.aabb.maxx - this.aabb.minx;
					dy = this.aabb.maxy - this.aabb.miny;
					var idl = dx * dx + dy * dy;
					var angSq = nape_Config.angularSleepThreshold;
					angSq *= angSq;
					if(4 * this.angvel * this.angvel * idl > angSq) {
						cansleep = false;
					} else {
						var dr = this.rot - this.pre_rot;
						cansleep = dr * dr * idl > angSq * dt * dt ? false : true;
					}
				}
			}
			if(!cansleep) {
				this.component.waket = this.space.stamp;
			}
			return this.component.waket + nape_Config.sleepDelay < this.space.stamp;
		}
	}
	,refreshArbiters: function() {
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			arb.invalidated = true;
			cx_ite = cx_ite.next;
		}
	}
	,pos_invalidate: function(pos) {
		this.immutable_midstep("Body::position");
		if(this.type == 1 && this.space != null) {
			throw haxe_Exception.thrown("Error: Cannot move a static object once inside a Space");
		}
		if(!(this.posx == pos.x && this.posy == pos.y)) {
			this.posx = pos.x;
			this.posy = pos.y;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.type == 1) {
					s.polygon.invalidate_gverts();
					s.polygon.invalidate_gaxi();
				}
				s.invalidate_worldCOM();
				cx_ite = cx_ite.next;
			}
			this.zip_worldCOM = true;
			this.wake();
		}
	}
	,pos_validate: function() {
		this.wrap_pos.zpp_inner.x = this.posx;
		this.wrap_pos.zpp_inner.y = this.posy;
	}
	,setupPosition: function() {
		var x = this.posx;
		var y = this.posy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(x != x || y != y) {
			throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
			ret = new nape_geom_Vec2();
		} else {
			ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
			zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_$nape_util_ZPP_$PubPool.nextVec2) {
				zpp_$nape_util_ZPP_$PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
				ret1 = new zpp_$nape_geom_ZPP_$Vec2();
			} else {
				ret1 = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
				zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw haxe_Exception.thrown("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw haxe_Exception.thrown("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw haxe_Exception.thrown("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this = ret.zpp_inner;
				if(_this._invalidate != null) {
					_this._invalidate(_this);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_pos = ret;
		this.wrap_pos.zpp_inner._inuse = true;
		if(this.world) {
			this.wrap_pos.zpp_inner._immutable = true;
		} else {
			this.wrap_pos.zpp_inner._invalidate = $bind(this,this.pos_invalidate);
			this.wrap_pos.zpp_inner._validate = $bind(this,this.pos_validate);
		}
	}
	,invalidate_mass: function() {
		this.zip_mass = true;
		this.invalidate_gravMass();
	}
	,validate_mass: function() {
		var exist = false;
		if(this.zip_mass || this.massMode == 0 && exist) {
			this.zip_mass = false;
			if(this.massMode == 0) {
				this.cmass = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cmass += s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == 2 && !this.nomove) {
				this.mass = this.cmass;
				this.imass = this.smass = 1.0 / this.mass;
			} else {
				this.mass = Infinity;
				this.imass = this.smass = 0.0;
			}
			if(exist) {
				this.invalidate_inertia();
			}
		}
	}
	,invalidate_gravMass: function() {
		if(this.gravMassMode != 1) {
			this.zip_gravMass = true;
		}
		if(this.gravMassMode != 2) {
			this.zip_gravMassScale = true;
		}
		this.wake();
	}
	,validate_gravMass: function() {
		if(this.zip_gravMass) {
			this.zip_gravMass = false;
			this.validate_mass();
			if(this.gravMassMode == 0) {
				this.validate_mass();
				this.gravMass = this.cmass;
			} else if(this.gravMassMode == 2) {
				this.validate_mass();
				this.gravMass = this.cmass * this.gravMassScale;
			}
		}
	}
	,invalidate_inertia: function() {
		this.zip_inertia = true;
		this.wake();
	}
	,validate_inertia: function() {
		var exist = false;
		if(this.zip_inertia || this.inertiaMode == 0 && exist) {
			this.zip_inertia = false;
			if(this.inertiaMode == 0) {
				this.cinertia = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cinertia += s.inertia * s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == 2 && !this.norotate) {
				this.inertia = this.cinertia;
				this.sinertia = this.iinertia = 1.0 / this.inertia;
			} else {
				this.inertia = Infinity;
				this.sinertia = this.iinertia = 0;
			}
			if(exist) {
				this.invalidate_inertia();
			}
		}
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			var tempx = 0;
			var tempy = 0;
			var msum = 0.0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_localCOM) {
					s.zip_localCOM = false;
					if(s.type == 1) {
						var _this = s.polygon;
						if(_this.lverts.next == null) {
							throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
						}
						if(_this.lverts.next.next == null) {
							_this.localCOMx = _this.lverts.next.x;
							_this.localCOMy = _this.lverts.next.y;
						} else if(_this.lverts.next.next.next == null) {
							_this.localCOMx = _this.lverts.next.x;
							_this.localCOMy = _this.lverts.next.y;
							var t = 1.0;
							_this.localCOMx += _this.lverts.next.next.x * t;
							_this.localCOMy += _this.lverts.next.next.y * t;
							var t1 = 0.5;
							_this.localCOMx *= t1;
							_this.localCOMy *= t1;
						} else {
							_this.localCOMx = 0;
							_this.localCOMy = 0;
							var area = 0.0;
							var cx_ite1 = _this.lverts.next;
							var u = cx_ite1;
							cx_ite1 = cx_ite1.next;
							var v = cx_ite1;
							cx_ite1 = cx_ite1.next;
							while(cx_ite1 != null) {
								var w = cx_ite1;
								area += v.x * (w.y - u.y);
								var cf = w.y * v.x - w.x * v.y;
								_this.localCOMx += (v.x + w.x) * cf;
								_this.localCOMy += (v.y + w.y) * cf;
								u = v;
								v = w;
								cx_ite1 = cx_ite1.next;
							}
							cx_ite1 = _this.lverts.next;
							var w1 = cx_ite1;
							area += v.x * (w1.y - u.y);
							var cf1 = w1.y * v.x - w1.x * v.y;
							_this.localCOMx += (v.x + w1.x) * cf1;
							_this.localCOMy += (v.y + w1.y) * cf1;
							u = v;
							v = w1;
							cx_ite1 = cx_ite1.next;
							var w2 = cx_ite1;
							area += v.x * (w2.y - u.y);
							var cf2 = w2.y * v.x - w2.x * v.y;
							_this.localCOMx += (v.x + w2.x) * cf2;
							_this.localCOMy += (v.y + w2.y) * cf2;
							area = 1 / (3 * area);
							var t2 = area;
							_this.localCOMx *= t2;
							_this.localCOMy *= t2;
						}
					}
					if(s.wrap_localCOM != null) {
						s.wrap_localCOM.zpp_inner.x = s.localCOMx;
						s.wrap_localCOM.zpp_inner.y = s.localCOMy;
					}
				}
				s.validate_area_inertia();
				var t3 = s.area * s.material.density;
				tempx += s.localCOMx * t3;
				tempy += s.localCOMy * t3;
				msum += s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
			if(msum != 0) {
				var t = 1.0 / msum;
				this.localCOMx = tempx * t;
				this.localCOMy = tempy * t;
			}
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
			if(this.zip_mass && this.massMode == 0) {
				this.zip_mass = false;
				this.cmass = msum;
				if(this.type == 2) {
					this.mass = this.cmass;
					this.imass = this.smass = 1.0 / this.mass;
				} else {
					this.mass = Infinity;
					this.imass = this.smass = 0.0;
				}
			}
		}
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			this.zip_worldCOM = false;
			this.validate_localCOM();
			if(this.zip_axis) {
				this.zip_axis = false;
				this.axisx = Math.sin(this.rot);
				this.axisy = Math.cos(this.rot);
			}
			this.worldCOMx = this.posx + (this.axisy * this.localCOMx - this.axisx * this.localCOMy);
			this.worldCOMy = this.posy + (this.localCOMx * this.axisx + this.localCOMy * this.axisy);
			if(this.wrap_worldCOM != null) {
				this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
				this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
			}
		}
	}
	,aabb_validate: function() {
		if(this.shapes.head == null) {
			throw haxe_Exception.thrown("Error: bounds only makes sense when Body has shapes");
		}
		if(this.shapes.head == null) {
			throw haxe_Exception.thrown("Error: Body bounds only makes sense if it contains shapes");
		}
		if(this.zip_aabb) {
			this.zip_aabb = false;
			this.aabb.minx = Infinity;
			this.aabb.miny = Infinity;
			this.aabb.maxx = -Infinity;
			this.aabb.maxy = -Infinity;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_aabb) {
					if(s.body != null) {
						s.zip_aabb = false;
						if(s.type == 0) {
							var _this = s.circle;
							if(_this.zip_worldCOM) {
								if(_this.body != null) {
									_this.zip_worldCOM = false;
									if(_this.zip_localCOM) {
										_this.zip_localCOM = false;
										if(_this.type == 1) {
											var _this1 = _this.polygon;
											if(_this1.lverts.next == null) {
												throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
											}
											if(_this1.lverts.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
											} else if(_this1.lverts.next.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
												var t = 1.0;
												_this1.localCOMx += _this1.lverts.next.next.x * t;
												_this1.localCOMy += _this1.lverts.next.next.y * t;
												var t1 = 0.5;
												_this1.localCOMx *= t1;
												_this1.localCOMy *= t1;
											} else {
												_this1.localCOMx = 0;
												_this1.localCOMy = 0;
												var area = 0.0;
												var cx_ite1 = _this1.lverts.next;
												var u = cx_ite1;
												cx_ite1 = cx_ite1.next;
												var v = cx_ite1;
												cx_ite1 = cx_ite1.next;
												while(cx_ite1 != null) {
													var w = cx_ite1;
													area += v.x * (w.y - u.y);
													var cf = w.y * v.x - w.x * v.y;
													_this1.localCOMx += (v.x + w.x) * cf;
													_this1.localCOMy += (v.y + w.y) * cf;
													u = v;
													v = w;
													cx_ite1 = cx_ite1.next;
												}
												cx_ite1 = _this1.lverts.next;
												var w1 = cx_ite1;
												area += v.x * (w1.y - u.y);
												var cf1 = w1.y * v.x - w1.x * v.y;
												_this1.localCOMx += (v.x + w1.x) * cf1;
												_this1.localCOMy += (v.y + w1.y) * cf1;
												u = v;
												v = w1;
												cx_ite1 = cx_ite1.next;
												var w2 = cx_ite1;
												area += v.x * (w2.y - u.y);
												var cf2 = w2.y * v.x - w2.x * v.y;
												_this1.localCOMx += (v.x + w2.x) * cf2;
												_this1.localCOMy += (v.y + w2.y) * cf2;
												area = 1 / (3 * area);
												var t2 = area;
												_this1.localCOMx *= t2;
												_this1.localCOMy *= t2;
											}
										}
										if(_this.wrap_localCOM != null) {
											_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
											_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
										}
									}
									var _this2 = _this.body;
									if(_this2.zip_axis) {
										_this2.zip_axis = false;
										_this2.axisx = Math.sin(_this2.rot);
										_this2.axisy = Math.cos(_this2.rot);
									}
									_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
									_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
								}
							}
							var rx = _this.radius;
							var ry = _this.radius;
							_this.aabb.minx = _this.worldCOMx - rx;
							_this.aabb.miny = _this.worldCOMy - ry;
							_this.aabb.maxx = _this.worldCOMx + rx;
							_this.aabb.maxy = _this.worldCOMy + ry;
						} else {
							var _this3 = s.polygon;
							if(_this3.zip_gverts) {
								if(_this3.body != null) {
									_this3.zip_gverts = false;
									_this3.validate_lverts();
									var _this4 = _this3.body;
									if(_this4.zip_axis) {
										_this4.zip_axis = false;
										_this4.axisx = Math.sin(_this4.rot);
										_this4.axisy = Math.cos(_this4.rot);
									}
									var li = _this3.lverts.next;
									var cx_ite2 = _this3.gverts.next;
									while(cx_ite2 != null) {
										var g = cx_ite2;
										var l = li;
										li = li.next;
										g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
										g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
										cx_ite2 = cx_ite2.next;
									}
								}
							}
							if(_this3.lverts.next == null) {
								throw haxe_Exception.thrown("Error: An empty polygon has no meaningful bounds");
							}
							var p0 = _this3.gverts.next;
							_this3.aabb.minx = p0.x;
							_this3.aabb.miny = p0.y;
							_this3.aabb.maxx = p0.x;
							_this3.aabb.maxy = p0.y;
							var cx_ite3 = _this3.gverts.next.next;
							while(cx_ite3 != null) {
								var p = cx_ite3;
								if(p.x < _this3.aabb.minx) {
									_this3.aabb.minx = p.x;
								}
								if(p.x > _this3.aabb.maxx) {
									_this3.aabb.maxx = p.x;
								}
								if(p.y < _this3.aabb.miny) {
									_this3.aabb.miny = p.y;
								}
								if(p.y > _this3.aabb.maxy) {
									_this3.aabb.maxy = p.y;
								}
								cx_ite3 = cx_ite3.next;
							}
						}
					}
				}
				var _this5 = this.aabb;
				var x = s.aabb;
				if(x.minx < _this5.minx) {
					_this5.minx = x.minx;
				}
				if(x.maxx > _this5.maxx) {
					_this5.maxx = x.maxx;
				}
				if(x.miny < _this5.miny) {
					_this5.miny = x.miny;
				}
				if(x.maxy > _this5.maxy) {
					_this5.maxy = x.maxy;
				}
				cx_ite = cx_ite.next;
			}
		}
	}
	,shapes_adder: function(s) {
		if(s.zpp_inner.body != this) {
			if(s.zpp_inner.body != null) {
				s.zpp_inner.body.wrap_shapes.remove(s);
			}
			s.zpp_inner.body = this;
			s.zpp_inner.addedToBody();
			if(this.space != null) {
				var _this = this.space;
				var s1 = s.zpp_inner;
				var o = s1.body;
				if(!o.world) {
					o.component.waket = _this.stamp + (_this.midstep ? 0 : 1);
					if(o.type == 3) {
						o.kinematicDelaySleep = true;
					}
					if(o.component.sleeping) {
						_this.really_wake(o,false);
					}
				}
				_this.bphase.insert(s1);
				s1.addedToSpace();
			}
			if(s.zpp_inner.type == 1) {
				s.zpp_inner.polygon.invalidate_gaxi();
				s.zpp_inner.polygon.invalidate_gverts();
			}
			return true;
		} else {
			return false;
		}
	}
	,shapes_subber: function(s) {
		if(this.space != null) {
			this.space.removed_shape(s.zpp_inner);
		}
		s.zpp_inner.body = null;
		s.zpp_inner.removedFromBody();
	}
	,shapes_invalidate: function(_) {
		this.invalidate_shapes();
	}
	,shapes_modifiable: function() {
		this.immutable_midstep("Body::shapes");
		if(this.type == 1 && this.space != null) {
			throw haxe_Exception.thrown("Error: Cannot modifiy shapes of static object once added to Space");
		}
	}
	,addedToSpace: function() {
		if(zpp_$nape_space_ZPP_$Component.zpp_pool == null) {
			this.component = new zpp_$nape_space_ZPP_$Component();
		} else {
			this.component = zpp_$nape_space_ZPP_$Component.zpp_pool;
			zpp_$nape_space_ZPP_$Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		this.component.isBody = true;
		this.component.body = this;
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		while(this.arbiters.head != null) {
			var arb = this.arbiters.pop_unsafe();
			var s = this.space;
			arb.cleared = true;
			if(arb.b2 == this) {
				var _this = arb.b1.arbiters;
				var pre = null;
				var cur = _this.head;
				var ret = false;
				while(cur != null) {
					if(cur.elt == arb) {
						var old;
						var ret1;
						if(pre == null) {
							old = _this.head;
							ret1 = old.next;
							_this.head = ret1;
							if(_this.head == null) {
								_this.pushmod = true;
							}
						} else {
							old = pre.next;
							ret1 = old.next;
							pre.next = ret1;
							if(ret1 == null) {
								_this.pushmod = true;
							}
						}
						var o = old;
						o.elt = null;
						o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
						_this.modified = true;
						_this.length--;
						_this.pushmod = true;
						ret = true;
						break;
					}
					pre = cur;
					cur = cur.next;
				}
			}
			if(arb.b1 == this) {
				var _this1 = arb.b2.arbiters;
				var pre1 = null;
				var cur1 = _this1.head;
				var ret2 = false;
				while(cur1 != null) {
					if(cur1.elt == arb) {
						var old1;
						var ret3;
						if(pre1 == null) {
							old1 = _this1.head;
							ret3 = old1.next;
							_this1.head = ret3;
							if(_this1.head == null) {
								_this1.pushmod = true;
							}
						} else {
							old1 = pre1.next;
							ret3 = old1.next;
							pre1.next = ret3;
							if(ret3 == null) {
								_this1.pushmod = true;
							}
						}
						var o1 = old1;
						o1.elt = null;
						o1.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o1;
						_this1.modified = true;
						_this1.length--;
						_this1.pushmod = true;
						ret2 = true;
						break;
					}
					pre1 = cur1;
					cur1 = cur1.next;
				}
			}
			if(arb.pair != null) {
				arb.pair.arb = null;
				arb.pair = null;
			}
			arb.active = false;
			s.f_arbiters.modified = true;
		}
		var o = this.component;
		o.body = null;
		o.constraint = null;
		o.next = zpp_$nape_space_ZPP_$Component.zpp_pool;
		zpp_$nape_space_ZPP_$Component.zpp_pool = o;
		this.component = null;
		this.__iremovedFromSpace();
	}
});
var zpp_$nape_phys_ZPP_$Compound = function() {
	this.space = null;
	this.compound = null;
	this.depth = 0;
	this.wrap_compounds = null;
	this.wrap_constraints = null;
	this.wrap_bodies = null;
	this.compounds = null;
	this.constraints = null;
	this.bodies = null;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.icompound = this;
	this.depth = 1;
	var me = this;
	this.bodies = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_bodies = zpp_$nape_util_ZPP_$BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.compounds = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this.wrap_compounds = zpp_$nape_util_ZPP_$CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
};
zpp_$nape_phys_ZPP_$Compound.__name__ = true;
zpp_$nape_phys_ZPP_$Compound.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Compound.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	__imutable_midstep: function(name) {
		if(this.space != null && this.space.midstep) {
			throw haxe_Exception.thrown("Error: " + name + " cannot be set during space step()");
		}
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) {
				x.zpp_inner.compound.wrap_bodies.remove(x);
			} else if(x.zpp_inner.space != null) {
				x.zpp_inner.space.wrap_bodies.remove(x);
			}
			x.zpp_inner.compound = this;
			if(this.space != null) {
				this.space.addBody(x.zpp_inner);
			}
			return true;
		} else {
			return false;
		}
	}
	,bodies_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) {
			this.space.remBody(x.zpp_inner);
		}
	}
	,bodies_modifiable: function() {
		this.immutable_midstep("Compound::" + "bodies");
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) {
				x.zpp_inner.compound.wrap_constraints.remove(x);
			} else if(x.zpp_inner.space != null) {
				x.zpp_inner.space.wrap_constraints.remove(x);
			}
			x.zpp_inner.compound = this;
			if(this.space != null) {
				this.space.addConstraint(x.zpp_inner);
			}
			return true;
		} else {
			return false;
		}
	}
	,constraints_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) {
			this.space.remConstraint(x.zpp_inner);
		}
	}
	,constraints_modifiable: function() {
		this.immutable_midstep("Compound::" + "constraints");
	}
	,compounds_adder: function(x) {
		var cur = this;
		while(cur != null && cur != x.zpp_inner) cur = cur.compound;
		if(cur == x.zpp_inner) {
			throw haxe_Exception.thrown("Error: Assignment would cause a cycle in the Compound tree: assigning " + x.toString() + ".compound = " + this.outer.toString());
		}
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) {
				x.zpp_inner.compound.wrap_compounds.remove(x);
			} else if(x.zpp_inner.space != null) {
				x.zpp_inner.space.wrap_compounds.remove(x);
			}
			x.zpp_inner.compound = this;
			x.zpp_inner.depth = this.depth + 1;
			if(this.space != null) {
				this.space.addCompound(x.zpp_inner);
			}
			return true;
		} else {
			return false;
		}
	}
	,compounds_subber: function(x) {
		x.zpp_inner.compound = null;
		x.zpp_inner.depth = 1;
		if(this.space != null) {
			this.space.remCompound(x.zpp_inner);
		}
	}
	,compounds_modifiable: function() {
		this.immutable_midstep("Compound::" + "compounds");
	}
});
var zpp_$nape_phys_ZPP_$FluidProperties = function() {
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.density = 0.0;
	this.viscosity = 0.0;
	this.shapes = null;
	this.outer = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.density = this.viscosity = 1;
	this.wrap_gravity = null;
	this.gravityx = 0;
	this.gravityy = 0;
};
zpp_$nape_phys_ZPP_$FluidProperties.__name__ = true;
zpp_$nape_phys_ZPP_$FluidProperties.prototype = {
	invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			shape.invalidate_fluidprops();
			cx_ite = cx_ite.next;
		}
	}
};
var zpp_$nape_phys_ZPP_$Material = function() {
	this.rollingFriction = 0.0;
	this.elasticity = 0.0;
	this.density = 0.0;
	this.staticFriction = 0.0;
	this.dynamicFriction = 0.0;
	this.shapes = null;
	this.outer = null;
	this.next = null;
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.elasticity = 0;
	this.dynamicFriction = 1;
	this.staticFriction = 2;
	this.density = 0.001;
	this.rollingFriction = 0.01;
};
zpp_$nape_phys_ZPP_$Material.__name__ = true;
zpp_$nape_phys_ZPP_$Material.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_phys_Material();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,set: function(x) {
		this.dynamicFriction = x.dynamicFriction;
		this.staticFriction = x.staticFriction;
		this.density = x.density;
		this.elasticity = x.elasticity;
		this.rollingFriction = x.rollingFriction;
	}
	,invalidate: function(x) {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_material(x);
			cx_ite = cx_ite.next;
		}
	}
};
var zpp_$nape_shape_ZPP_$Shape = function(type) {
	this.zip_aabb = false;
	this.aabb = null;
	this.pairs = null;
	this.node = null;
	this.sweep = null;
	this.sensorEnabled = false;
	this.fluidEnabled = false;
	this.fluidProperties = null;
	this.filter = null;
	this.material = null;
	this.refmaterial = null;
	this.polygon = null;
	this.circle = null;
	this.sweepCoef = 0.0;
	this.zip_sweepRadius = false;
	this.sweepRadius = 0.0;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_angDrag = false;
	this.angDrag = 0.0;
	this.inertia = 0.0;
	this.zip_area_inertia = false;
	this.area = 0.0;
	this.type = 0;
	this.body = null;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.pairs = new zpp_$nape_util_ZNPList_$ZPP_$AABBPair();
	this.ishape = this;
	this.type = type;
	var ret;
	if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$AABB();
	} else {
		ret = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = 0;
	ret.miny = 0;
	ret.maxx = 0;
	ret.maxy = 0;
	this.aabb = ret;
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.zip_area_inertia = this.zip_angDrag = this.zip_localCOM = this.zip_sweepRadius = true;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.fluidEnabled = false;
	this.sensorEnabled = false;
	this.fluidProperties = null;
	this.body = null;
	this.refmaterial = new zpp_$nape_phys_ZPP_$Material();
	this.sweepRadius = this.sweepCoef = 0;
};
zpp_$nape_shape_ZPP_$Shape.__name__ = true;
zpp_$nape_shape_ZPP_$Shape.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_shape_ZPP_$Shape.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	validate_sweepRadius: function() {
		if(this.zip_sweepRadius) {
			this.zip_sweepRadius = false;
			if(this.type == 0) {
				this.circle.__validate_sweepRadius();
			} else {
				this.polygon.__validate_sweepRadius();
			}
		}
	}
	,validate_area_inertia: function() {
		if(this.zip_area_inertia) {
			this.zip_area_inertia = false;
			if(this.type == 0) {
				this.circle.__validate_area_inertia();
			} else {
				this.polygon.__validate_area_inertia();
			}
		}
	}
	,validate_angDrag: function() {
		if(this.zip_angDrag || this.refmaterial.dynamicFriction != this.material.dynamicFriction) {
			this.zip_angDrag = false;
			this.refmaterial.dynamicFriction = this.material.dynamicFriction;
			if(this.type == 0) {
				this.circle.__validate_angDrag();
			} else {
				this.polygon.__validate_angDrag();
			}
		}
	}
	,invalidate_area_inertia: function() {
		this.zip_area_inertia = true;
		if(this.body != null) {
			var _this = this.body;
			_this.zip_localCOM = true;
			_this.zip_worldCOM = true;
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	,invalidate_angDrag: function() {
		this.zip_angDrag = true;
	}
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.invalidate_area_inertia();
		if(this.type == 0) {
			this.zip_sweepRadius = true;
		}
		this.invalidate_angDrag();
		this.invalidate_worldCOM();
		if(this.body != null) {
			var _this = this.body;
			_this.zip_localCOM = true;
			_this.zip_worldCOM = true;
		}
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
		this.zip_aabb = true;
		if(this.body != null) {
			this.body.zip_aabb = true;
		}
	}
	,invalidate_material: function(flags) {
		if((flags & zpp_$nape_phys_ZPP_$Material.WAKE) != 0) {
			this.wake();
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.ARBITERS) != 0) {
			if(this.body != null) {
				this.body.refreshArbiters();
			}
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.PROPS) != 0) {
			if(this.body != null) {
				var _this = this.body;
				_this.zip_localCOM = true;
				_this.zip_worldCOM = true;
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.ANGDRAG) != 0) {
			this.invalidate_angDrag();
		}
		this.refmaterial.set(this.material);
	}
	,invalidate_filter: function() {
		this.wake();
	}
	,invalidate_fluidprops: function() {
		if(this.fluidEnabled) {
			this.wake();
		}
	}
	,aabb_validate: function() {
		if(this.body == null) {
			throw haxe_Exception.thrown("Error: bounds only makes sense when Shape belongs to a Body");
		}
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.type == 0) {
					var _this = this.circle;
					if(_this.zip_worldCOM) {
						if(_this.body != null) {
							_this.zip_worldCOM = false;
							if(_this.zip_localCOM) {
								_this.zip_localCOM = false;
								if(_this.type == 1) {
									var _this1 = _this.polygon;
									if(_this1.lverts.next == null) {
										throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
									}
									if(_this1.lverts.next.next == null) {
										_this1.localCOMx = _this1.lverts.next.x;
										_this1.localCOMy = _this1.lverts.next.y;
									} else if(_this1.lverts.next.next.next == null) {
										_this1.localCOMx = _this1.lverts.next.x;
										_this1.localCOMy = _this1.lverts.next.y;
										var t = 1.0;
										_this1.localCOMx += _this1.lverts.next.next.x * t;
										_this1.localCOMy += _this1.lverts.next.next.y * t;
										var t = 0.5;
										_this1.localCOMx *= t;
										_this1.localCOMy *= t;
									} else {
										_this1.localCOMx = 0;
										_this1.localCOMy = 0;
										var area = 0.0;
										var cx_ite = _this1.lverts.next;
										var u = cx_ite;
										cx_ite = cx_ite.next;
										var v = cx_ite;
										cx_ite = cx_ite.next;
										while(cx_ite != null) {
											var w = cx_ite;
											area += v.x * (w.y - u.y);
											var cf = w.y * v.x - w.x * v.y;
											_this1.localCOMx += (v.x + w.x) * cf;
											_this1.localCOMy += (v.y + w.y) * cf;
											u = v;
											v = w;
											cx_ite = cx_ite.next;
										}
										cx_ite = _this1.lverts.next;
										var w = cx_ite;
										area += v.x * (w.y - u.y);
										var cf = w.y * v.x - w.x * v.y;
										_this1.localCOMx += (v.x + w.x) * cf;
										_this1.localCOMy += (v.y + w.y) * cf;
										u = v;
										v = w;
										cx_ite = cx_ite.next;
										var w = cx_ite;
										area += v.x * (w.y - u.y);
										var cf = w.y * v.x - w.x * v.y;
										_this1.localCOMx += (v.x + w.x) * cf;
										_this1.localCOMy += (v.y + w.y) * cf;
										area = 1 / (3 * area);
										var t = area;
										_this1.localCOMx *= t;
										_this1.localCOMy *= t;
									}
								}
								if(_this.wrap_localCOM != null) {
									_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
									_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
								}
							}
							var _this1 = _this.body;
							if(_this1.zip_axis) {
								_this1.zip_axis = false;
								_this1.axisx = Math.sin(_this1.rot);
								_this1.axisy = Math.cos(_this1.rot);
							}
							_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
							_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
						}
					}
					var rx = _this.radius;
					var ry = _this.radius;
					_this.aabb.minx = _this.worldCOMx - rx;
					_this.aabb.miny = _this.worldCOMy - ry;
					_this.aabb.maxx = _this.worldCOMx + rx;
					_this.aabb.maxy = _this.worldCOMy + ry;
				} else {
					var _this = this.polygon;
					if(_this.zip_gverts) {
						if(_this.body != null) {
							_this.zip_gverts = false;
							_this.validate_lverts();
							var _this1 = _this.body;
							if(_this1.zip_axis) {
								_this1.zip_axis = false;
								_this1.axisx = Math.sin(_this1.rot);
								_this1.axisy = Math.cos(_this1.rot);
							}
							var li = _this.lverts.next;
							var cx_ite = _this.gverts.next;
							while(cx_ite != null) {
								var g = cx_ite;
								var l = li;
								li = li.next;
								g.x = _this.body.posx + (_this.body.axisy * l.x - _this.body.axisx * l.y);
								g.y = _this.body.posy + (l.x * _this.body.axisx + l.y * _this.body.axisy);
								cx_ite = cx_ite.next;
							}
						}
					}
					if(_this.lverts.next == null) {
						throw haxe_Exception.thrown("Error: An empty polygon has no meaningful bounds");
					}
					var p0 = _this.gverts.next;
					_this.aabb.minx = p0.x;
					_this.aabb.miny = p0.y;
					_this.aabb.maxx = p0.x;
					_this.aabb.maxy = p0.y;
					var cx_ite = _this.gverts.next.next;
					while(cx_ite != null) {
						var p = cx_ite;
						if(p.x < _this.aabb.minx) {
							_this.aabb.minx = p.x;
						}
						if(p.x > _this.aabb.maxx) {
							_this.aabb.maxx = p.x;
						}
						if(p.y < _this.aabb.miny) {
							_this.aabb.miny = p.y;
						}
						if(p.y > _this.aabb.maxy) {
							_this.aabb.maxy = p.y;
						}
						cx_ite = cx_ite.next;
					}
				}
			}
		}
	}
	,setMaterial: function(material) {
		if(this.material != material) {
			if(this.body != null && this.body.space != null) {
				if(this.material != null) {
					this.material.shapes.remove(this);
				}
			}
			this.material = material;
			if(this.body != null && this.body.space != null) {
				material.shapes.add(this);
			}
			this.wake();
			if(this.body != null) {
				this.body.refreshArbiters();
			}
		}
	}
	,setFilter: function(filter) {
		if(this.filter != filter) {
			if(this.body != null && this.body.space != null) {
				if(this.filter != null) {
					this.filter.shapes.remove(this);
				}
			}
			this.filter = filter;
			if(this.body != null && this.body.space != null) {
				filter.shapes.add(this);
			}
			this.wake();
		}
	}
	,__immutable_midstep: function(name) {
		if(this.body != null && this.body.space != null && this.body.space.midstep) {
			throw haxe_Exception.thrown("Error: " + name + " cannot be set during a space step()");
		}
	}
	,addedToBody: function() {
		this.invalidate_worldCOM();
		this.zip_aabb = true;
		if(this.body != null) {
			this.body.zip_aabb = true;
		}
	}
	,removedFromBody: function() {
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
		this.material.shapes.add(this);
		this.filter.shapes.add(this);
		if(this.fluidProperties != null) {
			this.fluidProperties.shapes.add(this);
		}
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
		this.material.shapes.remove(this);
		this.filter.shapes.remove(this);
		if(this.fluidProperties != null) {
			this.fluidProperties.shapes.remove(this);
		}
	}
});
var zpp_$nape_shape_ZPP_$Circle = function() {
	this.radius = 0.0;
	this.outer_zn = null;
	zpp_$nape_shape_ZPP_$Shape.call(this,0);
	this.circle = this;
	this.zip_localCOM = false;
};
zpp_$nape_shape_ZPP_$Circle.__name__ = true;
zpp_$nape_shape_ZPP_$Circle.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Circle.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	invalidate_radius: function() {
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.zip_aabb = true;
		if(this.body != null) {
			this.body.zip_aabb = true;
		}
		if(this.body != null) {
			this.body.wake();
		}
	}
	,__validate_sweepRadius: function() {
		this.sweepCoef = Math.sqrt(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
		this.sweepRadius = this.sweepCoef + this.radius;
	}
	,__validate_area_inertia: function() {
		var r2 = this.radius * this.radius;
		this.area = r2 * Math.PI;
		this.inertia = r2 * 0.5 + (this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
	}
	,__validate_angDrag: function() {
		var lc = this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy;
		var r2 = this.radius * this.radius;
		var skin = this.material.dynamicFriction * nape_Config.fluidAngularDragFriction;
		this.angDrag = (lc + 2 * r2) * skin + 0.5 * nape_Config.fluidAngularDrag * (1 + nape_Config.fluidVacuumDrag) * lc;
		this.angDrag /= 2 * (lc + 0.5 * r2);
	}
});
var zpp_$nape_shape_ZPP_$Edge = function() {
	this.tp1 = 0.0;
	this.tp0 = 0.0;
	this.gp1 = null;
	this.lp1 = null;
	this.gp0 = null;
	this.lp0 = null;
	this.gprojection = 0.0;
	this.lprojection = 0.0;
	this.length = 0.0;
	this.wrap_gnorm = null;
	this.gnormy = 0.0;
	this.gnormx = 0.0;
	this.wrap_lnorm = null;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.outer = null;
	this.polygon = null;
	this.next = null;
	this.lnormx = 0;
	this.lnormy = 0;
	this.gnormx = 0;
	this.gnormy = 0;
	this.length = 0;
	this.lprojection = 0;
	this.gprojection = 0;
};
zpp_$nape_shape_ZPP_$Edge.__name__ = true;
zpp_$nape_shape_ZPP_$Edge.prototype = {
	wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_shape_ZPP_$Edge.internal = true;
			this.outer = new nape_shape_Edge();
			zpp_$nape_shape_ZPP_$Edge.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
};
var zpp_$nape_shape_ZPP_$Polygon = function() {
	this.zip_sanitation = false;
	this.zip_valid = false;
	this.zip_gaxi = false;
	this.zip_gverts = false;
	this.zip_laxi = false;
	this.zip_lverts = false;
	this.reverse_flag = false;
	this.edgeCnt = 0;
	this.wrap_edges = null;
	this.edges = null;
	this.wrap_gverts = null;
	this.gverts = null;
	this.wrap_lverts = null;
	this.lverts = null;
	this.outer_zn = null;
	zpp_$nape_shape_ZPP_$Shape.call(this,1);
	this.polygon = this;
	this.lverts = new zpp_$nape_geom_ZPP_$Vec2();
	this.gverts = new zpp_$nape_geom_ZPP_$Vec2();
	this.edges = new zpp_$nape_util_ZNPList_$ZPP_$Edge();
	this.edgeCnt = 0;
};
zpp_$nape_shape_ZPP_$Polygon.__name__ = true;
zpp_$nape_shape_ZPP_$Polygon.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Polygon.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	lverts_pa_invalidate: function(x) {
		this.invalidate_lverts();
	}
	,lverts_pa_immutable: function() {
		if(this.body != null && this.body.type == 1 && this.body.space != null) {
			throw haxe_Exception.thrown("Error: Cannot modify local vertex of Polygon added to a static body whilst within a Space");
		}
	}
	,gverts_pa_validate: function() {
		if(this.body == null) {
			throw haxe_Exception.thrown("Error: World vertex only makes sense when Polygon is contained in a rigid body");
		}
		if(this.zip_gverts) {
			if(this.body != null) {
				this.zip_gverts = false;
				this.validate_lverts();
				var _this = this.body;
				if(_this.zip_axis) {
					_this.zip_axis = false;
					_this.axisx = Math.sin(_this.rot);
					_this.axisy = Math.cos(_this.rot);
				}
				var li = this.lverts.next;
				var cx_ite = this.gverts.next;
				while(cx_ite != null) {
					var g = cx_ite;
					var l = li;
					li = li.next;
					g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
					g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
					cx_ite = cx_ite.next;
				}
			}
		}
	}
	,lverts_post_adder: function(x) {
		x.zpp_inner._invalidate = $bind(this,this.lverts_pa_invalidate);
		x.zpp_inner._isimmutable = $bind(this,this.lverts_pa_immutable);
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x.zpp_inner) {
				break;
			} else {
				ite = ite == null ? this.gverts.next : ite.next;
				ite2 = ite2 == null ? this.edges.head : ite2.next;
			}
			cx_ite = cx_ite.next;
		}
		var immutable = true;
		if(immutable == null) {
			immutable = false;
		}
		var ret;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.weak = false;
		ret._immutable = immutable;
		ret.x = 0;
		ret.y = 0;
		var vec = ret;
		this.gverts.insert(ite,vec);
		if(this.lverts.next.next != null) {
			if(this.lverts.next.next.next == null) {
				var ed;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) {
					ed = new zpp_$nape_shape_ZPP_$Edge();
				} else {
					ed = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed.next;
					ed.next = null;
				}
				ed.polygon = this;
				this.edges.add(ed);
				var ed;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) {
					ed = new zpp_$nape_shape_ZPP_$Edge();
				} else {
					ed = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed.next;
					ed.next = null;
				}
				ed.polygon = this;
				this.edges.add(ed);
				this.edgeCnt += 2;
			} else {
				var ed;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) {
					ed = new zpp_$nape_shape_ZPP_$Edge();
				} else {
					ed = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed.next;
					ed.next = null;
				}
				ed.polygon = this;
				this.edges.insert(ite2,ed);
				this.edgeCnt++;
			}
		}
		vec._validate = $bind(this,this.gverts_pa_validate);
	}
	,lverts_subber: function(x) {
		this.cleanup_lvert(x.zpp_inner);
	}
	,lverts_invalidate: function(_) {
		this.invalidate_lverts();
	}
	,lverts_validate: function() {
		this.validate_lverts();
	}
	,lverts_modifiable: function() {
		this.immutable_midstep("Polygon::localVerts");
		if(this.body != null && this.body.type == 1 && this.body.space != null) {
			throw haxe_Exception.thrown("Error: Cannot modifiy shapes of static object once added to Space");
		}
	}
	,getlverts: function() {
		var me = this;
		this.wrap_lverts = zpp_$nape_util_ZPP_$MixVec2List.get(this.lverts);
		this.wrap_lverts.zpp_inner.post_adder = $bind(this,this.lverts_post_adder);
		this.wrap_lverts.zpp_inner.subber = $bind(this,this.lverts_subber);
		this.wrap_lverts.zpp_inner._invalidate = $bind(this,this.lverts_invalidate);
		this.wrap_lverts.zpp_inner._validate = $bind(this,this.lverts_validate);
		this.wrap_lverts.zpp_inner._modifiable = $bind(this,this.lverts_modifiable);
		this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,invalidate_lverts: function() {
		this.invalidate_laxi();
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.invalidate_localCOM();
		this.invalidate_gverts();
		this.zip_lverts = true;
		this.zip_valid = true;
		this.zip_sanitation = true;
		if(this.body != null) {
			this.body.wake();
		}
	}
	,invalidate_laxi: function() {
		this.invalidate_gaxi();
		this.zip_sweepRadius = true;
		this.zip_laxi = true;
	}
	,invalidate_gverts: function() {
		this.zip_aabb = true;
		if(this.body != null) {
			this.body.zip_aabb = true;
		}
		this.zip_gverts = true;
	}
	,invalidate_gaxi: function() {
		this.zip_gaxi = true;
	}
	,valid: function() {
		if(this.zip_valid) {
			this.zip_valid = false;
			if(this.zip_sanitation) {
				this.zip_sanitation = false;
				this.splice_collinear_real();
			}
			if(this.lverts.length < 3) {
				if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				return this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE;
			} else {
				this.validate_lverts();
				this.validate_area_inertia();
				if(this.area < nape_Config.epsilon) {
					if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					return this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE;
				} else {
					var neg = false;
					var pos = false;
					var cx_cont = true;
					var cx_ite = this.lverts.next;
					var u = cx_ite;
					cx_ite = cx_ite.next;
					var v = cx_ite;
					cx_ite = cx_ite.next;
					while(cx_ite != null) {
						var w = cx_ite;
						var ax = 0.0;
						var ay = 0.0;
						ax = w.x - v.x;
						ay = w.y - v.y;
						var bx = 0.0;
						var by = 0.0;
						bx = v.x - u.x;
						by = v.y - u.y;
						var dot = by * ax - bx * ay;
						if(dot > nape_Config.epsilon) {
							pos = true;
						} else if(dot < -nape_Config.epsilon) {
							neg = true;
						}
						if(pos && neg) {
							cx_cont = false;
							break;
						}
						u = v;
						v = w;
						cx_ite = cx_ite.next;
					}
					if(cx_cont) {
						cx_ite = this.lverts.next;
						var w = cx_ite;
						while(true) {
							var ax = 0.0;
							var ay = 0.0;
							ax = w.x - v.x;
							ay = w.y - v.y;
							var bx = 0.0;
							var by = 0.0;
							bx = v.x - u.x;
							by = v.y - u.y;
							var dot = by * ax - bx * ay;
							if(dot > nape_Config.epsilon) {
								pos = true;
							} else if(dot < -nape_Config.epsilon) {
								neg = true;
							}
							if(pos && neg) {
								cx_cont = false;
								break;
							}
							if(!false) {
								break;
							}
						}
						if(cx_cont) {
							u = v;
							v = w;
							cx_ite = cx_ite.next;
							var w = cx_ite;
							while(true) {
								var ax = 0.0;
								var ay = 0.0;
								ax = w.x - v.x;
								ay = w.y - v.y;
								var bx = 0.0;
								var by = 0.0;
								bx = v.x - u.x;
								by = v.y - u.y;
								var dot = by * ax - bx * ay;
								if(dot > nape_Config.epsilon) {
									pos = true;
								} else if(dot < -nape_Config.epsilon) {
									neg = true;
								}
								if(pos && neg) {
									break;
								}
								if(!false) {
									break;
								}
							}
						}
					}
					if(pos && neg) {
						if(zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE == null) {
							zpp_$nape_util_ZPP_$Flags.internal = true;
							zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = new nape_shape_ValidationResult();
							zpp_$nape_util_ZPP_$Flags.internal = false;
						}
						return this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE;
					} else {
						var cont = true;
						var cx_cont = true;
						var cx_ite = this.lverts.next;
						var u = cx_ite;
						cx_ite = cx_ite.next;
						while(cx_ite != null) {
							var v = cx_ite;
							if(!cont) {
								cx_cont = false;
								break;
							}
							var cx_cont1 = true;
							var cx_ite1 = this.lverts.next;
							var a = cx_ite1;
							cx_ite1 = cx_ite1.next;
							while(cx_ite1 != null) {
								var b = cx_ite1;
								if(u == a || u == b || v == a || v == b) {
									a = b;
									cx_ite1 = cx_ite1.next;
									continue;
								}
								var sx = 0.0;
								var sy = 0.0;
								sx = u.x - a.x;
								sy = u.y - a.y;
								var vx = 0.0;
								var vy = 0.0;
								vx = v.x - u.x;
								vy = v.y - u.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > nape_Config.epsilon) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > nape_Config.epsilon && t < 1 - nape_Config.epsilon) {
										var s = (vy * sx - vx * sy) * den;
										if(s > nape_Config.epsilon && s < 1 - nape_Config.epsilon) {
											cont = false;
											cx_cont1 = false;
											break;
										}
									}
								}
								a = b;
								cx_ite1 = cx_ite1.next;
							}
							if(cx_cont1) {
								while(true) {
									var b1 = this.lverts.next;
									if(u == a || u == b1 || v == a || v == b1) {
										break;
									}
									var sx1 = 0.0;
									var sy1 = 0.0;
									sx1 = u.x - a.x;
									sy1 = u.y - a.y;
									var vx1 = 0.0;
									var vy1 = 0.0;
									vx1 = v.x - u.x;
									vy1 = v.y - u.y;
									var qx1 = 0.0;
									var qy1 = 0.0;
									qx1 = b1.x - a.x;
									qy1 = b1.y - a.y;
									var den1 = vy1 * qx1 - vx1 * qy1;
									if(den1 * den1 > nape_Config.epsilon) {
										den1 = 1 / den1;
										var t1 = (qy1 * sx1 - qx1 * sy1) * den1;
										if(t1 > nape_Config.epsilon && t1 < 1 - nape_Config.epsilon) {
											var s1 = (vy1 * sx1 - vx1 * sy1) * den1;
											if(s1 > nape_Config.epsilon && s1 < 1 - nape_Config.epsilon) {
												cont = false;
												break;
											}
										}
									}
									if(!false) {
										break;
									}
								}
							}
							u = v;
							cx_ite = cx_ite.next;
						}
						if(cx_cont) {
							while(true) {
								var v = this.lverts.next;
								if(!cont) {
									break;
								}
								var cx_cont = true;
								var cx_ite = this.lverts.next;
								var a = cx_ite;
								cx_ite = cx_ite.next;
								while(cx_ite != null) {
									var b = cx_ite;
									if(u == a || u == b || v == a || v == b) {
										a = b;
										cx_ite = cx_ite.next;
										continue;
									}
									var sx = 0.0;
									var sy = 0.0;
									sx = u.x - a.x;
									sy = u.y - a.y;
									var vx = 0.0;
									var vy = 0.0;
									vx = v.x - u.x;
									vy = v.y - u.y;
									var qx = 0.0;
									var qy = 0.0;
									qx = b.x - a.x;
									qy = b.y - a.y;
									var den = vy * qx - vx * qy;
									if(den * den > nape_Config.epsilon) {
										den = 1 / den;
										var t = (qy * sx - qx * sy) * den;
										if(t > nape_Config.epsilon && t < 1 - nape_Config.epsilon) {
											var s = (vy * sx - vx * sy) * den;
											if(s > nape_Config.epsilon && s < 1 - nape_Config.epsilon) {
												cont = false;
												cx_cont = false;
												break;
											}
										}
									}
									a = b;
									cx_ite = cx_ite.next;
								}
								if(cx_cont) {
									while(true) {
										var b1 = this.lverts.next;
										if(u == a || u == b1 || v == a || v == b1) {
											break;
										}
										var sx1 = 0.0;
										var sy1 = 0.0;
										sx1 = u.x - a.x;
										sy1 = u.y - a.y;
										var vx1 = 0.0;
										var vy1 = 0.0;
										vx1 = v.x - u.x;
										vy1 = v.y - u.y;
										var qx1 = 0.0;
										var qy1 = 0.0;
										qx1 = b1.x - a.x;
										qy1 = b1.y - a.y;
										var den1 = vy1 * qx1 - vx1 * qy1;
										if(den1 * den1 > nape_Config.epsilon) {
											den1 = 1 / den1;
											var t1 = (qy1 * sx1 - qx1 * sy1) * den1;
											if(t1 > nape_Config.epsilon && t1 < 1 - nape_Config.epsilon) {
												var s1 = (vy1 * sx1 - vx1 * sy1) * den1;
												if(s1 > nape_Config.epsilon && s1 < 1 - nape_Config.epsilon) {
													cont = false;
													break;
												}
											}
										}
										if(!false) {
											break;
										}
									}
								}
								if(!false) {
									break;
								}
							}
						}
						if(!cont) {
							if(zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING == null) {
								zpp_$nape_util_ZPP_$Flags.internal = true;
								zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = new nape_shape_ValidationResult();
								zpp_$nape_util_ZPP_$Flags.internal = false;
							}
							return this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING;
						} else {
							if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
								zpp_$nape_util_ZPP_$Flags.internal = true;
								zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
								zpp_$nape_util_ZPP_$Flags.internal = false;
							}
							return this.validation = zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
						}
					}
				}
			}
		} else {
			return this.validation;
		}
	}
	,validate_lverts: function() {
		if(this.zip_lverts) {
			this.zip_lverts = false;
			if(this.lverts.length > 2) {
				this.validate_area_inertia();
				if(this.area < 0) {
					this.reverse_vertices();
					this.area = -this.area;
				}
			}
		}
	}
	,cleanup_lvert: function(x) {
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x) {
				break;
			} else {
				ite = ite == null ? this.gverts.next : ite.next;
				ite2 = ite2 == null ? this.edges.head : ite2.next;
			}
			cx_ite = cx_ite.next;
		}
		var rem = ite == null ? this.gverts.next : ite.next;
		this.gverts.erase(ite);
		var o = rem;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		if(this.edgeCnt == 2) {
			var rem = this.edges.pop_unsafe();
			var o = rem;
			o.polygon = null;
			o.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o;
			rem = this.edges.pop_unsafe();
			var o = rem;
			o.polygon = null;
			o.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o;
			this.edgeCnt = 0;
		} else if(this.edgeCnt != 0) {
			var rem = ite2 == null ? this.edges.head.elt : ite2.next.elt;
			this.edges.erase(ite2);
			var o = rem;
			o.polygon = null;
			o.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o;
			this.edgeCnt--;
		}
	}
	,splice_collinear_real: function() {
		if(this.lverts.next == null) {
			return;
		}
		if(this.lverts.next.next == null) {
			return;
		}
		if(this.lverts.next.next.next == null) {
			return;
		}
		var pre = null;
		var cur = this.lverts.next;
		while(cur != null) {
			var nxt = cur.next == null ? this.lverts.next : cur.next;
			var u = cur;
			var v = nxt;
			var dx = 0.0;
			var dy = 0.0;
			dx = u.x - v.x;
			dy = u.y - v.y;
			if(dx * dx + dy * dy < nape_Config.epsilon * nape_Config.epsilon) {
				this.cleanup_lvert(cur);
				cur = this.lverts.erase(pre);
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
		if(this.lverts.next == null) {
			return;
		}
		var removed;
		while(true) {
			removed = false;
			var pre = this.lverts.next;
			while(pre != null) {
				var cur = pre.next == null ? this.lverts.next : pre.next;
				var nxt = cur.next == null ? this.lverts.next : cur.next;
				var u = pre;
				var v = cur;
				var w = nxt;
				var ax = 0.0;
				var ay = 0.0;
				ax = v.x - u.x;
				ay = v.y - u.y;
				var bx = 0.0;
				var by = 0.0;
				bx = w.x - v.x;
				by = w.y - v.y;
				var crs = by * ax - bx * ay;
				if(crs * crs >= nape_Config.epsilon * nape_Config.epsilon) {
					pre = pre.next;
				} else {
					this.cleanup_lvert(cur);
					this.lverts.erase(pre.next == null ? null : pre);
					removed = true;
					pre = pre.next;
				}
			}
			if(!removed) {
				break;
			}
		}
	}
	,reverse_vertices: function() {
		this.lverts.reverse();
		this.gverts.reverse();
		this.edges.reverse();
		var ite = this.edges.iterator_at(this.edgeCnt - 1);
		var elem = this.edges.pop_unsafe();
		this.edges.insert(ite,elem);
		this.reverse_flag = !this.reverse_flag;
		if(this.wrap_lverts != null) {
			this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
		}
		if(this.wrap_gverts != null) {
			this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		}
		if(this.wrap_edges != null) {
			this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
		}
	}
	,validate_laxi: function() {
		if(this.zip_laxi) {
			this.zip_laxi = false;
			this.validate_lverts();
			var ite = this.edges.head;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var v = cx_ite;
				var edge = ite.elt;
				ite = ite.next;
				edge.lp0 = u;
				edge.lp1 = v;
				var dx = 0.0;
				var dy = 0.0;
				dx = u.x - v.x;
				dy = u.y - v.y;
				var l = Math.sqrt(dx * dx + dy * dy);
				edge.length = l;
				var t = 1.0 / l;
				dx *= t;
				dy *= t;
				var t1 = dx;
				dx = -dy;
				dy = t1;
				edge.lprojection = dx * u.x + dy * u.y;
				edge.lnormx = dx;
				edge.lnormy = dy;
				if(edge.wrap_lnorm != null) {
					edge.wrap_lnorm.zpp_inner.x = dx;
					edge.wrap_lnorm.zpp_inner.y = dy;
				}
				u = v;
				cx_ite = cx_ite.next;
			}
			var v = this.lverts.next;
			var edge = ite.elt;
			ite = ite.next;
			edge.lp0 = u;
			edge.lp1 = v;
			var dx = 0.0;
			var dy = 0.0;
			dx = u.x - v.x;
			dy = u.y - v.y;
			var l = Math.sqrt(dx * dx + dy * dy);
			edge.length = l;
			var t = 1.0 / l;
			dx *= t;
			dy *= t;
			var t = dx;
			dx = -dy;
			dy = t;
			edge.lprojection = dx * u.x + dy * u.y;
			edge.lnormx = dx;
			edge.lnormy = dy;
			if(edge.wrap_lnorm != null) {
				edge.wrap_lnorm.zpp_inner.x = dx;
				edge.wrap_lnorm.zpp_inner.y = dy;
			}
		}
	}
	,__validate_sweepRadius: function() {
		var maxRadius = 0.0;
		var minRadius = 0.0;
		this.validate_laxi();
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var x = cx_ite;
			var r = x.x * x.x + x.y * x.y;
			if(r > maxRadius) {
				maxRadius = r;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.edges.head;
		while(cx_ite != null) {
			var e = cx_ite.elt;
			if(e.lprojection < minRadius) {
				minRadius = e.lprojection;
				if(minRadius < 0) {
					break;
				}
			}
			cx_ite = cx_ite.next;
		}
		if(minRadius < 0) {
			minRadius = 0;
		}
		this.sweepRadius = Math.sqrt(maxRadius);
		this.sweepCoef = this.sweepRadius - minRadius;
	}
	,__validate_area_inertia: function() {
		if(this.lverts.next == null || this.lverts.next.next == null || this.lverts.next.next.next == null) {
			this.area = 0;
			this.inertia = 0;
		} else {
			this.area = 0.0;
			var s1 = 0.0;
			var s2 = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w = cx_ite;
				var a = v.y * u.x - v.x * u.y;
				var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
				s1 += a * b;
				s2 += a;
				this.area += v.x * (w.y - u.y);
				u = v;
				v = w;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w = cx_ite;
			var a = v.y * u.x - v.x * u.y;
			var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a * b;
			s2 += a;
			this.area += v.x * (w.y - u.y);
			u = v;
			v = w;
			cx_ite = cx_ite.next;
			var w = cx_ite;
			var a = v.y * u.x - v.x * u.y;
			var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a * b;
			s2 += a;
			this.area += v.x * (w.y - u.y);
			this.inertia = s1 / (6 * s2);
			this.area *= 0.5;
			if(this.area < 0) {
				this.area = -this.area;
				this.reverse_vertices();
			}
		}
	}
	,__validate_angDrag: function() {
		if(this.lverts.length < 3) {
			throw haxe_Exception.thrown("Error: Polygon's with less than 3 vertices have no meaningful angDrag");
		}
		this.validate_area_inertia();
		this.validate_laxi();
		var accum = 0.0;
		var ei = this.edges.head;
		var perim = 0.0;
		var cx_cont = true;
		var cx_itei = this.lverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var edge = ei.elt;
			ei = ei.next;
			perim += edge.length;
			var dx = 0.0;
			var dy = 0.0;
			dx = v.x - u.x;
			dy = v.y - u.y;
			accum += edge.length * nape_Config.fluidAngularDragFriction * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
			var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
			if(t > 0) {
				var ta = t > 1 ? 1 : t;
				var cx = 0.0;
				var cy = 0.0;
				cx = u.x;
				cy = u.y;
				var t1 = ta;
				cx += dx * t1;
				cy += dy * t1;
				var dota = edge.lnormy * u.x - edge.lnormx * u.y;
				var dotb = edge.lnormy * cx - edge.lnormx * cy;
				var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
				accum += dots * ta * edge.length * nape_Config.fluidAngularDrag;
			}
			if(t < 1) {
				var tb = t < 0 ? 0 : t;
				var cx1 = 0.0;
				var cy1 = 0.0;
				cx1 = u.x;
				cy1 = u.y;
				var t2 = tb;
				cx1 += dx * t2;
				cy1 += dy * t2;
				var dota1 = edge.lnormy * cx1 - edge.lnormx * cy1;
				var dotb1 = edge.lnormy * v.x - edge.lnormx * v.y;
				var dots1 = (dotb1 * dotb1 * dotb1 - dota1 * dota1 * dota1) / (3 * (dotb1 - dota1));
				accum += dots1 * nape_Config.fluidVacuumDrag * (1 - tb) * edge.length * nape_Config.fluidAngularDrag;
			}
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) {
			while(true) {
				cx_itej = this.lverts.next;
				var v = cx_itej;
				var edge = ei.elt;
				ei = ei.next;
				perim += edge.length;
				var dx = 0.0;
				var dy = 0.0;
				dx = v.x - u.x;
				dy = v.y - u.y;
				accum += edge.length * nape_Config.fluidAngularDragFriction * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
				var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
				if(t > 0) {
					var ta = t > 1 ? 1 : t;
					var cx = 0.0;
					var cy = 0.0;
					cx = u.x;
					cy = u.y;
					var t1 = ta;
					cx += dx * t1;
					cy += dy * t1;
					var dota = edge.lnormy * u.x - edge.lnormx * u.y;
					var dotb = edge.lnormy * cx - edge.lnormx * cy;
					var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
					accum += dots * ta * edge.length * nape_Config.fluidAngularDrag;
				}
				if(t < 1) {
					var tb = t < 0 ? 0 : t;
					var cx1 = 0.0;
					var cy1 = 0.0;
					cx1 = u.x;
					cy1 = u.y;
					var t2 = tb;
					cx1 += dx * t2;
					cy1 += dy * t2;
					var dota1 = edge.lnormy * cx1 - edge.lnormx * cy1;
					var dotb1 = edge.lnormy * v.x - edge.lnormx * v.y;
					var dots1 = (dotb1 * dotb1 * dotb1 - dota1 * dota1 * dota1) / (3 * (dotb1 - dota1));
					accum += dots1 * nape_Config.fluidVacuumDrag * (1 - tb) * edge.length * nape_Config.fluidAngularDrag;
				}
				if(!false) {
					break;
				}
			}
		}
		this.angDrag = accum / (this.inertia * perim);
	}
});
var zpp_$nape_space_ZPP_$Broadphase = function() {
	this.dynab = null;
	this.sweep = null;
	this.is_sweep = false;
	this.space = null;
};
zpp_$nape_space_ZPP_$Broadphase.__name__ = true;
zpp_$nape_space_ZPP_$Broadphase.prototype = {
	insert: function(shape) {
		if(this.is_sweep) {
			this.sweep.__insert(shape);
		} else {
			this.dynab.__insert(shape);
		}
	}
	,remove: function(shape) {
		if(this.is_sweep) {
			this.sweep.__remove(shape);
		} else {
			this.dynab.__remove(shape);
		}
	}
	,sync: function(shape) {
		if(this.is_sweep) {
			if(!this.sweep.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == 0) {
							var _this = shape.circle;
							if(_this.zip_worldCOM) {
								if(_this.body != null) {
									_this.zip_worldCOM = false;
									if(_this.zip_localCOM) {
										_this.zip_localCOM = false;
										if(_this.type == 1) {
											var _this1 = _this.polygon;
											if(_this1.lverts.next == null) {
												throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
											}
											if(_this1.lverts.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
											} else if(_this1.lverts.next.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
												var t = 1.0;
												_this1.localCOMx += _this1.lverts.next.next.x * t;
												_this1.localCOMy += _this1.lverts.next.next.y * t;
												var t = 0.5;
												_this1.localCOMx *= t;
												_this1.localCOMy *= t;
											} else {
												_this1.localCOMx = 0;
												_this1.localCOMy = 0;
												var area = 0.0;
												var cx_ite = _this1.lverts.next;
												var u = cx_ite;
												cx_ite = cx_ite.next;
												var v = cx_ite;
												cx_ite = cx_ite.next;
												while(cx_ite != null) {
													var w = cx_ite;
													area += v.x * (w.y - u.y);
													var cf = w.y * v.x - w.x * v.y;
													_this1.localCOMx += (v.x + w.x) * cf;
													_this1.localCOMy += (v.y + w.y) * cf;
													u = v;
													v = w;
													cx_ite = cx_ite.next;
												}
												cx_ite = _this1.lverts.next;
												var w = cx_ite;
												area += v.x * (w.y - u.y);
												var cf = w.y * v.x - w.x * v.y;
												_this1.localCOMx += (v.x + w.x) * cf;
												_this1.localCOMy += (v.y + w.y) * cf;
												u = v;
												v = w;
												cx_ite = cx_ite.next;
												var w = cx_ite;
												area += v.x * (w.y - u.y);
												var cf = w.y * v.x - w.x * v.y;
												_this1.localCOMx += (v.x + w.x) * cf;
												_this1.localCOMy += (v.y + w.y) * cf;
												area = 1 / (3 * area);
												var t = area;
												_this1.localCOMx *= t;
												_this1.localCOMy *= t;
											}
										}
										if(_this.wrap_localCOM != null) {
											_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
											_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
										}
									}
									var _this1 = _this.body;
									if(_this1.zip_axis) {
										_this1.zip_axis = false;
										_this1.axisx = Math.sin(_this1.rot);
										_this1.axisy = Math.cos(_this1.rot);
									}
									_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
									_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
								}
							}
							var rx = _this.radius;
							var ry = _this.radius;
							_this.aabb.minx = _this.worldCOMx - rx;
							_this.aabb.miny = _this.worldCOMy - ry;
							_this.aabb.maxx = _this.worldCOMx + rx;
							_this.aabb.maxy = _this.worldCOMy + ry;
						} else {
							var _this = shape.polygon;
							if(_this.zip_gverts) {
								if(_this.body != null) {
									_this.zip_gverts = false;
									_this.validate_lverts();
									var _this1 = _this.body;
									if(_this1.zip_axis) {
										_this1.zip_axis = false;
										_this1.axisx = Math.sin(_this1.rot);
										_this1.axisy = Math.cos(_this1.rot);
									}
									var li = _this.lverts.next;
									var cx_ite = _this.gverts.next;
									while(cx_ite != null) {
										var g = cx_ite;
										var l = li;
										li = li.next;
										g.x = _this.body.posx + (_this.body.axisy * l.x - _this.body.axisx * l.y);
										g.y = _this.body.posy + (l.x * _this.body.axisx + l.y * _this.body.axisy);
										cx_ite = cx_ite.next;
									}
								}
							}
							if(_this.lverts.next == null) {
								throw haxe_Exception.thrown("Error: An empty polygon has no meaningful bounds");
							}
							var p0 = _this.gverts.next;
							_this.aabb.minx = p0.x;
							_this.aabb.miny = p0.y;
							_this.aabb.maxx = p0.x;
							_this.aabb.maxy = p0.y;
							var cx_ite = _this.gverts.next.next;
							while(cx_ite != null) {
								var p = cx_ite;
								if(p.x < _this.aabb.minx) {
									_this.aabb.minx = p.x;
								}
								if(p.x > _this.aabb.maxx) {
									_this.aabb.maxx = p.x;
								}
								if(p.y < _this.aabb.miny) {
									_this.aabb.miny = p.y;
								}
								if(p.y > _this.aabb.maxy) {
									_this.aabb.maxy = p.y;
								}
								cx_ite = cx_ite.next;
							}
						}
					}
				}
			}
		} else {
			var _this = this.dynab;
			var node = shape.node;
			if(!node.synced) {
				if(!_this.space.continuous) {
					if(shape.zip_aabb) {
						if(shape.body != null) {
							shape.zip_aabb = false;
							if(shape.type == 0) {
								var _this1 = shape.circle;
								if(_this1.zip_worldCOM) {
									if(_this1.body != null) {
										_this1.zip_worldCOM = false;
										if(_this1.zip_localCOM) {
											_this1.zip_localCOM = false;
											if(_this1.type == 1) {
												var _this2 = _this1.polygon;
												if(_this2.lverts.next == null) {
													throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
												}
												if(_this2.lverts.next.next == null) {
													_this2.localCOMx = _this2.lverts.next.x;
													_this2.localCOMy = _this2.lverts.next.y;
												} else if(_this2.lverts.next.next.next == null) {
													_this2.localCOMx = _this2.lverts.next.x;
													_this2.localCOMy = _this2.lverts.next.y;
													var t = 1.0;
													_this2.localCOMx += _this2.lverts.next.next.x * t;
													_this2.localCOMy += _this2.lverts.next.next.y * t;
													var t = 0.5;
													_this2.localCOMx *= t;
													_this2.localCOMy *= t;
												} else {
													_this2.localCOMx = 0;
													_this2.localCOMy = 0;
													var area = 0.0;
													var cx_ite = _this2.lverts.next;
													var u = cx_ite;
													cx_ite = cx_ite.next;
													var v = cx_ite;
													cx_ite = cx_ite.next;
													while(cx_ite != null) {
														var w = cx_ite;
														area += v.x * (w.y - u.y);
														var cf = w.y * v.x - w.x * v.y;
														_this2.localCOMx += (v.x + w.x) * cf;
														_this2.localCOMy += (v.y + w.y) * cf;
														u = v;
														v = w;
														cx_ite = cx_ite.next;
													}
													cx_ite = _this2.lverts.next;
													var w = cx_ite;
													area += v.x * (w.y - u.y);
													var cf = w.y * v.x - w.x * v.y;
													_this2.localCOMx += (v.x + w.x) * cf;
													_this2.localCOMy += (v.y + w.y) * cf;
													u = v;
													v = w;
													cx_ite = cx_ite.next;
													var w = cx_ite;
													area += v.x * (w.y - u.y);
													var cf = w.y * v.x - w.x * v.y;
													_this2.localCOMx += (v.x + w.x) * cf;
													_this2.localCOMy += (v.y + w.y) * cf;
													area = 1 / (3 * area);
													var t = area;
													_this2.localCOMx *= t;
													_this2.localCOMy *= t;
												}
											}
											if(_this1.wrap_localCOM != null) {
												_this1.wrap_localCOM.zpp_inner.x = _this1.localCOMx;
												_this1.wrap_localCOM.zpp_inner.y = _this1.localCOMy;
											}
										}
										var _this2 = _this1.body;
										if(_this2.zip_axis) {
											_this2.zip_axis = false;
											_this2.axisx = Math.sin(_this2.rot);
											_this2.axisy = Math.cos(_this2.rot);
										}
										_this1.worldCOMx = _this1.body.posx + (_this1.body.axisy * _this1.localCOMx - _this1.body.axisx * _this1.localCOMy);
										_this1.worldCOMy = _this1.body.posy + (_this1.localCOMx * _this1.body.axisx + _this1.localCOMy * _this1.body.axisy);
									}
								}
								var rx = _this1.radius;
								var ry = _this1.radius;
								_this1.aabb.minx = _this1.worldCOMx - rx;
								_this1.aabb.miny = _this1.worldCOMy - ry;
								_this1.aabb.maxx = _this1.worldCOMx + rx;
								_this1.aabb.maxy = _this1.worldCOMy + ry;
							} else {
								var _this1 = shape.polygon;
								if(_this1.zip_gverts) {
									if(_this1.body != null) {
										_this1.zip_gverts = false;
										_this1.validate_lverts();
										var _this2 = _this1.body;
										if(_this2.zip_axis) {
											_this2.zip_axis = false;
											_this2.axisx = Math.sin(_this2.rot);
											_this2.axisy = Math.cos(_this2.rot);
										}
										var li = _this1.lverts.next;
										var cx_ite = _this1.gverts.next;
										while(cx_ite != null) {
											var g = cx_ite;
											var l = li;
											li = li.next;
											g.x = _this1.body.posx + (_this1.body.axisy * l.x - _this1.body.axisx * l.y);
											g.y = _this1.body.posy + (l.x * _this1.body.axisx + l.y * _this1.body.axisy);
											cx_ite = cx_ite.next;
										}
									}
								}
								if(_this1.lverts.next == null) {
									throw haxe_Exception.thrown("Error: An empty polygon has no meaningful bounds");
								}
								var p0 = _this1.gverts.next;
								_this1.aabb.minx = p0.x;
								_this1.aabb.miny = p0.y;
								_this1.aabb.maxx = p0.x;
								_this1.aabb.maxy = p0.y;
								var cx_ite = _this1.gverts.next.next;
								while(cx_ite != null) {
									var p = cx_ite;
									if(p.x < _this1.aabb.minx) {
										_this1.aabb.minx = p.x;
									}
									if(p.x > _this1.aabb.maxx) {
										_this1.aabb.maxx = p.x;
									}
									if(p.y < _this1.aabb.miny) {
										_this1.aabb.miny = p.y;
									}
									if(p.y > _this1.aabb.maxy) {
										_this1.aabb.maxy = p.y;
									}
									cx_ite = cx_ite.next;
								}
							}
						}
					}
				}
				var sync;
				if(node.dyn == (shape.body.type == 1 ? false : !shape.body.component.sleeping)) {
					var _this1 = node.aabb;
					var x = shape.aabb;
					sync = !(x.minx >= _this1.minx && x.miny >= _this1.miny && x.maxx <= _this1.maxx && x.maxy <= _this1.maxy);
				} else {
					sync = true;
				}
				if(sync) {
					node.synced = true;
					node.snext = _this.syncs;
					_this.syncs = node;
				}
			}
		}
	}
	,broadphase: function(space,discrete) {
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		return null;
	}
};
var zpp_$nape_space_ZPP_$AABBNode = function() {
	this.first_sync = false;
	this.synced = false;
	this.snext = null;
	this.moved = false;
	this.mnext = null;
	this.next = null;
	this.height = 0;
	this.child2 = null;
	this.child1 = null;
	this.parent = null;
	this.dyn = false;
	this.shape = null;
	this.aabb = null;
	this.height = -1;
};
zpp_$nape_space_ZPP_$AABBNode.__name__ = true;
var zpp_$nape_space_ZPP_$AABBPair = function() {
	this.next = null;
	this.arb = null;
	this.di = 0;
	this.id = 0;
	this.sleeping = false;
	this.first = false;
	this.n2 = null;
	this.n1 = null;
};
zpp_$nape_space_ZPP_$AABBPair.__name__ = true;
var zpp_$nape_space_ZPP_$AABBTree = function() {
	this.root = null;
};
zpp_$nape_space_ZPP_$AABBTree.__name__ = true;
zpp_$nape_space_ZPP_$AABBTree.prototype = {
	removeLeaf: function(leaf) {
		if(leaf == this.root) {
			this.root = null;
		} else {
			var parent = leaf.parent;
			var gparent = parent.parent;
			var sibling = parent.child1 == leaf ? parent.child2 : parent.child1;
			if(gparent != null) {
				if(gparent.child1 == parent) {
					gparent.child1 = sibling;
				} else {
					gparent.child2 = sibling;
				}
				sibling.parent = gparent;
				var o = parent;
				o.height = -1;
				var o1 = o.aabb;
				if(o1.outer != null) {
					o1.outer.zpp_inner = null;
					o1.outer = null;
				}
				o1.wrap_min = o1.wrap_max = null;
				o1._invalidate = null;
				o1._validate = null;
				o1.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
				zpp_$nape_geom_ZPP_$AABB.zpp_pool = o1;
				o.child1 = o.child2 = o.parent = null;
				o.next = null;
				o.snext = null;
				o.mnext = null;
				o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
				var node = gparent;
				while(node != null) {
					if(!(node.child1 == null || node.height < 2)) {
						var b = node.child1;
						var c = node.child2;
						var balance = c.height - b.height;
						if(balance > 1) {
							var f = c.child1;
							var g = c.child2;
							c.child1 = node;
							c.parent = node.parent;
							node.parent = c;
							if(c.parent != null) {
								if(c.parent.child1 == node) {
									c.parent.child1 = c;
								} else {
									c.parent.child2 = c;
								}
							} else {
								this.root = c;
							}
							if(f.height > g.height) {
								c.child2 = f;
								node.child2 = g;
								g.parent = node;
								var _this = node.aabb;
								var a = b.aabb;
								var b1 = g.aabb;
								_this.minx = a.minx < b1.minx ? a.minx : b1.minx;
								_this.miny = a.miny < b1.miny ? a.miny : b1.miny;
								_this.maxx = a.maxx > b1.maxx ? a.maxx : b1.maxx;
								_this.maxy = a.maxy > b1.maxy ? a.maxy : b1.maxy;
								var _this1 = c.aabb;
								var a1 = node.aabb;
								var b2 = f.aabb;
								_this1.minx = a1.minx < b2.minx ? a1.minx : b2.minx;
								_this1.miny = a1.miny < b2.miny ? a1.miny : b2.miny;
								_this1.maxx = a1.maxx > b2.maxx ? a1.maxx : b2.maxx;
								_this1.maxy = a1.maxy > b2.maxy ? a1.maxy : b2.maxy;
								var x = b.height;
								var y = g.height;
								node.height = 1 + (x > y ? x : y);
								var x1 = node.height;
								var y1 = f.height;
								c.height = 1 + (x1 > y1 ? x1 : y1);
							} else {
								c.child2 = g;
								node.child2 = f;
								f.parent = node;
								var _this2 = node.aabb;
								var a2 = b.aabb;
								var b3 = f.aabb;
								_this2.minx = a2.minx < b3.minx ? a2.minx : b3.minx;
								_this2.miny = a2.miny < b3.miny ? a2.miny : b3.miny;
								_this2.maxx = a2.maxx > b3.maxx ? a2.maxx : b3.maxx;
								_this2.maxy = a2.maxy > b3.maxy ? a2.maxy : b3.maxy;
								var _this3 = c.aabb;
								var a3 = node.aabb;
								var b4 = g.aabb;
								_this3.minx = a3.minx < b4.minx ? a3.minx : b4.minx;
								_this3.miny = a3.miny < b4.miny ? a3.miny : b4.miny;
								_this3.maxx = a3.maxx > b4.maxx ? a3.maxx : b4.maxx;
								_this3.maxy = a3.maxy > b4.maxy ? a3.maxy : b4.maxy;
								var x2 = b.height;
								var y2 = f.height;
								node.height = 1 + (x2 > y2 ? x2 : y2);
								var x3 = node.height;
								var y3 = g.height;
								c.height = 1 + (x3 > y3 ? x3 : y3);
							}
							node = c;
						} else if(balance < -1) {
							var f1 = b.child1;
							var g1 = b.child2;
							b.child1 = node;
							b.parent = node.parent;
							node.parent = b;
							if(b.parent != null) {
								if(b.parent.child1 == node) {
									b.parent.child1 = b;
								} else {
									b.parent.child2 = b;
								}
							} else {
								this.root = b;
							}
							if(f1.height > g1.height) {
								b.child2 = f1;
								node.child1 = g1;
								g1.parent = node;
								var _this4 = node.aabb;
								var a4 = c.aabb;
								var b5 = g1.aabb;
								_this4.minx = a4.minx < b5.minx ? a4.minx : b5.minx;
								_this4.miny = a4.miny < b5.miny ? a4.miny : b5.miny;
								_this4.maxx = a4.maxx > b5.maxx ? a4.maxx : b5.maxx;
								_this4.maxy = a4.maxy > b5.maxy ? a4.maxy : b5.maxy;
								var _this5 = b.aabb;
								var a5 = node.aabb;
								var b6 = f1.aabb;
								_this5.minx = a5.minx < b6.minx ? a5.minx : b6.minx;
								_this5.miny = a5.miny < b6.miny ? a5.miny : b6.miny;
								_this5.maxx = a5.maxx > b6.maxx ? a5.maxx : b6.maxx;
								_this5.maxy = a5.maxy > b6.maxy ? a5.maxy : b6.maxy;
								var x4 = c.height;
								var y4 = g1.height;
								node.height = 1 + (x4 > y4 ? x4 : y4);
								var x5 = node.height;
								var y5 = f1.height;
								b.height = 1 + (x5 > y5 ? x5 : y5);
							} else {
								b.child2 = g1;
								node.child1 = f1;
								f1.parent = node;
								var _this6 = node.aabb;
								var a6 = c.aabb;
								var b7 = f1.aabb;
								_this6.minx = a6.minx < b7.minx ? a6.minx : b7.minx;
								_this6.miny = a6.miny < b7.miny ? a6.miny : b7.miny;
								_this6.maxx = a6.maxx > b7.maxx ? a6.maxx : b7.maxx;
								_this6.maxy = a6.maxy > b7.maxy ? a6.maxy : b7.maxy;
								var _this7 = b.aabb;
								var a7 = node.aabb;
								var b8 = g1.aabb;
								_this7.minx = a7.minx < b8.minx ? a7.minx : b8.minx;
								_this7.miny = a7.miny < b8.miny ? a7.miny : b8.miny;
								_this7.maxx = a7.maxx > b8.maxx ? a7.maxx : b8.maxx;
								_this7.maxy = a7.maxy > b8.maxy ? a7.maxy : b8.maxy;
								var x6 = c.height;
								var y6 = f1.height;
								node.height = 1 + (x6 > y6 ? x6 : y6);
								var x7 = node.height;
								var y7 = g1.height;
								b.height = 1 + (x7 > y7 ? x7 : y7);
							}
							node = b;
						}
					}
					var child1 = node.child1;
					var child2 = node.child2;
					var _this8 = node.aabb;
					var a8 = child1.aabb;
					var b9 = child2.aabb;
					_this8.minx = a8.minx < b9.minx ? a8.minx : b9.minx;
					_this8.miny = a8.miny < b9.miny ? a8.miny : b9.miny;
					_this8.maxx = a8.maxx > b9.maxx ? a8.maxx : b9.maxx;
					_this8.maxy = a8.maxy > b9.maxy ? a8.maxy : b9.maxy;
					var x8 = child1.height;
					var y8 = child2.height;
					node.height = 1 + (x8 > y8 ? x8 : y8);
					node = node.parent;
				}
			} else {
				this.root = sibling;
				sibling.parent = null;
				var o = parent;
				o.height = -1;
				var o1 = o.aabb;
				if(o1.outer != null) {
					o1.outer.zpp_inner = null;
					o1.outer = null;
				}
				o1.wrap_min = o1.wrap_max = null;
				o1._invalidate = null;
				o1._validate = null;
				o1.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
				zpp_$nape_geom_ZPP_$AABB.zpp_pool = o1;
				o.child1 = o.child2 = o.parent = null;
				o.next = null;
				o.snext = null;
				o.mnext = null;
				o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
			}
		}
	}
};
var zpp_$nape_space_ZPP_$DynAABBPhase = function(space) {
	this.treeStack = null;
	this.moves = null;
	this.syncs = null;
	this.pairs = null;
	this.dtree = null;
	this.stree = null;
	zpp_$nape_space_ZPP_$Broadphase.call(this);
	this.space = space;
	this.is_sweep = false;
	this.dynab = this;
	this.stree = new zpp_$nape_space_ZPP_$AABBTree();
	this.dtree = new zpp_$nape_space_ZPP_$AABBTree();
};
zpp_$nape_space_ZPP_$DynAABBPhase.__name__ = true;
zpp_$nape_space_ZPP_$DynAABBPhase.__super__ = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$DynAABBPhase.prototype = $extend(zpp_$nape_space_ZPP_$Broadphase.prototype,{
	__insert: function(shape) {
		var node;
		if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) {
			node = new zpp_$nape_space_ZPP_$AABBNode();
		} else {
			node = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
			zpp_$nape_space_ZPP_$AABBNode.zpp_pool = node.next;
			node.next = null;
		}
		if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
			node.aabb = new zpp_$nape_geom_ZPP_$AABB();
		} else {
			node.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = node.aabb.next;
			node.aabb.next = null;
		}
		node.moved = false;
		node.synced = false;
		node.first_sync = false;
		node.shape = shape;
		shape.node = node;
		node.synced = true;
		node.first_sync = true;
		node.snext = this.syncs;
		this.syncs = node;
	}
	,__remove: function(shape) {
		var node = shape.node;
		if(!node.first_sync) {
			if(node.dyn) {
				this.dtree.removeLeaf(node);
			} else {
				this.stree.removeLeaf(node);
			}
		}
		shape.node = null;
		if(node.synced) {
			var pre = null;
			var cur = this.syncs;
			while(cur != null) {
				if(cur == node) {
					break;
				}
				pre = cur;
				cur = cur.snext;
			}
			if(pre == null) {
				this.syncs = cur.snext;
			} else {
				pre.snext = cur.snext;
			}
			cur.snext = null;
			node.synced = false;
		}
		if(node.moved) {
			var pre = null;
			var cur = this.moves;
			while(cur != null) {
				if(cur == node) {
					break;
				}
				pre = cur;
				cur = cur.mnext;
			}
			if(pre == null) {
				this.moves = cur.mnext;
			} else {
				pre.mnext = cur.mnext;
			}
			cur.mnext = null;
			node.moved = false;
		}
		var pre = null;
		var cur = this.pairs;
		while(cur != null) {
			var nxt = cur.next;
			if(cur.n1 == node || cur.n2 == node) {
				if(pre == null) {
					this.pairs = nxt;
				} else {
					pre.next = nxt;
				}
				if(cur.arb != null) {
					cur.arb.pair = null;
				}
				cur.arb = null;
				cur.n1.shape.pairs.remove(cur);
				cur.n2.shape.pairs.remove(cur);
				var o = cur;
				o.n1 = o.n2 = null;
				o.sleeping = false;
				o.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
				zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o;
				cur = nxt;
				continue;
			}
			pre = cur;
			cur = nxt;
		}
		while(shape.pairs.head != null) {
			var cur = shape.pairs.pop_unsafe();
			if(cur.n1 == node) {
				cur.n2.shape.pairs.remove(cur);
			} else {
				cur.n1.shape.pairs.remove(cur);
			}
			if(cur.arb != null) {
				cur.arb.pair = null;
			}
			cur.arb = null;
			var o = cur;
			o.n1 = o.n2 = null;
			o.sleeping = false;
			o.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
			zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o;
		}
		var o = node;
		o.height = -1;
		var o1 = o.aabb;
		if(o1.outer != null) {
			o1.outer.zpp_inner = null;
			o1.outer = null;
		}
		o1.wrap_min = o1.wrap_max = null;
		o1._invalidate = null;
		o1._validate = null;
		o1.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o1;
		o.child1 = o.child2 = o.parent = null;
		o.next = null;
		o.snext = null;
		o.mnext = null;
		o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
		zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
	}
	,sync_broadphase: function() {
		this.space.validation();
		if(this.syncs != null) {
			if(this.moves == null) {
				var node = this.syncs;
				while(node != null) {
					var shape = node.shape;
					if(!node.first_sync) {
						var tree = node.dyn ? this.dtree : this.stree;
						if(node == tree.root) {
							tree.root = null;
						} else {
							var parent = node.parent;
							var gparent = parent.parent;
							var sibling = parent.child1 == node ? parent.child2 : parent.child1;
							if(gparent != null) {
								if(gparent.child1 == parent) {
									gparent.child1 = sibling;
								} else {
									gparent.child2 = sibling;
								}
								sibling.parent = gparent;
								var o = parent;
								o.height = -1;
								var o1 = o.aabb;
								if(o1.outer != null) {
									o1.outer.zpp_inner = null;
									o1.outer = null;
								}
								o1.wrap_min = o1.wrap_max = null;
								o1._invalidate = null;
								o1._validate = null;
								o1.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
								zpp_$nape_geom_ZPP_$AABB.zpp_pool = o1;
								o.child1 = o.child2 = o.parent = null;
								o.next = null;
								o.snext = null;
								o.mnext = null;
								o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
								zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
								var node1 = gparent;
								while(node1 != null) {
									if(!(node1.child1 == null || node1.height < 2)) {
										var b = node1.child1;
										var c = node1.child2;
										var balance = c.height - b.height;
										if(balance > 1) {
											var f = c.child1;
											var g = c.child2;
											c.child1 = node1;
											c.parent = node1.parent;
											node1.parent = c;
											if(c.parent != null) {
												if(c.parent.child1 == node1) {
													c.parent.child1 = c;
												} else {
													c.parent.child2 = c;
												}
											} else {
												tree.root = c;
											}
											if(f.height > g.height) {
												c.child2 = f;
												node1.child2 = g;
												g.parent = node1;
												var _this = node1.aabb;
												var a = b.aabb;
												var b1 = g.aabb;
												_this.minx = a.minx < b1.minx ? a.minx : b1.minx;
												_this.miny = a.miny < b1.miny ? a.miny : b1.miny;
												_this.maxx = a.maxx > b1.maxx ? a.maxx : b1.maxx;
												_this.maxy = a.maxy > b1.maxy ? a.maxy : b1.maxy;
												var _this1 = c.aabb;
												var a1 = node1.aabb;
												var b2 = f.aabb;
												_this1.minx = a1.minx < b2.minx ? a1.minx : b2.minx;
												_this1.miny = a1.miny < b2.miny ? a1.miny : b2.miny;
												_this1.maxx = a1.maxx > b2.maxx ? a1.maxx : b2.maxx;
												_this1.maxy = a1.maxy > b2.maxy ? a1.maxy : b2.maxy;
												var x = b.height;
												var y = g.height;
												node1.height = 1 + (x > y ? x : y);
												var x1 = node1.height;
												var y1 = f.height;
												c.height = 1 + (x1 > y1 ? x1 : y1);
											} else {
												c.child2 = g;
												node1.child2 = f;
												f.parent = node1;
												var _this2 = node1.aabb;
												var a2 = b.aabb;
												var b3 = f.aabb;
												_this2.minx = a2.minx < b3.minx ? a2.minx : b3.minx;
												_this2.miny = a2.miny < b3.miny ? a2.miny : b3.miny;
												_this2.maxx = a2.maxx > b3.maxx ? a2.maxx : b3.maxx;
												_this2.maxy = a2.maxy > b3.maxy ? a2.maxy : b3.maxy;
												var _this3 = c.aabb;
												var a3 = node1.aabb;
												var b4 = g.aabb;
												_this3.minx = a3.minx < b4.minx ? a3.minx : b4.minx;
												_this3.miny = a3.miny < b4.miny ? a3.miny : b4.miny;
												_this3.maxx = a3.maxx > b4.maxx ? a3.maxx : b4.maxx;
												_this3.maxy = a3.maxy > b4.maxy ? a3.maxy : b4.maxy;
												var x2 = b.height;
												var y2 = f.height;
												node1.height = 1 + (x2 > y2 ? x2 : y2);
												var x3 = node1.height;
												var y3 = g.height;
												c.height = 1 + (x3 > y3 ? x3 : y3);
											}
											node1 = c;
										} else if(balance < -1) {
											var f1 = b.child1;
											var g1 = b.child2;
											b.child1 = node1;
											b.parent = node1.parent;
											node1.parent = b;
											if(b.parent != null) {
												if(b.parent.child1 == node1) {
													b.parent.child1 = b;
												} else {
													b.parent.child2 = b;
												}
											} else {
												tree.root = b;
											}
											if(f1.height > g1.height) {
												b.child2 = f1;
												node1.child1 = g1;
												g1.parent = node1;
												var _this4 = node1.aabb;
												var a4 = c.aabb;
												var b5 = g1.aabb;
												_this4.minx = a4.minx < b5.minx ? a4.minx : b5.minx;
												_this4.miny = a4.miny < b5.miny ? a4.miny : b5.miny;
												_this4.maxx = a4.maxx > b5.maxx ? a4.maxx : b5.maxx;
												_this4.maxy = a4.maxy > b5.maxy ? a4.maxy : b5.maxy;
												var _this5 = b.aabb;
												var a5 = node1.aabb;
												var b6 = f1.aabb;
												_this5.minx = a5.minx < b6.minx ? a5.minx : b6.minx;
												_this5.miny = a5.miny < b6.miny ? a5.miny : b6.miny;
												_this5.maxx = a5.maxx > b6.maxx ? a5.maxx : b6.maxx;
												_this5.maxy = a5.maxy > b6.maxy ? a5.maxy : b6.maxy;
												var x4 = c.height;
												var y4 = g1.height;
												node1.height = 1 + (x4 > y4 ? x4 : y4);
												var x5 = node1.height;
												var y5 = f1.height;
												b.height = 1 + (x5 > y5 ? x5 : y5);
											} else {
												b.child2 = g1;
												node1.child1 = f1;
												f1.parent = node1;
												var _this6 = node1.aabb;
												var a6 = c.aabb;
												var b7 = f1.aabb;
												_this6.minx = a6.minx < b7.minx ? a6.minx : b7.minx;
												_this6.miny = a6.miny < b7.miny ? a6.miny : b7.miny;
												_this6.maxx = a6.maxx > b7.maxx ? a6.maxx : b7.maxx;
												_this6.maxy = a6.maxy > b7.maxy ? a6.maxy : b7.maxy;
												var _this7 = b.aabb;
												var a7 = node1.aabb;
												var b8 = g1.aabb;
												_this7.minx = a7.minx < b8.minx ? a7.minx : b8.minx;
												_this7.miny = a7.miny < b8.miny ? a7.miny : b8.miny;
												_this7.maxx = a7.maxx > b8.maxx ? a7.maxx : b8.maxx;
												_this7.maxy = a7.maxy > b8.maxy ? a7.maxy : b8.maxy;
												var x6 = c.height;
												var y6 = f1.height;
												node1.height = 1 + (x6 > y6 ? x6 : y6);
												var x7 = node1.height;
												var y7 = g1.height;
												b.height = 1 + (x7 > y7 ? x7 : y7);
											}
											node1 = b;
										}
									}
									var child1 = node1.child1;
									var child2 = node1.child2;
									var _this8 = node1.aabb;
									var a8 = child1.aabb;
									var b9 = child2.aabb;
									_this8.minx = a8.minx < b9.minx ? a8.minx : b9.minx;
									_this8.miny = a8.miny < b9.miny ? a8.miny : b9.miny;
									_this8.maxx = a8.maxx > b9.maxx ? a8.maxx : b9.maxx;
									_this8.maxy = a8.maxy > b9.maxy ? a8.maxy : b9.maxy;
									var x8 = child1.height;
									var y8 = child2.height;
									node1.height = 1 + (x8 > y8 ? x8 : y8);
									node1 = node1.parent;
								}
							} else {
								tree.root = sibling;
								sibling.parent = null;
								var o2 = parent;
								o2.height = -1;
								var o3 = o2.aabb;
								if(o3.outer != null) {
									o3.outer.zpp_inner = null;
									o3.outer = null;
								}
								o3.wrap_min = o3.wrap_max = null;
								o3._invalidate = null;
								o3._validate = null;
								o3.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
								zpp_$nape_geom_ZPP_$AABB.zpp_pool = o3;
								o2.child1 = o2.child2 = o2.parent = null;
								o2.next = null;
								o2.snext = null;
								o2.mnext = null;
								o2.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
								zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o2;
							}
						}
					} else {
						node.first_sync = false;
					}
					var aabb = node.aabb;
					if(!this.space.continuous) {
						if(shape.zip_aabb) {
							if(shape.body != null) {
								shape.zip_aabb = false;
								if(shape.type == 0) {
									var _this9 = shape.circle;
									if(_this9.zip_worldCOM) {
										if(_this9.body != null) {
											_this9.zip_worldCOM = false;
											if(_this9.zip_localCOM) {
												_this9.zip_localCOM = false;
												if(_this9.type == 1) {
													var _this10 = _this9.polygon;
													if(_this10.lverts.next == null) {
														throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
													}
													if(_this10.lverts.next.next == null) {
														_this10.localCOMx = _this10.lverts.next.x;
														_this10.localCOMy = _this10.lverts.next.y;
													} else if(_this10.lverts.next.next.next == null) {
														_this10.localCOMx = _this10.lverts.next.x;
														_this10.localCOMy = _this10.lverts.next.y;
														var t = 1.0;
														_this10.localCOMx += _this10.lverts.next.next.x * t;
														_this10.localCOMy += _this10.lverts.next.next.y * t;
														var t1 = 0.5;
														_this10.localCOMx *= t1;
														_this10.localCOMy *= t1;
													} else {
														_this10.localCOMx = 0;
														_this10.localCOMy = 0;
														var area = 0.0;
														var cx_ite = _this10.lverts.next;
														var u = cx_ite;
														cx_ite = cx_ite.next;
														var v = cx_ite;
														cx_ite = cx_ite.next;
														while(cx_ite != null) {
															var w = cx_ite;
															area += v.x * (w.y - u.y);
															var cf = w.y * v.x - w.x * v.y;
															_this10.localCOMx += (v.x + w.x) * cf;
															_this10.localCOMy += (v.y + w.y) * cf;
															u = v;
															v = w;
															cx_ite = cx_ite.next;
														}
														cx_ite = _this10.lverts.next;
														var w1 = cx_ite;
														area += v.x * (w1.y - u.y);
														var cf1 = w1.y * v.x - w1.x * v.y;
														_this10.localCOMx += (v.x + w1.x) * cf1;
														_this10.localCOMy += (v.y + w1.y) * cf1;
														u = v;
														v = w1;
														cx_ite = cx_ite.next;
														var w2 = cx_ite;
														area += v.x * (w2.y - u.y);
														var cf2 = w2.y * v.x - w2.x * v.y;
														_this10.localCOMx += (v.x + w2.x) * cf2;
														_this10.localCOMy += (v.y + w2.y) * cf2;
														area = 1 / (3 * area);
														var t2 = area;
														_this10.localCOMx *= t2;
														_this10.localCOMy *= t2;
													}
												}
												if(_this9.wrap_localCOM != null) {
													_this9.wrap_localCOM.zpp_inner.x = _this9.localCOMx;
													_this9.wrap_localCOM.zpp_inner.y = _this9.localCOMy;
												}
											}
											var _this11 = _this9.body;
											if(_this11.zip_axis) {
												_this11.zip_axis = false;
												_this11.axisx = Math.sin(_this11.rot);
												_this11.axisy = Math.cos(_this11.rot);
											}
											_this9.worldCOMx = _this9.body.posx + (_this9.body.axisy * _this9.localCOMx - _this9.body.axisx * _this9.localCOMy);
											_this9.worldCOMy = _this9.body.posy + (_this9.localCOMx * _this9.body.axisx + _this9.localCOMy * _this9.body.axisy);
										}
									}
									var rx = _this9.radius;
									var ry = _this9.radius;
									_this9.aabb.minx = _this9.worldCOMx - rx;
									_this9.aabb.miny = _this9.worldCOMy - ry;
									_this9.aabb.maxx = _this9.worldCOMx + rx;
									_this9.aabb.maxy = _this9.worldCOMy + ry;
								} else {
									var _this12 = shape.polygon;
									if(_this12.zip_gverts) {
										if(_this12.body != null) {
											_this12.zip_gverts = false;
											_this12.validate_lverts();
											var _this13 = _this12.body;
											if(_this13.zip_axis) {
												_this13.zip_axis = false;
												_this13.axisx = Math.sin(_this13.rot);
												_this13.axisy = Math.cos(_this13.rot);
											}
											var li = _this12.lverts.next;
											var cx_ite1 = _this12.gverts.next;
											while(cx_ite1 != null) {
												var g2 = cx_ite1;
												var l = li;
												li = li.next;
												g2.x = _this12.body.posx + (_this12.body.axisy * l.x - _this12.body.axisx * l.y);
												g2.y = _this12.body.posy + (l.x * _this12.body.axisx + l.y * _this12.body.axisy);
												cx_ite1 = cx_ite1.next;
											}
										}
									}
									if(_this12.lverts.next == null) {
										throw haxe_Exception.thrown("Error: An empty polygon has no meaningful bounds");
									}
									var p0 = _this12.gverts.next;
									_this12.aabb.minx = p0.x;
									_this12.aabb.miny = p0.y;
									_this12.aabb.maxx = p0.x;
									_this12.aabb.maxy = p0.y;
									var cx_ite2 = _this12.gverts.next.next;
									while(cx_ite2 != null) {
										var p = cx_ite2;
										if(p.x < _this12.aabb.minx) {
											_this12.aabb.minx = p.x;
										}
										if(p.x > _this12.aabb.maxx) {
											_this12.aabb.maxx = p.x;
										}
										if(p.y < _this12.aabb.miny) {
											_this12.aabb.miny = p.y;
										}
										if(p.y > _this12.aabb.maxy) {
											_this12.aabb.maxy = p.y;
										}
										cx_ite2 = cx_ite2.next;
									}
								}
							}
						}
					}
					var a9 = shape.aabb;
					aabb.minx = a9.minx - 3.0;
					aabb.miny = a9.miny - 3.0;
					aabb.maxx = a9.maxx + 3.0;
					aabb.maxy = a9.maxy + 3.0;
					var tree1 = (node.dyn = shape.body.type == 1 ? false : !shape.body.component.sleeping) ? this.dtree : this.stree;
					if(tree1.root == null) {
						tree1.root = node;
						tree1.root.parent = null;
					} else {
						var leafaabb = node.aabb;
						var node2 = tree1.root;
						while(node2.child1 != null) {
							var child11 = node2.child1;
							var child21 = node2.child2;
							var _this14 = node2.aabb;
							var area1 = (_this14.maxx - _this14.minx + (_this14.maxy - _this14.miny)) * 2;
							var _this15 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
							var a10 = node2.aabb;
							_this15.minx = a10.minx < leafaabb.minx ? a10.minx : leafaabb.minx;
							_this15.miny = a10.miny < leafaabb.miny ? a10.miny : leafaabb.miny;
							_this15.maxx = a10.maxx > leafaabb.maxx ? a10.maxx : leafaabb.maxx;
							_this15.maxy = a10.maxy > leafaabb.maxy ? a10.maxy : leafaabb.maxy;
							var _this16 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
							var carea = (_this16.maxx - _this16.minx + (_this16.maxy - _this16.miny)) * 2;
							var cost = 2 * carea;
							var icost = 2 * (carea - area1);
							var _this17 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
							var b10 = child11.aabb;
							_this17.minx = leafaabb.minx < b10.minx ? leafaabb.minx : b10.minx;
							_this17.miny = leafaabb.miny < b10.miny ? leafaabb.miny : b10.miny;
							_this17.maxx = leafaabb.maxx > b10.maxx ? leafaabb.maxx : b10.maxx;
							_this17.maxy = leafaabb.maxy > b10.maxy ? leafaabb.maxy : b10.maxy;
							var cost1;
							if(child11.child1 == null) {
								var _this18 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
								cost1 = (_this18.maxx - _this18.minx + (_this18.maxy - _this18.miny)) * 2 + icost;
							} else {
								var _this19 = child11.aabb;
								var oarea = (_this19.maxx - _this19.minx + (_this19.maxy - _this19.miny)) * 2;
								var _this20 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
								var narea = (_this20.maxx - _this20.minx + (_this20.maxy - _this20.miny)) * 2;
								cost1 = narea - oarea + icost;
							}
							var _this21 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
							var b11 = child21.aabb;
							_this21.minx = leafaabb.minx < b11.minx ? leafaabb.minx : b11.minx;
							_this21.miny = leafaabb.miny < b11.miny ? leafaabb.miny : b11.miny;
							_this21.maxx = leafaabb.maxx > b11.maxx ? leafaabb.maxx : b11.maxx;
							_this21.maxy = leafaabb.maxy > b11.maxy ? leafaabb.maxy : b11.maxy;
							var cost2;
							if(child21.child1 == null) {
								var _this22 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
								cost2 = (_this22.maxx - _this22.minx + (_this22.maxy - _this22.miny)) * 2 + icost;
							} else {
								var _this23 = child21.aabb;
								var oarea1 = (_this23.maxx - _this23.minx + (_this23.maxy - _this23.miny)) * 2;
								var _this24 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
								var narea1 = (_this24.maxx - _this24.minx + (_this24.maxy - _this24.miny)) * 2;
								cost2 = narea1 - oarea1 + icost;
							}
							if(cost < cost1 && cost < cost2) {
								break;
							} else {
								node2 = cost1 < cost2 ? child11 : child21;
							}
						}
						var sibling1 = node2;
						var oparent = sibling1.parent;
						var nparent;
						if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) {
							nparent = new zpp_$nape_space_ZPP_$AABBNode();
						} else {
							nparent = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
							zpp_$nape_space_ZPP_$AABBNode.zpp_pool = nparent.next;
							nparent.next = null;
						}
						if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
							nparent.aabb = new zpp_$nape_geom_ZPP_$AABB();
						} else {
							nparent.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
							zpp_$nape_geom_ZPP_$AABB.zpp_pool = nparent.aabb.next;
							nparent.aabb.next = null;
						}
						nparent.moved = false;
						nparent.synced = false;
						nparent.first_sync = false;
						nparent.parent = oparent;
						var _this25 = nparent.aabb;
						var b12 = sibling1.aabb;
						_this25.minx = leafaabb.minx < b12.minx ? leafaabb.minx : b12.minx;
						_this25.miny = leafaabb.miny < b12.miny ? leafaabb.miny : b12.miny;
						_this25.maxx = leafaabb.maxx > b12.maxx ? leafaabb.maxx : b12.maxx;
						_this25.maxy = leafaabb.maxy > b12.maxy ? leafaabb.maxy : b12.maxy;
						nparent.height = sibling1.height + 1;
						if(oparent != null) {
							if(oparent.child1 == sibling1) {
								oparent.child1 = nparent;
							} else {
								oparent.child2 = nparent;
							}
							nparent.child1 = sibling1;
							nparent.child2 = node;
							sibling1.parent = nparent;
							node.parent = nparent;
						} else {
							nparent.child1 = sibling1;
							nparent.child2 = node;
							sibling1.parent = nparent;
							node.parent = nparent;
							tree1.root = nparent;
						}
						node2 = node.parent;
						while(node2 != null) {
							if(!(node2.child1 == null || node2.height < 2)) {
								var b13 = node2.child1;
								var c1 = node2.child2;
								var balance1 = c1.height - b13.height;
								if(balance1 > 1) {
									var f2 = c1.child1;
									var g3 = c1.child2;
									c1.child1 = node2;
									c1.parent = node2.parent;
									node2.parent = c1;
									if(c1.parent != null) {
										if(c1.parent.child1 == node2) {
											c1.parent.child1 = c1;
										} else {
											c1.parent.child2 = c1;
										}
									} else {
										tree1.root = c1;
									}
									if(f2.height > g3.height) {
										c1.child2 = f2;
										node2.child2 = g3;
										g3.parent = node2;
										var _this26 = node2.aabb;
										var a11 = b13.aabb;
										var b14 = g3.aabb;
										_this26.minx = a11.minx < b14.minx ? a11.minx : b14.minx;
										_this26.miny = a11.miny < b14.miny ? a11.miny : b14.miny;
										_this26.maxx = a11.maxx > b14.maxx ? a11.maxx : b14.maxx;
										_this26.maxy = a11.maxy > b14.maxy ? a11.maxy : b14.maxy;
										var _this27 = c1.aabb;
										var a12 = node2.aabb;
										var b15 = f2.aabb;
										_this27.minx = a12.minx < b15.minx ? a12.minx : b15.minx;
										_this27.miny = a12.miny < b15.miny ? a12.miny : b15.miny;
										_this27.maxx = a12.maxx > b15.maxx ? a12.maxx : b15.maxx;
										_this27.maxy = a12.maxy > b15.maxy ? a12.maxy : b15.maxy;
										var x9 = b13.height;
										var y9 = g3.height;
										node2.height = 1 + (x9 > y9 ? x9 : y9);
										var x10 = node2.height;
										var y10 = f2.height;
										c1.height = 1 + (x10 > y10 ? x10 : y10);
									} else {
										c1.child2 = g3;
										node2.child2 = f2;
										f2.parent = node2;
										var _this28 = node2.aabb;
										var a13 = b13.aabb;
										var b16 = f2.aabb;
										_this28.minx = a13.minx < b16.minx ? a13.minx : b16.minx;
										_this28.miny = a13.miny < b16.miny ? a13.miny : b16.miny;
										_this28.maxx = a13.maxx > b16.maxx ? a13.maxx : b16.maxx;
										_this28.maxy = a13.maxy > b16.maxy ? a13.maxy : b16.maxy;
										var _this29 = c1.aabb;
										var a14 = node2.aabb;
										var b17 = g3.aabb;
										_this29.minx = a14.minx < b17.minx ? a14.minx : b17.minx;
										_this29.miny = a14.miny < b17.miny ? a14.miny : b17.miny;
										_this29.maxx = a14.maxx > b17.maxx ? a14.maxx : b17.maxx;
										_this29.maxy = a14.maxy > b17.maxy ? a14.maxy : b17.maxy;
										var x11 = b13.height;
										var y11 = f2.height;
										node2.height = 1 + (x11 > y11 ? x11 : y11);
										var x12 = node2.height;
										var y12 = g3.height;
										c1.height = 1 + (x12 > y12 ? x12 : y12);
									}
									node2 = c1;
								} else if(balance1 < -1) {
									var f3 = b13.child1;
									var g4 = b13.child2;
									b13.child1 = node2;
									b13.parent = node2.parent;
									node2.parent = b13;
									if(b13.parent != null) {
										if(b13.parent.child1 == node2) {
											b13.parent.child1 = b13;
										} else {
											b13.parent.child2 = b13;
										}
									} else {
										tree1.root = b13;
									}
									if(f3.height > g4.height) {
										b13.child2 = f3;
										node2.child1 = g4;
										g4.parent = node2;
										var _this30 = node2.aabb;
										var a15 = c1.aabb;
										var b18 = g4.aabb;
										_this30.minx = a15.minx < b18.minx ? a15.minx : b18.minx;
										_this30.miny = a15.miny < b18.miny ? a15.miny : b18.miny;
										_this30.maxx = a15.maxx > b18.maxx ? a15.maxx : b18.maxx;
										_this30.maxy = a15.maxy > b18.maxy ? a15.maxy : b18.maxy;
										var _this31 = b13.aabb;
										var a16 = node2.aabb;
										var b19 = f3.aabb;
										_this31.minx = a16.minx < b19.minx ? a16.minx : b19.minx;
										_this31.miny = a16.miny < b19.miny ? a16.miny : b19.miny;
										_this31.maxx = a16.maxx > b19.maxx ? a16.maxx : b19.maxx;
										_this31.maxy = a16.maxy > b19.maxy ? a16.maxy : b19.maxy;
										var x13 = c1.height;
										var y13 = g4.height;
										node2.height = 1 + (x13 > y13 ? x13 : y13);
										var x14 = node2.height;
										var y14 = f3.height;
										b13.height = 1 + (x14 > y14 ? x14 : y14);
									} else {
										b13.child2 = g4;
										node2.child1 = f3;
										f3.parent = node2;
										var _this32 = node2.aabb;
										var a17 = c1.aabb;
										var b20 = f3.aabb;
										_this32.minx = a17.minx < b20.minx ? a17.minx : b20.minx;
										_this32.miny = a17.miny < b20.miny ? a17.miny : b20.miny;
										_this32.maxx = a17.maxx > b20.maxx ? a17.maxx : b20.maxx;
										_this32.maxy = a17.maxy > b20.maxy ? a17.maxy : b20.maxy;
										var _this33 = b13.aabb;
										var a18 = node2.aabb;
										var b21 = g4.aabb;
										_this33.minx = a18.minx < b21.minx ? a18.minx : b21.minx;
										_this33.miny = a18.miny < b21.miny ? a18.miny : b21.miny;
										_this33.maxx = a18.maxx > b21.maxx ? a18.maxx : b21.maxx;
										_this33.maxy = a18.maxy > b21.maxy ? a18.maxy : b21.maxy;
										var x15 = c1.height;
										var y15 = f3.height;
										node2.height = 1 + (x15 > y15 ? x15 : y15);
										var x16 = node2.height;
										var y16 = g4.height;
										b13.height = 1 + (x16 > y16 ? x16 : y16);
									}
									node2 = b13;
								}
							}
							var child12 = node2.child1;
							var child22 = node2.child2;
							var x17 = child12.height;
							var y17 = child22.height;
							node2.height = 1 + (x17 > y17 ? x17 : y17);
							var _this34 = node2.aabb;
							var a19 = child12.aabb;
							var b22 = child22.aabb;
							_this34.minx = a19.minx < b22.minx ? a19.minx : b22.minx;
							_this34.miny = a19.miny < b22.miny ? a19.miny : b22.miny;
							_this34.maxx = a19.maxx > b22.maxx ? a19.maxx : b22.maxx;
							_this34.maxy = a19.maxy > b22.maxy ? a19.maxy : b22.maxy;
							node2 = node2.parent;
						}
					}
					node.synced = false;
					node.moved = true;
					node.mnext = node.snext;
					node.snext = null;
					node = node.mnext;
				}
				var t = this.syncs;
				this.syncs = this.moves;
				this.moves = t;
			} else {
				while(this.syncs != null) {
					var ret = this.syncs;
					this.syncs = ret.snext;
					ret.snext = null;
					var node = ret;
					var shape = node.shape;
					if(!node.first_sync) {
						var tree = node.dyn ? this.dtree : this.stree;
						if(node == tree.root) {
							tree.root = null;
						} else {
							var parent = node.parent;
							var gparent = parent.parent;
							var sibling = parent.child1 == node ? parent.child2 : parent.child1;
							if(gparent != null) {
								if(gparent.child1 == parent) {
									gparent.child1 = sibling;
								} else {
									gparent.child2 = sibling;
								}
								sibling.parent = gparent;
								var o = parent;
								o.height = -1;
								var o1 = o.aabb;
								if(o1.outer != null) {
									o1.outer.zpp_inner = null;
									o1.outer = null;
								}
								o1.wrap_min = o1.wrap_max = null;
								o1._invalidate = null;
								o1._validate = null;
								o1.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
								zpp_$nape_geom_ZPP_$AABB.zpp_pool = o1;
								o.child1 = o.child2 = o.parent = null;
								o.next = null;
								o.snext = null;
								o.mnext = null;
								o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
								zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
								var node1 = gparent;
								while(node1 != null) {
									if(!(node1.child1 == null || node1.height < 2)) {
										var b = node1.child1;
										var c = node1.child2;
										var balance = c.height - b.height;
										if(balance > 1) {
											var f = c.child1;
											var g = c.child2;
											c.child1 = node1;
											c.parent = node1.parent;
											node1.parent = c;
											if(c.parent != null) {
												if(c.parent.child1 == node1) {
													c.parent.child1 = c;
												} else {
													c.parent.child2 = c;
												}
											} else {
												tree.root = c;
											}
											if(f.height > g.height) {
												c.child2 = f;
												node1.child2 = g;
												g.parent = node1;
												var _this = node1.aabb;
												var a = b.aabb;
												var b1 = g.aabb;
												_this.minx = a.minx < b1.minx ? a.minx : b1.minx;
												_this.miny = a.miny < b1.miny ? a.miny : b1.miny;
												_this.maxx = a.maxx > b1.maxx ? a.maxx : b1.maxx;
												_this.maxy = a.maxy > b1.maxy ? a.maxy : b1.maxy;
												var _this1 = c.aabb;
												var a1 = node1.aabb;
												var b2 = f.aabb;
												_this1.minx = a1.minx < b2.minx ? a1.minx : b2.minx;
												_this1.miny = a1.miny < b2.miny ? a1.miny : b2.miny;
												_this1.maxx = a1.maxx > b2.maxx ? a1.maxx : b2.maxx;
												_this1.maxy = a1.maxy > b2.maxy ? a1.maxy : b2.maxy;
												var x = b.height;
												var y = g.height;
												node1.height = 1 + (x > y ? x : y);
												var x1 = node1.height;
												var y1 = f.height;
												c.height = 1 + (x1 > y1 ? x1 : y1);
											} else {
												c.child2 = g;
												node1.child2 = f;
												f.parent = node1;
												var _this2 = node1.aabb;
												var a2 = b.aabb;
												var b3 = f.aabb;
												_this2.minx = a2.minx < b3.minx ? a2.minx : b3.minx;
												_this2.miny = a2.miny < b3.miny ? a2.miny : b3.miny;
												_this2.maxx = a2.maxx > b3.maxx ? a2.maxx : b3.maxx;
												_this2.maxy = a2.maxy > b3.maxy ? a2.maxy : b3.maxy;
												var _this3 = c.aabb;
												var a3 = node1.aabb;
												var b4 = g.aabb;
												_this3.minx = a3.minx < b4.minx ? a3.minx : b4.minx;
												_this3.miny = a3.miny < b4.miny ? a3.miny : b4.miny;
												_this3.maxx = a3.maxx > b4.maxx ? a3.maxx : b4.maxx;
												_this3.maxy = a3.maxy > b4.maxy ? a3.maxy : b4.maxy;
												var x2 = b.height;
												var y2 = f.height;
												node1.height = 1 + (x2 > y2 ? x2 : y2);
												var x3 = node1.height;
												var y3 = g.height;
												c.height = 1 + (x3 > y3 ? x3 : y3);
											}
											node1 = c;
										} else if(balance < -1) {
											var f1 = b.child1;
											var g1 = b.child2;
											b.child1 = node1;
											b.parent = node1.parent;
											node1.parent = b;
											if(b.parent != null) {
												if(b.parent.child1 == node1) {
													b.parent.child1 = b;
												} else {
													b.parent.child2 = b;
												}
											} else {
												tree.root = b;
											}
											if(f1.height > g1.height) {
												b.child2 = f1;
												node1.child1 = g1;
												g1.parent = node1;
												var _this4 = node1.aabb;
												var a4 = c.aabb;
												var b5 = g1.aabb;
												_this4.minx = a4.minx < b5.minx ? a4.minx : b5.minx;
												_this4.miny = a4.miny < b5.miny ? a4.miny : b5.miny;
												_this4.maxx = a4.maxx > b5.maxx ? a4.maxx : b5.maxx;
												_this4.maxy = a4.maxy > b5.maxy ? a4.maxy : b5.maxy;
												var _this5 = b.aabb;
												var a5 = node1.aabb;
												var b6 = f1.aabb;
												_this5.minx = a5.minx < b6.minx ? a5.minx : b6.minx;
												_this5.miny = a5.miny < b6.miny ? a5.miny : b6.miny;
												_this5.maxx = a5.maxx > b6.maxx ? a5.maxx : b6.maxx;
												_this5.maxy = a5.maxy > b6.maxy ? a5.maxy : b6.maxy;
												var x4 = c.height;
												var y4 = g1.height;
												node1.height = 1 + (x4 > y4 ? x4 : y4);
												var x5 = node1.height;
												var y5 = f1.height;
												b.height = 1 + (x5 > y5 ? x5 : y5);
											} else {
												b.child2 = g1;
												node1.child1 = f1;
												f1.parent = node1;
												var _this6 = node1.aabb;
												var a6 = c.aabb;
												var b7 = f1.aabb;
												_this6.minx = a6.minx < b7.minx ? a6.minx : b7.minx;
												_this6.miny = a6.miny < b7.miny ? a6.miny : b7.miny;
												_this6.maxx = a6.maxx > b7.maxx ? a6.maxx : b7.maxx;
												_this6.maxy = a6.maxy > b7.maxy ? a6.maxy : b7.maxy;
												var _this7 = b.aabb;
												var a7 = node1.aabb;
												var b8 = g1.aabb;
												_this7.minx = a7.minx < b8.minx ? a7.minx : b8.minx;
												_this7.miny = a7.miny < b8.miny ? a7.miny : b8.miny;
												_this7.maxx = a7.maxx > b8.maxx ? a7.maxx : b8.maxx;
												_this7.maxy = a7.maxy > b8.maxy ? a7.maxy : b8.maxy;
												var x6 = c.height;
												var y6 = f1.height;
												node1.height = 1 + (x6 > y6 ? x6 : y6);
												var x7 = node1.height;
												var y7 = g1.height;
												b.height = 1 + (x7 > y7 ? x7 : y7);
											}
											node1 = b;
										}
									}
									var child1 = node1.child1;
									var child2 = node1.child2;
									var _this8 = node1.aabb;
									var a8 = child1.aabb;
									var b9 = child2.aabb;
									_this8.minx = a8.minx < b9.minx ? a8.minx : b9.minx;
									_this8.miny = a8.miny < b9.miny ? a8.miny : b9.miny;
									_this8.maxx = a8.maxx > b9.maxx ? a8.maxx : b9.maxx;
									_this8.maxy = a8.maxy > b9.maxy ? a8.maxy : b9.maxy;
									var x8 = child1.height;
									var y8 = child2.height;
									node1.height = 1 + (x8 > y8 ? x8 : y8);
									node1 = node1.parent;
								}
							} else {
								tree.root = sibling;
								sibling.parent = null;
								var o2 = parent;
								o2.height = -1;
								var o3 = o2.aabb;
								if(o3.outer != null) {
									o3.outer.zpp_inner = null;
									o3.outer = null;
								}
								o3.wrap_min = o3.wrap_max = null;
								o3._invalidate = null;
								o3._validate = null;
								o3.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
								zpp_$nape_geom_ZPP_$AABB.zpp_pool = o3;
								o2.child1 = o2.child2 = o2.parent = null;
								o2.next = null;
								o2.snext = null;
								o2.mnext = null;
								o2.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
								zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o2;
							}
						}
					} else {
						node.first_sync = false;
					}
					var aabb = node.aabb;
					if(!this.space.continuous) {
						if(shape.zip_aabb) {
							if(shape.body != null) {
								shape.zip_aabb = false;
								if(shape.type == 0) {
									var _this9 = shape.circle;
									if(_this9.zip_worldCOM) {
										if(_this9.body != null) {
											_this9.zip_worldCOM = false;
											if(_this9.zip_localCOM) {
												_this9.zip_localCOM = false;
												if(_this9.type == 1) {
													var _this10 = _this9.polygon;
													if(_this10.lverts.next == null) {
														throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
													}
													if(_this10.lverts.next.next == null) {
														_this10.localCOMx = _this10.lverts.next.x;
														_this10.localCOMy = _this10.lverts.next.y;
													} else if(_this10.lverts.next.next.next == null) {
														_this10.localCOMx = _this10.lverts.next.x;
														_this10.localCOMy = _this10.lverts.next.y;
														var t = 1.0;
														_this10.localCOMx += _this10.lverts.next.next.x * t;
														_this10.localCOMy += _this10.lverts.next.next.y * t;
														var t1 = 0.5;
														_this10.localCOMx *= t1;
														_this10.localCOMy *= t1;
													} else {
														_this10.localCOMx = 0;
														_this10.localCOMy = 0;
														var area = 0.0;
														var cx_ite = _this10.lverts.next;
														var u = cx_ite;
														cx_ite = cx_ite.next;
														var v = cx_ite;
														cx_ite = cx_ite.next;
														while(cx_ite != null) {
															var w = cx_ite;
															area += v.x * (w.y - u.y);
															var cf = w.y * v.x - w.x * v.y;
															_this10.localCOMx += (v.x + w.x) * cf;
															_this10.localCOMy += (v.y + w.y) * cf;
															u = v;
															v = w;
															cx_ite = cx_ite.next;
														}
														cx_ite = _this10.lverts.next;
														var w1 = cx_ite;
														area += v.x * (w1.y - u.y);
														var cf1 = w1.y * v.x - w1.x * v.y;
														_this10.localCOMx += (v.x + w1.x) * cf1;
														_this10.localCOMy += (v.y + w1.y) * cf1;
														u = v;
														v = w1;
														cx_ite = cx_ite.next;
														var w2 = cx_ite;
														area += v.x * (w2.y - u.y);
														var cf2 = w2.y * v.x - w2.x * v.y;
														_this10.localCOMx += (v.x + w2.x) * cf2;
														_this10.localCOMy += (v.y + w2.y) * cf2;
														area = 1 / (3 * area);
														var t2 = area;
														_this10.localCOMx *= t2;
														_this10.localCOMy *= t2;
													}
												}
												if(_this9.wrap_localCOM != null) {
													_this9.wrap_localCOM.zpp_inner.x = _this9.localCOMx;
													_this9.wrap_localCOM.zpp_inner.y = _this9.localCOMy;
												}
											}
											var _this11 = _this9.body;
											if(_this11.zip_axis) {
												_this11.zip_axis = false;
												_this11.axisx = Math.sin(_this11.rot);
												_this11.axisy = Math.cos(_this11.rot);
											}
											_this9.worldCOMx = _this9.body.posx + (_this9.body.axisy * _this9.localCOMx - _this9.body.axisx * _this9.localCOMy);
											_this9.worldCOMy = _this9.body.posy + (_this9.localCOMx * _this9.body.axisx + _this9.localCOMy * _this9.body.axisy);
										}
									}
									var rx = _this9.radius;
									var ry = _this9.radius;
									_this9.aabb.minx = _this9.worldCOMx - rx;
									_this9.aabb.miny = _this9.worldCOMy - ry;
									_this9.aabb.maxx = _this9.worldCOMx + rx;
									_this9.aabb.maxy = _this9.worldCOMy + ry;
								} else {
									var _this12 = shape.polygon;
									if(_this12.zip_gverts) {
										if(_this12.body != null) {
											_this12.zip_gverts = false;
											_this12.validate_lverts();
											var _this13 = _this12.body;
											if(_this13.zip_axis) {
												_this13.zip_axis = false;
												_this13.axisx = Math.sin(_this13.rot);
												_this13.axisy = Math.cos(_this13.rot);
											}
											var li = _this12.lverts.next;
											var cx_ite1 = _this12.gverts.next;
											while(cx_ite1 != null) {
												var g2 = cx_ite1;
												var l = li;
												li = li.next;
												g2.x = _this12.body.posx + (_this12.body.axisy * l.x - _this12.body.axisx * l.y);
												g2.y = _this12.body.posy + (l.x * _this12.body.axisx + l.y * _this12.body.axisy);
												cx_ite1 = cx_ite1.next;
											}
										}
									}
									if(_this12.lverts.next == null) {
										throw haxe_Exception.thrown("Error: An empty polygon has no meaningful bounds");
									}
									var p0 = _this12.gverts.next;
									_this12.aabb.minx = p0.x;
									_this12.aabb.miny = p0.y;
									_this12.aabb.maxx = p0.x;
									_this12.aabb.maxy = p0.y;
									var cx_ite2 = _this12.gverts.next.next;
									while(cx_ite2 != null) {
										var p = cx_ite2;
										if(p.x < _this12.aabb.minx) {
											_this12.aabb.minx = p.x;
										}
										if(p.x > _this12.aabb.maxx) {
											_this12.aabb.maxx = p.x;
										}
										if(p.y < _this12.aabb.miny) {
											_this12.aabb.miny = p.y;
										}
										if(p.y > _this12.aabb.maxy) {
											_this12.aabb.maxy = p.y;
										}
										cx_ite2 = cx_ite2.next;
									}
								}
							}
						}
					}
					var a9 = shape.aabb;
					aabb.minx = a9.minx - 3.0;
					aabb.miny = a9.miny - 3.0;
					aabb.maxx = a9.maxx + 3.0;
					aabb.maxy = a9.maxy + 3.0;
					var tree1 = (node.dyn = shape.body.type == 1 ? false : !shape.body.component.sleeping) ? this.dtree : this.stree;
					if(tree1.root == null) {
						tree1.root = node;
						tree1.root.parent = null;
					} else {
						var leafaabb = node.aabb;
						var node2 = tree1.root;
						while(node2.child1 != null) {
							var child11 = node2.child1;
							var child21 = node2.child2;
							var _this14 = node2.aabb;
							var area1 = (_this14.maxx - _this14.minx + (_this14.maxy - _this14.miny)) * 2;
							var _this15 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
							var a10 = node2.aabb;
							_this15.minx = a10.minx < leafaabb.minx ? a10.minx : leafaabb.minx;
							_this15.miny = a10.miny < leafaabb.miny ? a10.miny : leafaabb.miny;
							_this15.maxx = a10.maxx > leafaabb.maxx ? a10.maxx : leafaabb.maxx;
							_this15.maxy = a10.maxy > leafaabb.maxy ? a10.maxy : leafaabb.maxy;
							var _this16 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
							var carea = (_this16.maxx - _this16.minx + (_this16.maxy - _this16.miny)) * 2;
							var cost = 2 * carea;
							var icost = 2 * (carea - area1);
							var _this17 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
							var b10 = child11.aabb;
							_this17.minx = leafaabb.minx < b10.minx ? leafaabb.minx : b10.minx;
							_this17.miny = leafaabb.miny < b10.miny ? leafaabb.miny : b10.miny;
							_this17.maxx = leafaabb.maxx > b10.maxx ? leafaabb.maxx : b10.maxx;
							_this17.maxy = leafaabb.maxy > b10.maxy ? leafaabb.maxy : b10.maxy;
							var cost1;
							if(child11.child1 == null) {
								var _this18 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
								cost1 = (_this18.maxx - _this18.minx + (_this18.maxy - _this18.miny)) * 2 + icost;
							} else {
								var _this19 = child11.aabb;
								var oarea = (_this19.maxx - _this19.minx + (_this19.maxy - _this19.miny)) * 2;
								var _this20 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
								var narea = (_this20.maxx - _this20.minx + (_this20.maxy - _this20.miny)) * 2;
								cost1 = narea - oarea + icost;
							}
							var _this21 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
							var b11 = child21.aabb;
							_this21.minx = leafaabb.minx < b11.minx ? leafaabb.minx : b11.minx;
							_this21.miny = leafaabb.miny < b11.miny ? leafaabb.miny : b11.miny;
							_this21.maxx = leafaabb.maxx > b11.maxx ? leafaabb.maxx : b11.maxx;
							_this21.maxy = leafaabb.maxy > b11.maxy ? leafaabb.maxy : b11.maxy;
							var cost2;
							if(child21.child1 == null) {
								var _this22 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
								cost2 = (_this22.maxx - _this22.minx + (_this22.maxy - _this22.miny)) * 2 + icost;
							} else {
								var _this23 = child21.aabb;
								var oarea1 = (_this23.maxx - _this23.minx + (_this23.maxy - _this23.miny)) * 2;
								var _this24 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
								var narea1 = (_this24.maxx - _this24.minx + (_this24.maxy - _this24.miny)) * 2;
								cost2 = narea1 - oarea1 + icost;
							}
							if(cost < cost1 && cost < cost2) {
								break;
							} else {
								node2 = cost1 < cost2 ? child11 : child21;
							}
						}
						var sibling1 = node2;
						var oparent = sibling1.parent;
						var nparent;
						if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) {
							nparent = new zpp_$nape_space_ZPP_$AABBNode();
						} else {
							nparent = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
							zpp_$nape_space_ZPP_$AABBNode.zpp_pool = nparent.next;
							nparent.next = null;
						}
						if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
							nparent.aabb = new zpp_$nape_geom_ZPP_$AABB();
						} else {
							nparent.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
							zpp_$nape_geom_ZPP_$AABB.zpp_pool = nparent.aabb.next;
							nparent.aabb.next = null;
						}
						nparent.moved = false;
						nparent.synced = false;
						nparent.first_sync = false;
						nparent.parent = oparent;
						var _this25 = nparent.aabb;
						var b12 = sibling1.aabb;
						_this25.minx = leafaabb.minx < b12.minx ? leafaabb.minx : b12.minx;
						_this25.miny = leafaabb.miny < b12.miny ? leafaabb.miny : b12.miny;
						_this25.maxx = leafaabb.maxx > b12.maxx ? leafaabb.maxx : b12.maxx;
						_this25.maxy = leafaabb.maxy > b12.maxy ? leafaabb.maxy : b12.maxy;
						nparent.height = sibling1.height + 1;
						if(oparent != null) {
							if(oparent.child1 == sibling1) {
								oparent.child1 = nparent;
							} else {
								oparent.child2 = nparent;
							}
							nparent.child1 = sibling1;
							nparent.child2 = node;
							sibling1.parent = nparent;
							node.parent = nparent;
						} else {
							nparent.child1 = sibling1;
							nparent.child2 = node;
							sibling1.parent = nparent;
							node.parent = nparent;
							tree1.root = nparent;
						}
						node2 = node.parent;
						while(node2 != null) {
							if(!(node2.child1 == null || node2.height < 2)) {
								var b13 = node2.child1;
								var c1 = node2.child2;
								var balance1 = c1.height - b13.height;
								if(balance1 > 1) {
									var f2 = c1.child1;
									var g3 = c1.child2;
									c1.child1 = node2;
									c1.parent = node2.parent;
									node2.parent = c1;
									if(c1.parent != null) {
										if(c1.parent.child1 == node2) {
											c1.parent.child1 = c1;
										} else {
											c1.parent.child2 = c1;
										}
									} else {
										tree1.root = c1;
									}
									if(f2.height > g3.height) {
										c1.child2 = f2;
										node2.child2 = g3;
										g3.parent = node2;
										var _this26 = node2.aabb;
										var a11 = b13.aabb;
										var b14 = g3.aabb;
										_this26.minx = a11.minx < b14.minx ? a11.minx : b14.minx;
										_this26.miny = a11.miny < b14.miny ? a11.miny : b14.miny;
										_this26.maxx = a11.maxx > b14.maxx ? a11.maxx : b14.maxx;
										_this26.maxy = a11.maxy > b14.maxy ? a11.maxy : b14.maxy;
										var _this27 = c1.aabb;
										var a12 = node2.aabb;
										var b15 = f2.aabb;
										_this27.minx = a12.minx < b15.minx ? a12.minx : b15.minx;
										_this27.miny = a12.miny < b15.miny ? a12.miny : b15.miny;
										_this27.maxx = a12.maxx > b15.maxx ? a12.maxx : b15.maxx;
										_this27.maxy = a12.maxy > b15.maxy ? a12.maxy : b15.maxy;
										var x9 = b13.height;
										var y9 = g3.height;
										node2.height = 1 + (x9 > y9 ? x9 : y9);
										var x10 = node2.height;
										var y10 = f2.height;
										c1.height = 1 + (x10 > y10 ? x10 : y10);
									} else {
										c1.child2 = g3;
										node2.child2 = f2;
										f2.parent = node2;
										var _this28 = node2.aabb;
										var a13 = b13.aabb;
										var b16 = f2.aabb;
										_this28.minx = a13.minx < b16.minx ? a13.minx : b16.minx;
										_this28.miny = a13.miny < b16.miny ? a13.miny : b16.miny;
										_this28.maxx = a13.maxx > b16.maxx ? a13.maxx : b16.maxx;
										_this28.maxy = a13.maxy > b16.maxy ? a13.maxy : b16.maxy;
										var _this29 = c1.aabb;
										var a14 = node2.aabb;
										var b17 = g3.aabb;
										_this29.minx = a14.minx < b17.minx ? a14.minx : b17.minx;
										_this29.miny = a14.miny < b17.miny ? a14.miny : b17.miny;
										_this29.maxx = a14.maxx > b17.maxx ? a14.maxx : b17.maxx;
										_this29.maxy = a14.maxy > b17.maxy ? a14.maxy : b17.maxy;
										var x11 = b13.height;
										var y11 = f2.height;
										node2.height = 1 + (x11 > y11 ? x11 : y11);
										var x12 = node2.height;
										var y12 = g3.height;
										c1.height = 1 + (x12 > y12 ? x12 : y12);
									}
									node2 = c1;
								} else if(balance1 < -1) {
									var f3 = b13.child1;
									var g4 = b13.child2;
									b13.child1 = node2;
									b13.parent = node2.parent;
									node2.parent = b13;
									if(b13.parent != null) {
										if(b13.parent.child1 == node2) {
											b13.parent.child1 = b13;
										} else {
											b13.parent.child2 = b13;
										}
									} else {
										tree1.root = b13;
									}
									if(f3.height > g4.height) {
										b13.child2 = f3;
										node2.child1 = g4;
										g4.parent = node2;
										var _this30 = node2.aabb;
										var a15 = c1.aabb;
										var b18 = g4.aabb;
										_this30.minx = a15.minx < b18.minx ? a15.minx : b18.minx;
										_this30.miny = a15.miny < b18.miny ? a15.miny : b18.miny;
										_this30.maxx = a15.maxx > b18.maxx ? a15.maxx : b18.maxx;
										_this30.maxy = a15.maxy > b18.maxy ? a15.maxy : b18.maxy;
										var _this31 = b13.aabb;
										var a16 = node2.aabb;
										var b19 = f3.aabb;
										_this31.minx = a16.minx < b19.minx ? a16.minx : b19.minx;
										_this31.miny = a16.miny < b19.miny ? a16.miny : b19.miny;
										_this31.maxx = a16.maxx > b19.maxx ? a16.maxx : b19.maxx;
										_this31.maxy = a16.maxy > b19.maxy ? a16.maxy : b19.maxy;
										var x13 = c1.height;
										var y13 = g4.height;
										node2.height = 1 + (x13 > y13 ? x13 : y13);
										var x14 = node2.height;
										var y14 = f3.height;
										b13.height = 1 + (x14 > y14 ? x14 : y14);
									} else {
										b13.child2 = g4;
										node2.child1 = f3;
										f3.parent = node2;
										var _this32 = node2.aabb;
										var a17 = c1.aabb;
										var b20 = f3.aabb;
										_this32.minx = a17.minx < b20.minx ? a17.minx : b20.minx;
										_this32.miny = a17.miny < b20.miny ? a17.miny : b20.miny;
										_this32.maxx = a17.maxx > b20.maxx ? a17.maxx : b20.maxx;
										_this32.maxy = a17.maxy > b20.maxy ? a17.maxy : b20.maxy;
										var _this33 = b13.aabb;
										var a18 = node2.aabb;
										var b21 = g4.aabb;
										_this33.minx = a18.minx < b21.minx ? a18.minx : b21.minx;
										_this33.miny = a18.miny < b21.miny ? a18.miny : b21.miny;
										_this33.maxx = a18.maxx > b21.maxx ? a18.maxx : b21.maxx;
										_this33.maxy = a18.maxy > b21.maxy ? a18.maxy : b21.maxy;
										var x15 = c1.height;
										var y15 = f3.height;
										node2.height = 1 + (x15 > y15 ? x15 : y15);
										var x16 = node2.height;
										var y16 = g4.height;
										b13.height = 1 + (x16 > y16 ? x16 : y16);
									}
									node2 = b13;
								}
							}
							var child12 = node2.child1;
							var child22 = node2.child2;
							var x17 = child12.height;
							var y17 = child22.height;
							node2.height = 1 + (x17 > y17 ? x17 : y17);
							var _this34 = node2.aabb;
							var a19 = child12.aabb;
							var b22 = child22.aabb;
							_this34.minx = a19.minx < b22.minx ? a19.minx : b22.minx;
							_this34.miny = a19.miny < b22.miny ? a19.miny : b22.miny;
							_this34.maxx = a19.maxx > b22.maxx ? a19.maxx : b22.maxx;
							_this34.maxy = a19.maxy > b22.maxy ? a19.maxy : b22.maxy;
							node2 = node2.parent;
						}
					}
					node.synced = false;
					if(!node.moved) {
						node.moved = true;
						node.mnext = this.moves;
						this.moves = node;
					}
				}
			}
		}
	}
	,broadphase: function(space,discrete) {
		var node = this.syncs;
		while(node != null) {
			var shape = node.shape;
			if(!node.first_sync) {
				var tree = node.dyn ? this.dtree : this.stree;
				if(node == tree.root) {
					tree.root = null;
				} else {
					var parent = node.parent;
					var gparent = parent.parent;
					var sibling = parent.child1 == node ? parent.child2 : parent.child1;
					if(gparent != null) {
						if(gparent.child1 == parent) {
							gparent.child1 = sibling;
						} else {
							gparent.child2 = sibling;
						}
						sibling.parent = gparent;
						var o = parent;
						o.height = -1;
						var o1 = o.aabb;
						if(o1.outer != null) {
							o1.outer.zpp_inner = null;
							o1.outer = null;
						}
						o1.wrap_min = o1.wrap_max = null;
						o1._invalidate = null;
						o1._validate = null;
						o1.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
						zpp_$nape_geom_ZPP_$AABB.zpp_pool = o1;
						o.child1 = o.child2 = o.parent = null;
						o.next = null;
						o.snext = null;
						o.mnext = null;
						o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
						zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
						var node1 = gparent;
						while(node1 != null) {
							if(!(node1.child1 == null || node1.height < 2)) {
								var b = node1.child1;
								var c = node1.child2;
								var balance = c.height - b.height;
								if(balance > 1) {
									var f = c.child1;
									var g = c.child2;
									c.child1 = node1;
									c.parent = node1.parent;
									node1.parent = c;
									if(c.parent != null) {
										if(c.parent.child1 == node1) {
											c.parent.child1 = c;
										} else {
											c.parent.child2 = c;
										}
									} else {
										tree.root = c;
									}
									if(f.height > g.height) {
										c.child2 = f;
										node1.child2 = g;
										g.parent = node1;
										var _this = node1.aabb;
										var a = b.aabb;
										var b1 = g.aabb;
										_this.minx = a.minx < b1.minx ? a.minx : b1.minx;
										_this.miny = a.miny < b1.miny ? a.miny : b1.miny;
										_this.maxx = a.maxx > b1.maxx ? a.maxx : b1.maxx;
										_this.maxy = a.maxy > b1.maxy ? a.maxy : b1.maxy;
										var _this1 = c.aabb;
										var a1 = node1.aabb;
										var b2 = f.aabb;
										_this1.minx = a1.minx < b2.minx ? a1.minx : b2.minx;
										_this1.miny = a1.miny < b2.miny ? a1.miny : b2.miny;
										_this1.maxx = a1.maxx > b2.maxx ? a1.maxx : b2.maxx;
										_this1.maxy = a1.maxy > b2.maxy ? a1.maxy : b2.maxy;
										var x = b.height;
										var y = g.height;
										node1.height = 1 + (x > y ? x : y);
										var x1 = node1.height;
										var y1 = f.height;
										c.height = 1 + (x1 > y1 ? x1 : y1);
									} else {
										c.child2 = g;
										node1.child2 = f;
										f.parent = node1;
										var _this2 = node1.aabb;
										var a2 = b.aabb;
										var b3 = f.aabb;
										_this2.minx = a2.minx < b3.minx ? a2.minx : b3.minx;
										_this2.miny = a2.miny < b3.miny ? a2.miny : b3.miny;
										_this2.maxx = a2.maxx > b3.maxx ? a2.maxx : b3.maxx;
										_this2.maxy = a2.maxy > b3.maxy ? a2.maxy : b3.maxy;
										var _this3 = c.aabb;
										var a3 = node1.aabb;
										var b4 = g.aabb;
										_this3.minx = a3.minx < b4.minx ? a3.minx : b4.minx;
										_this3.miny = a3.miny < b4.miny ? a3.miny : b4.miny;
										_this3.maxx = a3.maxx > b4.maxx ? a3.maxx : b4.maxx;
										_this3.maxy = a3.maxy > b4.maxy ? a3.maxy : b4.maxy;
										var x2 = b.height;
										var y2 = f.height;
										node1.height = 1 + (x2 > y2 ? x2 : y2);
										var x3 = node1.height;
										var y3 = g.height;
										c.height = 1 + (x3 > y3 ? x3 : y3);
									}
									node1 = c;
								} else if(balance < -1) {
									var f1 = b.child1;
									var g1 = b.child2;
									b.child1 = node1;
									b.parent = node1.parent;
									node1.parent = b;
									if(b.parent != null) {
										if(b.parent.child1 == node1) {
											b.parent.child1 = b;
										} else {
											b.parent.child2 = b;
										}
									} else {
										tree.root = b;
									}
									if(f1.height > g1.height) {
										b.child2 = f1;
										node1.child1 = g1;
										g1.parent = node1;
										var _this4 = node1.aabb;
										var a4 = c.aabb;
										var b5 = g1.aabb;
										_this4.minx = a4.minx < b5.minx ? a4.minx : b5.minx;
										_this4.miny = a4.miny < b5.miny ? a4.miny : b5.miny;
										_this4.maxx = a4.maxx > b5.maxx ? a4.maxx : b5.maxx;
										_this4.maxy = a4.maxy > b5.maxy ? a4.maxy : b5.maxy;
										var _this5 = b.aabb;
										var a5 = node1.aabb;
										var b6 = f1.aabb;
										_this5.minx = a5.minx < b6.minx ? a5.minx : b6.minx;
										_this5.miny = a5.miny < b6.miny ? a5.miny : b6.miny;
										_this5.maxx = a5.maxx > b6.maxx ? a5.maxx : b6.maxx;
										_this5.maxy = a5.maxy > b6.maxy ? a5.maxy : b6.maxy;
										var x4 = c.height;
										var y4 = g1.height;
										node1.height = 1 + (x4 > y4 ? x4 : y4);
										var x5 = node1.height;
										var y5 = f1.height;
										b.height = 1 + (x5 > y5 ? x5 : y5);
									} else {
										b.child2 = g1;
										node1.child1 = f1;
										f1.parent = node1;
										var _this6 = node1.aabb;
										var a6 = c.aabb;
										var b7 = f1.aabb;
										_this6.minx = a6.minx < b7.minx ? a6.minx : b7.minx;
										_this6.miny = a6.miny < b7.miny ? a6.miny : b7.miny;
										_this6.maxx = a6.maxx > b7.maxx ? a6.maxx : b7.maxx;
										_this6.maxy = a6.maxy > b7.maxy ? a6.maxy : b7.maxy;
										var _this7 = b.aabb;
										var a7 = node1.aabb;
										var b8 = g1.aabb;
										_this7.minx = a7.minx < b8.minx ? a7.minx : b8.minx;
										_this7.miny = a7.miny < b8.miny ? a7.miny : b8.miny;
										_this7.maxx = a7.maxx > b8.maxx ? a7.maxx : b8.maxx;
										_this7.maxy = a7.maxy > b8.maxy ? a7.maxy : b8.maxy;
										var x6 = c.height;
										var y6 = f1.height;
										node1.height = 1 + (x6 > y6 ? x6 : y6);
										var x7 = node1.height;
										var y7 = g1.height;
										b.height = 1 + (x7 > y7 ? x7 : y7);
									}
									node1 = b;
								}
							}
							var child1 = node1.child1;
							var child2 = node1.child2;
							var _this8 = node1.aabb;
							var a8 = child1.aabb;
							var b9 = child2.aabb;
							_this8.minx = a8.minx < b9.minx ? a8.minx : b9.minx;
							_this8.miny = a8.miny < b9.miny ? a8.miny : b9.miny;
							_this8.maxx = a8.maxx > b9.maxx ? a8.maxx : b9.maxx;
							_this8.maxy = a8.maxy > b9.maxy ? a8.maxy : b9.maxy;
							var x8 = child1.height;
							var y8 = child2.height;
							node1.height = 1 + (x8 > y8 ? x8 : y8);
							node1 = node1.parent;
						}
					} else {
						tree.root = sibling;
						sibling.parent = null;
						var o2 = parent;
						o2.height = -1;
						var o3 = o2.aabb;
						if(o3.outer != null) {
							o3.outer.zpp_inner = null;
							o3.outer = null;
						}
						o3.wrap_min = o3.wrap_max = null;
						o3._invalidate = null;
						o3._validate = null;
						o3.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
						zpp_$nape_geom_ZPP_$AABB.zpp_pool = o3;
						o2.child1 = o2.child2 = o2.parent = null;
						o2.next = null;
						o2.snext = null;
						o2.mnext = null;
						o2.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
						zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o2;
					}
				}
			} else {
				node.first_sync = false;
			}
			var aabb = node.aabb;
			if(!space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == 0) {
							var _this9 = shape.circle;
							if(_this9.zip_worldCOM) {
								if(_this9.body != null) {
									_this9.zip_worldCOM = false;
									if(_this9.zip_localCOM) {
										_this9.zip_localCOM = false;
										if(_this9.type == 1) {
											var _this10 = _this9.polygon;
											if(_this10.lverts.next == null) {
												throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
											}
											if(_this10.lverts.next.next == null) {
												_this10.localCOMx = _this10.lverts.next.x;
												_this10.localCOMy = _this10.lverts.next.y;
											} else if(_this10.lverts.next.next.next == null) {
												_this10.localCOMx = _this10.lverts.next.x;
												_this10.localCOMy = _this10.lverts.next.y;
												var t = 1.0;
												_this10.localCOMx += _this10.lverts.next.next.x * t;
												_this10.localCOMy += _this10.lverts.next.next.y * t;
												var t1 = 0.5;
												_this10.localCOMx *= t1;
												_this10.localCOMy *= t1;
											} else {
												_this10.localCOMx = 0;
												_this10.localCOMy = 0;
												var area = 0.0;
												var cx_ite = _this10.lverts.next;
												var u = cx_ite;
												cx_ite = cx_ite.next;
												var v = cx_ite;
												cx_ite = cx_ite.next;
												while(cx_ite != null) {
													var w = cx_ite;
													area += v.x * (w.y - u.y);
													var cf = w.y * v.x - w.x * v.y;
													_this10.localCOMx += (v.x + w.x) * cf;
													_this10.localCOMy += (v.y + w.y) * cf;
													u = v;
													v = w;
													cx_ite = cx_ite.next;
												}
												cx_ite = _this10.lverts.next;
												var w1 = cx_ite;
												area += v.x * (w1.y - u.y);
												var cf1 = w1.y * v.x - w1.x * v.y;
												_this10.localCOMx += (v.x + w1.x) * cf1;
												_this10.localCOMy += (v.y + w1.y) * cf1;
												u = v;
												v = w1;
												cx_ite = cx_ite.next;
												var w2 = cx_ite;
												area += v.x * (w2.y - u.y);
												var cf2 = w2.y * v.x - w2.x * v.y;
												_this10.localCOMx += (v.x + w2.x) * cf2;
												_this10.localCOMy += (v.y + w2.y) * cf2;
												area = 1 / (3 * area);
												var t2 = area;
												_this10.localCOMx *= t2;
												_this10.localCOMy *= t2;
											}
										}
										if(_this9.wrap_localCOM != null) {
											_this9.wrap_localCOM.zpp_inner.x = _this9.localCOMx;
											_this9.wrap_localCOM.zpp_inner.y = _this9.localCOMy;
										}
									}
									var _this11 = _this9.body;
									if(_this11.zip_axis) {
										_this11.zip_axis = false;
										_this11.axisx = Math.sin(_this11.rot);
										_this11.axisy = Math.cos(_this11.rot);
									}
									_this9.worldCOMx = _this9.body.posx + (_this9.body.axisy * _this9.localCOMx - _this9.body.axisx * _this9.localCOMy);
									_this9.worldCOMy = _this9.body.posy + (_this9.localCOMx * _this9.body.axisx + _this9.localCOMy * _this9.body.axisy);
								}
							}
							var rx = _this9.radius;
							var ry = _this9.radius;
							_this9.aabb.minx = _this9.worldCOMx - rx;
							_this9.aabb.miny = _this9.worldCOMy - ry;
							_this9.aabb.maxx = _this9.worldCOMx + rx;
							_this9.aabb.maxy = _this9.worldCOMy + ry;
						} else {
							var _this12 = shape.polygon;
							if(_this12.zip_gverts) {
								if(_this12.body != null) {
									_this12.zip_gverts = false;
									_this12.validate_lverts();
									var _this13 = _this12.body;
									if(_this13.zip_axis) {
										_this13.zip_axis = false;
										_this13.axisx = Math.sin(_this13.rot);
										_this13.axisy = Math.cos(_this13.rot);
									}
									var li = _this12.lverts.next;
									var cx_ite1 = _this12.gverts.next;
									while(cx_ite1 != null) {
										var g2 = cx_ite1;
										var l = li;
										li = li.next;
										g2.x = _this12.body.posx + (_this12.body.axisy * l.x - _this12.body.axisx * l.y);
										g2.y = _this12.body.posy + (l.x * _this12.body.axisx + l.y * _this12.body.axisy);
										cx_ite1 = cx_ite1.next;
									}
								}
							}
							if(_this12.lverts.next == null) {
								throw haxe_Exception.thrown("Error: An empty polygon has no meaningful bounds");
							}
							var p0 = _this12.gverts.next;
							_this12.aabb.minx = p0.x;
							_this12.aabb.miny = p0.y;
							_this12.aabb.maxx = p0.x;
							_this12.aabb.maxy = p0.y;
							var cx_ite2 = _this12.gverts.next.next;
							while(cx_ite2 != null) {
								var p = cx_ite2;
								if(p.x < _this12.aabb.minx) {
									_this12.aabb.minx = p.x;
								}
								if(p.x > _this12.aabb.maxx) {
									_this12.aabb.maxx = p.x;
								}
								if(p.y < _this12.aabb.miny) {
									_this12.aabb.miny = p.y;
								}
								if(p.y > _this12.aabb.maxy) {
									_this12.aabb.maxy = p.y;
								}
								cx_ite2 = cx_ite2.next;
							}
						}
					}
				}
			}
			var a9 = shape.aabb;
			aabb.minx = a9.minx - 3.0;
			aabb.miny = a9.miny - 3.0;
			aabb.maxx = a9.maxx + 3.0;
			aabb.maxy = a9.maxy + 3.0;
			var tree1 = (node.dyn = shape.body.type == 1 ? false : !shape.body.component.sleeping) ? this.dtree : this.stree;
			if(tree1.root == null) {
				tree1.root = node;
				tree1.root.parent = null;
			} else {
				var leafaabb = node.aabb;
				var node2 = tree1.root;
				while(node2.child1 != null) {
					var child11 = node2.child1;
					var child21 = node2.child2;
					var _this14 = node2.aabb;
					var area1 = (_this14.maxx - _this14.minx + (_this14.maxy - _this14.miny)) * 2;
					var _this15 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
					var a10 = node2.aabb;
					_this15.minx = a10.minx < leafaabb.minx ? a10.minx : leafaabb.minx;
					_this15.miny = a10.miny < leafaabb.miny ? a10.miny : leafaabb.miny;
					_this15.maxx = a10.maxx > leafaabb.maxx ? a10.maxx : leafaabb.maxx;
					_this15.maxy = a10.maxy > leafaabb.maxy ? a10.maxy : leafaabb.maxy;
					var _this16 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
					var carea = (_this16.maxx - _this16.minx + (_this16.maxy - _this16.miny)) * 2;
					var cost = 2 * carea;
					var icost = 2 * (carea - area1);
					var _this17 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
					var b10 = child11.aabb;
					_this17.minx = leafaabb.minx < b10.minx ? leafaabb.minx : b10.minx;
					_this17.miny = leafaabb.miny < b10.miny ? leafaabb.miny : b10.miny;
					_this17.maxx = leafaabb.maxx > b10.maxx ? leafaabb.maxx : b10.maxx;
					_this17.maxy = leafaabb.maxy > b10.maxy ? leafaabb.maxy : b10.maxy;
					var cost1;
					if(child11.child1 == null) {
						var _this18 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
						cost1 = (_this18.maxx - _this18.minx + (_this18.maxy - _this18.miny)) * 2 + icost;
					} else {
						var _this19 = child11.aabb;
						var oarea = (_this19.maxx - _this19.minx + (_this19.maxy - _this19.miny)) * 2;
						var _this20 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
						var narea = (_this20.maxx - _this20.minx + (_this20.maxy - _this20.miny)) * 2;
						cost1 = narea - oarea + icost;
					}
					var _this21 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
					var b11 = child21.aabb;
					_this21.minx = leafaabb.minx < b11.minx ? leafaabb.minx : b11.minx;
					_this21.miny = leafaabb.miny < b11.miny ? leafaabb.miny : b11.miny;
					_this21.maxx = leafaabb.maxx > b11.maxx ? leafaabb.maxx : b11.maxx;
					_this21.maxy = leafaabb.maxy > b11.maxy ? leafaabb.maxy : b11.maxy;
					var cost2;
					if(child21.child1 == null) {
						var _this22 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
						cost2 = (_this22.maxx - _this22.minx + (_this22.maxy - _this22.miny)) * 2 + icost;
					} else {
						var _this23 = child21.aabb;
						var oarea1 = (_this23.maxx - _this23.minx + (_this23.maxy - _this23.miny)) * 2;
						var _this24 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb;
						var narea1 = (_this24.maxx - _this24.minx + (_this24.maxy - _this24.miny)) * 2;
						cost2 = narea1 - oarea1 + icost;
					}
					if(cost < cost1 && cost < cost2) {
						break;
					} else {
						node2 = cost1 < cost2 ? child11 : child21;
					}
				}
				var sibling1 = node2;
				var oparent = sibling1.parent;
				var nparent;
				if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) {
					nparent = new zpp_$nape_space_ZPP_$AABBNode();
				} else {
					nparent = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
					zpp_$nape_space_ZPP_$AABBNode.zpp_pool = nparent.next;
					nparent.next = null;
				}
				if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
					nparent.aabb = new zpp_$nape_geom_ZPP_$AABB();
				} else {
					nparent.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
					zpp_$nape_geom_ZPP_$AABB.zpp_pool = nparent.aabb.next;
					nparent.aabb.next = null;
				}
				nparent.moved = false;
				nparent.synced = false;
				nparent.first_sync = false;
				nparent.parent = oparent;
				var _this25 = nparent.aabb;
				var b12 = sibling1.aabb;
				_this25.minx = leafaabb.minx < b12.minx ? leafaabb.minx : b12.minx;
				_this25.miny = leafaabb.miny < b12.miny ? leafaabb.miny : b12.miny;
				_this25.maxx = leafaabb.maxx > b12.maxx ? leafaabb.maxx : b12.maxx;
				_this25.maxy = leafaabb.maxy > b12.maxy ? leafaabb.maxy : b12.maxy;
				nparent.height = sibling1.height + 1;
				if(oparent != null) {
					if(oparent.child1 == sibling1) {
						oparent.child1 = nparent;
					} else {
						oparent.child2 = nparent;
					}
					nparent.child1 = sibling1;
					nparent.child2 = node;
					sibling1.parent = nparent;
					node.parent = nparent;
				} else {
					nparent.child1 = sibling1;
					nparent.child2 = node;
					sibling1.parent = nparent;
					node.parent = nparent;
					tree1.root = nparent;
				}
				node2 = node.parent;
				while(node2 != null) {
					if(!(node2.child1 == null || node2.height < 2)) {
						var b13 = node2.child1;
						var c1 = node2.child2;
						var balance1 = c1.height - b13.height;
						if(balance1 > 1) {
							var f2 = c1.child1;
							var g3 = c1.child2;
							c1.child1 = node2;
							c1.parent = node2.parent;
							node2.parent = c1;
							if(c1.parent != null) {
								if(c1.parent.child1 == node2) {
									c1.parent.child1 = c1;
								} else {
									c1.parent.child2 = c1;
								}
							} else {
								tree1.root = c1;
							}
							if(f2.height > g3.height) {
								c1.child2 = f2;
								node2.child2 = g3;
								g3.parent = node2;
								var _this26 = node2.aabb;
								var a11 = b13.aabb;
								var b14 = g3.aabb;
								_this26.minx = a11.minx < b14.minx ? a11.minx : b14.minx;
								_this26.miny = a11.miny < b14.miny ? a11.miny : b14.miny;
								_this26.maxx = a11.maxx > b14.maxx ? a11.maxx : b14.maxx;
								_this26.maxy = a11.maxy > b14.maxy ? a11.maxy : b14.maxy;
								var _this27 = c1.aabb;
								var a12 = node2.aabb;
								var b15 = f2.aabb;
								_this27.minx = a12.minx < b15.minx ? a12.minx : b15.minx;
								_this27.miny = a12.miny < b15.miny ? a12.miny : b15.miny;
								_this27.maxx = a12.maxx > b15.maxx ? a12.maxx : b15.maxx;
								_this27.maxy = a12.maxy > b15.maxy ? a12.maxy : b15.maxy;
								var x9 = b13.height;
								var y9 = g3.height;
								node2.height = 1 + (x9 > y9 ? x9 : y9);
								var x10 = node2.height;
								var y10 = f2.height;
								c1.height = 1 + (x10 > y10 ? x10 : y10);
							} else {
								c1.child2 = g3;
								node2.child2 = f2;
								f2.parent = node2;
								var _this28 = node2.aabb;
								var a13 = b13.aabb;
								var b16 = f2.aabb;
								_this28.minx = a13.minx < b16.minx ? a13.minx : b16.minx;
								_this28.miny = a13.miny < b16.miny ? a13.miny : b16.miny;
								_this28.maxx = a13.maxx > b16.maxx ? a13.maxx : b16.maxx;
								_this28.maxy = a13.maxy > b16.maxy ? a13.maxy : b16.maxy;
								var _this29 = c1.aabb;
								var a14 = node2.aabb;
								var b17 = g3.aabb;
								_this29.minx = a14.minx < b17.minx ? a14.minx : b17.minx;
								_this29.miny = a14.miny < b17.miny ? a14.miny : b17.miny;
								_this29.maxx = a14.maxx > b17.maxx ? a14.maxx : b17.maxx;
								_this29.maxy = a14.maxy > b17.maxy ? a14.maxy : b17.maxy;
								var x11 = b13.height;
								var y11 = f2.height;
								node2.height = 1 + (x11 > y11 ? x11 : y11);
								var x12 = node2.height;
								var y12 = g3.height;
								c1.height = 1 + (x12 > y12 ? x12 : y12);
							}
							node2 = c1;
						} else if(balance1 < -1) {
							var f3 = b13.child1;
							var g4 = b13.child2;
							b13.child1 = node2;
							b13.parent = node2.parent;
							node2.parent = b13;
							if(b13.parent != null) {
								if(b13.parent.child1 == node2) {
									b13.parent.child1 = b13;
								} else {
									b13.parent.child2 = b13;
								}
							} else {
								tree1.root = b13;
							}
							if(f3.height > g4.height) {
								b13.child2 = f3;
								node2.child1 = g4;
								g4.parent = node2;
								var _this30 = node2.aabb;
								var a15 = c1.aabb;
								var b18 = g4.aabb;
								_this30.minx = a15.minx < b18.minx ? a15.minx : b18.minx;
								_this30.miny = a15.miny < b18.miny ? a15.miny : b18.miny;
								_this30.maxx = a15.maxx > b18.maxx ? a15.maxx : b18.maxx;
								_this30.maxy = a15.maxy > b18.maxy ? a15.maxy : b18.maxy;
								var _this31 = b13.aabb;
								var a16 = node2.aabb;
								var b19 = f3.aabb;
								_this31.minx = a16.minx < b19.minx ? a16.minx : b19.minx;
								_this31.miny = a16.miny < b19.miny ? a16.miny : b19.miny;
								_this31.maxx = a16.maxx > b19.maxx ? a16.maxx : b19.maxx;
								_this31.maxy = a16.maxy > b19.maxy ? a16.maxy : b19.maxy;
								var x13 = c1.height;
								var y13 = g4.height;
								node2.height = 1 + (x13 > y13 ? x13 : y13);
								var x14 = node2.height;
								var y14 = f3.height;
								b13.height = 1 + (x14 > y14 ? x14 : y14);
							} else {
								b13.child2 = g4;
								node2.child1 = f3;
								f3.parent = node2;
								var _this32 = node2.aabb;
								var a17 = c1.aabb;
								var b20 = f3.aabb;
								_this32.minx = a17.minx < b20.minx ? a17.minx : b20.minx;
								_this32.miny = a17.miny < b20.miny ? a17.miny : b20.miny;
								_this32.maxx = a17.maxx > b20.maxx ? a17.maxx : b20.maxx;
								_this32.maxy = a17.maxy > b20.maxy ? a17.maxy : b20.maxy;
								var _this33 = b13.aabb;
								var a18 = node2.aabb;
								var b21 = g4.aabb;
								_this33.minx = a18.minx < b21.minx ? a18.minx : b21.minx;
								_this33.miny = a18.miny < b21.miny ? a18.miny : b21.miny;
								_this33.maxx = a18.maxx > b21.maxx ? a18.maxx : b21.maxx;
								_this33.maxy = a18.maxy > b21.maxy ? a18.maxy : b21.maxy;
								var x15 = c1.height;
								var y15 = f3.height;
								node2.height = 1 + (x15 > y15 ? x15 : y15);
								var x16 = node2.height;
								var y16 = g4.height;
								b13.height = 1 + (x16 > y16 ? x16 : y16);
							}
							node2 = b13;
						}
					}
					var child12 = node2.child1;
					var child22 = node2.child2;
					var x17 = child12.height;
					var y17 = child22.height;
					node2.height = 1 + (x17 > y17 ? x17 : y17);
					var _this34 = node2.aabb;
					var a19 = child12.aabb;
					var b22 = child22.aabb;
					_this34.minx = a19.minx < b22.minx ? a19.minx : b22.minx;
					_this34.miny = a19.miny < b22.miny ? a19.miny : b22.miny;
					_this34.maxx = a19.maxx > b22.maxx ? a19.maxx : b22.maxx;
					_this34.maxy = a19.maxy > b22.maxy ? a19.maxy : b22.maxy;
					node2 = node2.parent;
				}
			}
			node.synced = false;
			node = node.snext;
		}
		while(this.syncs != null) {
			var ret = this.syncs;
			this.syncs = ret.snext;
			ret.snext = null;
			var leaf = ret;
			if(leaf.moved) {
				continue;
			}
			leaf.moved = false;
			var lshape = leaf.shape;
			var lbody = lshape.body;
			if(lbody.component.sleeping) {
				continue;
			}
			var ab = leaf.aabb;
			var stack = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack;
				stack = this.dtree.root;
			}
			while(stack != null) {
				var ret1 = stack;
				stack = ret1.next;
				ret1.next = null;
				var node = ret1;
				if(node == leaf) {
					continue;
				}
				if(node.child1 == null) {
					var shape = node.shape;
					if(shape.body != lshape.body && !(shape.body.type == 1 && lshape.body.type == 1)) {
						var x = node.aabb;
						if(x.miny <= ab.maxy && ab.miny <= x.maxy && x.minx <= ab.maxx && ab.minx <= x.maxx) {
							var id;
							var di;
							if(lshape.id < shape.id) {
								id = lshape.id;
								di = shape.id;
							} else {
								id = shape.id;
								di = lshape.id;
							}
							var s = lshape.pairs.length < shape.pairs.length ? lshape : shape;
							var p = null;
							var cx_ite = s.pairs.head;
							while(cx_ite != null) {
								var px = cx_ite.elt;
								if(px.id == id && px.di == di) {
									p = px;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(p != null) {
								if(p.sleeping) {
									p.sleeping = false;
									p.next = this.pairs;
									this.pairs = p;
									p.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p.next;
								p.next = null;
							}
							p.n1 = leaf;
							p.n2 = node;
							p.id = id;
							p.di = di;
							p.next = this.pairs;
							this.pairs = p;
							p.first = true;
							var _this = lshape.pairs;
							var ret2;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret2 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret2.next;
								ret2.next = null;
							}
							ret2.elt = p;
							var temp = ret2;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
							var _this1 = shape.pairs;
							var ret3;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret3 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.elt = p;
							var temp1 = ret3;
							temp1.next = _this1.head;
							_this1.head = temp1;
							_this1.modified = true;
							_this1.length++;
						}
					}
				} else {
					var x1 = node.aabb;
					if(x1.miny <= ab.maxy && ab.miny <= x1.maxy && x1.minx <= ab.maxx && ab.minx <= x1.maxx) {
						if(node.child1 != null) {
							node.child1.next = stack;
							stack = node.child1;
						}
						if(node.child2 != null) {
							node.child2.next = stack;
							stack = node.child2;
						}
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack;
				stack = this.stree.root;
			}
			while(stack != null) {
				var ret4 = stack;
				stack = ret4.next;
				ret4.next = null;
				var node1 = ret4;
				if(node1 == leaf) {
					continue;
				}
				if(node1.child1 == null) {
					var shape1 = node1.shape;
					if(shape1.body != lshape.body && !(shape1.body.type == 1 && lshape.body.type == 1)) {
						var x2 = node1.aabb;
						if(x2.miny <= ab.maxy && ab.miny <= x2.maxy && x2.minx <= ab.maxx && ab.minx <= x2.maxx) {
							var id1;
							var di1;
							if(lshape.id < shape1.id) {
								id1 = lshape.id;
								di1 = shape1.id;
							} else {
								id1 = shape1.id;
								di1 = lshape.id;
							}
							var s1 = lshape.pairs.length < shape1.pairs.length ? lshape : shape1;
							var p1 = null;
							var cx_ite1 = s1.pairs.head;
							while(cx_ite1 != null) {
								var px1 = cx_ite1.elt;
								if(px1.id == id1 && px1.di == di1) {
									p1 = px1;
									break;
								}
								cx_ite1 = cx_ite1.next;
							}
							if(p1 != null) {
								if(p1.sleeping) {
									p1.sleeping = false;
									p1.next = this.pairs;
									this.pairs = p1;
									p1.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p1 = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p1 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p1.next;
								p1.next = null;
							}
							p1.n1 = leaf;
							p1.n2 = node1;
							p1.id = id1;
							p1.di = di1;
							p1.next = this.pairs;
							this.pairs = p1;
							p1.first = true;
							var _this2 = lshape.pairs;
							var ret5;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret5 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret5.next;
								ret5.next = null;
							}
							ret5.elt = p1;
							var temp2 = ret5;
							temp2.next = _this2.head;
							_this2.head = temp2;
							_this2.modified = true;
							_this2.length++;
							var _this3 = shape1.pairs;
							var ret6;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret6 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret6.next;
								ret6.next = null;
							}
							ret6.elt = p1;
							var temp3 = ret6;
							temp3.next = _this3.head;
							_this3.head = temp3;
							_this3.modified = true;
							_this3.length++;
						}
					}
				} else {
					var x3 = node1.aabb;
					if(x3.miny <= ab.maxy && ab.miny <= x3.maxy && x3.minx <= ab.maxx && ab.minx <= x3.maxx) {
						if(node1.child1 != null) {
							node1.child1.next = stack;
							stack = node1.child1;
						}
						if(node1.child2 != null) {
							node1.child2.next = stack;
							stack = node1.child2;
						}
					}
				}
			}
		}
		while(this.moves != null) {
			var ret = this.moves;
			this.moves = ret.mnext;
			ret.mnext = null;
			var leaf = ret;
			leaf.moved = false;
			var lshape = leaf.shape;
			var lbody = lshape.body;
			if(lbody.component.sleeping) {
				continue;
			}
			var ab = leaf.aabb;
			var stack = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack;
				stack = this.dtree.root;
			}
			while(stack != null) {
				var ret1 = stack;
				stack = ret1.next;
				ret1.next = null;
				var node = ret1;
				if(node == leaf) {
					continue;
				}
				if(node.child1 == null) {
					var shape = node.shape;
					if(shape.body != lshape.body && !(shape.body.type == 1 && lshape.body.type == 1)) {
						var x = node.aabb;
						if(x.miny <= ab.maxy && ab.miny <= x.maxy && x.minx <= ab.maxx && ab.minx <= x.maxx) {
							var id;
							var di;
							if(lshape.id < shape.id) {
								id = lshape.id;
								di = shape.id;
							} else {
								id = shape.id;
								di = lshape.id;
							}
							var s = lshape.pairs.length < shape.pairs.length ? lshape : shape;
							var p = null;
							var cx_ite = s.pairs.head;
							while(cx_ite != null) {
								var px = cx_ite.elt;
								if(px.id == id && px.di == di) {
									p = px;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(p != null) {
								if(p.sleeping) {
									p.sleeping = false;
									p.next = this.pairs;
									this.pairs = p;
									p.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p.next;
								p.next = null;
							}
							p.n1 = leaf;
							p.n2 = node;
							p.id = id;
							p.di = di;
							p.next = this.pairs;
							this.pairs = p;
							p.first = true;
							var _this = lshape.pairs;
							var ret2;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret2 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret2.next;
								ret2.next = null;
							}
							ret2.elt = p;
							var temp = ret2;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
							var _this1 = shape.pairs;
							var ret3;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret3 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.elt = p;
							var temp1 = ret3;
							temp1.next = _this1.head;
							_this1.head = temp1;
							_this1.modified = true;
							_this1.length++;
						}
					}
				} else {
					var x1 = node.aabb;
					if(x1.miny <= ab.maxy && ab.miny <= x1.maxy && x1.minx <= ab.maxx && ab.minx <= x1.maxx) {
						if(node.child1 != null) {
							node.child1.next = stack;
							stack = node.child1;
						}
						if(node.child2 != null) {
							node.child2.next = stack;
							stack = node.child2;
						}
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack;
				stack = this.stree.root;
			}
			while(stack != null) {
				var ret4 = stack;
				stack = ret4.next;
				ret4.next = null;
				var node1 = ret4;
				if(node1 == leaf) {
					continue;
				}
				if(node1.child1 == null) {
					var shape1 = node1.shape;
					if(shape1.body != lshape.body && !(shape1.body.type == 1 && lshape.body.type == 1)) {
						var x2 = node1.aabb;
						if(x2.miny <= ab.maxy && ab.miny <= x2.maxy && x2.minx <= ab.maxx && ab.minx <= x2.maxx) {
							var id1;
							var di1;
							if(lshape.id < shape1.id) {
								id1 = lshape.id;
								di1 = shape1.id;
							} else {
								id1 = shape1.id;
								di1 = lshape.id;
							}
							var s1 = lshape.pairs.length < shape1.pairs.length ? lshape : shape1;
							var p1 = null;
							var cx_ite1 = s1.pairs.head;
							while(cx_ite1 != null) {
								var px1 = cx_ite1.elt;
								if(px1.id == id1 && px1.di == di1) {
									p1 = px1;
									break;
								}
								cx_ite1 = cx_ite1.next;
							}
							if(p1 != null) {
								if(p1.sleeping) {
									p1.sleeping = false;
									p1.next = this.pairs;
									this.pairs = p1;
									p1.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p1 = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p1 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p1.next;
								p1.next = null;
							}
							p1.n1 = leaf;
							p1.n2 = node1;
							p1.id = id1;
							p1.di = di1;
							p1.next = this.pairs;
							this.pairs = p1;
							p1.first = true;
							var _this2 = lshape.pairs;
							var ret5;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret5 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret5.next;
								ret5.next = null;
							}
							ret5.elt = p1;
							var temp2 = ret5;
							temp2.next = _this2.head;
							_this2.head = temp2;
							_this2.modified = true;
							_this2.length++;
							var _this3 = shape1.pairs;
							var ret6;
							if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
								ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
							} else {
								ret6 = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret6.next;
								ret6.next = null;
							}
							ret6.elt = p1;
							var temp3 = ret6;
							temp3.next = _this3.head;
							_this3.head = temp3;
							_this3.modified = true;
							_this3.length++;
						}
					}
				} else {
					var x3 = node1.aabb;
					if(x3.miny <= ab.maxy && ab.miny <= x3.maxy && x3.minx <= ab.maxx && ab.minx <= x3.maxx) {
						if(node1.child1 != null) {
							node1.child1.next = stack;
							stack = node1.child1;
						}
						if(node1.child2 != null) {
							node1.child2.next = stack;
							stack = node1.child2;
						}
					}
				}
			}
		}
		var pre = null;
		var cur = this.pairs;
		while(cur != null) {
			var tmp;
			if(!cur.first) {
				var _this = cur.n1.aabb;
				var x = cur.n2.aabb;
				tmp = !(x.miny <= _this.maxy && _this.miny <= x.maxy && x.minx <= _this.maxx && _this.minx <= x.maxx);
			} else {
				tmp = false;
			}
			if(tmp) {
				if(pre == null) {
					this.pairs = cur.next;
				} else {
					pre.next = cur.next;
				}
				var _this1 = cur.n1.shape.pairs;
				var pre1 = null;
				var cur1 = _this1.head;
				var ret = false;
				while(cur1 != null) {
					if(cur1.elt == cur) {
						var old;
						var ret1;
						if(pre1 == null) {
							old = _this1.head;
							ret1 = old.next;
							_this1.head = ret1;
							if(_this1.head == null) {
								_this1.pushmod = true;
							}
						} else {
							old = pre1.next;
							ret1 = old.next;
							pre1.next = ret1;
							if(ret1 == null) {
								_this1.pushmod = true;
							}
						}
						var o = old;
						o.elt = null;
						o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o;
						_this1.modified = true;
						_this1.length--;
						_this1.pushmod = true;
						ret = true;
						break;
					}
					pre1 = cur1;
					cur1 = cur1.next;
				}
				var _this2 = cur.n2.shape.pairs;
				var pre2 = null;
				var cur2 = _this2.head;
				var ret2 = false;
				while(cur2 != null) {
					if(cur2.elt == cur) {
						var old1;
						var ret3;
						if(pre2 == null) {
							old1 = _this2.head;
							ret3 = old1.next;
							_this2.head = ret3;
							if(_this2.head == null) {
								_this2.pushmod = true;
							}
						} else {
							old1 = pre2.next;
							ret3 = old1.next;
							pre2.next = ret3;
							if(ret3 == null) {
								_this2.pushmod = true;
							}
						}
						var o1 = old1;
						o1.elt = null;
						o1.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o1;
						_this2.modified = true;
						_this2.length--;
						_this2.pushmod = true;
						ret2 = true;
						break;
					}
					pre2 = cur2;
					cur2 = cur2.next;
				}
				var nxt = cur.next;
				if(cur.arb != null) {
					cur.arb.pair = null;
				}
				cur.arb = null;
				var o2 = cur;
				o2.n1 = o2.n2 = null;
				o2.sleeping = false;
				o2.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
				zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o2;
				cur = nxt;
				continue;
			}
			var s1 = cur.n1.shape;
			var b1 = s1.body;
			var s2 = cur.n2.shape;
			var b2 = s2.body;
			if(!cur.first) {
				if((b1.component.sleeping || b1.type == 1) && (b2.component.sleeping || b2.type == 1)) {
					cur.sleeping = true;
					if(pre == null) {
						this.pairs = cur.next;
					} else {
						pre.next = cur.next;
					}
					cur = cur.next;
					continue;
				}
			}
			cur.first = false;
			var _this3 = s1.aabb;
			var x1 = s2.aabb;
			if(x1.miny <= _this3.maxy && _this3.miny <= x1.maxy && x1.minx <= _this3.maxx && _this3.minx <= x1.maxx) {
				var oarb = cur.arb;
				if(discrete) {
					cur.arb = space.narrowPhase(s1,s2,b1.type != 2 || b2.type != 2,cur.arb,false);
				} else {
					cur.arb = space.continuousEvent(s1,s2,b1.type != 2 || b2.type != 2,cur.arb,false);
				}
				if(cur.arb == null) {
					if(oarb != null) {
						oarb.pair = null;
					}
				} else {
					cur.arb.pair = cur;
				}
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var ret;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.weak = false;
		ret._immutable = false;
		ret.x = x;
		ret.y = y;
		var v = ret;
		var ret = output == null ? new nape_phys_BodyList() : output;
		if(this.stree.root != null) {
			if(this.treeStack == null) {
				this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			}
			this.treeStack.add(this.stree.root);
			while(this.treeStack.head != null) {
				var node = this.treeStack.pop_unsafe();
				var _this = node.aabb;
				if(v.x >= _this.minx && v.x <= _this.maxx && v.y >= _this.miny && v.y <= _this.maxy) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(!ret.has(body)) {
							var tmp;
							if(filter != null) {
								var _this1 = node.shape.filter;
								tmp = (_this1.collisionMask & filter.collisionGroup) != 0 && (filter.collisionMask & _this1.collisionGroup) != 0;
							} else {
								tmp = true;
							}
							if(tmp) {
								if(node.shape.type == 0) {
									if(zpp_$nape_geom_ZPP_$Collide.circleContains(node.shape.circle,v)) {
										ret.push(body);
									}
								} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(node.shape.polygon,v)) {
									ret.push(body);
								}
							}
						}
					} else {
						if(node.child1 != null) {
							this.treeStack.add(node.child1);
						}
						if(node.child2 != null) {
							this.treeStack.add(node.child2);
						}
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) {
				this.treeStack = new zpp_$nape_util_ZNPList_$ZPP_$AABBNode();
			}
			this.treeStack.add(this.dtree.root);
			while(this.treeStack.head != null) {
				var node = this.treeStack.pop_unsafe();
				var _this = node.aabb;
				if(v.x >= _this.minx && v.x <= _this.maxx && v.y >= _this.miny && v.y <= _this.maxy) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(!ret.has(body)) {
							var tmp;
							if(filter != null) {
								var _this1 = node.shape.filter;
								tmp = (_this1.collisionMask & filter.collisionGroup) != 0 && (filter.collisionMask & _this1.collisionGroup) != 0;
							} else {
								tmp = true;
							}
							if(tmp) {
								if(node.shape.type == 0) {
									if(zpp_$nape_geom_ZPP_$Collide.circleContains(node.shape.circle,v)) {
										ret.push(body);
									}
								} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(node.shape.polygon,v)) {
									ret.push(body);
								}
							}
						}
					} else {
						if(node.child1 != null) {
							this.treeStack.add(node.child1);
						}
						if(node.child2 != null) {
							this.treeStack.add(node.child2);
						}
					}
				}
			}
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		return ret;
	}
});
var zpp_$nape_space_ZPP_$Island = function() {
	this.waket = 0;
	this.sleep = false;
	this.comps = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.comps = new zpp_$nape_util_ZNPList_$ZPP_$Component();
};
zpp_$nape_space_ZPP_$Island.__name__ = true;
zpp_$nape_space_ZPP_$Island.prototype = {
	pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
};
var zpp_$nape_space_ZPP_$Component = function() {
	this.woken = false;
	this.waket = 0;
	this.sleeping = false;
	this.island = null;
	this.constraint = null;
	this.body = null;
	this.isBody = false;
	this.rank = 0;
	this.parent = null;
	this.next = null;
	this.sleeping = false;
	this.island = null;
	this.parent = this;
	this.rank = 0;
	this.woken = false;
};
zpp_$nape_space_ZPP_$Component.__name__ = true;
var zpp_$nape_space_ZPP_$CallbackSet = function() {
	this.lazydel = false;
	this.freed = false;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.int2 = null;
	this.int1 = null;
	this.di = 0;
	this.id = 0;
	this.arbiters = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
};
zpp_$nape_space_ZPP_$CallbackSet.__name__ = true;
zpp_$nape_space_ZPP_$CallbackSet.get = function(i1,i2) {
	var ret;
	if(zpp_$nape_space_ZPP_$CallbackSet.zpp_pool == null) {
		ret = new zpp_$nape_space_ZPP_$CallbackSet();
	} else {
		ret = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
		zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.freed = false;
	ret.lazydel = false;
	ret.COLLISIONstate = 1;
	ret.COLLISIONstamp = 0;
	ret.SENSORstate = 1;
	ret.SENSORstamp = 0;
	ret.FLUIDstate = 1;
	ret.FLUIDstamp = 0;
	if(i1.id < i2.id) {
		ret.int1 = i1;
		ret.int2 = i2;
	} else {
		ret.int1 = i2;
		ret.int2 = i1;
	}
	ret.id = ret.int1.id;
	ret.di = ret.int2.id;
	return ret;
};
zpp_$nape_space_ZPP_$CallbackSet.prototype = {
	remove_arb: function(x) {
		var _this = this.arbiters;
		var pre = null;
		var cur = _this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == x) {
				var old;
				var ret1;
				if(pre == null) {
					old = _this.head;
					ret1 = old.next;
					_this.head = ret1;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,empty_arb: function(type) {
		var retvar;
		retvar = true;
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if((x.type & type) == 0) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				retvar = false;
				break;
			}
		}
		return retvar;
	}
};
var zpp_$nape_space_ZPP_$CbSetManager = function(space) {
	this.space = null;
	this.cbsets = null;
	if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) {
		this.cbsets = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet();
	} else {
		this.cbsets = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = this.cbsets.next;
		this.cbsets.next = null;
	}
	this.cbsets.lt = zpp_$nape_callbacks_ZPP_$CbSet.setlt;
	this.space = space;
};
zpp_$nape_space_ZPP_$CbSetManager.__name__ = true;
zpp_$nape_space_ZPP_$CbSetManager.prototype = {
	get: function(cbTypes) {
		if(cbTypes.head == null) {
			return null;
		}
		var fake;
		if(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool == null) {
			fake = new zpp_$nape_callbacks_ZPP_$CbSet();
		} else {
			fake = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = fake.next;
			fake.next = null;
		}
		var faketypes = fake.cbTypes;
		fake.cbTypes = cbTypes;
		var res = this.cbsets.find_weak(fake);
		var ret;
		if(res != null) {
			ret = res.data;
		} else {
			var set = zpp_$nape_callbacks_ZPP_$CbSet.get(cbTypes);
			this.cbsets.insert(set);
			set.manager = this;
			ret = set;
		}
		fake.cbTypes = faketypes;
		var o = fake;
		o.listeners.clear();
		o.zip_listeners = true;
		o.bodylisteners.clear();
		o.zip_bodylisteners = true;
		o.conlisteners.clear();
		o.zip_conlisteners = true;
		while(o.cbTypes.head != null) {
			var cb = o.cbTypes.pop_unsafe();
			cb.cbsets.remove(o);
		}
		o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
		return ret;
	}
	,remove: function(set) {
		this.cbsets.remove(set);
		while(set.cbpairs.head != null) {
			var pair = set.cbpairs.pop_unsafe();
			if(pair.a != pair.b) {
				if(set == pair.a) {
					pair.b.cbpairs.remove(pair);
				} else {
					pair.a.cbpairs.remove(pair);
				}
			}
			var o = pair;
			o.a = o.b = null;
			o.listeners.clear();
			o.next = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = o;
		}
		set.manager = null;
	}
};
var zpp_$nape_space_ZPP_$Space = function(gravity,broadphase) {
	this.prelisteners = null;
	this.precb = null;
	this.continuous = false;
	this.toiEvents = null;
	this.pre_dt = 0.0;
	this.cbsets = null;
	this.callbackset_list = null;
	this.callbacks = null;
	this.wrap_listeners = null;
	this.listeners = null;
	this.islands = null;
	this.staticsleep = null;
	this.wrap_livecon = null;
	this.live_constraints = null;
	this.wrap_live = null;
	this.live = null;
	this.s_arbiters = null;
	this.f_arbiters = null;
	this.c_arbiters_false = null;
	this.c_arbiters_true = null;
	this.sortcontacts = false;
	this.time = 0.0;
	this.midstep = false;
	this.stamp = 0;
	this.global_ang_drag = 0.0;
	this.global_lin_drag = 0.0;
	this.__static = null;
	this.bphase = null;
	this.kinematics = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_compounds = null;
	this.compounds = null;
	this.wrap_bodies = null;
	this.bodies = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.outer = null;
	this.toiEvents = new zpp_$nape_util_ZNPList_$ZPP_$ToiEvent();
	this.global_lin_drag = 0.015;
	this.global_ang_drag = 0.015;
	zpp_$nape_callbacks_ZPP_$Callback.internal = true;
	this.precb = new nape_callbacks_PreCallback();
	this.precb.zpp_inner = new zpp_$nape_callbacks_ZPP_$Callback();
	zpp_$nape_callbacks_ZPP_$Callback.internal = false;
	this.sortcontacts = true;
	this.pre_dt = 0.0;
	var tmp;
	if(broadphase != null) {
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		tmp = broadphase == zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE;
	} else {
		tmp = true;
	}
	if(tmp) {
		this.bphase = new zpp_$nape_space_ZPP_$DynAABBPhase(this);
	} else {
		if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_$nape_util_ZPP_$Flags.internal = true;
			zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
			zpp_$nape_util_ZPP_$Flags.internal = false;
		}
		if(broadphase == zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE) {
			this.bphase = new zpp_$nape_space_ZPP_$SweepPhase(this);
		}
	}
	this.time = 0.0;
	var me = this;
	if(gravity != null) {
		this.gravityx = gravity.x;
		this.gravityy = gravity.y;
	} else {
		this.gravityx = 0;
		this.gravityy = 0;
	}
	this.bodies = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_bodies = zpp_$nape_util_ZPP_$BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.compounds = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this.wrap_compounds = zpp_$nape_util_ZPP_$CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
	this.kinematics = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.c_arbiters_true = new zpp_$nape_util_ZNPList_$ZPP_$ColArbiter();
	this.c_arbiters_false = new zpp_$nape_util_ZNPList_$ZPP_$ColArbiter();
	this.f_arbiters = new zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter();
	this.s_arbiters = new zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter();
	this.islands = new zpp_$nape_space_ZPP_$Island();
	this.live = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_live = zpp_$nape_util_ZPP_$BodyList.get(this.live,true);
	this.staticsleep = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.live_constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_livecon = zpp_$nape_util_ZPP_$ConstraintList.get(this.live_constraints,true);
	this.__static = zpp_$nape_phys_ZPP_$Body.__static();
	this.__static.zpp_inner.space = this;
	this.callbacks = new zpp_$nape_callbacks_ZPP_$Callback();
	this.midstep = false;
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$Listener();
	this.wrap_listeners = zpp_$nape_util_ZPP_$ListenerList.get(this.listeners);
	this.wrap_listeners.zpp_inner.adder = $bind(this,this.listeners_adder);
	this.wrap_listeners.zpp_inner.subber = $bind(this,this.listeners_subber);
	this.wrap_listeners.zpp_inner._modifiable = $bind(this,this.listeners_modifiable);
	this.callbackset_list = new zpp_$nape_space_ZPP_$CallbackSet();
	this.mrca1 = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.mrca2 = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.prelisteners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.cbsets = new zpp_$nape_space_ZPP_$CbSetManager(this);
};
zpp_$nape_space_ZPP_$Space.__name__ = true;
zpp_$nape_space_ZPP_$Space.prototype = {
	bodies_adder: function(x) {
		if(x.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
		}
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.outer.zpp_inner.wrap_bodies.remove(x);
			}
			this.addBody(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,bodies_subber: function(x) {
		this.remBody(x.zpp_inner);
	}
	,bodies_modifiable: function() {
		if(this.midstep) {
			throw haxe_Exception.thrown("Error: Space::bodies cannot be set during space step()");
		}
	}
	,compounds_adder: function(x) {
		if(x.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of an inner Compound, only the root Compound space can be set");
		}
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.wrap_compounds.remove(x);
			}
			this.addCompound(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,compounds_subber: function(x) {
		this.remCompound(x.zpp_inner);
	}
	,compounds_modifiable: function() {
		if(this.midstep) {
			throw haxe_Exception.thrown("Error: Space::compounds cannot be set during space step()");
		}
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.compound != null) {
			throw haxe_Exception.thrown("Error: Cannot set the space of a Constraint belonging to a Compound, only the root Compound space can be set");
		}
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(x);
			}
			this.addConstraint(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,constraints_subber: function(x) {
		this.remConstraint(x.zpp_inner);
	}
	,constraints_modifiable: function() {
		if(this.midstep) {
			throw haxe_Exception.thrown("Error: Space::constraints cannot be set during space step()");
		}
	}
	,listeners_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(x);
			}
			this.addListener(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,listeners_subber: function(x) {
		this.remListener(x.zpp_inner);
	}
	,listeners_modifiable: function() {
		if(this.midstep) {
			throw haxe_Exception.thrown("Error: Space::listeners cannot be set during space step()");
		}
	}
	,addListener: function(x) {
		x.space = this;
		x.addedToSpace();
		var tmp = x.interaction != null;
	}
	,remListener: function(x) {
		var tmp = x.interaction != null;
		x.removedFromSpace();
		x.space = null;
	}
	,add_callbackset: function(cb) {
		var _this = cb.int1.cbsets;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = cb;
		var temp = ret;
		temp.next = _this.head;
		_this.head = temp;
		_this.modified = true;
		_this.length++;
		var _this = cb.int2.cbsets;
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = cb;
		var temp = ret;
		temp.next = _this.head;
		_this.head = temp;
		_this.modified = true;
		_this.length++;
		var _this = this.callbackset_list;
		cb._inuse = true;
		var temp = cb;
		temp.next = _this.next;
		_this.next = temp;
		_this.modified = true;
		_this.length++;
	}
	,remove_callbackset: function(cb) {
		cb.lazydel = true;
		var _this = cb.int1.cbsets;
		var pre = null;
		var cur = _this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == cb) {
				var old;
				var ret1;
				if(pre == null) {
					old = _this.head;
					ret1 = old.next;
					_this.head = ret1;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		var _this = cb.int2.cbsets;
		var pre = null;
		var cur = _this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == cb) {
				var old;
				var ret1;
				if(pre == null) {
					old = _this.head;
					ret1 = old.next;
					_this.head = ret1;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,transmitType: function(p,new_type) {
		var o = p;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(o.type == 3) {
				o.kinematicDelaySleep = true;
			}
			if(o.component.sleeping) {
				this.really_wake(o,false);
			}
		}
		if(p.type == 2) {
			this.live.remove(p);
		} else if(p.type == 3) {
			this.kinematics.remove(p);
			this.staticsleep.remove(p);
		} else if(p.type == 1) {
			this.staticsleep.remove(p);
		}
		p.type = new_type;
		if(p.type == 3) {
			this.kinematics.add(p);
		}
		if(p.type == 1) {
			this.static_validation(p);
		}
		p.component.sleeping = true;
		var o = p;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(o.type == 3) {
				o.kinematicDelaySleep = true;
			}
			if(o.component.sleeping) {
				this.really_wake(o,true);
			}
		}
	}
	,removed_shape: function(s,deleting) {
		if(deleting == null) {
			deleting = false;
		}
		var _gthis = this;
		var body = s.body;
		if(!deleting) {
			body.wake();
		}
		var pre = null;
		var cx_ite = body.arbiters.head;
		while(cx_ite != null) {
			var xarb = cx_ite.elt;
			var rem = xarb.ws1 == s || xarb.ws2 == s;
			if(rem) {
				if(xarb.present != 0) {
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite1 = this.mrca1.head;
					while(cx_ite1 != null) {
						var i1 = cx_ite1.elt;
						var cx_ite2 = this.mrca2.head;
						while(cx_ite2 != null) {
							var i2 = cx_ite2.elt;
							var cb1 = i1.cbSet;
							var cb2 = i2.cbSet;
							cb1.validate();
							cb2.validate();
							var _this = cb1.manager;
							var ret = null;
							var pairs = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
							var cx_ite3 = pairs.head;
							while(cx_ite3 != null) {
								var p = cx_ite3.elt;
								if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
									ret = p;
									break;
								}
								cx_ite3 = cx_ite3.next;
							}
							if(ret == null) {
								var ret1;
								if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
									ret1 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
								} else {
									ret1 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
									zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.zip_listeners = true;
								if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
									ret1.a = cb1;
									ret1.b = cb2;
								} else {
									ret1.a = cb2;
									ret1.b = cb1;
								}
								ret = ret1;
								cb1.cbpairs.add(ret);
								if(cb2 != cb1) {
									cb2.cbpairs.add(ret);
								}
							}
							if(ret.zip_listeners) {
								ret.zip_listeners = false;
								ret.__validate();
							}
							if(ret.listeners.head == null) {
								cx_ite2 = cx_ite2.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
							callbackset.remove_arb(xarb);
							xarb.present--;
							var _this1 = cb1.manager;
							var ret2 = null;
							var pairs1 = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
							var cx_ite4 = pairs1.head;
							while(cx_ite4 != null) {
								var p1 = cx_ite4.elt;
								if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
									ret2 = p1;
									break;
								}
								cx_ite4 = cx_ite4.next;
							}
							if(ret2 == null) {
								var ret3;
								if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
									ret3 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
								} else {
									ret3 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
									zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret3.next;
									ret3.next = null;
								}
								ret3.zip_listeners = true;
								if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
									ret3.a = cb1;
									ret3.b = cb2;
								} else {
									ret3.a = cb2;
									ret3.b = cb1;
								}
								ret2 = ret3;
								cb1.cbpairs.add(ret2);
								if(cb2 != cb1) {
									cb2.cbpairs.add(ret2);
								}
							}
							if(ret2.zip_listeners) {
								ret2.zip_listeners = false;
								ret2.__validate();
							}
							var cx_ite5 = ret2.listeners.head;
							while(cx_ite5 != null) {
								var x = cx_ite5.elt;
								if(x.event == 1) {
									if((x.itype & xarb.type) != 0 && callbackset.empty_arb(x.itype)) {
										var cb = _gthis.push_callback(x);
										cb.event = 1;
										var o1 = callbackset.int1;
										var o2 = callbackset.int2;
										var tmp;
										var _this2 = x.options1;
										var xs = o1.cbTypes;
										if(_this2.nonemptyintersection(xs,_this2.includes) && !_this2.nonemptyintersection(xs,_this2.excludes)) {
											var _this3 = x.options2;
											var xs1 = o2.cbTypes;
											tmp = _this3.nonemptyintersection(xs1,_this3.includes) && !_this3.nonemptyintersection(xs1,_this3.excludes);
										} else {
											tmp = false;
										}
										if(tmp) {
											cb.int1 = o1;
											cb.int2 = o2;
										} else {
											cb.int1 = o2;
											cb.int2 = o1;
										}
										cb.set = callbackset;
									}
								}
								cx_ite5 = cx_ite5.next;
							}
							if(callbackset.arbiters.head == null) {
								this.remove_callbackset(callbackset);
							}
							cx_ite2 = cx_ite2.next;
						}
						cx_ite1 = cx_ite1.next;
					}
				}
				if(xarb.b1 != body && xarb.b1.type == 2) {
					var o = xarb.b1;
					if(!o.world) {
						o.component.waket = this.stamp + (this.midstep ? 0 : 1);
						if(o.type == 3) {
							o.kinematicDelaySleep = true;
						}
						if(o.component.sleeping) {
							this.really_wake(o,false);
						}
					}
				}
				if(xarb.b2 != body && xarb.b2.type == 2) {
					var o3 = xarb.b2;
					if(!o3.world) {
						o3.component.waket = this.stamp + (this.midstep ? 0 : 1);
						if(o3.type == 3) {
							o3.kinematicDelaySleep = true;
						}
						if(o3.component.sleeping) {
							this.really_wake(o3,false);
						}
					}
				}
				xarb.cleared = true;
				if(body == null || xarb.b2 == body) {
					var _this4 = xarb.b1.arbiters;
					var pre1 = null;
					var cur = _this4.head;
					var ret4 = false;
					while(cur != null) {
						if(cur.elt == xarb) {
							var old;
							var ret5;
							if(pre1 == null) {
								old = _this4.head;
								ret5 = old.next;
								_this4.head = ret5;
								if(_this4.head == null) {
									_this4.pushmod = true;
								}
							} else {
								old = pre1.next;
								ret5 = old.next;
								pre1.next = ret5;
								if(ret5 == null) {
									_this4.pushmod = true;
								}
							}
							var o4 = old;
							o4.elt = null;
							o4.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o4;
							_this4.modified = true;
							_this4.length--;
							_this4.pushmod = true;
							ret4 = true;
							break;
						}
						pre1 = cur;
						cur = cur.next;
					}
				}
				if(body == null || xarb.b1 == body) {
					var _this5 = xarb.b2.arbiters;
					var pre2 = null;
					var cur1 = _this5.head;
					var ret6 = false;
					while(cur1 != null) {
						if(cur1.elt == xarb) {
							var old1;
							var ret7;
							if(pre2 == null) {
								old1 = _this5.head;
								ret7 = old1.next;
								_this5.head = ret7;
								if(_this5.head == null) {
									_this5.pushmod = true;
								}
							} else {
								old1 = pre2.next;
								ret7 = old1.next;
								pre2.next = ret7;
								if(ret7 == null) {
									_this5.pushmod = true;
								}
							}
							var o5 = old1;
							o5.elt = null;
							o5.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o5;
							_this5.modified = true;
							_this5.length--;
							_this5.pushmod = true;
							ret6 = true;
							break;
						}
						pre2 = cur1;
						cur1 = cur1.next;
					}
				}
				if(xarb.pair != null) {
					xarb.pair.arb = null;
					xarb.pair = null;
				}
				xarb.active = false;
				this.f_arbiters.modified = true;
				cx_ite = body.arbiters.erase(pre);
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bphase.remove(s);
		s.removedFromSpace();
	}
	,addConstraint: function(con) {
		con.space = this;
		con.addedToSpace();
		if(con.active) {
			con.component.sleeping = true;
			this.wake_constraint(con,true);
		}
	}
	,remConstraint: function(con) {
		if(con.active) {
			this.wake_constraint(con,true);
			this.live_constraints.remove(con);
		}
		con.removedFromSpace();
		con.space = null;
	}
	,addCompound: function(x) {
		x.space = this;
		x.addedToSpace();
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.addBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite = x.constraints.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.addConstraint(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite = x.compounds.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.addCompound(i);
			cx_ite = cx_ite.next;
		}
	}
	,remCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.remBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite = x.constraints.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.remConstraint(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite = x.compounds.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.remCompound(i);
			cx_ite = cx_ite.next;
		}
		x.removedFromSpace();
		x.space = null;
	}
	,addBody: function(body,flag) {
		if(flag == null) {
			flag = -1;
		}
		body.space = this;
		body.addedToSpace();
		body.component.sleeping = true;
		var o = body;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(o.type == 3) {
				o.kinematicDelaySleep = true;
			}
			if(o.component.sleeping) {
				this.really_wake(o,true);
			}
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			var dontwake = true;
			if(dontwake == null) {
				dontwake = false;
			}
			if(!dontwake) {
				var o = shape.body;
				if(!o.world) {
					o.component.waket = this.stamp + (this.midstep ? 0 : 1);
					if(o.type == 3) {
						o.kinematicDelaySleep = true;
					}
					if(o.component.sleeping) {
						this.really_wake(o,false);
					}
				}
			}
			this.bphase.insert(shape);
			shape.addedToSpace();
			cx_ite = cx_ite.next;
		}
		if(body.type == 1) {
			this.static_validation(body);
		} else if(body.type != 2) {
			if(flag != 3) {
				this.kinematics.add(body);
			}
		}
	}
	,remBody: function(body,flag) {
		if(flag == null) {
			flag = -1;
		}
		if(body.type == 1) {
			var o = body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(o.type == 3) {
					o.kinematicDelaySleep = true;
				}
				if(o.component.sleeping) {
					this.really_wake(o,true);
				}
			}
			this.staticsleep.remove(body);
		} else if(body.type == 2) {
			var o = body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(o.type == 3) {
					o.kinematicDelaySleep = true;
				}
				if(o.component.sleeping) {
					this.really_wake(o,true);
				}
			}
			this.live.remove(body);
		} else {
			if(flag != 3) {
				this.kinematics.remove(body);
			}
			var o = body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(o.type == 3) {
					o.kinematicDelaySleep = true;
				}
				if(o.component.sleeping) {
					this.really_wake(o,true);
				}
			}
			this.staticsleep.remove(body);
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.removed_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		body.removedFromSpace();
		body.space = null;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		return this.bphase.bodiesUnderPoint(x,y,filter,output);
	}
	,push_callback: function(i) {
		var cb;
		if(zpp_$nape_callbacks_ZPP_$Callback.zpp_pool == null) {
			cb = new zpp_$nape_callbacks_ZPP_$Callback();
		} else {
			cb = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool;
			zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = cb.next;
			cb.next = null;
		}
		this.callbacks.push(cb);
		cb.listener = i;
		return cb;
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		var _gthis = this;
		if(this.midstep) {
			throw haxe_Exception.thrown("Error: ... REALLY?? you're going to call space.step() inside of space.step()? COME ON!!");
		}
		this.time += deltaTime;
		this.pre_dt = deltaTime;
		this.midstep = true;
		this.stamp++;
		this.validation();
		this.bphase.broadphase(this,true);
		this.prestep(deltaTime);
		if(this.sortcontacts) {
			var xxlist = this.c_arbiters_false;
			if(xxlist.head != null && xxlist.head.next != null) {
				var head = xxlist.head;
				var tail = null;
				var left = null;
				var right = null;
				var nxt = null;
				var listSize = 1;
				var numMerges;
				var leftSize;
				var rightSize;
				while(true) {
					numMerges = 0;
					left = head;
					head = null;
					tail = head;
					while(left != null) {
						++numMerges;
						right = left;
						leftSize = 0;
						rightSize = listSize;
						while(right != null && leftSize < listSize) {
							++leftSize;
							right = right.next;
						}
						while(leftSize > 0 || rightSize > 0 && right != null) {
							if(leftSize == 0) {
								nxt = right;
								right = right.next;
								--rightSize;
							} else if(rightSize == 0 || right == null) {
								nxt = left;
								left = left.next;
								--leftSize;
							} else if(left.elt.active && right.elt.active ? left.elt.oc1.dist < right.elt.oc1.dist : true) {
								nxt = left;
								left = left.next;
								--leftSize;
							} else {
								nxt = right;
								right = right.next;
								--rightSize;
							}
							if(tail != null) {
								tail.next = nxt;
							} else {
								head = nxt;
							}
							tail = nxt;
						}
						left = right;
					}
					tail.next = null;
					listSize <<= 1;
					if(!(numMerges > 1)) {
						break;
					}
				}
				xxlist.head = head;
				xxlist.modified = true;
				xxlist.pushmod = true;
			}
		}
		this.updateVel(deltaTime);
		this.warmStart();
		this.iterateVel(velocityIterations);
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cx_ite = cx_ite.next;
		}
		this.updatePos(deltaTime);
		this.continuous = true;
		this.continuousCollisions(deltaTime);
		this.continuous = false;
		this.iteratePos(positionIterations);
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			var upos = !(cur.posx == cur.pre_posx && cur.posy == cur.pre_posy);
			var urot = cur.pre_rot != cur.rot;
			if(upos) {
				var cx_ite1 = cur.shapes.head;
				while(cx_ite1 != null) {
					var s = cx_ite1.elt;
					if(s.type == 1) {
						s.polygon.invalidate_gverts();
						s.polygon.invalidate_gaxi();
					}
					s.invalidate_worldCOM();
					cx_ite1 = cx_ite1.next;
				}
				cur.zip_worldCOM = true;
			}
			if(urot) {
				cur.zip_axis = true;
				var cx_ite2 = cur.shapes.head;
				while(cx_ite2 != null) {
					var s1 = cx_ite2.elt;
					if(s1.type == 1) {
						s1.polygon.invalidate_gverts();
						s1.polygon.invalidate_gaxi();
					}
					s1.invalidate_worldCOM();
					cx_ite2 = cx_ite2.next;
				}
				cur.zip_worldCOM = true;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			var upos = !(cur.posx == cur.pre_posx && cur.posy == cur.pre_posy);
			var urot = cur.pre_rot != cur.rot;
			if(upos) {
				var cx_ite1 = cur.shapes.head;
				while(cx_ite1 != null) {
					var s = cx_ite1.elt;
					if(s.type == 1) {
						s.polygon.invalidate_gverts();
						s.polygon.invalidate_gaxi();
					}
					s.invalidate_worldCOM();
					cx_ite1 = cx_ite1.next;
				}
				cur.zip_worldCOM = true;
			}
			if(urot) {
				cur.zip_axis = true;
				var cx_ite2 = cur.shapes.head;
				while(cx_ite2 != null) {
					var s1 = cx_ite2.elt;
					if(s1.type == 1) {
						s1.polygon.invalidate_gverts();
						s1.polygon.invalidate_gaxi();
					}
					s1.invalidate_worldCOM();
					cx_ite2 = cx_ite2.next;
				}
				cur.zip_worldCOM = true;
			}
			cx_ite = cx_ite.next;
		}
		var pre = null;
		var cx_ite = this.staticsleep.head;
		while(cx_ite != null) {
			var b = cx_ite.elt;
			if(b.type != 3 || b.velx == 0 && b.vely == 0 && b.angvel == 0) {
				if(b.kinematicDelaySleep) {
					b.kinematicDelaySleep = false;
					cx_ite = cx_ite.next;
					continue;
				}
				b.component.sleeping = true;
				var _this = this.staticsleep;
				var old;
				var ret;
				if(pre == null) {
					old = _this.head;
					ret = old.next;
					_this.head = ret;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				cx_ite = ret;
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.doForests(deltaTime);
		this.sleepArbiters();
		this.midstep = false;
		var pre = null;
		var cx_ite = this.callbackset_list.next;
		while(cx_ite != null) {
			var set = cx_ite;
			if(set.arbiters.head == null) {
				var _this = this.callbackset_list;
				var old;
				var ret;
				if(pre == null) {
					old = _this.next;
					ret = old.next;
					_this.next = ret;
					if(_this.next == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						_this.pushmod = true;
					}
				}
				old._inuse = false;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				cx_ite = ret;
				var o = set;
				o.int1 = o.int2 = null;
				o.id = o.di = -1;
				o.freed = true;
				o.next = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
				zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = o;
				continue;
			}
			var ret1;
			ret1 = true;
			var cx_ite1 = set.arbiters.head;
			while(cx_ite1 != null) {
				var x = cx_ite1.elt;
				if(x.sleeping) {
					cx_ite1 = cx_ite1.next;
					continue;
				} else {
					ret1 = false;
					break;
				}
			}
			var sleeping = ret1;
			var a = set.int1.cbSet;
			var b = set.int2.cbSet;
			var _this1 = a.manager;
			var ret2 = null;
			var pairs = a.cbpairs.length < b.cbpairs.length ? a.cbpairs : b.cbpairs;
			var cx_ite2 = pairs.head;
			while(cx_ite2 != null) {
				var p = cx_ite2.elt;
				if(p.a == a && p.b == b || p.a == b && p.b == a) {
					ret2 = p;
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
			if(ret2 == null) {
				var ret3;
				if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
					ret3 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
				} else {
					ret3 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
					zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret3.next;
					ret3.next = null;
				}
				ret3.zip_listeners = true;
				if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b)) {
					ret3.a = a;
					ret3.b = b;
				} else {
					ret3.a = b;
					ret3.b = a;
				}
				ret2 = ret3;
				a.cbpairs.add(ret2);
				if(b != a) {
					b.cbpairs.add(ret2);
				}
			}
			if(ret2.zip_listeners) {
				ret2.zip_listeners = false;
				ret2.__validate();
			}
			var cx_ite3 = ret2.listeners.head;
			while(cx_ite3 != null) {
				var x1 = cx_ite3.elt;
				if(x1.event == 6) {
					if((!sleeping || x1.allowSleepingCallbacks) && !set.empty_arb(x1.itype)) {
						var cb = _gthis.push_callback(x1);
						cb.event = 6;
						var o1 = set.int1;
						var o2 = set.int2;
						var tmp;
						var _this2 = x1.options1;
						var xs = o1.cbTypes;
						if(_this2.nonemptyintersection(xs,_this2.includes) && !_this2.nonemptyintersection(xs,_this2.excludes)) {
							var _this3 = x1.options2;
							var xs1 = o2.cbTypes;
							tmp = _this3.nonemptyintersection(xs1,_this3.includes) && !_this3.nonemptyintersection(xs1,_this3.excludes);
						} else {
							tmp = false;
						}
						if(tmp) {
							cb.int1 = o1;
							cb.int2 = o2;
						} else {
							cb.int1 = o2;
							cb.int2 = o1;
						}
						cb.set = set;
					}
				}
				cx_ite3 = cx_ite3.next;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		while(!this.callbacks.empty()) {
			var cb = this.callbacks.pop();
			if(cb.listener.type == 0) {
				var o = cb.listener.body;
				o.handler(cb.wrapper_body());
			} else if(cb.listener.type == 1) {
				var o1 = cb.listener.constraint;
				o1.handler(cb.wrapper_con());
			} else if(cb.listener.type == 2) {
				var o2 = cb.listener.interaction;
				o2.handleri(cb.wrapper_int());
			}
			var o3 = cb;
			o3.int1 = o3.int2 = null;
			o3.body = null;
			o3.constraint = null;
			o3.listener = null;
			if(o3.wrap_arbiters != null) {
				o3.wrap_arbiters.zpp_inner.inner = null;
			}
			o3.set = null;
			o3.next = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool;
			zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = o3;
		}
	}
	,continuousCollisions: function(deltaTime) {
		var MAX_VEL = 2 * Math.PI / deltaTime;
		this.bphase.broadphase(this,false);
		var curTimeAlpha = 0.0;
		while(curTimeAlpha < 1 && this.toiEvents.head != null) {
			var minTOI = null;
			var minTime = 2.0;
			var minKinematic = false;
			var preMin = null;
			var pre = null;
			var cx_ite = this.toiEvents.head;
			while(cx_ite != null) {
				var toi = cx_ite.elt;
				var b1 = toi.s1.body;
				var b2 = toi.s2.body;
				if(b1.sweepFrozen && b2.sweepFrozen) {
					if(toi.toi != 0 && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(toi.s1,toi.s2)) {
						toi.toi = 0;
					} else {
						cx_ite = this.toiEvents.erase(pre);
						var o = toi;
						o.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o;
						continue;
					}
				}
				if(toi.frozen1 != b1.sweepFrozen || toi.frozen2 != b2.sweepFrozen) {
					if(!toi.kinematic) {
						toi.frozen1 = b1.sweepFrozen;
						toi.frozen2 = b2.sweepFrozen;
						if(toi.frozen1) {
							var tmp = toi.s1;
							toi.s1 = toi.s2;
							toi.s2 = tmp;
							toi.frozen1 = false;
							toi.frozen2 = true;
						}
						zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,deltaTime,0,nape_Config.collisionSlopCCD);
						if(toi.toi < 0) {
							cx_ite = this.toiEvents.erase(pre);
							var o1 = toi;
							o1.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o1;
							continue;
						}
					} else {
						cx_ite = this.toiEvents.erase(pre);
						var o2 = toi;
						o2.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o2;
						continue;
					}
				}
				if(toi.toi >= 0 && (toi.toi < minTime || !minKinematic && toi.kinematic)) {
					minTOI = toi;
					minTime = toi.toi;
					minKinematic = toi.kinematic;
					preMin = pre;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			if(minTOI == null) {
				break;
			}
			this.toiEvents.erase(preMin);
			curTimeAlpha = minTOI.toi;
			var b11 = minTOI.s1.body;
			var b21 = minTOI.s2.body;
			if(!b11.sweepFrozen) {
				var dt = curTimeAlpha * deltaTime;
				var delta = dt - b11.sweepTime;
				if(delta != 0) {
					b11.sweepTime = dt;
					var t = delta;
					b11.posx += b11.velx * t;
					b11.posy += b11.vely * t;
					if(b11.angvel != 0) {
						var dr = b11.sweep_angvel * delta;
						b11.rot += dr;
						if(dr * dr > 0.0001) {
							b11.axisx = Math.sin(b11.rot);
							b11.axisy = Math.cos(b11.rot);
						} else {
							var d2 = dr * dr;
							var p = 1 - 0.5 * d2;
							var m = 1 - d2 * d2 / 8;
							var nx = (p * b11.axisx + dr * b11.axisy) * m;
							b11.axisy = (p * b11.axisy - dr * b11.axisx) * m;
							b11.axisx = nx;
						}
					}
				}
				var s = minTOI.s1;
				if(s.type == 0) {
					s.worldCOMx = b11.posx + (b11.axisy * s.localCOMx - b11.axisx * s.localCOMy);
					s.worldCOMy = b11.posy + (s.localCOMx * b11.axisx + s.localCOMy * b11.axisy);
				} else {
					var p1 = s.polygon;
					var li = p1.lverts.next;
					var cx_ite1 = p1.gverts.next;
					while(cx_ite1 != null) {
						var g = cx_ite1;
						var l = li;
						li = li.next;
						g.x = b11.posx + (b11.axisy * l.x - b11.axisx * l.y);
						g.y = b11.posy + (l.x * b11.axisx + l.y * b11.axisy);
						cx_ite1 = cx_ite1.next;
					}
					var ite = p1.edges.head;
					var cx_ite2 = p1.gverts.next;
					var u = cx_ite2;
					cx_ite2 = cx_ite2.next;
					while(cx_ite2 != null) {
						var v = cx_ite2;
						var e = ite.elt;
						ite = ite.next;
						e.gnormx = b11.axisy * e.lnormx - b11.axisx * e.lnormy;
						e.gnormy = e.lnormx * b11.axisx + e.lnormy * b11.axisy;
						e.gprojection = b11.posx * e.gnormx + b11.posy * e.gnormy + e.lprojection;
						e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
						e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
						u = v;
						cx_ite2 = cx_ite2.next;
					}
					var v1 = p1.gverts.next;
					var e1 = ite.elt;
					ite = ite.next;
					e1.gnormx = b11.axisy * e1.lnormx - b11.axisx * e1.lnormy;
					e1.gnormy = e1.lnormx * b11.axisx + e1.lnormy * b11.axisy;
					e1.gprojection = b11.posx * e1.gnormx + b11.posy * e1.gnormy + e1.lprojection;
					e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
					e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
				}
			}
			if(!b21.sweepFrozen) {
				var dt1 = curTimeAlpha * deltaTime;
				var delta1 = dt1 - b21.sweepTime;
				if(delta1 != 0) {
					b21.sweepTime = dt1;
					var t1 = delta1;
					b21.posx += b21.velx * t1;
					b21.posy += b21.vely * t1;
					if(b21.angvel != 0) {
						var dr1 = b21.sweep_angvel * delta1;
						b21.rot += dr1;
						if(dr1 * dr1 > 0.0001) {
							b21.axisx = Math.sin(b21.rot);
							b21.axisy = Math.cos(b21.rot);
						} else {
							var d21 = dr1 * dr1;
							var p2 = 1 - 0.5 * d21;
							var m1 = 1 - d21 * d21 / 8;
							var nx1 = (p2 * b21.axisx + dr1 * b21.axisy) * m1;
							b21.axisy = (p2 * b21.axisy - dr1 * b21.axisx) * m1;
							b21.axisx = nx1;
						}
					}
				}
				var s1 = minTOI.s2;
				if(s1.type == 0) {
					s1.worldCOMx = b21.posx + (b21.axisy * s1.localCOMx - b21.axisx * s1.localCOMy);
					s1.worldCOMy = b21.posy + (s1.localCOMx * b21.axisx + s1.localCOMy * b21.axisy);
				} else {
					var p3 = s1.polygon;
					var li1 = p3.lverts.next;
					var cx_ite3 = p3.gverts.next;
					while(cx_ite3 != null) {
						var g1 = cx_ite3;
						var l1 = li1;
						li1 = li1.next;
						g1.x = b21.posx + (b21.axisy * l1.x - b21.axisx * l1.y);
						g1.y = b21.posy + (l1.x * b21.axisx + l1.y * b21.axisy);
						cx_ite3 = cx_ite3.next;
					}
					var ite1 = p3.edges.head;
					var cx_ite4 = p3.gverts.next;
					var u1 = cx_ite4;
					cx_ite4 = cx_ite4.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var e2 = ite1.elt;
						ite1 = ite1.next;
						e2.gnormx = b21.axisy * e2.lnormx - b21.axisx * e2.lnormy;
						e2.gnormy = e2.lnormx * b21.axisx + e2.lnormy * b21.axisy;
						e2.gprojection = b21.posx * e2.gnormx + b21.posy * e2.gnormy + e2.lprojection;
						e2.tp0 = u1.y * e2.gnormx - u1.x * e2.gnormy;
						e2.tp1 = v2.y * e2.gnormx - v2.x * e2.gnormy;
						u1 = v2;
						cx_ite4 = cx_ite4.next;
					}
					var v3 = p3.gverts.next;
					var e3 = ite1.elt;
					ite1 = ite1.next;
					e3.gnormx = b21.axisy * e3.lnormx - b21.axisx * e3.lnormy;
					e3.gnormy = e3.lnormx * b21.axisx + e3.lnormy * b21.axisy;
					e3.gprojection = b21.posx * e3.gnormx + b21.posy * e3.gnormy + e3.lprojection;
					e3.tp0 = u1.y * e3.gnormx - u1.x * e3.gnormy;
					e3.tp1 = v3.y * e3.gnormx - v3.x * e3.gnormy;
				}
			}
			var wasnull = minTOI.arbiter == null;
			var arb = this.narrowPhase(minTOI.s1,minTOI.s2,true,minTOI.arbiter,true);
			if(arb == null) {
				if(minTOI.arbiter != null && minTOI.arbiter.pair != null) {
					minTOI.arbiter.pair.arb = null;
					minTOI.arbiter.pair = null;
				}
			} else if(!this.presteparb(arb,deltaTime,true)) {
				if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL && (arb.active && (arb.immState & 1) != 0)) {
					var _this = arb.colarb;
					var jx = _this.nx * _this.c1.jnAcc - _this.ny * _this.c1.jtAcc;
					var jy = _this.ny * _this.c1.jnAcc + _this.nx * _this.c1.jtAcc;
					var t2 = _this.b1.imass;
					_this.b1.velx -= jx * t2;
					_this.b1.vely -= jy * t2;
					_this.b1.angvel -= _this.b1.iinertia * (jy * _this.c1.r1x - jx * _this.c1.r1y);
					var t3 = _this.b2.imass;
					_this.b2.velx += jx * t3;
					_this.b2.vely += jy * t3;
					_this.b2.angvel += _this.b2.iinertia * (jy * _this.c1.r2x - jx * _this.c1.r2y);
					if(_this.hc2) {
						var jx1 = _this.nx * _this.c2.jnAcc - _this.ny * _this.c2.jtAcc;
						var jy1 = _this.ny * _this.c2.jnAcc + _this.nx * _this.c2.jtAcc;
						var t4 = _this.b1.imass;
						_this.b1.velx -= jx1 * t4;
						_this.b1.vely -= jy1 * t4;
						_this.b1.angvel -= _this.b1.iinertia * (jy1 * _this.c2.r1x - jx1 * _this.c2.r1y);
						var t5 = _this.b2.imass;
						_this.b2.velx += jx1 * t5;
						_this.b2.vely += jy1 * t5;
						_this.b2.angvel += _this.b2.iinertia * (jy1 * _this.c2.r2x - jx1 * _this.c2.r2y);
					}
					_this.b2.angvel += _this.jrAcc * _this.b2.iinertia;
					_this.b1.angvel -= _this.jrAcc * _this.b1.iinertia;
					var _this1 = arb.colarb;
					var v1x = _this1.k1x + _this1.b2.velx - _this1.c1.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c1.r1y * _this1.b1.angvel);
					var v1y = _this1.k1y + _this1.b2.vely + _this1.c1.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c1.r1x * _this1.b1.angvel);
					var j = (v1y * _this1.nx - v1x * _this1.ny + _this1.surfacex) * _this1.c1.tMass;
					var jMax = _this1.c1.friction * _this1.c1.jnAcc;
					var jOld = _this1.c1.jtAcc;
					var cjAcc = jOld - j;
					if(cjAcc > jMax) {
						cjAcc = jMax;
					} else if(cjAcc < -jMax) {
						cjAcc = -jMax;
					}
					j = cjAcc - jOld;
					_this1.c1.jtAcc = cjAcc;
					var jx2 = -_this1.ny * j;
					var jy2 = _this1.nx * j;
					_this1.b2.velx += jx2 * _this1.b2.imass;
					_this1.b2.vely += jy2 * _this1.b2.imass;
					_this1.b1.velx -= jx2 * _this1.b1.imass;
					_this1.b1.vely -= jy2 * _this1.b1.imass;
					_this1.b2.angvel += _this1.rt1b * j * _this1.b2.iinertia;
					_this1.b1.angvel -= _this1.rt1a * j * _this1.b1.iinertia;
					if(_this1.hc2) {
						var v2x = _this1.k2x + _this1.b2.velx - _this1.c2.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c2.r1y * _this1.b1.angvel);
						var v2y = _this1.k2y + _this1.b2.vely + _this1.c2.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c2.r1x * _this1.b1.angvel);
						j = (v2y * _this1.nx - v2x * _this1.ny + _this1.surfacex) * _this1.c2.tMass;
						jMax = _this1.c2.friction * _this1.c2.jnAcc;
						jOld = _this1.c2.jtAcc;
						cjAcc = jOld - j;
						if(cjAcc > jMax) {
							cjAcc = jMax;
						} else if(cjAcc < -jMax) {
							cjAcc = -jMax;
						}
						j = cjAcc - jOld;
						_this1.c2.jtAcc = cjAcc;
						jx2 = -_this1.ny * j;
						jy2 = _this1.nx * j;
						_this1.b2.velx += jx2 * _this1.b2.imass;
						_this1.b2.vely += jy2 * _this1.b2.imass;
						_this1.b1.velx -= jx2 * _this1.b1.imass;
						_this1.b1.vely -= jy2 * _this1.b1.imass;
						_this1.b2.angvel += _this1.rt2b * j * _this1.b2.iinertia;
						_this1.b1.angvel -= _this1.rt2a * j * _this1.b1.iinertia;
						v1x = _this1.k1x + _this1.b2.velx - _this1.c1.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c1.r1y * _this1.b1.angvel);
						v1y = _this1.k1y + _this1.b2.vely + _this1.c1.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c1.r1x * _this1.b1.angvel);
						v2x = _this1.k2x + _this1.b2.velx - _this1.c2.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c2.r1y * _this1.b1.angvel);
						v2y = _this1.k2y + _this1.b2.vely + _this1.c2.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c2.r1x * _this1.b1.angvel);
						var ax = _this1.c1.jnAcc;
						var ay = _this1.c2.jnAcc;
						var jnx = v1x * _this1.nx + v1y * _this1.ny + _this1.surfacey + _this1.c1.bounce - (_this1.Ka * ax + _this1.Kb * ay);
						var jny = v2x * _this1.nx + v2y * _this1.ny + _this1.surfacey + _this1.c2.bounce - (_this1.Kb * ax + _this1.Kc * ay);
						var xx = -(_this1.kMassa * jnx + _this1.kMassb * jny);
						var xy = -(_this1.kMassb * jnx + _this1.kMassc * jny);
						if(xx >= 0 && xy >= 0) {
							jnx = xx - ax;
							jny = xy - ay;
							_this1.c1.jnAcc = xx;
							_this1.c2.jnAcc = xy;
						} else {
							xx = -_this1.c1.nMass * jnx;
							if(xx >= 0 && _this1.Kb * xx + jny >= 0) {
								jnx = xx - ax;
								jny = -ay;
								_this1.c1.jnAcc = xx;
								_this1.c2.jnAcc = 0;
							} else {
								xy = -_this1.c2.nMass * jny;
								if(xy >= 0 && _this1.Kb * xy + jnx >= 0) {
									jnx = -ax;
									jny = xy - ay;
									_this1.c1.jnAcc = 0;
									_this1.c2.jnAcc = xy;
								} else if(jnx >= 0 && jny >= 0) {
									jnx = -ax;
									jny = -ay;
									_this1.c1.jnAcc = _this1.c2.jnAcc = 0;
								} else {
									jnx = 0;
									jny = 0;
								}
							}
						}
						j = jnx + jny;
						jx2 = _this1.nx * j;
						jy2 = _this1.ny * j;
						_this1.b2.velx += jx2 * _this1.b2.imass;
						_this1.b2.vely += jy2 * _this1.b2.imass;
						_this1.b1.velx -= jx2 * _this1.b1.imass;
						_this1.b1.vely -= jy2 * _this1.b1.imass;
						_this1.b2.angvel += (_this1.rn1b * jnx + _this1.rn2b * jny) * _this1.b2.iinertia;
						_this1.b1.angvel -= (_this1.rn1a * jnx + _this1.rn2a * jny) * _this1.b1.iinertia;
					} else {
						if(_this1.radius != 0.0) {
							var dw = _this1.b2.angvel - _this1.b1.angvel;
							j = dw * _this1.rMass;
							jMax = _this1.rfric * _this1.c1.jnAcc;
							jOld = _this1.jrAcc;
							_this1.jrAcc -= j;
							if(_this1.jrAcc > jMax) {
								_this1.jrAcc = jMax;
							} else if(_this1.jrAcc < -jMax) {
								_this1.jrAcc = -jMax;
							}
							j = _this1.jrAcc - jOld;
							_this1.b2.angvel += j * _this1.b2.iinertia;
							_this1.b1.angvel -= j * _this1.b1.iinertia;
						}
						v1x = _this1.k1x + _this1.b2.velx - _this1.c1.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c1.r1y * _this1.b1.angvel);
						v1y = _this1.k1y + _this1.b2.vely + _this1.c1.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c1.r1x * _this1.b1.angvel);
						j = (_this1.c1.bounce + (_this1.nx * v1x + _this1.ny * v1y) + _this1.surfacey) * _this1.c1.nMass;
						jOld = _this1.c1.jnAcc;
						cjAcc = jOld - j;
						if(cjAcc < 0.0) {
							cjAcc = 0.0;
						}
						j = cjAcc - jOld;
						_this1.c1.jnAcc = cjAcc;
						jx2 = _this1.nx * j;
						jy2 = _this1.ny * j;
						_this1.b2.velx += jx2 * _this1.b2.imass;
						_this1.b2.vely += jy2 * _this1.b2.imass;
						_this1.b1.velx -= jx2 * _this1.b1.imass;
						_this1.b1.vely -= jy2 * _this1.b1.imass;
						_this1.b2.angvel += _this1.rn1b * j * _this1.b2.iinertia;
						_this1.b1.angvel -= _this1.rn1a * j * _this1.b1.iinertia;
					}
					var _this2 = arb.colarb;
					var v1x1 = _this2.k1x + _this2.b2.velx - _this2.c1.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c1.r1y * _this2.b1.angvel);
					var v1y1 = _this2.k1y + _this2.b2.vely + _this2.c1.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c1.r1x * _this2.b1.angvel);
					var j1 = (v1y1 * _this2.nx - v1x1 * _this2.ny + _this2.surfacex) * _this2.c1.tMass;
					var jMax1 = _this2.c1.friction * _this2.c1.jnAcc;
					var jOld1 = _this2.c1.jtAcc;
					var cjAcc1 = jOld1 - j1;
					if(cjAcc1 > jMax1) {
						cjAcc1 = jMax1;
					} else if(cjAcc1 < -jMax1) {
						cjAcc1 = -jMax1;
					}
					j1 = cjAcc1 - jOld1;
					_this2.c1.jtAcc = cjAcc1;
					var jx3 = -_this2.ny * j1;
					var jy3 = _this2.nx * j1;
					_this2.b2.velx += jx3 * _this2.b2.imass;
					_this2.b2.vely += jy3 * _this2.b2.imass;
					_this2.b1.velx -= jx3 * _this2.b1.imass;
					_this2.b1.vely -= jy3 * _this2.b1.imass;
					_this2.b2.angvel += _this2.rt1b * j1 * _this2.b2.iinertia;
					_this2.b1.angvel -= _this2.rt1a * j1 * _this2.b1.iinertia;
					if(_this2.hc2) {
						var v2x1 = _this2.k2x + _this2.b2.velx - _this2.c2.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c2.r1y * _this2.b1.angvel);
						var v2y1 = _this2.k2y + _this2.b2.vely + _this2.c2.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c2.r1x * _this2.b1.angvel);
						j1 = (v2y1 * _this2.nx - v2x1 * _this2.ny + _this2.surfacex) * _this2.c2.tMass;
						jMax1 = _this2.c2.friction * _this2.c2.jnAcc;
						jOld1 = _this2.c2.jtAcc;
						cjAcc1 = jOld1 - j1;
						if(cjAcc1 > jMax1) {
							cjAcc1 = jMax1;
						} else if(cjAcc1 < -jMax1) {
							cjAcc1 = -jMax1;
						}
						j1 = cjAcc1 - jOld1;
						_this2.c2.jtAcc = cjAcc1;
						jx3 = -_this2.ny * j1;
						jy3 = _this2.nx * j1;
						_this2.b2.velx += jx3 * _this2.b2.imass;
						_this2.b2.vely += jy3 * _this2.b2.imass;
						_this2.b1.velx -= jx3 * _this2.b1.imass;
						_this2.b1.vely -= jy3 * _this2.b1.imass;
						_this2.b2.angvel += _this2.rt2b * j1 * _this2.b2.iinertia;
						_this2.b1.angvel -= _this2.rt2a * j1 * _this2.b1.iinertia;
						v1x1 = _this2.k1x + _this2.b2.velx - _this2.c1.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c1.r1y * _this2.b1.angvel);
						v1y1 = _this2.k1y + _this2.b2.vely + _this2.c1.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c1.r1x * _this2.b1.angvel);
						v2x1 = _this2.k2x + _this2.b2.velx - _this2.c2.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c2.r1y * _this2.b1.angvel);
						v2y1 = _this2.k2y + _this2.b2.vely + _this2.c2.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c2.r1x * _this2.b1.angvel);
						var ax1 = _this2.c1.jnAcc;
						var ay1 = _this2.c2.jnAcc;
						var jnx1 = v1x1 * _this2.nx + v1y1 * _this2.ny + _this2.surfacey + _this2.c1.bounce - (_this2.Ka * ax1 + _this2.Kb * ay1);
						var jny1 = v2x1 * _this2.nx + v2y1 * _this2.ny + _this2.surfacey + _this2.c2.bounce - (_this2.Kb * ax1 + _this2.Kc * ay1);
						var xx1 = -(_this2.kMassa * jnx1 + _this2.kMassb * jny1);
						var xy1 = -(_this2.kMassb * jnx1 + _this2.kMassc * jny1);
						if(xx1 >= 0 && xy1 >= 0) {
							jnx1 = xx1 - ax1;
							jny1 = xy1 - ay1;
							_this2.c1.jnAcc = xx1;
							_this2.c2.jnAcc = xy1;
						} else {
							xx1 = -_this2.c1.nMass * jnx1;
							if(xx1 >= 0 && _this2.Kb * xx1 + jny1 >= 0) {
								jnx1 = xx1 - ax1;
								jny1 = -ay1;
								_this2.c1.jnAcc = xx1;
								_this2.c2.jnAcc = 0;
							} else {
								xy1 = -_this2.c2.nMass * jny1;
								if(xy1 >= 0 && _this2.Kb * xy1 + jnx1 >= 0) {
									jnx1 = -ax1;
									jny1 = xy1 - ay1;
									_this2.c1.jnAcc = 0;
									_this2.c2.jnAcc = xy1;
								} else if(jnx1 >= 0 && jny1 >= 0) {
									jnx1 = -ax1;
									jny1 = -ay1;
									_this2.c1.jnAcc = _this2.c2.jnAcc = 0;
								} else {
									jnx1 = 0;
									jny1 = 0;
								}
							}
						}
						j1 = jnx1 + jny1;
						jx3 = _this2.nx * j1;
						jy3 = _this2.ny * j1;
						_this2.b2.velx += jx3 * _this2.b2.imass;
						_this2.b2.vely += jy3 * _this2.b2.imass;
						_this2.b1.velx -= jx3 * _this2.b1.imass;
						_this2.b1.vely -= jy3 * _this2.b1.imass;
						_this2.b2.angvel += (_this2.rn1b * jnx1 + _this2.rn2b * jny1) * _this2.b2.iinertia;
						_this2.b1.angvel -= (_this2.rn1a * jnx1 + _this2.rn2a * jny1) * _this2.b1.iinertia;
					} else {
						if(_this2.radius != 0.0) {
							var dw1 = _this2.b2.angvel - _this2.b1.angvel;
							j1 = dw1 * _this2.rMass;
							jMax1 = _this2.rfric * _this2.c1.jnAcc;
							jOld1 = _this2.jrAcc;
							_this2.jrAcc -= j1;
							if(_this2.jrAcc > jMax1) {
								_this2.jrAcc = jMax1;
							} else if(_this2.jrAcc < -jMax1) {
								_this2.jrAcc = -jMax1;
							}
							j1 = _this2.jrAcc - jOld1;
							_this2.b2.angvel += j1 * _this2.b2.iinertia;
							_this2.b1.angvel -= j1 * _this2.b1.iinertia;
						}
						v1x1 = _this2.k1x + _this2.b2.velx - _this2.c1.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c1.r1y * _this2.b1.angvel);
						v1y1 = _this2.k1y + _this2.b2.vely + _this2.c1.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c1.r1x * _this2.b1.angvel);
						j1 = (_this2.c1.bounce + (_this2.nx * v1x1 + _this2.ny * v1y1) + _this2.surfacey) * _this2.c1.nMass;
						jOld1 = _this2.c1.jnAcc;
						cjAcc1 = jOld1 - j1;
						if(cjAcc1 < 0.0) {
							cjAcc1 = 0.0;
						}
						j1 = cjAcc1 - jOld1;
						_this2.c1.jnAcc = cjAcc1;
						jx3 = _this2.nx * j1;
						jy3 = _this2.ny * j1;
						_this2.b2.velx += jx3 * _this2.b2.imass;
						_this2.b2.vely += jy3 * _this2.b2.imass;
						_this2.b1.velx -= jx3 * _this2.b1.imass;
						_this2.b1.vely -= jy3 * _this2.b1.imass;
						_this2.b2.angvel += _this2.rn1b * j1 * _this2.b2.iinertia;
						_this2.b1.angvel -= _this2.rn1a * j1 * _this2.b1.iinertia;
					}
					var _this3 = arb.colarb;
					var v1x2 = _this3.k1x + _this3.b2.velx - _this3.c1.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c1.r1y * _this3.b1.angvel);
					var v1y2 = _this3.k1y + _this3.b2.vely + _this3.c1.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c1.r1x * _this3.b1.angvel);
					var j2 = (v1y2 * _this3.nx - v1x2 * _this3.ny + _this3.surfacex) * _this3.c1.tMass;
					var jMax2 = _this3.c1.friction * _this3.c1.jnAcc;
					var jOld2 = _this3.c1.jtAcc;
					var cjAcc2 = jOld2 - j2;
					if(cjAcc2 > jMax2) {
						cjAcc2 = jMax2;
					} else if(cjAcc2 < -jMax2) {
						cjAcc2 = -jMax2;
					}
					j2 = cjAcc2 - jOld2;
					_this3.c1.jtAcc = cjAcc2;
					var jx4 = -_this3.ny * j2;
					var jy4 = _this3.nx * j2;
					_this3.b2.velx += jx4 * _this3.b2.imass;
					_this3.b2.vely += jy4 * _this3.b2.imass;
					_this3.b1.velx -= jx4 * _this3.b1.imass;
					_this3.b1.vely -= jy4 * _this3.b1.imass;
					_this3.b2.angvel += _this3.rt1b * j2 * _this3.b2.iinertia;
					_this3.b1.angvel -= _this3.rt1a * j2 * _this3.b1.iinertia;
					if(_this3.hc2) {
						var v2x2 = _this3.k2x + _this3.b2.velx - _this3.c2.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c2.r1y * _this3.b1.angvel);
						var v2y2 = _this3.k2y + _this3.b2.vely + _this3.c2.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c2.r1x * _this3.b1.angvel);
						j2 = (v2y2 * _this3.nx - v2x2 * _this3.ny + _this3.surfacex) * _this3.c2.tMass;
						jMax2 = _this3.c2.friction * _this3.c2.jnAcc;
						jOld2 = _this3.c2.jtAcc;
						cjAcc2 = jOld2 - j2;
						if(cjAcc2 > jMax2) {
							cjAcc2 = jMax2;
						} else if(cjAcc2 < -jMax2) {
							cjAcc2 = -jMax2;
						}
						j2 = cjAcc2 - jOld2;
						_this3.c2.jtAcc = cjAcc2;
						jx4 = -_this3.ny * j2;
						jy4 = _this3.nx * j2;
						_this3.b2.velx += jx4 * _this3.b2.imass;
						_this3.b2.vely += jy4 * _this3.b2.imass;
						_this3.b1.velx -= jx4 * _this3.b1.imass;
						_this3.b1.vely -= jy4 * _this3.b1.imass;
						_this3.b2.angvel += _this3.rt2b * j2 * _this3.b2.iinertia;
						_this3.b1.angvel -= _this3.rt2a * j2 * _this3.b1.iinertia;
						v1x2 = _this3.k1x + _this3.b2.velx - _this3.c1.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c1.r1y * _this3.b1.angvel);
						v1y2 = _this3.k1y + _this3.b2.vely + _this3.c1.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c1.r1x * _this3.b1.angvel);
						v2x2 = _this3.k2x + _this3.b2.velx - _this3.c2.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c2.r1y * _this3.b1.angvel);
						v2y2 = _this3.k2y + _this3.b2.vely + _this3.c2.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c2.r1x * _this3.b1.angvel);
						var ax2 = _this3.c1.jnAcc;
						var ay2 = _this3.c2.jnAcc;
						var jnx2 = v1x2 * _this3.nx + v1y2 * _this3.ny + _this3.surfacey + _this3.c1.bounce - (_this3.Ka * ax2 + _this3.Kb * ay2);
						var jny2 = v2x2 * _this3.nx + v2y2 * _this3.ny + _this3.surfacey + _this3.c2.bounce - (_this3.Kb * ax2 + _this3.Kc * ay2);
						var xx2 = -(_this3.kMassa * jnx2 + _this3.kMassb * jny2);
						var xy2 = -(_this3.kMassb * jnx2 + _this3.kMassc * jny2);
						if(xx2 >= 0 && xy2 >= 0) {
							jnx2 = xx2 - ax2;
							jny2 = xy2 - ay2;
							_this3.c1.jnAcc = xx2;
							_this3.c2.jnAcc = xy2;
						} else {
							xx2 = -_this3.c1.nMass * jnx2;
							if(xx2 >= 0 && _this3.Kb * xx2 + jny2 >= 0) {
								jnx2 = xx2 - ax2;
								jny2 = -ay2;
								_this3.c1.jnAcc = xx2;
								_this3.c2.jnAcc = 0;
							} else {
								xy2 = -_this3.c2.nMass * jny2;
								if(xy2 >= 0 && _this3.Kb * xy2 + jnx2 >= 0) {
									jnx2 = -ax2;
									jny2 = xy2 - ay2;
									_this3.c1.jnAcc = 0;
									_this3.c2.jnAcc = xy2;
								} else if(jnx2 >= 0 && jny2 >= 0) {
									jnx2 = -ax2;
									jny2 = -ay2;
									_this3.c1.jnAcc = _this3.c2.jnAcc = 0;
								} else {
									jnx2 = 0;
									jny2 = 0;
								}
							}
						}
						j2 = jnx2 + jny2;
						jx4 = _this3.nx * j2;
						jy4 = _this3.ny * j2;
						_this3.b2.velx += jx4 * _this3.b2.imass;
						_this3.b2.vely += jy4 * _this3.b2.imass;
						_this3.b1.velx -= jx4 * _this3.b1.imass;
						_this3.b1.vely -= jy4 * _this3.b1.imass;
						_this3.b2.angvel += (_this3.rn1b * jnx2 + _this3.rn2b * jny2) * _this3.b2.iinertia;
						_this3.b1.angvel -= (_this3.rn1a * jnx2 + _this3.rn2a * jny2) * _this3.b1.iinertia;
					} else {
						if(_this3.radius != 0.0) {
							var dw2 = _this3.b2.angvel - _this3.b1.angvel;
							j2 = dw2 * _this3.rMass;
							jMax2 = _this3.rfric * _this3.c1.jnAcc;
							jOld2 = _this3.jrAcc;
							_this3.jrAcc -= j2;
							if(_this3.jrAcc > jMax2) {
								_this3.jrAcc = jMax2;
							} else if(_this3.jrAcc < -jMax2) {
								_this3.jrAcc = -jMax2;
							}
							j2 = _this3.jrAcc - jOld2;
							_this3.b2.angvel += j2 * _this3.b2.iinertia;
							_this3.b1.angvel -= j2 * _this3.b1.iinertia;
						}
						v1x2 = _this3.k1x + _this3.b2.velx - _this3.c1.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c1.r1y * _this3.b1.angvel);
						v1y2 = _this3.k1y + _this3.b2.vely + _this3.c1.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c1.r1x * _this3.b1.angvel);
						j2 = (_this3.c1.bounce + (_this3.nx * v1x2 + _this3.ny * v1y2) + _this3.surfacey) * _this3.c1.nMass;
						jOld2 = _this3.c1.jnAcc;
						cjAcc2 = jOld2 - j2;
						if(cjAcc2 < 0.0) {
							cjAcc2 = 0.0;
						}
						j2 = cjAcc2 - jOld2;
						_this3.c1.jnAcc = cjAcc2;
						jx4 = _this3.nx * j2;
						jy4 = _this3.ny * j2;
						_this3.b2.velx += jx4 * _this3.b2.imass;
						_this3.b2.vely += jy4 * _this3.b2.imass;
						_this3.b1.velx -= jx4 * _this3.b1.imass;
						_this3.b1.vely -= jy4 * _this3.b1.imass;
						_this3.b2.angvel += _this3.rn1b * j2 * _this3.b2.iinertia;
						_this3.b1.angvel -= _this3.rn1a * j2 * _this3.b1.iinertia;
					}
					var _this4 = arb.colarb;
					var v1x3 = _this4.k1x + _this4.b2.velx - _this4.c1.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c1.r1y * _this4.b1.angvel);
					var v1y3 = _this4.k1y + _this4.b2.vely + _this4.c1.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c1.r1x * _this4.b1.angvel);
					var j3 = (v1y3 * _this4.nx - v1x3 * _this4.ny + _this4.surfacex) * _this4.c1.tMass;
					var jMax3 = _this4.c1.friction * _this4.c1.jnAcc;
					var jOld3 = _this4.c1.jtAcc;
					var cjAcc3 = jOld3 - j3;
					if(cjAcc3 > jMax3) {
						cjAcc3 = jMax3;
					} else if(cjAcc3 < -jMax3) {
						cjAcc3 = -jMax3;
					}
					j3 = cjAcc3 - jOld3;
					_this4.c1.jtAcc = cjAcc3;
					var jx5 = -_this4.ny * j3;
					var jy5 = _this4.nx * j3;
					_this4.b2.velx += jx5 * _this4.b2.imass;
					_this4.b2.vely += jy5 * _this4.b2.imass;
					_this4.b1.velx -= jx5 * _this4.b1.imass;
					_this4.b1.vely -= jy5 * _this4.b1.imass;
					_this4.b2.angvel += _this4.rt1b * j3 * _this4.b2.iinertia;
					_this4.b1.angvel -= _this4.rt1a * j3 * _this4.b1.iinertia;
					if(_this4.hc2) {
						var v2x3 = _this4.k2x + _this4.b2.velx - _this4.c2.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c2.r1y * _this4.b1.angvel);
						var v2y3 = _this4.k2y + _this4.b2.vely + _this4.c2.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c2.r1x * _this4.b1.angvel);
						j3 = (v2y3 * _this4.nx - v2x3 * _this4.ny + _this4.surfacex) * _this4.c2.tMass;
						jMax3 = _this4.c2.friction * _this4.c2.jnAcc;
						jOld3 = _this4.c2.jtAcc;
						cjAcc3 = jOld3 - j3;
						if(cjAcc3 > jMax3) {
							cjAcc3 = jMax3;
						} else if(cjAcc3 < -jMax3) {
							cjAcc3 = -jMax3;
						}
						j3 = cjAcc3 - jOld3;
						_this4.c2.jtAcc = cjAcc3;
						jx5 = -_this4.ny * j3;
						jy5 = _this4.nx * j3;
						_this4.b2.velx += jx5 * _this4.b2.imass;
						_this4.b2.vely += jy5 * _this4.b2.imass;
						_this4.b1.velx -= jx5 * _this4.b1.imass;
						_this4.b1.vely -= jy5 * _this4.b1.imass;
						_this4.b2.angvel += _this4.rt2b * j3 * _this4.b2.iinertia;
						_this4.b1.angvel -= _this4.rt2a * j3 * _this4.b1.iinertia;
						v1x3 = _this4.k1x + _this4.b2.velx - _this4.c1.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c1.r1y * _this4.b1.angvel);
						v1y3 = _this4.k1y + _this4.b2.vely + _this4.c1.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c1.r1x * _this4.b1.angvel);
						v2x3 = _this4.k2x + _this4.b2.velx - _this4.c2.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c2.r1y * _this4.b1.angvel);
						v2y3 = _this4.k2y + _this4.b2.vely + _this4.c2.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c2.r1x * _this4.b1.angvel);
						var ax3 = _this4.c1.jnAcc;
						var ay3 = _this4.c2.jnAcc;
						var jnx3 = v1x3 * _this4.nx + v1y3 * _this4.ny + _this4.surfacey + _this4.c1.bounce - (_this4.Ka * ax3 + _this4.Kb * ay3);
						var jny3 = v2x3 * _this4.nx + v2y3 * _this4.ny + _this4.surfacey + _this4.c2.bounce - (_this4.Kb * ax3 + _this4.Kc * ay3);
						var xx3 = -(_this4.kMassa * jnx3 + _this4.kMassb * jny3);
						var xy3 = -(_this4.kMassb * jnx3 + _this4.kMassc * jny3);
						if(xx3 >= 0 && xy3 >= 0) {
							jnx3 = xx3 - ax3;
							jny3 = xy3 - ay3;
							_this4.c1.jnAcc = xx3;
							_this4.c2.jnAcc = xy3;
						} else {
							xx3 = -_this4.c1.nMass * jnx3;
							if(xx3 >= 0 && _this4.Kb * xx3 + jny3 >= 0) {
								jnx3 = xx3 - ax3;
								jny3 = -ay3;
								_this4.c1.jnAcc = xx3;
								_this4.c2.jnAcc = 0;
							} else {
								xy3 = -_this4.c2.nMass * jny3;
								if(xy3 >= 0 && _this4.Kb * xy3 + jnx3 >= 0) {
									jnx3 = -ax3;
									jny3 = xy3 - ay3;
									_this4.c1.jnAcc = 0;
									_this4.c2.jnAcc = xy3;
								} else if(jnx3 >= 0 && jny3 >= 0) {
									jnx3 = -ax3;
									jny3 = -ay3;
									_this4.c1.jnAcc = _this4.c2.jnAcc = 0;
								} else {
									jnx3 = 0;
									jny3 = 0;
								}
							}
						}
						j3 = jnx3 + jny3;
						jx5 = _this4.nx * j3;
						jy5 = _this4.ny * j3;
						_this4.b2.velx += jx5 * _this4.b2.imass;
						_this4.b2.vely += jy5 * _this4.b2.imass;
						_this4.b1.velx -= jx5 * _this4.b1.imass;
						_this4.b1.vely -= jy5 * _this4.b1.imass;
						_this4.b2.angvel += (_this4.rn1b * jnx3 + _this4.rn2b * jny3) * _this4.b2.iinertia;
						_this4.b1.angvel -= (_this4.rn1a * jnx3 + _this4.rn2a * jny3) * _this4.b1.iinertia;
					} else {
						if(_this4.radius != 0.0) {
							var dw3 = _this4.b2.angvel - _this4.b1.angvel;
							j3 = dw3 * _this4.rMass;
							jMax3 = _this4.rfric * _this4.c1.jnAcc;
							jOld3 = _this4.jrAcc;
							_this4.jrAcc -= j3;
							if(_this4.jrAcc > jMax3) {
								_this4.jrAcc = jMax3;
							} else if(_this4.jrAcc < -jMax3) {
								_this4.jrAcc = -jMax3;
							}
							j3 = _this4.jrAcc - jOld3;
							_this4.b2.angvel += j3 * _this4.b2.iinertia;
							_this4.b1.angvel -= j3 * _this4.b1.iinertia;
						}
						v1x3 = _this4.k1x + _this4.b2.velx - _this4.c1.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c1.r1y * _this4.b1.angvel);
						v1y3 = _this4.k1y + _this4.b2.vely + _this4.c1.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c1.r1x * _this4.b1.angvel);
						j3 = (_this4.c1.bounce + (_this4.nx * v1x3 + _this4.ny * v1y3) + _this4.surfacey) * _this4.c1.nMass;
						jOld3 = _this4.c1.jnAcc;
						cjAcc3 = jOld3 - j3;
						if(cjAcc3 < 0.0) {
							cjAcc3 = 0.0;
						}
						j3 = cjAcc3 - jOld3;
						_this4.c1.jnAcc = cjAcc3;
						jx5 = _this4.nx * j3;
						jy5 = _this4.ny * j3;
						_this4.b2.velx += jx5 * _this4.b2.imass;
						_this4.b2.vely += jy5 * _this4.b2.imass;
						_this4.b1.velx -= jx5 * _this4.b1.imass;
						_this4.b1.vely -= jy5 * _this4.b1.imass;
						_this4.b2.angvel += _this4.rn1b * j3 * _this4.b2.iinertia;
						_this4.b1.angvel -= _this4.rn1a * j3 * _this4.b1.iinertia;
					}
					b11.sweep_angvel = b11.angvel % MAX_VEL;
					b21.sweep_angvel = b21.angvel % MAX_VEL;
				}
			}
			if(arb != null && (arb.active && (arb.immState & 1) != 0) && arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				if(!b11.sweepFrozen && b11.type != 3) {
					b11.sweepFrozen = true;
					if(minTOI.failed) {
						b11.angvel = b11.sweep_angvel = 0;
					} else if(minTOI.slipped) {
						var b12 = b11;
						b12.sweep_angvel *= nape_Config.angularCCDSlipScale;
						b11.angvel = b12.sweep_angvel;
					} else {
						b11.angvel = b11.sweep_angvel;
					}
				}
				if(!b21.sweepFrozen && b21.type != 3) {
					b21.sweepFrozen = true;
					if(minTOI.failed) {
						b21.angvel = b21.sweep_angvel = 0;
					} else if(minTOI.slipped) {
						var b22 = b21;
						b22.sweep_angvel *= nape_Config.angularCCDSlipScale;
						b21.angvel = b22.sweep_angvel;
					} else {
						b21.angvel = b21.sweep_angvel;
					}
				}
			}
			var o3 = minTOI;
			o3.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o3;
		}
		while(this.toiEvents.head != null) {
			var toi = this.toiEvents.pop_unsafe();
			var o = toi;
			o.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o;
		}
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			var delta = deltaTime - cur.sweepTime;
			if(delta != 0) {
				cur.sweepTime = deltaTime;
				var t = delta;
				cur.posx += cur.velx * t;
				cur.posy += cur.vely * t;
				if(cur.angvel != 0) {
					var dr = cur.sweep_angvel * delta;
					cur.rot += dr;
					if(dr * dr > 0.0001) {
						cur.axisx = Math.sin(cur.rot);
						cur.axisy = Math.cos(cur.rot);
					} else {
						var d2 = dr * dr;
						var p = 1 - 0.5 * d2;
						var m = 1 - d2 * d2 / 8;
						var nx = (p * cur.axisx + dr * cur.axisy) * m;
						cur.axisy = (p * cur.axisy - dr * cur.axisx) * m;
						cur.axisx = nx;
					}
				}
			}
			cur.sweepTime = 0;
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			if(!cur.sweepFrozen) {
				var delta = deltaTime - cur.sweepTime;
				if(delta != 0) {
					cur.sweepTime = deltaTime;
					var t = delta;
					cur.posx += cur.velx * t;
					cur.posy += cur.vely * t;
					if(cur.angvel != 0) {
						var dr = cur.sweep_angvel * delta;
						cur.rot += dr;
						if(dr * dr > 0.0001) {
							cur.axisx = Math.sin(cur.rot);
							cur.axisy = Math.cos(cur.rot);
						} else {
							var d2 = dr * dr;
							var p = 1 - 0.5 * d2;
							var m = 1 - d2 * d2 / 8;
							var nx = (p * cur.axisx + dr * cur.axisy) * m;
							cur.axisy = (p * cur.axisy - dr * cur.axisx) * m;
							cur.axisx = nx;
						}
					}
				}
			}
			cur.sweepTime = 0;
			cx_ite = cx_ite.next;
		}
	}
	,continuousEvent: function(s1,s2,stat,in_arb,_) {
		if(s1.body.sweepFrozen && s2.body.sweepFrozen) {
			return in_arb;
		}
		if(s1.body.disableCCD || s2.body.disableCCD) {
			return in_arb;
		}
		var tmp;
		if(!(in_arb != null && in_arb.colarb == null)) {
			var b1 = s1.body;
			var b2 = s2.body;
			var con_ignore;
			con_ignore = false;
			var cx_ite = b1.constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(con.ignore && con.pair_exists(b1.id,b2.id)) {
					con_ignore = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
			var tmp1;
			var tmp2;
			if(!con_ignore) {
				var cur = s1;
				while(cur != null && cur.group == null) if(cur.ishape != null) {
					cur = cur.ishape.body;
				} else if(cur.icompound != null) {
					cur = cur.icompound.compound;
				} else {
					cur = cur.ibody.compound;
				}
				var g1 = cur == null ? null : cur.group;
				var tmp3;
				if(g1 == null) {
					tmp3 = false;
				} else {
					var cur = s2;
					while(cur != null && cur.group == null) if(cur.ishape != null) {
						cur = cur.ishape.body;
					} else if(cur.icompound != null) {
						cur = cur.icompound.compound;
					} else {
						cur = cur.ibody.compound;
					}
					var g2 = cur == null ? null : cur.group;
					if(g2 == null) {
						tmp3 = false;
					} else {
						var ret = false;
						while(g1 != null && g2 != null) {
							if(g1 == g2) {
								ret = g1.ignore;
								break;
							}
							if(g1.depth < g2.depth) {
								g2 = g2.group;
							} else {
								g1 = g1.group;
							}
						}
						tmp3 = ret;
					}
				}
				tmp2 = !tmp3;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				var tmp2;
				if(s1.sensorEnabled || s2.sensorEnabled) {
					var _this = s1.filter;
					var x = s2.filter;
					tmp2 = (_this.sensorMask & x.sensorGroup) != 0 && (x.sensorMask & _this.sensorGroup) != 0;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = 2;
				} else {
					var tmp2;
					if(s1.fluidEnabled || s2.fluidEnabled) {
						var _this = s1.filter;
						var x = s2.filter;
						tmp2 = (_this.fluidMask & x.fluidGroup) != 0 && (x.fluidMask & _this.fluidGroup) != 0;
					} else {
						tmp2 = false;
					}
					if(tmp2 && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) {
						tmp1 = 0;
					} else {
						var _this = s1.filter;
						var x = s2.filter;
						tmp1 = (_this.collisionMask & x.collisionGroup) != 0 && (x.collisionMask & _this.collisionGroup) != 0 && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0) ? 1 : -1;
					}
				}
			} else {
				tmp1 = -1;
			}
			tmp = tmp1 <= 0;
		} else {
			tmp = true;
		}
		if(tmp) {
			return in_arb;
		}
		var b1 = s1.body;
		var b2 = s2.body;
		if(stat || b1.bullet || b2.bullet) {
			var toi;
			if(zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool == null) {
				toi = new zpp_$nape_geom_ZPP_$ToiEvent();
			} else {
				toi = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
				zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi.next;
				toi.next = null;
			}
			toi.failed = false;
			toi.s1 = toi.s2 = null;
			toi.arbiter = null;
			var kin = b1.type == 3 || b2.type == 3;
			if(stat && !kin) {
				if(s1.body.type != 2) {
					toi.s2 = s1;
					toi.s1 = s2;
				} else {
					toi.s1 = s1;
					toi.s2 = s2;
				}
				toi.kinematic = false;
				zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
			} else {
				toi.s1 = s1;
				toi.s2 = s2;
				toi.kinematic = kin;
				if(toi.s1.body.sweepFrozen || toi.s2.body.sweepFrozen) {
					if(toi.s1.body.sweepFrozen) {
						var tmp = toi.s1;
						toi.s1 = toi.s2;
						toi.s2 = tmp;
						toi.frozen1 = false;
						toi.frozen2 = true;
					}
					zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
				} else {
					zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
				}
			}
			if(stat && toi.toi < 0 || toi.failed) {
				var o = toi;
				o.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
				zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o;
			} else {
				this.toiEvents.add(toi);
				toi.frozen1 = toi.s1.body.sweepFrozen;
				toi.frozen2 = toi.s2.body.sweepFrozen;
				toi.arbiter = in_arb != null ? in_arb.colarb : null;
			}
		}
		return in_arb;
	}
	,bodyCbWake: function(b) {
		if(b.type == 2 && b.cbSet != null) {
			if(this.midstep) {
				var cx_ite = b.cbSet.bodylisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != 2) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = 2;
					cb.body = b;
					cx_ite = cx_ite.next;
				}
			} else {
				b.component.woken = true;
			}
		}
	}
	,bodyCbSleep: function(b) {
		if(b.type == 2 && b.cbSet != null) {
			var cx_ite = b.cbSet.bodylisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != 3) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 3;
				cb.body = b;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbWake: function(con) {
		if(con.cbSet != null) {
			if(this.midstep) {
				var cx_ite = con.cbSet.conlisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != 2) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = 2;
					cb.constraint = con;
					cx_ite = cx_ite.next;
				}
			} else {
				con.component.woken = true;
			}
		}
	}
	,constraintCbSleep: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != 3) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 3;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbBreak: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != 4) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 4;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,nullListenerType: function(cb1,cb2) {
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite = cb2.interactors.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				stack.add(i);
				cx_ite = cx_ite.next;
			}
		}
		while(stack.head != null) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite = comp.bodies.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					stack.add(i);
					cx_ite = cx_ite.next;
				}
				var cx_ite1 = comp.compounds.head;
				while(cx_ite1 != null) {
					var i1 = cx_ite1.elt;
					stack.add(i1);
					cx_ite1 = cx_ite1.next;
				}
			} else {
				var xbody = intx.ibody != null ? intx.ibody : intx.ishape.body;
				var xshp = intx.ishape != null ? intx.ishape : null;
				var cx_ite2 = xbody.arbiters.head;
				while(cx_ite2 != null) {
					var xarb = cx_ite2.elt;
					if(xarb.present == 0) {
						cx_ite2 = cx_ite2.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite2 = cx_ite2.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite3 = this.mrca1.head;
					while(cx_ite3 != null) {
						var i11 = cx_ite3.elt;
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite3 = cx_ite3.next;
							continue;
						}
						var cx_ite4 = this.mrca2.head;
						while(cx_ite4 != null) {
							var i2 = cx_ite4.elt;
							if(i11.cbSet == cb1 && i2.cbSet != cb2 || i11.cbSet == cb2 && i2.cbSet != cb1) {
								cx_ite4 = cx_ite4.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i11,i2);
							if(callbackset != null) {
								while(callbackset.arbiters.head != null) {
									var arb = callbackset.arbiters.pop_unsafe();
									arb.present--;
								}
								this.remove_callbackset(callbackset);
							}
							cx_ite4 = cx_ite4.next;
						}
						cx_ite3 = cx_ite3.next;
					}
					cx_ite2 = cx_ite2.next;
				}
			}
		}
	}
	,nullInteractorType: function(intx,me) {
		if(me == null) {
			me = intx;
		}
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.nullInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite = comp.compounds.head;
			while(cx_ite != null) {
				var comp = cx_ite.elt;
				this.nullInteractorType(comp,me);
				cx_ite = cx_ite.next;
			}
		} else {
			var xbody = intx.ibody != null ? intx.ibody : intx.ishape.body;
			var xshp = intx.ishape != null ? intx.ishape : null;
			var cx_ite = xbody.arbiters.head;
			while(cx_ite != null) {
				var xarb = cx_ite.elt;
				if(xarb.present == 0) {
					cx_ite = cx_ite.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite = cx_ite.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite1 = this.mrca1.head;
				while(cx_ite1 != null) {
					var i1 = cx_ite1.elt;
					var cx_ite2 = this.mrca2.head;
					while(cx_ite2 != null) {
						var i2 = cx_ite2.elt;
						if(i1 != me && i2 != me) {
							cx_ite2 = cx_ite2.next;
							continue;
						}
						var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
						if(callbackset != null) {
							xarb.present--;
							callbackset.remove_arb(xarb);
							if(callbackset.arbiters.head == null) {
								this.remove_callbackset(callbackset);
							}
						}
						cx_ite2 = cx_ite2.next;
					}
					cx_ite1 = cx_ite1.next;
				}
				cx_ite = cx_ite.next;
			}
		}
	}
	,freshListenerType: function(cb1,cb2) {
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite = cb2.interactors.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				stack.add(i);
				cx_ite = cx_ite.next;
			}
		}
		while(stack.head != null) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite = comp.bodies.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					stack.add(i);
					cx_ite = cx_ite.next;
				}
				var cx_ite1 = comp.compounds.head;
				while(cx_ite1 != null) {
					var i1 = cx_ite1.elt;
					stack.add(i1);
					cx_ite1 = cx_ite1.next;
				}
			} else {
				var xbody = intx.ibody != null ? intx.ibody : intx.ishape.body;
				var xshp = intx.ishape != null ? intx.ishape : null;
				var cx_ite2 = xbody.arbiters.head;
				while(cx_ite2 != null) {
					var xarb = cx_ite2.elt;
					if(!xarb.presentable) {
						cx_ite2 = cx_ite2.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite2 = cx_ite2.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite3 = this.mrca1.head;
					while(cx_ite3 != null) {
						var i11 = cx_ite3.elt;
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite3 = cx_ite3.next;
							continue;
						}
						var cx_ite4 = this.mrca2.head;
						while(cx_ite4 != null) {
							var i2 = cx_ite4.elt;
							if(i11.cbSet == cb1 && i2.cbSet != cb2 || i11.cbSet == cb2 && i2.cbSet != cb1) {
								cx_ite4 = cx_ite4.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i11,i2);
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i11,i2);
								this.add_callbackset(callbackset);
							}
							var tmp;
							var ret;
							ret = false;
							var cx_ite5 = callbackset.arbiters.head;
							while(cx_ite5 != null) {
								var npite = cx_ite5.elt;
								if(npite == xarb) {
									ret = true;
									break;
								}
								cx_ite5 = cx_ite5.next;
							}
							if(!ret) {
								var _this = callbackset.arbiters;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = xarb;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
								tmp = true;
							} else {
								tmp = false;
							}
							if(tmp) {
								xarb.present++;
							}
							cx_ite4 = cx_ite4.next;
						}
						cx_ite3 = cx_ite3.next;
					}
					cx_ite2 = cx_ite2.next;
				}
			}
		}
	}
	,freshInteractorType: function(intx,me) {
		if(me == null) {
			me = intx;
		}
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.freshInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite = comp.compounds.head;
			while(cx_ite != null) {
				var comp = cx_ite.elt;
				this.freshInteractorType(comp,me);
				cx_ite = cx_ite.next;
			}
		} else {
			var xbody = intx.ibody != null ? intx.ibody : intx.ishape.body;
			var xshp = intx.ishape != null ? intx.ishape : null;
			var cx_ite = xbody.arbiters.head;
			while(cx_ite != null) {
				var xarb = cx_ite.elt;
				if(!xarb.presentable) {
					cx_ite = cx_ite.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite = cx_ite.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite1 = this.mrca1.head;
				while(cx_ite1 != null) {
					var i1 = cx_ite1.elt;
					var cx_ite2 = this.mrca2.head;
					while(cx_ite2 != null) {
						var i2 = cx_ite2.elt;
						if(i1 != me && i2 != me) {
							cx_ite2 = cx_ite2.next;
							continue;
						}
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						cb1.validate();
						cb2.validate();
						var _this = cb1.manager;
						var ret = null;
						var pairs = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
						var cx_ite3 = pairs.head;
						while(cx_ite3 != null) {
							var p = cx_ite3.elt;
							if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
								ret = p;
								break;
							}
							cx_ite3 = cx_ite3.next;
						}
						if(ret == null) {
							var ret1;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret1 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret1 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
								ret1.a = cb1;
								ret1.b = cb2;
							} else {
								ret1.a = cb2;
								ret1.b = cb1;
							}
							ret = ret1;
							cb1.cbpairs.add(ret);
							if(cb2 != cb1) {
								cb2.cbpairs.add(ret);
							}
						}
						if(ret.zip_listeners) {
							ret.zip_listeners = false;
							ret.__validate();
						}
						if(ret.listeners.head != null) {
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							var tmp;
							var ret2;
							ret2 = false;
							var cx_ite4 = callbackset.arbiters.head;
							while(cx_ite4 != null) {
								var npite = cx_ite4.elt;
								if(npite == xarb) {
									ret2 = true;
									break;
								}
								cx_ite4 = cx_ite4.next;
							}
							if(!ret2) {
								var _this1 = callbackset.arbiters;
								var ret3;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
									ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
								} else {
									ret3 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret3.next;
									ret3.next = null;
								}
								ret3.elt = xarb;
								var temp = ret3;
								temp.next = _this1.head;
								_this1.head = temp;
								_this1.modified = true;
								_this1.length++;
								tmp = true;
							} else {
								tmp = false;
							}
							if(tmp) {
								xarb.present++;
							}
						}
						cx_ite2 = cx_ite2.next;
					}
					cx_ite1 = cx_ite1.next;
				}
				cx_ite = cx_ite.next;
			}
		}
	}
	,wakeCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var y = cx_ite.elt;
			var o = y;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(o.type == 3) {
					o.kinematicDelaySleep = true;
				}
				if(o.component.sleeping) {
					this.really_wake(o,false);
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = x.constraints.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.wake_constraint(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite = x.compounds.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.wakeCompound(i);
			cx_ite = cx_ite.next;
		}
	}
	,wakeIsland: function(i) {
		while(i.comps.head != null) {
			var c = i.comps.pop_unsafe();
			c.waket = this.stamp + (this.midstep ? 0 : 1);
			if(c.isBody) {
				var b = c.body;
				this.live.add(b);
				var cx_ite = b.arbiters.head;
				while(cx_ite != null) {
					var arb = cx_ite.elt;
					if(arb.sleeping) {
						arb.sleeping = false;
						arb.up_stamp += this.stamp - arb.sleep_stamp;
						if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
							var carb = arb.colarb;
							if(carb.stat) {
								var _this = this.c_arbiters_true;
								var ret;
								if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
									ret = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
								} else {
									ret = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret.next;
									ret.next = null;
								}
								ret.elt = carb;
								var temp = ret;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							} else {
								var _this1 = this.c_arbiters_false;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = carb;
								var temp1 = ret1;
								temp1.next = _this1.head;
								_this1.head = temp1;
								_this1.modified = true;
								_this1.length++;
							}
						} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
							var _this2 = this.f_arbiters;
							var o = arb.fluidarb;
							var ret2;
							if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) {
								ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter();
							} else {
								ret2 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret2.next;
								ret2.next = null;
							}
							ret2.elt = o;
							var temp2 = ret2;
							temp2.next = _this2.head;
							_this2.head = temp2;
							_this2.modified = true;
							_this2.length++;
						} else {
							var _this3 = this.s_arbiters;
							var o1 = arb.sensorarb;
							var ret3;
							if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) {
								ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter();
							} else {
								ret3 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.elt = o1;
							var temp3 = ret3;
							temp3.next = _this3.head;
							_this3.head = temp3;
							_this3.modified = true;
							_this3.length++;
						}
					}
					cx_ite = cx_ite.next;
				}
				this.bodyCbWake(b);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
				if(b.type != 1) {
					var cx_ite1 = b.shapes.head;
					while(cx_ite1 != null) {
						var shape = cx_ite1.elt;
						if(shape.node != null) {
							this.bphase.sync(shape);
						}
						cx_ite1 = cx_ite1.next;
					}
				}
			} else {
				var con = c.constraint;
				var _this4 = this.live_constraints;
				var ret4;
				if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
					ret4 = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
				} else {
					ret4 = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret4.next;
					ret4.next = null;
				}
				ret4.elt = con;
				var temp4 = ret4;
				temp4.next = _this4.head;
				_this4.head = temp4;
				_this4.modified = true;
				_this4.length++;
				this.constraintCbWake(con);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
			}
		}
		var o = i;
		o.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
		zpp_$nape_space_ZPP_$Island.zpp_pool = o;
	}
	,non_inlined_wake: function(o,fst) {
		if(fst == null) {
			fst = false;
		}
		var o1 = o;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(o1.type == 3) {
				o1.kinematicDelaySleep = true;
			}
			if(o1.component.sleeping) {
				this.really_wake(o1,fst);
			}
		}
	}
	,really_wake: function(o,fst) {
		if(fst == null) {
			fst = false;
		}
		if(o.component.island == null) {
			o.component.sleeping = false;
			if(o.type == 3 || o.type == 1) {
				var _this = this.staticsleep;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = o;
				var temp = ret;
				temp.next = _this.head;
				_this.head = temp;
				_this.modified = true;
				_this.length++;
			} else {
				var _this = this.live;
				var ret;
				if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
					ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
				} else {
					ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = o;
				var temp = ret;
				temp.next = _this.head;
				_this.head = temp;
				_this.modified = true;
				_this.length++;
			}
			var cx_ite = o.constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(con.space == this) {
					this.wake_constraint(con);
				}
				cx_ite = cx_ite.next;
			}
			var cx_ite = o.arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if(arb.sleeping) {
					arb.sleeping = false;
					arb.up_stamp += this.stamp + (this.midstep ? 0 : 1) - arb.sleep_stamp;
					if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
						var carb = arb.colarb;
						if(carb.stat) {
							var _this = this.c_arbiters_true;
							var ret;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
								ret = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
							} else {
								ret = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret.next;
								ret.next = null;
							}
							ret.elt = carb;
							var temp = ret;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
						} else {
							var _this1 = this.c_arbiters_false;
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = carb;
							var temp1 = ret1;
							temp1.next = _this1.head;
							_this1.head = temp1;
							_this1.modified = true;
							_this1.length++;
						}
					} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
						var _this2 = this.f_arbiters;
						var o1 = arb.fluidarb;
						var ret2;
						if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) {
							ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter();
						} else {
							ret2 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret2.next;
							ret2.next = null;
						}
						ret2.elt = o1;
						var temp2 = ret2;
						temp2.next = _this2.head;
						_this2.head = temp2;
						_this2.modified = true;
						_this2.length++;
					} else {
						var _this3 = this.s_arbiters;
						var o2 = arb.sensorarb;
						var ret3;
						if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) {
							ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter();
						} else {
							ret3 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret3.next;
							ret3.next = null;
						}
						ret3.elt = o2;
						var temp3 = ret3;
						temp3.next = _this3.head;
						_this3.head = temp3;
						_this3.modified = true;
						_this3.length++;
					}
				}
				if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR && !arb.cleared && arb.up_stamp >= this.stamp && (arb.immState & 1) != 0) {
					if(arb.b1.type == 2 && arb.b1.component.sleeping) {
						var o3 = arb.b1;
						if(!o3.world) {
							o3.component.waket = this.stamp + (this.midstep ? 0 : 1);
							if(o3.type == 3) {
								o3.kinematicDelaySleep = true;
							}
							if(o3.component.sleeping) {
								this.really_wake(o3,false);
							}
						}
					}
					if(arb.b2.type == 2 && arb.b2.component.sleeping) {
						var o4 = arb.b2;
						if(!o4.world) {
							o4.component.waket = this.stamp + (this.midstep ? 0 : 1);
							if(o4.type == 3) {
								o4.kinematicDelaySleep = true;
							}
							if(o4.component.sleeping) {
								this.really_wake(o4,false);
							}
						}
					}
				}
				cx_ite = cx_ite.next;
			}
			if(!fst && o.type == 2) {
				this.bodyCbWake(o);
			}
			if(!fst && !this.bphase.is_sweep && o.type != 1) {
				var cx_ite = o.shapes.head;
				while(cx_ite != null) {
					var shape = cx_ite.elt;
					if(shape.node != null) {
						this.bphase.sync(shape);
					}
					cx_ite = cx_ite.next;
				}
			}
		} else {
			this.wakeIsland(o.component.island);
		}
	}
	,wake_constraint: function(con,fst) {
		if(fst == null) {
			fst = false;
		}
		if(con.active) {
			con.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(con.component.sleeping) {
				if(con.component.island == null) {
					con.component.sleeping = false;
					var _this = this.live_constraints;
					var ret;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
						ret = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
					} else {
						ret = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret.next;
						ret.next = null;
					}
					ret.elt = con;
					var temp = ret;
					temp.next = _this.head;
					_this.head = temp;
					_this.modified = true;
					_this.length++;
					con.wake_connected();
					if(!fst) {
						this.constraintCbWake(con);
					}
				} else {
					this.wakeIsland(con.component.island);
				}
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,doForests: function(dt) {
		var cx_ite = this.c_arbiters_false.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(!arb.cleared && arb.up_stamp == this.stamp && (arb.immState & 1) != 0) {
				if(arb.b1.type == 2 && arb.b2.type == 2) {
					var xr;
					if(arb.b1.component == arb.b1.component.parent) {
						xr = arb.b1.component;
					} else {
						var obj = arb.b1.component;
						var stack = null;
						while(obj != obj.parent) {
							var nxt = obj.parent;
							obj.parent = stack;
							stack = obj;
							obj = nxt;
						}
						while(stack != null) {
							var nxt1 = stack.parent;
							stack.parent = obj;
							stack = nxt1;
						}
						xr = obj;
					}
					var yr;
					if(arb.b2.component == arb.b2.component.parent) {
						yr = arb.b2.component;
					} else {
						var obj1 = arb.b2.component;
						var stack1 = null;
						while(obj1 != obj1.parent) {
							var nxt2 = obj1.parent;
							obj1.parent = stack1;
							stack1 = obj1;
							obj1 = nxt2;
						}
						while(stack1 != null) {
							var nxt3 = stack1.parent;
							stack1.parent = obj1;
							stack1 = nxt3;
						}
						yr = obj1;
					}
					if(xr != yr) {
						if(xr.rank < yr.rank) {
							xr.parent = yr;
						} else if(xr.rank > yr.rank) {
							yr.parent = xr;
						} else {
							yr.parent = xr;
							xr.rank++;
						}
					}
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.f_arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(!arb.cleared && arb.up_stamp == this.stamp && (arb.immState & 1) != 0) {
				if(arb.b1.type == 2 && arb.b2.type == 2) {
					var xr;
					if(arb.b1.component == arb.b1.component.parent) {
						xr = arb.b1.component;
					} else {
						var obj = arb.b1.component;
						var stack = null;
						while(obj != obj.parent) {
							var nxt = obj.parent;
							obj.parent = stack;
							stack = obj;
							obj = nxt;
						}
						while(stack != null) {
							var nxt1 = stack.parent;
							stack.parent = obj;
							stack = nxt1;
						}
						xr = obj;
					}
					var yr;
					if(arb.b2.component == arb.b2.component.parent) {
						yr = arb.b2.component;
					} else {
						var obj1 = arb.b2.component;
						var stack1 = null;
						while(obj1 != obj1.parent) {
							var nxt2 = obj1.parent;
							obj1.parent = stack1;
							stack1 = obj1;
							obj1 = nxt2;
						}
						while(stack1 != null) {
							var nxt3 = stack1.parent;
							stack1.parent = obj1;
							stack1 = nxt3;
						}
						yr = obj1;
					}
					if(xr != yr) {
						if(xr.rank < yr.rank) {
							xr.parent = yr;
						} else if(xr.rank > yr.rank) {
							yr.parent = xr;
						} else {
							yr.parent = xr;
							xr.rank++;
						}
					}
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			con.forest();
			cx_ite = cx_ite.next;
		}
		while(this.live.head != null) {
			var _this = this.live;
			var ret = _this.head.elt;
			_this.pop();
			var o = ret;
			var oc = o.component;
			var root;
			if(oc == oc.parent) {
				root = oc;
			} else {
				var obj = oc;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				root = obj;
			}
			if(root.island == null) {
				if(zpp_$nape_space_ZPP_$Island.zpp_pool == null) {
					root.island = new zpp_$nape_space_ZPP_$Island();
				} else {
					root.island = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = root.island.next;
					root.island.next = null;
				}
				root.island.waket = 0;
				var _this1 = this.islands;
				var o1 = root.island;
				o1._inuse = true;
				var temp = o1;
				temp.next = _this1.next;
				_this1.next = temp;
				_this1.modified = true;
				_this1.length++;
				root.island.sleep = true;
			}
			oc.island = root.island;
			var _this2 = oc.island.comps;
			var ret1;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool == null) {
				ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Component();
			} else {
				ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = oc;
			var temp1 = ret1;
			temp1.next = _this2.head;
			_this2.head = temp1;
			_this2.modified = true;
			_this2.length++;
			var rest = o.atRest(dt);
			oc.island.sleep = oc.island.sleep && rest;
			if(oc.waket > oc.island.waket) {
				oc.island.waket = oc.waket;
			}
		}
		while(this.live_constraints.head != null) {
			var _this = this.live_constraints;
			var ret = _this.head.elt;
			_this.pop();
			var o = ret;
			var oc = o.component;
			var root;
			if(oc == oc.parent) {
				root = oc;
			} else {
				var obj = oc;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				root = obj;
			}
			oc.island = root.island;
			var _this1 = oc.island.comps;
			var ret1;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool == null) {
				ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Component();
			} else {
				ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = oc;
			var temp = ret1;
			temp.next = _this1.head;
			_this1.head = temp;
			_this1.modified = true;
			_this1.length++;
			if(oc.waket > oc.island.waket) {
				oc.island.waket = oc.waket;
			}
		}
		while(this.islands.next != null) {
			var _this = this.islands;
			var ret = _this.next;
			_this.pop();
			var i = ret;
			if(i.sleep) {
				var cx_ite = i.comps.head;
				while(cx_ite != null) {
					var c = cx_ite.elt;
					if(c.isBody) {
						var b = c.body;
						b.velx = 0;
						b.vely = 0;
						b.angvel = 0;
						c.sleeping = true;
						var cx_ite1 = b.shapes.head;
						while(cx_ite1 != null) {
							var shape = cx_ite1.elt;
							this.bphase.sync(shape);
							cx_ite1 = cx_ite1.next;
						}
						this.bodyCbSleep(b);
					} else {
						var con = c.constraint;
						this.constraintCbSleep(con);
						c.sleeping = true;
					}
					cx_ite = cx_ite.next;
				}
			} else {
				while(i.comps.head != null) {
					var _this1 = i.comps;
					var ret1 = _this1.head.elt;
					_this1.pop();
					var c1 = ret1;
					c1.waket = i.waket;
					if(c1.isBody) {
						var _this2 = this.live;
						var o = c1.body;
						var ret2;
						if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
							ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
						} else {
							ret2 = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret2.next;
							ret2.next = null;
						}
						ret2.elt = o;
						var temp = ret2;
						temp.next = _this2.head;
						_this2.head = temp;
						_this2.modified = true;
						_this2.length++;
					} else {
						var _this3 = this.live_constraints;
						var o1 = c1.constraint;
						var ret3;
						if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
							ret3 = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
						} else {
							ret3 = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret3.next;
							ret3.next = null;
						}
						ret3.elt = o1;
						var temp1 = ret3;
						temp1.next = _this3.head;
						_this3.head = temp1;
						_this3.modified = true;
						_this3.length++;
					}
					c1.sleeping = false;
					c1.island = null;
					c1.parent = c1;
					c1.rank = 0;
				}
				var o2 = i;
				o2.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
				zpp_$nape_space_ZPP_$Island.zpp_pool = o2;
			}
		}
	}
	,sleepArbiters: function() {
		var pre = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
				arb.sleep_stamp = this.stamp;
				arb.sleeping = true;
				var old;
				var ret;
				if(pre == null) {
					old = arbs.head;
					ret = old.next;
					arbs.head = ret;
					if(arbs.head == null) {
						arbs.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						arbs.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
				arbs.modified = true;
				arbs.length--;
				arbs.pushmod = true;
				arbite = ret;
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre = null;
			}
		}
		var pre = null;
		var arbs = this.f_arbiters;
		var arbite = arbs.head;
		var fst = false;
		if(fst && arbite == null) {
			fst = false;
			arbite = null.begin();
			arbs = null;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
				arb.sleep_stamp = this.stamp;
				arb.sleeping = true;
				var old;
				var ret;
				if(pre == null) {
					old = arbs.head;
					ret = old.next;
					arbs.head = ret;
					if(arbs.head == null) {
						arbs.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						arbs.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = o;
				arbs.modified = true;
				arbs.length--;
				arbs.pushmod = true;
				arbite = ret;
				if(fst && arbite == null) {
					fst = false;
					arbite = null.begin();
					arbs = null;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = null.begin();
				arbs = null;
				pre = null;
			}
		}
		var pre = null;
		var arbs = this.s_arbiters;
		var arbite = arbs.head;
		var fst = false;
		if(fst && arbite == null) {
			fst = false;
			arbite = null.begin();
			arbs = null;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
				arb.sleep_stamp = this.stamp;
				arb.sleeping = true;
				var old;
				var ret;
				if(pre == null) {
					old = arbs.head;
					ret = old.next;
					arbs.head = ret;
					if(arbs.head == null) {
						arbs.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						arbs.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = o;
				arbs.modified = true;
				arbs.length--;
				arbs.pushmod = true;
				arbite = ret;
				if(fst && arbite == null) {
					fst = false;
					arbite = null.begin();
					arbs = null;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = null.begin();
				arbs = null;
				pre = null;
			}
		}
	}
	,static_validation: function(body) {
		if(body.shapes.head != null) {
			if(body.shapes.head == null) {
				throw haxe_Exception.thrown("Error: Body bounds only makes sense if it contains shapes");
			}
			if(body.zip_aabb) {
				body.zip_aabb = false;
				body.aabb.minx = Infinity;
				body.aabb.miny = Infinity;
				body.aabb.maxx = -Infinity;
				body.aabb.maxy = -Infinity;
				var cx_ite = body.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					if(s.zip_aabb) {
						if(s.body != null) {
							s.zip_aabb = false;
							if(s.type == 0) {
								var _this = s.circle;
								if(_this.zip_worldCOM) {
									if(_this.body != null) {
										_this.zip_worldCOM = false;
										if(_this.zip_localCOM) {
											_this.zip_localCOM = false;
											if(_this.type == 1) {
												var _this1 = _this.polygon;
												if(_this1.lverts.next == null) {
													throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
												}
												if(_this1.lverts.next.next == null) {
													_this1.localCOMx = _this1.lverts.next.x;
													_this1.localCOMy = _this1.lverts.next.y;
												} else if(_this1.lverts.next.next.next == null) {
													_this1.localCOMx = _this1.lverts.next.x;
													_this1.localCOMy = _this1.lverts.next.y;
													var t = 1.0;
													_this1.localCOMx += _this1.lverts.next.next.x * t;
													_this1.localCOMy += _this1.lverts.next.next.y * t;
													var t1 = 0.5;
													_this1.localCOMx *= t1;
													_this1.localCOMy *= t1;
												} else {
													_this1.localCOMx = 0;
													_this1.localCOMy = 0;
													var area = 0.0;
													var cx_ite1 = _this1.lverts.next;
													var u = cx_ite1;
													cx_ite1 = cx_ite1.next;
													var v = cx_ite1;
													cx_ite1 = cx_ite1.next;
													while(cx_ite1 != null) {
														var w = cx_ite1;
														area += v.x * (w.y - u.y);
														var cf = w.y * v.x - w.x * v.y;
														_this1.localCOMx += (v.x + w.x) * cf;
														_this1.localCOMy += (v.y + w.y) * cf;
														u = v;
														v = w;
														cx_ite1 = cx_ite1.next;
													}
													cx_ite1 = _this1.lverts.next;
													var w1 = cx_ite1;
													area += v.x * (w1.y - u.y);
													var cf1 = w1.y * v.x - w1.x * v.y;
													_this1.localCOMx += (v.x + w1.x) * cf1;
													_this1.localCOMy += (v.y + w1.y) * cf1;
													u = v;
													v = w1;
													cx_ite1 = cx_ite1.next;
													var w2 = cx_ite1;
													area += v.x * (w2.y - u.y);
													var cf2 = w2.y * v.x - w2.x * v.y;
													_this1.localCOMx += (v.x + w2.x) * cf2;
													_this1.localCOMy += (v.y + w2.y) * cf2;
													area = 1 / (3 * area);
													var t2 = area;
													_this1.localCOMx *= t2;
													_this1.localCOMy *= t2;
												}
											}
											if(_this.wrap_localCOM != null) {
												_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
												_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
											}
										}
										var _this2 = _this.body;
										if(_this2.zip_axis) {
											_this2.zip_axis = false;
											_this2.axisx = Math.sin(_this2.rot);
											_this2.axisy = Math.cos(_this2.rot);
										}
										_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
										_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
									}
								}
								var rx = _this.radius;
								var ry = _this.radius;
								_this.aabb.minx = _this.worldCOMx - rx;
								_this.aabb.miny = _this.worldCOMy - ry;
								_this.aabb.maxx = _this.worldCOMx + rx;
								_this.aabb.maxy = _this.worldCOMy + ry;
							} else {
								var _this3 = s.polygon;
								if(_this3.zip_gverts) {
									if(_this3.body != null) {
										_this3.zip_gverts = false;
										_this3.validate_lverts();
										var _this4 = _this3.body;
										if(_this4.zip_axis) {
											_this4.zip_axis = false;
											_this4.axisx = Math.sin(_this4.rot);
											_this4.axisy = Math.cos(_this4.rot);
										}
										var li = _this3.lverts.next;
										var cx_ite2 = _this3.gverts.next;
										while(cx_ite2 != null) {
											var g = cx_ite2;
											var l = li;
											li = li.next;
											g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
											g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
											cx_ite2 = cx_ite2.next;
										}
									}
								}
								if(_this3.lverts.next == null) {
									throw haxe_Exception.thrown("Error: An empty polygon has no meaningful bounds");
								}
								var p0 = _this3.gverts.next;
								_this3.aabb.minx = p0.x;
								_this3.aabb.miny = p0.y;
								_this3.aabb.maxx = p0.x;
								_this3.aabb.maxy = p0.y;
								var cx_ite3 = _this3.gverts.next.next;
								while(cx_ite3 != null) {
									var p = cx_ite3;
									if(p.x < _this3.aabb.minx) {
										_this3.aabb.minx = p.x;
									}
									if(p.x > _this3.aabb.maxx) {
										_this3.aabb.maxx = p.x;
									}
									if(p.y < _this3.aabb.miny) {
										_this3.aabb.miny = p.y;
									}
									if(p.y > _this3.aabb.maxy) {
										_this3.aabb.maxy = p.y;
									}
									cx_ite3 = cx_ite3.next;
								}
							}
						}
					}
					var _this5 = body.aabb;
					var x = s.aabb;
					if(x.minx < _this5.minx) {
						_this5.minx = x.minx;
					}
					if(x.maxx > _this5.maxx) {
						_this5.maxx = x.maxx;
					}
					if(x.miny < _this5.miny) {
						_this5.miny = x.miny;
					}
					if(x.maxy > _this5.maxy) {
						_this5.maxy = x.maxy;
					}
					cx_ite = cx_ite.next;
				}
			}
		}
		body.validate_mass();
		body.validate_inertia();
		if(body.velx != 0 || body.vely != 0 || body.angvel != 0) {
			throw haxe_Exception.thrown("Error: Static body cannot have any real velocity, only kinematic or surface velocities");
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == 1) {
				var _this = s.polygon;
				if(_this.zip_sanitation) {
					_this.zip_sanitation = false;
					_this.splice_collinear_real();
				}
				var res = s.polygon.valid();
				if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
					zpp_$nape_util_ZPP_$Flags.internal = true;
					zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
					zpp_$nape_util_ZPP_$Flags.internal = false;
				}
				if(res != zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID) {
					throw haxe_Exception.thrown("Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString());
				}
				var _this1 = s.polygon;
				if(_this1.zip_gaxi) {
					if(_this1.body != null) {
						_this1.zip_gaxi = false;
						_this1.validate_laxi();
						var _this2 = _this1.body;
						if(_this2.zip_axis) {
							_this2.zip_axis = false;
							_this2.axisx = Math.sin(_this2.rot);
							_this2.axisy = Math.cos(_this2.rot);
						}
						if(_this1.zip_gverts) {
							if(_this1.body != null) {
								_this1.zip_gverts = false;
								_this1.validate_lverts();
								var _this3 = _this1.body;
								if(_this3.zip_axis) {
									_this3.zip_axis = false;
									_this3.axisx = Math.sin(_this3.rot);
									_this3.axisy = Math.cos(_this3.rot);
								}
								var li = _this1.lverts.next;
								var cx_ite1 = _this1.gverts.next;
								while(cx_ite1 != null) {
									var g = cx_ite1;
									var l = li;
									li = li.next;
									g.x = _this1.body.posx + (_this1.body.axisy * l.x - _this1.body.axisx * l.y);
									g.y = _this1.body.posy + (l.x * _this1.body.axisx + l.y * _this1.body.axisy);
									cx_ite1 = cx_ite1.next;
								}
							}
						}
						var ite = _this1.edges.head;
						var cx_ite2 = _this1.gverts.next;
						var u = cx_ite2;
						cx_ite2 = cx_ite2.next;
						while(cx_ite2 != null) {
							var v = cx_ite2;
							var e = ite.elt;
							ite = ite.next;
							e.gp0 = u;
							e.gp1 = v;
							e.gnormx = _this1.body.axisy * e.lnormx - _this1.body.axisx * e.lnormy;
							e.gnormy = e.lnormx * _this1.body.axisx + e.lnormy * _this1.body.axisy;
							e.gprojection = _this1.body.posx * e.gnormx + _this1.body.posy * e.gnormy + e.lprojection;
							if(e.wrap_gnorm != null) {
								e.wrap_gnorm.zpp_inner.x = e.gnormx;
								e.wrap_gnorm.zpp_inner.y = e.gnormy;
							}
							e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
							e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
							u = v;
							cx_ite2 = cx_ite2.next;
						}
						var v1 = _this1.gverts.next;
						var e1 = ite.elt;
						ite = ite.next;
						e1.gp0 = u;
						e1.gp1 = v1;
						e1.gnormx = _this1.body.axisy * e1.lnormx - _this1.body.axisx * e1.lnormy;
						e1.gnormy = e1.lnormx * _this1.body.axisx + e1.lnormy * _this1.body.axisy;
						e1.gprojection = _this1.body.posx * e1.gnormx + _this1.body.posy * e1.gnormy + e1.lprojection;
						if(e1.wrap_gnorm != null) {
							e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
							e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
						}
						e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
						e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
					}
				}
			}
			cx_ite = cx_ite.next;
		}
		body.sweepFrozen = true;
	}
	,validation: function() {
		var _this = this.cbsets;
		if(!_this.cbsets.empty()) {
			var set_ite = _this.cbsets.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var cb = set_ite.data;
				cb.validate();
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.sweepRadius = 0;
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var s = cx_ite1.elt;
				if(s.type == 1) {
					var _this = s.polygon;
					if(_this.zip_sanitation) {
						_this.zip_sanitation = false;
						_this.splice_collinear_real();
					}
					var res = s.polygon.valid();
					if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(res != zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID) {
						throw haxe_Exception.thrown("Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString());
					}
					var _this1 = s.polygon;
					if(_this1.zip_gaxi) {
						if(_this1.body != null) {
							_this1.zip_gaxi = false;
							_this1.validate_laxi();
							var _this2 = _this1.body;
							if(_this2.zip_axis) {
								_this2.zip_axis = false;
								_this2.axisx = Math.sin(_this2.rot);
								_this2.axisy = Math.cos(_this2.rot);
							}
							if(_this1.zip_gverts) {
								if(_this1.body != null) {
									_this1.zip_gverts = false;
									_this1.validate_lverts();
									var _this3 = _this1.body;
									if(_this3.zip_axis) {
										_this3.zip_axis = false;
										_this3.axisx = Math.sin(_this3.rot);
										_this3.axisy = Math.cos(_this3.rot);
									}
									var li = _this1.lverts.next;
									var cx_ite2 = _this1.gverts.next;
									while(cx_ite2 != null) {
										var g = cx_ite2;
										var l = li;
										li = li.next;
										g.x = _this1.body.posx + (_this1.body.axisy * l.x - _this1.body.axisx * l.y);
										g.y = _this1.body.posy + (l.x * _this1.body.axisx + l.y * _this1.body.axisy);
										cx_ite2 = cx_ite2.next;
									}
								}
							}
							var ite = _this1.edges.head;
							var cx_ite3 = _this1.gverts.next;
							var u = cx_ite3;
							cx_ite3 = cx_ite3.next;
							while(cx_ite3 != null) {
								var v = cx_ite3;
								var e = ite.elt;
								ite = ite.next;
								e.gp0 = u;
								e.gp1 = v;
								e.gnormx = _this1.body.axisy * e.lnormx - _this1.body.axisx * e.lnormy;
								e.gnormy = e.lnormx * _this1.body.axisx + e.lnormy * _this1.body.axisy;
								e.gprojection = _this1.body.posx * e.gnormx + _this1.body.posy * e.gnormy + e.lprojection;
								if(e.wrap_gnorm != null) {
									e.wrap_gnorm.zpp_inner.x = e.gnormx;
									e.wrap_gnorm.zpp_inner.y = e.gnormy;
								}
								e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
								e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
								u = v;
								cx_ite3 = cx_ite3.next;
							}
							var v1 = _this1.gverts.next;
							var e1 = ite.elt;
							ite = ite.next;
							e1.gp0 = u;
							e1.gp1 = v1;
							e1.gnormx = _this1.body.axisy * e1.lnormx - _this1.body.axisx * e1.lnormy;
							e1.gnormy = e1.lnormx * _this1.body.axisx + e1.lnormy * _this1.body.axisy;
							e1.gprojection = _this1.body.posx * e1.gnormx + _this1.body.posy * e1.gnormy + e1.lprojection;
							if(e1.wrap_gnorm != null) {
								e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
								e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
							}
							e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
							e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
						}
					}
				}
				s.validate_sweepRadius();
				if(s.sweepRadius > cur.sweepRadius) {
					cur.sweepRadius = s.sweepRadius;
				}
				cx_ite1 = cx_ite1.next;
			}
			cur.validate_mass();
			cur.validate_inertia();
			if(cur.shapes.head != null) {
				if(cur.shapes.head == null) {
					throw haxe_Exception.thrown("Error: Body bounds only makes sense if it contains shapes");
				}
				if(cur.zip_aabb) {
					cur.zip_aabb = false;
					cur.aabb.minx = Infinity;
					cur.aabb.miny = Infinity;
					cur.aabb.maxx = -Infinity;
					cur.aabb.maxy = -Infinity;
					var cx_ite4 = cur.shapes.head;
					while(cx_ite4 != null) {
						var s1 = cx_ite4.elt;
						if(s1.zip_aabb) {
							if(s1.body != null) {
								s1.zip_aabb = false;
								if(s1.type == 0) {
									var _this4 = s1.circle;
									if(_this4.zip_worldCOM) {
										if(_this4.body != null) {
											_this4.zip_worldCOM = false;
											if(_this4.zip_localCOM) {
												_this4.zip_localCOM = false;
												if(_this4.type == 1) {
													var _this5 = _this4.polygon;
													if(_this5.lverts.next == null) {
														throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
													}
													if(_this5.lverts.next.next == null) {
														_this5.localCOMx = _this5.lverts.next.x;
														_this5.localCOMy = _this5.lverts.next.y;
													} else if(_this5.lverts.next.next.next == null) {
														_this5.localCOMx = _this5.lverts.next.x;
														_this5.localCOMy = _this5.lverts.next.y;
														var t = 1.0;
														_this5.localCOMx += _this5.lverts.next.next.x * t;
														_this5.localCOMy += _this5.lverts.next.next.y * t;
														var t1 = 0.5;
														_this5.localCOMx *= t1;
														_this5.localCOMy *= t1;
													} else {
														_this5.localCOMx = 0;
														_this5.localCOMy = 0;
														var area = 0.0;
														var cx_ite5 = _this5.lverts.next;
														var u1 = cx_ite5;
														cx_ite5 = cx_ite5.next;
														var v2 = cx_ite5;
														cx_ite5 = cx_ite5.next;
														while(cx_ite5 != null) {
															var w = cx_ite5;
															area += v2.x * (w.y - u1.y);
															var cf = w.y * v2.x - w.x * v2.y;
															_this5.localCOMx += (v2.x + w.x) * cf;
															_this5.localCOMy += (v2.y + w.y) * cf;
															u1 = v2;
															v2 = w;
															cx_ite5 = cx_ite5.next;
														}
														cx_ite5 = _this5.lverts.next;
														var w1 = cx_ite5;
														area += v2.x * (w1.y - u1.y);
														var cf1 = w1.y * v2.x - w1.x * v2.y;
														_this5.localCOMx += (v2.x + w1.x) * cf1;
														_this5.localCOMy += (v2.y + w1.y) * cf1;
														u1 = v2;
														v2 = w1;
														cx_ite5 = cx_ite5.next;
														var w2 = cx_ite5;
														area += v2.x * (w2.y - u1.y);
														var cf2 = w2.y * v2.x - w2.x * v2.y;
														_this5.localCOMx += (v2.x + w2.x) * cf2;
														_this5.localCOMy += (v2.y + w2.y) * cf2;
														area = 1 / (3 * area);
														var t2 = area;
														_this5.localCOMx *= t2;
														_this5.localCOMy *= t2;
													}
												}
												if(_this4.wrap_localCOM != null) {
													_this4.wrap_localCOM.zpp_inner.x = _this4.localCOMx;
													_this4.wrap_localCOM.zpp_inner.y = _this4.localCOMy;
												}
											}
											var _this6 = _this4.body;
											if(_this6.zip_axis) {
												_this6.zip_axis = false;
												_this6.axisx = Math.sin(_this6.rot);
												_this6.axisy = Math.cos(_this6.rot);
											}
											_this4.worldCOMx = _this4.body.posx + (_this4.body.axisy * _this4.localCOMx - _this4.body.axisx * _this4.localCOMy);
											_this4.worldCOMy = _this4.body.posy + (_this4.localCOMx * _this4.body.axisx + _this4.localCOMy * _this4.body.axisy);
										}
									}
									var rx = _this4.radius;
									var ry = _this4.radius;
									_this4.aabb.minx = _this4.worldCOMx - rx;
									_this4.aabb.miny = _this4.worldCOMy - ry;
									_this4.aabb.maxx = _this4.worldCOMx + rx;
									_this4.aabb.maxy = _this4.worldCOMy + ry;
								} else {
									var _this7 = s1.polygon;
									if(_this7.zip_gverts) {
										if(_this7.body != null) {
											_this7.zip_gverts = false;
											_this7.validate_lverts();
											var _this8 = _this7.body;
											if(_this8.zip_axis) {
												_this8.zip_axis = false;
												_this8.axisx = Math.sin(_this8.rot);
												_this8.axisy = Math.cos(_this8.rot);
											}
											var li1 = _this7.lverts.next;
											var cx_ite6 = _this7.gverts.next;
											while(cx_ite6 != null) {
												var g1 = cx_ite6;
												var l1 = li1;
												li1 = li1.next;
												g1.x = _this7.body.posx + (_this7.body.axisy * l1.x - _this7.body.axisx * l1.y);
												g1.y = _this7.body.posy + (l1.x * _this7.body.axisx + l1.y * _this7.body.axisy);
												cx_ite6 = cx_ite6.next;
											}
										}
									}
									if(_this7.lverts.next == null) {
										throw haxe_Exception.thrown("Error: An empty polygon has no meaningful bounds");
									}
									var p0 = _this7.gverts.next;
									_this7.aabb.minx = p0.x;
									_this7.aabb.miny = p0.y;
									_this7.aabb.maxx = p0.x;
									_this7.aabb.maxy = p0.y;
									var cx_ite7 = _this7.gverts.next.next;
									while(cx_ite7 != null) {
										var p = cx_ite7;
										if(p.x < _this7.aabb.minx) {
											_this7.aabb.minx = p.x;
										}
										if(p.x > _this7.aabb.maxx) {
											_this7.aabb.maxx = p.x;
										}
										if(p.y < _this7.aabb.miny) {
											_this7.aabb.miny = p.y;
										}
										if(p.y > _this7.aabb.maxy) {
											_this7.aabb.maxy = p.y;
										}
										cx_ite7 = cx_ite7.next;
									}
								}
							}
						}
						var _this9 = cur.aabb;
						var x = s1.aabb;
						if(x.minx < _this9.minx) {
							_this9.minx = x.minx;
						}
						if(x.maxx > _this9.maxx) {
							_this9.maxx = x.maxx;
						}
						if(x.miny < _this9.miny) {
							_this9.miny = x.miny;
						}
						if(x.maxy > _this9.maxy) {
							_this9.maxy = x.maxy;
						}
						cx_ite4 = cx_ite4.next;
					}
				}
				cur.validate_worldCOM();
			}
			cur.validate_gravMass();
			if(cur.zip_axis) {
				cur.zip_axis = false;
				cur.axisx = Math.sin(cur.rot);
				cur.axisy = Math.cos(cur.rot);
			}
			if(!cur.nomove && cur.type == 2 && cur.mass == 0) {
				throw haxe_Exception.thrown("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false");
			}
			if(!cur.norotate && cur.type == 2 && cur.inertia == 0) {
				throw haxe_Exception.thrown("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false");
			}
			if(cur.component.woken && cur.cbSet != null) {
				var cx_ite8 = cur.cbSet.bodylisteners.head;
				while(cx_ite8 != null) {
					var i = cx_ite8.elt;
					if(i.event != 2) {
						cx_ite8 = cx_ite8.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = 2;
					cb.body = cur;
					cx_ite8 = cx_ite8.next;
				}
			}
			cur.component.woken = false;
			var cx_ite9 = cur.shapes.head;
			while(cx_ite9 != null) {
				var shape = cx_ite9.elt;
				this.bphase.sync(shape);
				cx_ite9 = cx_ite9.next;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.sweepRadius = 0;
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var s = cx_ite1.elt;
				if(s.type == 1) {
					var _this = s.polygon;
					if(_this.zip_sanitation) {
						_this.zip_sanitation = false;
						_this.splice_collinear_real();
					}
					var res = s.polygon.valid();
					if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
						zpp_$nape_util_ZPP_$Flags.internal = true;
						zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
						zpp_$nape_util_ZPP_$Flags.internal = false;
					}
					if(res != zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID) {
						throw haxe_Exception.thrown("Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString());
					}
					var _this1 = s.polygon;
					if(_this1.zip_gaxi) {
						if(_this1.body != null) {
							_this1.zip_gaxi = false;
							_this1.validate_laxi();
							var _this2 = _this1.body;
							if(_this2.zip_axis) {
								_this2.zip_axis = false;
								_this2.axisx = Math.sin(_this2.rot);
								_this2.axisy = Math.cos(_this2.rot);
							}
							if(_this1.zip_gverts) {
								if(_this1.body != null) {
									_this1.zip_gverts = false;
									_this1.validate_lverts();
									var _this3 = _this1.body;
									if(_this3.zip_axis) {
										_this3.zip_axis = false;
										_this3.axisx = Math.sin(_this3.rot);
										_this3.axisy = Math.cos(_this3.rot);
									}
									var li = _this1.lverts.next;
									var cx_ite2 = _this1.gverts.next;
									while(cx_ite2 != null) {
										var g = cx_ite2;
										var l = li;
										li = li.next;
										g.x = _this1.body.posx + (_this1.body.axisy * l.x - _this1.body.axisx * l.y);
										g.y = _this1.body.posy + (l.x * _this1.body.axisx + l.y * _this1.body.axisy);
										cx_ite2 = cx_ite2.next;
									}
								}
							}
							var ite = _this1.edges.head;
							var cx_ite3 = _this1.gverts.next;
							var u = cx_ite3;
							cx_ite3 = cx_ite3.next;
							while(cx_ite3 != null) {
								var v = cx_ite3;
								var e = ite.elt;
								ite = ite.next;
								e.gp0 = u;
								e.gp1 = v;
								e.gnormx = _this1.body.axisy * e.lnormx - _this1.body.axisx * e.lnormy;
								e.gnormy = e.lnormx * _this1.body.axisx + e.lnormy * _this1.body.axisy;
								e.gprojection = _this1.body.posx * e.gnormx + _this1.body.posy * e.gnormy + e.lprojection;
								if(e.wrap_gnorm != null) {
									e.wrap_gnorm.zpp_inner.x = e.gnormx;
									e.wrap_gnorm.zpp_inner.y = e.gnormy;
								}
								e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
								e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
								u = v;
								cx_ite3 = cx_ite3.next;
							}
							var v1 = _this1.gverts.next;
							var e1 = ite.elt;
							ite = ite.next;
							e1.gp0 = u;
							e1.gp1 = v1;
							e1.gnormx = _this1.body.axisy * e1.lnormx - _this1.body.axisx * e1.lnormy;
							e1.gnormy = e1.lnormx * _this1.body.axisx + e1.lnormy * _this1.body.axisy;
							e1.gprojection = _this1.body.posx * e1.gnormx + _this1.body.posy * e1.gnormy + e1.lprojection;
							if(e1.wrap_gnorm != null) {
								e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
								e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
							}
							e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
							e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
						}
					}
				}
				s.validate_sweepRadius();
				if(s.sweepRadius > cur.sweepRadius) {
					cur.sweepRadius = s.sweepRadius;
				}
				cx_ite1 = cx_ite1.next;
			}
			cur.validate_mass();
			cur.validate_inertia();
			if(cur.shapes.head != null) {
				if(cur.shapes.head == null) {
					throw haxe_Exception.thrown("Error: Body bounds only makes sense if it contains shapes");
				}
				if(cur.zip_aabb) {
					cur.zip_aabb = false;
					cur.aabb.minx = Infinity;
					cur.aabb.miny = Infinity;
					cur.aabb.maxx = -Infinity;
					cur.aabb.maxy = -Infinity;
					var cx_ite4 = cur.shapes.head;
					while(cx_ite4 != null) {
						var s1 = cx_ite4.elt;
						if(s1.zip_aabb) {
							if(s1.body != null) {
								s1.zip_aabb = false;
								if(s1.type == 0) {
									var _this4 = s1.circle;
									if(_this4.zip_worldCOM) {
										if(_this4.body != null) {
											_this4.zip_worldCOM = false;
											if(_this4.zip_localCOM) {
												_this4.zip_localCOM = false;
												if(_this4.type == 1) {
													var _this5 = _this4.polygon;
													if(_this5.lverts.next == null) {
														throw haxe_Exception.thrown("Error: An empty polygon has no meaningful localCOM");
													}
													if(_this5.lverts.next.next == null) {
														_this5.localCOMx = _this5.lverts.next.x;
														_this5.localCOMy = _this5.lverts.next.y;
													} else if(_this5.lverts.next.next.next == null) {
														_this5.localCOMx = _this5.lverts.next.x;
														_this5.localCOMy = _this5.lverts.next.y;
														var t = 1.0;
														_this5.localCOMx += _this5.lverts.next.next.x * t;
														_this5.localCOMy += _this5.lverts.next.next.y * t;
														var t1 = 0.5;
														_this5.localCOMx *= t1;
														_this5.localCOMy *= t1;
													} else {
														_this5.localCOMx = 0;
														_this5.localCOMy = 0;
														var area = 0.0;
														var cx_ite5 = _this5.lverts.next;
														var u1 = cx_ite5;
														cx_ite5 = cx_ite5.next;
														var v2 = cx_ite5;
														cx_ite5 = cx_ite5.next;
														while(cx_ite5 != null) {
															var w = cx_ite5;
															area += v2.x * (w.y - u1.y);
															var cf = w.y * v2.x - w.x * v2.y;
															_this5.localCOMx += (v2.x + w.x) * cf;
															_this5.localCOMy += (v2.y + w.y) * cf;
															u1 = v2;
															v2 = w;
															cx_ite5 = cx_ite5.next;
														}
														cx_ite5 = _this5.lverts.next;
														var w1 = cx_ite5;
														area += v2.x * (w1.y - u1.y);
														var cf1 = w1.y * v2.x - w1.x * v2.y;
														_this5.localCOMx += (v2.x + w1.x) * cf1;
														_this5.localCOMy += (v2.y + w1.y) * cf1;
														u1 = v2;
														v2 = w1;
														cx_ite5 = cx_ite5.next;
														var w2 = cx_ite5;
														area += v2.x * (w2.y - u1.y);
														var cf2 = w2.y * v2.x - w2.x * v2.y;
														_this5.localCOMx += (v2.x + w2.x) * cf2;
														_this5.localCOMy += (v2.y + w2.y) * cf2;
														area = 1 / (3 * area);
														var t2 = area;
														_this5.localCOMx *= t2;
														_this5.localCOMy *= t2;
													}
												}
												if(_this4.wrap_localCOM != null) {
													_this4.wrap_localCOM.zpp_inner.x = _this4.localCOMx;
													_this4.wrap_localCOM.zpp_inner.y = _this4.localCOMy;
												}
											}
											var _this6 = _this4.body;
											if(_this6.zip_axis) {
												_this6.zip_axis = false;
												_this6.axisx = Math.sin(_this6.rot);
												_this6.axisy = Math.cos(_this6.rot);
											}
											_this4.worldCOMx = _this4.body.posx + (_this4.body.axisy * _this4.localCOMx - _this4.body.axisx * _this4.localCOMy);
											_this4.worldCOMy = _this4.body.posy + (_this4.localCOMx * _this4.body.axisx + _this4.localCOMy * _this4.body.axisy);
										}
									}
									var rx = _this4.radius;
									var ry = _this4.radius;
									_this4.aabb.minx = _this4.worldCOMx - rx;
									_this4.aabb.miny = _this4.worldCOMy - ry;
									_this4.aabb.maxx = _this4.worldCOMx + rx;
									_this4.aabb.maxy = _this4.worldCOMy + ry;
								} else {
									var _this7 = s1.polygon;
									if(_this7.zip_gverts) {
										if(_this7.body != null) {
											_this7.zip_gverts = false;
											_this7.validate_lverts();
											var _this8 = _this7.body;
											if(_this8.zip_axis) {
												_this8.zip_axis = false;
												_this8.axisx = Math.sin(_this8.rot);
												_this8.axisy = Math.cos(_this8.rot);
											}
											var li1 = _this7.lverts.next;
											var cx_ite6 = _this7.gverts.next;
											while(cx_ite6 != null) {
												var g1 = cx_ite6;
												var l1 = li1;
												li1 = li1.next;
												g1.x = _this7.body.posx + (_this7.body.axisy * l1.x - _this7.body.axisx * l1.y);
												g1.y = _this7.body.posy + (l1.x * _this7.body.axisx + l1.y * _this7.body.axisy);
												cx_ite6 = cx_ite6.next;
											}
										}
									}
									if(_this7.lverts.next == null) {
										throw haxe_Exception.thrown("Error: An empty polygon has no meaningful bounds");
									}
									var p0 = _this7.gverts.next;
									_this7.aabb.minx = p0.x;
									_this7.aabb.miny = p0.y;
									_this7.aabb.maxx = p0.x;
									_this7.aabb.maxy = p0.y;
									var cx_ite7 = _this7.gverts.next.next;
									while(cx_ite7 != null) {
										var p = cx_ite7;
										if(p.x < _this7.aabb.minx) {
											_this7.aabb.minx = p.x;
										}
										if(p.x > _this7.aabb.maxx) {
											_this7.aabb.maxx = p.x;
										}
										if(p.y < _this7.aabb.miny) {
											_this7.aabb.miny = p.y;
										}
										if(p.y > _this7.aabb.maxy) {
											_this7.aabb.maxy = p.y;
										}
										cx_ite7 = cx_ite7.next;
									}
								}
							}
						}
						var _this9 = cur.aabb;
						var x = s1.aabb;
						if(x.minx < _this9.minx) {
							_this9.minx = x.minx;
						}
						if(x.maxx > _this9.maxx) {
							_this9.maxx = x.maxx;
						}
						if(x.miny < _this9.miny) {
							_this9.miny = x.miny;
						}
						if(x.maxy > _this9.maxy) {
							_this9.maxy = x.maxy;
						}
						cx_ite4 = cx_ite4.next;
					}
				}
				cur.validate_worldCOM();
			}
			cur.validate_gravMass();
			if(cur.zip_axis) {
				cur.zip_axis = false;
				cur.axisx = Math.sin(cur.rot);
				cur.axisy = Math.cos(cur.rot);
			}
			if(!cur.nomove && cur.type == 2 && cur.mass == 0) {
				throw haxe_Exception.thrown("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false");
			}
			if(!cur.norotate && cur.type == 2 && cur.inertia == 0) {
				throw haxe_Exception.thrown("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false");
			}
			var cx_ite8 = cur.shapes.head;
			while(cx_ite8 != null) {
				var shape = cx_ite8.elt;
				this.bphase.sync(shape);
				cx_ite8 = cx_ite8.next;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.active) {
				con.validate();
				if(con.component.woken && con.cbSet != null) {
					var cx_ite1 = con.cbSet.conlisteners.head;
					while(cx_ite1 != null) {
						var i = cx_ite1.elt;
						if(i.event != 2) {
							cx_ite1 = cx_ite1.next;
							continue;
						}
						var cb = this.push_callback(i);
						cb.event = 2;
						cb.constraint = con;
						cx_ite1 = cx_ite1.next;
					}
				}
				con.component.woken = false;
			}
			cx_ite = cx_ite.next;
		}
	}
	,updateVel: function(dt) {
		var pre = null;
		var linDrag = 1 - dt * this.global_lin_drag;
		var angDrag = 1 - dt * this.global_ang_drag;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			if(cur.smass != 0.0) {
				var time = dt * cur.imass;
				cur.velx = linDrag * cur.velx + (cur.forcex + this.gravityx * cur.gravMass) * time;
				cur.vely = linDrag * cur.vely + (cur.forcey + this.gravityy * cur.gravMass) * time;
			}
			if(cur.sinertia != 0.0) {
				var dpx = 0.0;
				var dpy = 0.0;
				dpx = cur.worldCOMx - cur.posx;
				dpy = cur.worldCOMy - cur.posy;
				var torque = cur.torque + (this.gravityy * dpx - this.gravityx * dpy) * cur.gravMass;
				cur.angvel = angDrag * cur.angvel + torque * dt * cur.iinertia;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
	}
	,updatePos: function(dt) {
		var MAX_VEL = 2 * Math.PI / dt;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cur.sweepTime = 0;
			cur.sweep_angvel = cur.angvel % MAX_VEL;
			var delta = dt - cur.sweepTime;
			if(delta != 0) {
				cur.sweepTime = dt;
				var t = delta;
				cur.posx += cur.velx * t;
				cur.posy += cur.vely * t;
				if(cur.angvel != 0) {
					var dr = cur.sweep_angvel * delta;
					cur.rot += dr;
					if(dr * dr > 0.0001) {
						cur.axisx = Math.sin(cur.rot);
						cur.axisy = Math.cos(cur.rot);
					} else {
						var d2 = dr * dr;
						var p = 1 - 0.5 * d2;
						var m = 1 - d2 * d2 / 8;
						var nx = (p * cur.axisx + dr * cur.axisy) * m;
						cur.axisy = (p * cur.axisy - dr * cur.axisx) * m;
						cur.axisx = nx;
					}
				}
			}
			if(!cur.disableCCD) {
				var linThreshold = nape_Config.staticCCDLinearThreshold * cur.sweepRadius;
				var angThreshold = nape_Config.staticCCDAngularThreshold;
				if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold * linThreshold || cur.angvel * cur.angvel * dt * dt > angThreshold * angThreshold || cur.type == 3) {
					var angvel = cur.sweep_angvel;
					if(angvel < 0) {
						angvel = -angvel;
					}
					var iangvel = 1 / angvel;
					var cx_ite1 = cur.shapes.head;
					while(cx_ite1 != null) {
						var s = cx_ite1.elt;
						var aabb = s.aabb;
						var minx = aabb.minx;
						var miny = aabb.miny;
						var maxx = aabb.maxx;
						var maxy = aabb.maxy;
						var count = angvel * dt * s.sweepCoef * 0.0083333333333333332 | 0;
						if(count > 8) {
							count = 8;
						}
						var anginc = angvel * dt / count;
						var delta1 = dt - cur.sweepTime;
						if(delta1 != 0) {
							cur.sweepTime = dt;
							var t1 = delta1;
							cur.posx += cur.velx * t1;
							cur.posy += cur.vely * t1;
							if(cur.angvel != 0) {
								var dr1 = cur.sweep_angvel * delta1;
								cur.rot += dr1;
								if(dr1 * dr1 > 0.0001) {
									cur.axisx = Math.sin(cur.rot);
									cur.axisy = Math.cos(cur.rot);
								} else {
									var d21 = dr1 * dr1;
									var p1 = 1 - 0.5 * d21;
									var m1 = 1 - d21 * d21 / 8;
									var nx1 = (p1 * cur.axisx + dr1 * cur.axisy) * m1;
									cur.axisy = (p1 * cur.axisy - dr1 * cur.axisx) * m1;
									cur.axisx = nx1;
								}
							}
						}
						if(s.type == 0) {
							var _this = s.circle;
							_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
							_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
							_this.aabb.minx = _this.worldCOMx - _this.radius;
							_this.aabb.miny = _this.worldCOMy - _this.radius;
							_this.aabb.maxx = _this.worldCOMx + _this.radius;
							_this.aabb.maxy = _this.worldCOMy + _this.radius;
						} else {
							var _this1 = s.polygon;
							var li = _this1.lverts.next;
							var p0 = _this1.gverts.next;
							var l = li;
							li = li.next;
							p0.x = _this1.body.posx + (_this1.body.axisy * l.x - _this1.body.axisx * l.y);
							p0.y = _this1.body.posy + (l.x * _this1.body.axisx + l.y * _this1.body.axisy);
							_this1.aabb.minx = p0.x;
							_this1.aabb.miny = p0.y;
							_this1.aabb.maxx = p0.x;
							_this1.aabb.maxy = p0.y;
							var cx_ite2 = _this1.gverts.next.next;
							while(cx_ite2 != null) {
								var p2 = cx_ite2;
								var l1 = li;
								li = li.next;
								p2.x = _this1.body.posx + (_this1.body.axisy * l1.x - _this1.body.axisx * l1.y);
								p2.y = _this1.body.posy + (l1.x * _this1.body.axisx + l1.y * _this1.body.axisy);
								if(p2.x < _this1.aabb.minx) {
									_this1.aabb.minx = p2.x;
								}
								if(p2.x > _this1.aabb.maxx) {
									_this1.aabb.maxx = p2.x;
								}
								if(p2.y < _this1.aabb.miny) {
									_this1.aabb.miny = p2.y;
								}
								if(p2.y > _this1.aabb.maxy) {
									_this1.aabb.maxy = p2.y;
								}
								cx_ite2 = cx_ite2.next;
							}
						}
						if(minx < aabb.minx) {
							aabb.minx = minx;
						} else {
							minx = aabb.minx;
						}
						if(miny < aabb.miny) {
							aabb.miny = miny;
						} else {
							miny = aabb.miny;
						}
						if(maxx > aabb.maxx) {
							aabb.maxx = maxx;
						} else {
							maxx = aabb.maxx;
						}
						if(maxy > aabb.maxy) {
							aabb.maxy = maxy;
						} else {
							maxy = aabb.maxy;
						}
						var _g = 1;
						var _g1 = count;
						while(_g < _g1) {
							var i = _g++;
							var dt1 = anginc * i * iangvel;
							var delta2 = dt1 - cur.sweepTime;
							if(delta2 != 0) {
								cur.sweepTime = dt1;
								var t2 = delta2;
								cur.posx += cur.velx * t2;
								cur.posy += cur.vely * t2;
								if(cur.angvel != 0) {
									var dr2 = cur.sweep_angvel * delta2;
									cur.rot += dr2;
									if(dr2 * dr2 > 0.0001) {
										cur.axisx = Math.sin(cur.rot);
										cur.axisy = Math.cos(cur.rot);
									} else {
										var d22 = dr2 * dr2;
										var p3 = 1 - 0.5 * d22;
										var m2 = 1 - d22 * d22 / 8;
										var nx2 = (p3 * cur.axisx + dr2 * cur.axisy) * m2;
										cur.axisy = (p3 * cur.axisy - dr2 * cur.axisx) * m2;
										cur.axisx = nx2;
									}
								}
							}
							if(s.type == 0) {
								var _this2 = s.circle;
								_this2.worldCOMx = _this2.body.posx + (_this2.body.axisy * _this2.localCOMx - _this2.body.axisx * _this2.localCOMy);
								_this2.worldCOMy = _this2.body.posy + (_this2.localCOMx * _this2.body.axisx + _this2.localCOMy * _this2.body.axisy);
								_this2.aabb.minx = _this2.worldCOMx - _this2.radius;
								_this2.aabb.miny = _this2.worldCOMy - _this2.radius;
								_this2.aabb.maxx = _this2.worldCOMx + _this2.radius;
								_this2.aabb.maxy = _this2.worldCOMy + _this2.radius;
							} else {
								var _this3 = s.polygon;
								var li1 = _this3.lverts.next;
								var p01 = _this3.gverts.next;
								var l2 = li1;
								li1 = li1.next;
								p01.x = _this3.body.posx + (_this3.body.axisy * l2.x - _this3.body.axisx * l2.y);
								p01.y = _this3.body.posy + (l2.x * _this3.body.axisx + l2.y * _this3.body.axisy);
								_this3.aabb.minx = p01.x;
								_this3.aabb.miny = p01.y;
								_this3.aabb.maxx = p01.x;
								_this3.aabb.maxy = p01.y;
								var cx_ite3 = _this3.gverts.next.next;
								while(cx_ite3 != null) {
									var p4 = cx_ite3;
									var l3 = li1;
									li1 = li1.next;
									p4.x = _this3.body.posx + (_this3.body.axisy * l3.x - _this3.body.axisx * l3.y);
									p4.y = _this3.body.posy + (l3.x * _this3.body.axisx + l3.y * _this3.body.axisy);
									if(p4.x < _this3.aabb.minx) {
										_this3.aabb.minx = p4.x;
									}
									if(p4.x > _this3.aabb.maxx) {
										_this3.aabb.maxx = p4.x;
									}
									if(p4.y < _this3.aabb.miny) {
										_this3.aabb.miny = p4.y;
									}
									if(p4.y > _this3.aabb.maxy) {
										_this3.aabb.maxy = p4.y;
									}
									cx_ite3 = cx_ite3.next;
								}
							}
							if(minx < aabb.minx) {
								aabb.minx = minx;
							} else {
								minx = aabb.minx;
							}
							if(miny < aabb.miny) {
								aabb.miny = miny;
							} else {
								miny = aabb.miny;
							}
							if(maxx > aabb.maxx) {
								aabb.maxx = maxx;
							} else {
								maxx = aabb.maxx;
							}
							if(maxy > aabb.maxy) {
								aabb.maxy = maxy;
							} else {
								maxy = aabb.maxy;
							}
						}
						this.bphase.sync(s);
						cx_ite1 = cx_ite1.next;
					}
					cur.sweepFrozen = false;
					if(cur.type == 2 && cur.bulletEnabled) {
						var linThreshold2 = nape_Config.bulletCCDLinearThreshold * cur.sweepRadius;
						var angThreshold2 = nape_Config.bulletCCDAngularThreshold;
						if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold2 * linThreshold2 || cur.angvel * cur.angvel * dt * dt > angThreshold2 * angThreshold2) {
							cur.bullet = true;
						}
					}
				} else {
					cur.sweepFrozen = true;
					cur.bullet = false;
				}
			} else {
				cur.sweepFrozen = true;
				cur.bullet = false;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cur.sweepTime = 0;
			cur.sweep_angvel = cur.angvel % MAX_VEL;
			var delta = dt - cur.sweepTime;
			if(delta != 0) {
				cur.sweepTime = dt;
				var t = delta;
				cur.posx += cur.velx * t;
				cur.posy += cur.vely * t;
				if(cur.angvel != 0) {
					var dr = cur.sweep_angvel * delta;
					cur.rot += dr;
					if(dr * dr > 0.0001) {
						cur.axisx = Math.sin(cur.rot);
						cur.axisy = Math.cos(cur.rot);
					} else {
						var d2 = dr * dr;
						var p = 1 - 0.5 * d2;
						var m = 1 - d2 * d2 / 8;
						var nx = (p * cur.axisx + dr * cur.axisy) * m;
						cur.axisy = (p * cur.axisy - dr * cur.axisx) * m;
						cur.axisx = nx;
					}
				}
			}
			if(!cur.disableCCD) {
				var linThreshold = nape_Config.staticCCDLinearThreshold * cur.sweepRadius;
				var angThreshold = nape_Config.staticCCDAngularThreshold;
				if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold * linThreshold || cur.angvel * cur.angvel * dt * dt > angThreshold * angThreshold || cur.type == 3) {
					var angvel = cur.sweep_angvel;
					if(angvel < 0) {
						angvel = -angvel;
					}
					var iangvel = 1 / angvel;
					var cx_ite1 = cur.shapes.head;
					while(cx_ite1 != null) {
						var s = cx_ite1.elt;
						var aabb = s.aabb;
						var minx = aabb.minx;
						var miny = aabb.miny;
						var maxx = aabb.maxx;
						var maxy = aabb.maxy;
						var count = angvel * dt * s.sweepCoef * 0.0083333333333333332 | 0;
						if(count > 8) {
							count = 8;
						}
						var anginc = angvel * dt / count;
						var delta1 = dt - cur.sweepTime;
						if(delta1 != 0) {
							cur.sweepTime = dt;
							var t1 = delta1;
							cur.posx += cur.velx * t1;
							cur.posy += cur.vely * t1;
							if(cur.angvel != 0) {
								var dr1 = cur.sweep_angvel * delta1;
								cur.rot += dr1;
								if(dr1 * dr1 > 0.0001) {
									cur.axisx = Math.sin(cur.rot);
									cur.axisy = Math.cos(cur.rot);
								} else {
									var d21 = dr1 * dr1;
									var p1 = 1 - 0.5 * d21;
									var m1 = 1 - d21 * d21 / 8;
									var nx1 = (p1 * cur.axisx + dr1 * cur.axisy) * m1;
									cur.axisy = (p1 * cur.axisy - dr1 * cur.axisx) * m1;
									cur.axisx = nx1;
								}
							}
						}
						if(s.type == 0) {
							var _this = s.circle;
							_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
							_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
							_this.aabb.minx = _this.worldCOMx - _this.radius;
							_this.aabb.miny = _this.worldCOMy - _this.radius;
							_this.aabb.maxx = _this.worldCOMx + _this.radius;
							_this.aabb.maxy = _this.worldCOMy + _this.radius;
						} else {
							var _this1 = s.polygon;
							var li = _this1.lverts.next;
							var p0 = _this1.gverts.next;
							var l = li;
							li = li.next;
							p0.x = _this1.body.posx + (_this1.body.axisy * l.x - _this1.body.axisx * l.y);
							p0.y = _this1.body.posy + (l.x * _this1.body.axisx + l.y * _this1.body.axisy);
							_this1.aabb.minx = p0.x;
							_this1.aabb.miny = p0.y;
							_this1.aabb.maxx = p0.x;
							_this1.aabb.maxy = p0.y;
							var cx_ite2 = _this1.gverts.next.next;
							while(cx_ite2 != null) {
								var p2 = cx_ite2;
								var l1 = li;
								li = li.next;
								p2.x = _this1.body.posx + (_this1.body.axisy * l1.x - _this1.body.axisx * l1.y);
								p2.y = _this1.body.posy + (l1.x * _this1.body.axisx + l1.y * _this1.body.axisy);
								if(p2.x < _this1.aabb.minx) {
									_this1.aabb.minx = p2.x;
								}
								if(p2.x > _this1.aabb.maxx) {
									_this1.aabb.maxx = p2.x;
								}
								if(p2.y < _this1.aabb.miny) {
									_this1.aabb.miny = p2.y;
								}
								if(p2.y > _this1.aabb.maxy) {
									_this1.aabb.maxy = p2.y;
								}
								cx_ite2 = cx_ite2.next;
							}
						}
						if(minx < aabb.minx) {
							aabb.minx = minx;
						} else {
							minx = aabb.minx;
						}
						if(miny < aabb.miny) {
							aabb.miny = miny;
						} else {
							miny = aabb.miny;
						}
						if(maxx > aabb.maxx) {
							aabb.maxx = maxx;
						} else {
							maxx = aabb.maxx;
						}
						if(maxy > aabb.maxy) {
							aabb.maxy = maxy;
						} else {
							maxy = aabb.maxy;
						}
						var _g = 1;
						var _g1 = count;
						while(_g < _g1) {
							var i = _g++;
							var dt1 = anginc * i * iangvel;
							var delta2 = dt1 - cur.sweepTime;
							if(delta2 != 0) {
								cur.sweepTime = dt1;
								var t2 = delta2;
								cur.posx += cur.velx * t2;
								cur.posy += cur.vely * t2;
								if(cur.angvel != 0) {
									var dr2 = cur.sweep_angvel * delta2;
									cur.rot += dr2;
									if(dr2 * dr2 > 0.0001) {
										cur.axisx = Math.sin(cur.rot);
										cur.axisy = Math.cos(cur.rot);
									} else {
										var d22 = dr2 * dr2;
										var p3 = 1 - 0.5 * d22;
										var m2 = 1 - d22 * d22 / 8;
										var nx2 = (p3 * cur.axisx + dr2 * cur.axisy) * m2;
										cur.axisy = (p3 * cur.axisy - dr2 * cur.axisx) * m2;
										cur.axisx = nx2;
									}
								}
							}
							if(s.type == 0) {
								var _this2 = s.circle;
								_this2.worldCOMx = _this2.body.posx + (_this2.body.axisy * _this2.localCOMx - _this2.body.axisx * _this2.localCOMy);
								_this2.worldCOMy = _this2.body.posy + (_this2.localCOMx * _this2.body.axisx + _this2.localCOMy * _this2.body.axisy);
								_this2.aabb.minx = _this2.worldCOMx - _this2.radius;
								_this2.aabb.miny = _this2.worldCOMy - _this2.radius;
								_this2.aabb.maxx = _this2.worldCOMx + _this2.radius;
								_this2.aabb.maxy = _this2.worldCOMy + _this2.radius;
							} else {
								var _this3 = s.polygon;
								var li1 = _this3.lverts.next;
								var p01 = _this3.gverts.next;
								var l2 = li1;
								li1 = li1.next;
								p01.x = _this3.body.posx + (_this3.body.axisy * l2.x - _this3.body.axisx * l2.y);
								p01.y = _this3.body.posy + (l2.x * _this3.body.axisx + l2.y * _this3.body.axisy);
								_this3.aabb.minx = p01.x;
								_this3.aabb.miny = p01.y;
								_this3.aabb.maxx = p01.x;
								_this3.aabb.maxy = p01.y;
								var cx_ite3 = _this3.gverts.next.next;
								while(cx_ite3 != null) {
									var p4 = cx_ite3;
									var l3 = li1;
									li1 = li1.next;
									p4.x = _this3.body.posx + (_this3.body.axisy * l3.x - _this3.body.axisx * l3.y);
									p4.y = _this3.body.posy + (l3.x * _this3.body.axisx + l3.y * _this3.body.axisy);
									if(p4.x < _this3.aabb.minx) {
										_this3.aabb.minx = p4.x;
									}
									if(p4.x > _this3.aabb.maxx) {
										_this3.aabb.maxx = p4.x;
									}
									if(p4.y < _this3.aabb.miny) {
										_this3.aabb.miny = p4.y;
									}
									if(p4.y > _this3.aabb.maxy) {
										_this3.aabb.maxy = p4.y;
									}
									cx_ite3 = cx_ite3.next;
								}
							}
							if(minx < aabb.minx) {
								aabb.minx = minx;
							} else {
								minx = aabb.minx;
							}
							if(miny < aabb.miny) {
								aabb.miny = miny;
							} else {
								miny = aabb.miny;
							}
							if(maxx > aabb.maxx) {
								aabb.maxx = maxx;
							} else {
								maxx = aabb.maxx;
							}
							if(maxy > aabb.maxy) {
								aabb.maxy = maxy;
							} else {
								maxy = aabb.maxy;
							}
						}
						this.bphase.sync(s);
						cx_ite1 = cx_ite1.next;
					}
					cur.sweepFrozen = false;
					if(cur.type == 2 && cur.bulletEnabled) {
						var linThreshold2 = nape_Config.bulletCCDLinearThreshold * cur.sweepRadius;
						var angThreshold2 = nape_Config.bulletCCDAngularThreshold;
						if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold2 * linThreshold2 || cur.angvel * cur.angvel * dt * dt > angThreshold2 * angThreshold2) {
							cur.bullet = true;
						}
					}
				} else {
					cur.sweepFrozen = true;
					cur.bullet = false;
				}
			} else {
				cur.sweepFrozen = true;
				cur.bullet = false;
			}
			cx_ite = cx_ite.next;
		}
	}
	,presteparb: function(arb,dt,cont) {
		if(cont == null) {
			cont = false;
		}
		var _gthis = this;
		if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			return true;
		}
		if(!arb.cleared || arb.present != 0 || arb.intchange) {
			var endcb = !cont && arb.up_stamp == this.stamp - 1 && !arb.cleared && !arb.intchange;
			var begcb = arb.fresh && !arb.cleared && !arb.intchange;
			if(endcb) {
				arb.endGenerated = this.stamp;
			}
			if(begcb || endcb || arb.cleared || arb.intchange) {
				var s1 = arb.ws1;
				var s2 = arb.ws2;
				var _this = this.mrca1;
				while(_this.head != null) {
					var ret = _this.head;
					_this.head = ret.next;
					var o = ret;
					o.elt = null;
					o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
					if(_this.head == null) {
						_this.pushmod = true;
					}
					_this.modified = true;
					_this.length--;
				}
				_this.pushmod = true;
				var _this = this.mrca2;
				while(_this.head != null) {
					var ret = _this.head;
					_this.head = ret.next;
					var o = ret;
					o.elt = null;
					o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
					zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
					if(_this.head == null) {
						_this.pushmod = true;
					}
					_this.modified = true;
					_this.length--;
				}
				_this.pushmod = true;
				if(s1.cbSet != null) {
					var _this = this.mrca1;
					var ret;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
						ret.next = null;
					}
					ret.elt = s1;
					var temp = ret;
					temp.next = _this.head;
					_this.head = temp;
					_this.modified = true;
					_this.length++;
				}
				if(s1.body.cbSet != null) {
					var _this = this.mrca1;
					var o = s1.body;
					var ret;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
						ret.next = null;
					}
					ret.elt = o;
					var temp = ret;
					temp.next = _this.head;
					_this.head = temp;
					_this.modified = true;
					_this.length++;
				}
				if(s2.cbSet != null) {
					var _this = this.mrca2;
					var ret;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
						ret.next = null;
					}
					ret.elt = s2;
					var temp = ret;
					temp.next = _this.head;
					_this.head = temp;
					_this.modified = true;
					_this.length++;
				}
				if(s2.body.cbSet != null) {
					var _this = this.mrca2;
					var o = s2.body;
					var ret;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
						ret.next = null;
					}
					ret.elt = o;
					var temp = ret;
					temp.next = _this.head;
					_this.head = temp;
					_this.modified = true;
					_this.length++;
				}
				var c1 = s1.body.compound;
				var c2 = s2.body.compound;
				while(c1 != c2) {
					var d1 = c1 == null ? 0 : c1.depth;
					var d2 = c2 == null ? 0 : c2.depth;
					if(d1 < d2) {
						if(c2.cbSet != null) {
							var _this = this.mrca2;
							var ret;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
								ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
							} else {
								ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
								ret.next = null;
							}
							ret.elt = c2;
							var temp = ret;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
						}
						c2 = c2.compound;
					} else {
						if(c1.cbSet != null) {
							var _this1 = this.mrca1;
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = c1;
							var temp1 = ret1;
							temp1.next = _this1.head;
							_this1.head = temp1;
							_this1.modified = true;
							_this1.length++;
						}
						c1 = c1.compound;
					}
				}
				var cx_ite = this.mrca1.head;
				while(cx_ite != null) {
					var i1 = cx_ite.elt;
					var cx_ite1 = this.mrca2.head;
					while(cx_ite1 != null) {
						var i2 = cx_ite1.elt;
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						var _this = cb1.manager;
						var ret = null;
						var pairs = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
						var cx_ite2 = pairs.head;
						while(cx_ite2 != null) {
							var p = cx_ite2.elt;
							if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
								ret = p;
								break;
							}
							cx_ite2 = cx_ite2.next;
						}
						if(ret == null) {
							var ret1;
							if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
								ret1 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
							} else {
								ret1 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
								zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.zip_listeners = true;
							if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
								ret1.a = cb1;
								ret1.b = cb2;
							} else {
								ret1.a = cb2;
								ret1.b = cb1;
							}
							ret = ret1;
							cb1.cbpairs.add(ret);
							if(cb2 != cb1) {
								cb2.cbpairs.add(ret);
							}
						}
						if(ret.zip_listeners) {
							ret.zip_listeners = false;
							ret.__validate();
						}
						if(ret.listeners.head == null) {
							cx_ite1 = cx_ite1.next;
							continue;
						}
						var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
						if(begcb || arb.intchange) {
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							var _this1 = cb1.manager;
							var ret2 = null;
							var pairs1 = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
							var cx_ite3 = pairs1.head;
							while(cx_ite3 != null) {
								var p1 = cx_ite3.elt;
								if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
									ret2 = p1;
									break;
								}
								cx_ite3 = cx_ite3.next;
							}
							if(ret2 == null) {
								var ret3;
								if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
									ret3 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
								} else {
									ret3 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
									zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret3.next;
									ret3.next = null;
								}
								ret3.zip_listeners = true;
								if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
									ret3.a = cb1;
									ret3.b = cb2;
								} else {
									ret3.a = cb2;
									ret3.b = cb1;
								}
								ret2 = ret3;
								cb1.cbpairs.add(ret2);
								if(cb2 != cb1) {
									cb2.cbpairs.add(ret2);
								}
							}
							if(ret2.zip_listeners) {
								ret2.zip_listeners = false;
								ret2.__validate();
							}
							var cx_ite4 = ret2.listeners.head;
							while(cx_ite4 != null) {
								var x = cx_ite4.elt;
								if(x.event == 0) {
									if((x.itype & arb.type) != 0 && callbackset.empty_arb(x.itype)) {
										var cb = _gthis.push_callback(x);
										cb.event = 0;
										var o1 = callbackset.int1;
										var o2 = callbackset.int2;
										var tmp;
										var _this2 = x.options1;
										var xs = o1.cbTypes;
										if(_this2.nonemptyintersection(xs,_this2.includes) && !_this2.nonemptyintersection(xs,_this2.excludes)) {
											var _this3 = x.options2;
											var xs1 = o2.cbTypes;
											tmp = _this3.nonemptyintersection(xs1,_this3.includes) && !_this3.nonemptyintersection(xs1,_this3.excludes);
										} else {
											tmp = false;
										}
										if(tmp) {
											cb.int1 = o1;
											cb.int2 = o2;
										} else {
											cb.int1 = o2;
											cb.int2 = o1;
										}
										cb.set = callbackset;
									}
								}
								cx_ite4 = cx_ite4.next;
							}
							var tmp1;
							var ret4;
							ret4 = false;
							var cx_ite5 = callbackset.arbiters.head;
							while(cx_ite5 != null) {
								var npite = cx_ite5.elt;
								if(npite == arb) {
									ret4 = true;
									break;
								}
								cx_ite5 = cx_ite5.next;
							}
							if(!ret4) {
								var _this4 = callbackset.arbiters;
								var ret5;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
									ret5 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
								} else {
									ret5 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret5.next;
									ret5.next = null;
								}
								ret5.elt = arb;
								var temp = ret5;
								temp.next = _this4.head;
								_this4.head = temp;
								_this4.modified = true;
								_this4.length++;
								tmp1 = true;
							} else {
								tmp1 = false;
							}
							if(tmp1) {
								arb.present++;
							}
						} else {
							arb.present--;
							callbackset.remove_arb(arb);
							var _this5 = cb1.manager;
							var ret6 = null;
							var pairs2 = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
							var cx_ite6 = pairs2.head;
							while(cx_ite6 != null) {
								var p2 = cx_ite6.elt;
								if(p2.a == cb1 && p2.b == cb2 || p2.a == cb2 && p2.b == cb1) {
									ret6 = p2;
									break;
								}
								cx_ite6 = cx_ite6.next;
							}
							if(ret6 == null) {
								var ret7;
								if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
									ret7 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
								} else {
									ret7 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
									zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret7.next;
									ret7.next = null;
								}
								ret7.zip_listeners = true;
								if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
									ret7.a = cb1;
									ret7.b = cb2;
								} else {
									ret7.a = cb2;
									ret7.b = cb1;
								}
								ret6 = ret7;
								cb1.cbpairs.add(ret6);
								if(cb2 != cb1) {
									cb2.cbpairs.add(ret6);
								}
							}
							if(ret6.zip_listeners) {
								ret6.zip_listeners = false;
								ret6.__validate();
							}
							var cx_ite7 = ret6.listeners.head;
							while(cx_ite7 != null) {
								var x1 = cx_ite7.elt;
								if(x1.event == 1) {
									if((x1.itype & arb.type) != 0 && callbackset.empty_arb(x1.itype)) {
										var cb3 = _gthis.push_callback(x1);
										cb3.event = 1;
										var o11 = callbackset.int1;
										var o21 = callbackset.int2;
										var tmp2;
										var _this6 = x1.options1;
										var xs2 = o11.cbTypes;
										if(_this6.nonemptyintersection(xs2,_this6.includes) && !_this6.nonemptyintersection(xs2,_this6.excludes)) {
											var _this7 = x1.options2;
											var xs3 = o21.cbTypes;
											tmp2 = _this7.nonemptyintersection(xs3,_this7.includes) && !_this7.nonemptyintersection(xs3,_this7.excludes);
										} else {
											tmp2 = false;
										}
										if(tmp2) {
											cb3.int1 = o11;
											cb3.int2 = o21;
										} else {
											cb3.int1 = o21;
											cb3.int2 = o11;
										}
										cb3.set = callbackset;
									}
								}
								cx_ite7 = cx_ite7.next;
							}
							if(callbackset.arbiters.head == null) {
								this.remove_callbackset(callbackset);
							}
						}
						cx_ite1 = cx_ite1.next;
					}
					cx_ite = cx_ite.next;
				}
			}
			arb.fresh = false;
			arb.intchange = false;
		}
		if(arb.cleared || arb.up_stamp + (arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL ? nape_Config.arbiterExpirationDelay : 0) < this.stamp) {
			if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) {
				var _this = arb.sensorarb;
				if(!_this.cleared) {
					var _this1 = _this.b1.arbiters;
					var pre = null;
					var cur = _this1.head;
					var ret = false;
					while(cur != null) {
						if(cur.elt == _this) {
							var old;
							var ret1;
							if(pre == null) {
								old = _this1.head;
								ret1 = old.next;
								_this1.head = ret1;
								if(_this1.head == null) {
									_this1.pushmod = true;
								}
							} else {
								old = pre.next;
								ret1 = old.next;
								pre.next = ret1;
								if(ret1 == null) {
									_this1.pushmod = true;
								}
							}
							var o = old;
							o.elt = null;
							o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
							_this1.modified = true;
							_this1.length--;
							_this1.pushmod = true;
							ret = true;
							break;
						}
						pre = cur;
						cur = cur.next;
					}
					var _this1 = _this.b2.arbiters;
					var pre = null;
					var cur = _this1.head;
					var ret = false;
					while(cur != null) {
						if(cur.elt == _this) {
							var old;
							var ret1;
							if(pre == null) {
								old = _this1.head;
								ret1 = old.next;
								_this1.head = ret1;
								if(_this1.head == null) {
									_this1.pushmod = true;
								}
							} else {
								old = pre.next;
								ret1 = old.next;
								pre.next = ret1;
								if(ret1 == null) {
									_this1.pushmod = true;
								}
							}
							var o = old;
							o.elt = null;
							o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
							_this1.modified = true;
							_this1.length--;
							_this1.pushmod = true;
							ret = true;
							break;
						}
						pre = cur;
						cur = cur.next;
					}
					if(_this.pair != null) {
						_this.pair.arb = null;
						_this.pair = null;
					}
				}
				_this.b1 = _this.b2 = null;
				_this.active = false;
				_this.intchange = false;
				var o = _this;
				o.next = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
				zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = o;
			} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
				var _this = arb.fluidarb;
				if(!_this.cleared) {
					var _this1 = _this.b1.arbiters;
					var pre = null;
					var cur = _this1.head;
					var ret = false;
					while(cur != null) {
						if(cur.elt == _this) {
							var old;
							var ret1;
							if(pre == null) {
								old = _this1.head;
								ret1 = old.next;
								_this1.head = ret1;
								if(_this1.head == null) {
									_this1.pushmod = true;
								}
							} else {
								old = pre.next;
								ret1 = old.next;
								pre.next = ret1;
								if(ret1 == null) {
									_this1.pushmod = true;
								}
							}
							var o = old;
							o.elt = null;
							o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
							_this1.modified = true;
							_this1.length--;
							_this1.pushmod = true;
							ret = true;
							break;
						}
						pre = cur;
						cur = cur.next;
					}
					var _this1 = _this.b2.arbiters;
					var pre = null;
					var cur = _this1.head;
					var ret = false;
					while(cur != null) {
						if(cur.elt == _this) {
							var old;
							var ret1;
							if(pre == null) {
								old = _this1.head;
								ret1 = old.next;
								_this1.head = ret1;
								if(_this1.head == null) {
									_this1.pushmod = true;
								}
							} else {
								old = pre.next;
								ret1 = old.next;
								pre.next = ret1;
								if(ret1 == null) {
									_this1.pushmod = true;
								}
							}
							var o = old;
							o.elt = null;
							o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
							_this1.modified = true;
							_this1.length--;
							_this1.pushmod = true;
							ret = true;
							break;
						}
						pre = cur;
						cur = cur.next;
					}
					if(_this.pair != null) {
						_this.pair.arb = null;
						_this.pair = null;
					}
				}
				_this.b1 = _this.b2 = null;
				_this.active = false;
				_this.intchange = false;
				var o = _this;
				o.next = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
				zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = o;
				_this.pre_dt = -1.0;
			} else {
				var _this = arb.colarb;
				if(!_this.cleared) {
					var _this1 = _this.b1.arbiters;
					var pre = null;
					var cur = _this1.head;
					var ret = false;
					while(cur != null) {
						if(cur.elt == _this) {
							var old;
							var ret1;
							if(pre == null) {
								old = _this1.head;
								ret1 = old.next;
								_this1.head = ret1;
								if(_this1.head == null) {
									_this1.pushmod = true;
								}
							} else {
								old = pre.next;
								ret1 = old.next;
								pre.next = ret1;
								if(ret1 == null) {
									_this1.pushmod = true;
								}
							}
							var o = old;
							o.elt = null;
							o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
							_this1.modified = true;
							_this1.length--;
							_this1.pushmod = true;
							ret = true;
							break;
						}
						pre = cur;
						cur = cur.next;
					}
					var _this1 = _this.b2.arbiters;
					var pre = null;
					var cur = _this1.head;
					var ret = false;
					while(cur != null) {
						if(cur.elt == _this) {
							var old;
							var ret1;
							if(pre == null) {
								old = _this1.head;
								ret1 = old.next;
								_this1.head = ret1;
								if(_this1.head == null) {
									_this1.pushmod = true;
								}
							} else {
								old = pre.next;
								ret1 = old.next;
								pre.next = ret1;
								if(ret1 == null) {
									_this1.pushmod = true;
								}
							}
							var o = old;
							o.elt = null;
							o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
							zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
							_this1.modified = true;
							_this1.length--;
							_this1.pushmod = true;
							ret = true;
							break;
						}
						pre = cur;
						cur = cur.next;
					}
					if(_this.pair != null) {
						_this.pair.arb = null;
						_this.pair = null;
					}
				}
				_this.b1 = _this.b2 = null;
				_this.active = false;
				_this.intchange = false;
				while(_this.contacts.next != null) {
					var _this1 = _this.contacts;
					var ret = _this1.next;
					_this1.pop();
					var o = ret;
					o.arbiter = null;
					o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
					zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
					var _this2 = _this.innards;
					var ret1 = _this2.next;
					_this2.next = ret1.next;
					ret1._inuse = false;
					if(_this2.next == null) {
						_this2.pushmod = true;
					}
					_this2.modified = true;
					_this2.length--;
				}
				var o = _this;
				o.userdef_dyn_fric = false;
				o.userdef_stat_fric = false;
				o.userdef_restitution = false;
				o.userdef_rfric = false;
				o.__ref_edge1 = o.__ref_edge2 = null;
				o.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
				zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = o;
				_this.pre_dt = -1.0;
			}
			return true;
		}
		var pact = arb.active;
		arb.active = arb.presentable = arb.up_stamp == this.stamp;
		if((arb.immState & 1) != 0) {
			if(arb.active && arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) {
				if(arb.colarb != null) {
					var _this = arb.colarb;
					if(_this.invalidated) {
						_this.invalidated = false;
						if(!_this.userdef_restitution) {
							if(_this.s1.material.elasticity <= -Infinity || _this.s2.material.elasticity <= -Infinity) {
								_this.restitution = 0;
							} else if(_this.s1.material.elasticity >= Infinity || _this.s2.material.elasticity >= Infinity) {
								_this.restitution = 1;
							} else {
								_this.restitution = (_this.s1.material.elasticity + _this.s2.material.elasticity) / 2;
							}
							if(_this.restitution < 0) {
								_this.restitution = 0;
							}
							if(_this.restitution > 1) {
								_this.restitution = 1;
							}
						}
						if(!_this.userdef_dyn_fric) {
							_this.dyn_fric = Math.sqrt(_this.s1.material.dynamicFriction * _this.s2.material.dynamicFriction);
						}
						if(!_this.userdef_stat_fric) {
							_this.stat_fric = Math.sqrt(_this.s1.material.staticFriction * _this.s2.material.staticFriction);
						}
						if(!_this.userdef_rfric) {
							_this.rfric = Math.sqrt(_this.s1.material.rollingFriction * _this.s2.material.rollingFriction);
						}
					}
					if(_this.pre_dt == -1.0) {
						_this.pre_dt = dt;
					}
					var dtratio = dt / _this.pre_dt;
					_this.pre_dt = dt;
					var mass_sum = _this.b1.smass + _this.b2.smass;
					_this.hc2 = false;
					var fst = true;
					var statType = _this.b1.type != 2 || _this.b2.type != 2;
					var bias = statType ? _this.continuous ? nape_Config.contactContinuousStaticBiasCoef : nape_Config.contactStaticBiasCoef : _this.continuous ? nape_Config.contactContinuousBiasCoef : nape_Config.contactBiasCoef;
					_this.biasCoef = bias;
					_this.continuous = false;
					var pre = null;
					var prei = null;
					var cx_itei = _this.innards.next;
					var cx_ite = _this.contacts.next;
					while(cx_ite != null) {
						var c = cx_ite;
						if(c.stamp + nape_Config.arbiterExpirationDelay < _this.stamp) {
							var _this1 = _this.contacts;
							var old;
							var ret;
							if(pre == null) {
								old = _this1.next;
								ret = old.next;
								_this1.next = ret;
								if(_this1.next == null) {
									_this1.pushmod = true;
								}
							} else {
								old = pre.next;
								ret = old.next;
								pre.next = ret;
								if(ret == null) {
									_this1.pushmod = true;
								}
							}
							old._inuse = false;
							_this1.modified = true;
							_this1.length--;
							_this1.pushmod = true;
							cx_ite = ret;
							var _this2 = _this.innards;
							var old1;
							var ret1;
							if(prei == null) {
								old1 = _this2.next;
								ret1 = old1.next;
								_this2.next = ret1;
								if(_this2.next == null) {
									_this2.pushmod = true;
								}
							} else {
								old1 = prei.next;
								ret1 = old1.next;
								prei.next = ret1;
								if(ret1 == null) {
									_this2.pushmod = true;
								}
							}
							old1._inuse = false;
							_this2.modified = true;
							_this2.length--;
							_this2.pushmod = true;
							cx_itei = ret1;
							var o = c;
							o.arbiter = null;
							o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
							zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
							continue;
						}
						var ci = c.inner;
						var pact1 = c.active;
						c.active = c.stamp == _this.stamp;
						if(c.active) {
							if(fst) {
								fst = false;
								_this.c1 = ci;
								_this.oc1 = c;
							} else {
								_this.hc2 = true;
								_this.c2 = ci;
								_this.oc2 = c;
							}
							ci.r2x = c.px - _this.b2.posx;
							ci.r2y = c.py - _this.b2.posy;
							ci.r1x = c.px - _this.b1.posx;
							ci.r1y = c.py - _this.b1.posy;
							var x = ci.r2x * _this.nx + ci.r2y * _this.ny;
							var kt = mass_sum + _this.b2.sinertia * (x * x);
							var x1 = ci.r1x * _this.nx + ci.r1y * _this.ny;
							kt += _this.b1.sinertia * (x1 * x1);
							ci.tMass = kt < nape_Config.epsilon * nape_Config.epsilon ? 0 : 1.0 / kt;
							var x2 = _this.ny * ci.r2x - _this.nx * ci.r2y;
							var nt = mass_sum + _this.b2.sinertia * (x2 * x2);
							var x3 = _this.ny * ci.r1x - _this.nx * ci.r1y;
							nt += _this.b1.sinertia * (x3 * x3);
							ci.nMass = nt < nape_Config.epsilon * nape_Config.epsilon ? 0 : 1.0 / nt;
							var vrx = 0.0;
							var vry = 0.0;
							var ang = _this.b2.angvel + _this.b2.kinangvel;
							vrx = _this.b2.velx + _this.b2.kinvelx - ci.r2y * ang;
							vry = _this.b2.vely + _this.b2.kinvely + ci.r2x * ang;
							ang = _this.b1.angvel + _this.b1.kinangvel;
							vrx -= _this.b1.velx + _this.b1.kinvelx - ci.r1y * ang;
							vry -= _this.b1.vely + _this.b1.kinvely + ci.r1x * ang;
							var vdot = _this.nx * vrx + _this.ny * vry;
							c.elasticity = _this.restitution;
							ci.bounce = vdot * c.elasticity;
							if(ci.bounce > -nape_Config.elasticThreshold) {
								ci.bounce = 0;
							}
							vdot = vry * _this.nx - vrx * _this.ny;
							var thr = nape_Config.staticFrictionThreshold;
							if(vdot * vdot > thr * thr) {
								ci.friction = _this.dyn_fric;
							} else {
								ci.friction = _this.stat_fric;
							}
							ci.jnAcc *= dtratio;
							ci.jtAcc *= dtratio;
						}
						if(pact1 != c.active) {
							_this.contacts.modified = true;
						}
						pre = cx_ite;
						prei = cx_itei;
						cx_itei = cx_itei.next;
						cx_ite = cx_ite.next;
					}
					if(_this.hc2) {
						_this.hpc2 = true;
						if(_this.oc1.posOnly) {
							var tmp = _this.c1;
							_this.c1 = _this.c2;
							_this.c2 = tmp;
							var tmp2 = _this.oc1;
							_this.oc1 = _this.oc2;
							_this.oc2 = tmp2;
							_this.hc2 = false;
						} else if(_this.oc2.posOnly) {
							_this.hc2 = false;
						}
						if(_this.oc1.posOnly) {
							fst = true;
						}
					} else {
						_this.hpc2 = false;
					}
					_this.jrAcc *= dtratio;
					if(!fst) {
						_this.rn1a = _this.ny * _this.c1.r1x - _this.nx * _this.c1.r1y;
						_this.rt1a = _this.c1.r1x * _this.nx + _this.c1.r1y * _this.ny;
						_this.rn1b = _this.ny * _this.c1.r2x - _this.nx * _this.c1.r2y;
						_this.rt1b = _this.c1.r2x * _this.nx + _this.c1.r2y * _this.ny;
						_this.k1x = _this.b2.kinvelx - _this.c1.r2y * _this.b2.kinangvel - (_this.b1.kinvelx - _this.c1.r1y * _this.b1.kinangvel);
						_this.k1y = _this.b2.kinvely + _this.c1.r2x * _this.b2.kinangvel - (_this.b1.kinvely + _this.c1.r1x * _this.b1.kinangvel);
					}
					if(_this.hc2) {
						_this.rn2a = _this.ny * _this.c2.r1x - _this.nx * _this.c2.r1y;
						_this.rt2a = _this.c2.r1x * _this.nx + _this.c2.r1y * _this.ny;
						_this.rn2b = _this.ny * _this.c2.r2x - _this.nx * _this.c2.r2y;
						_this.rt2b = _this.c2.r2x * _this.nx + _this.c2.r2y * _this.ny;
						_this.k2x = _this.b2.kinvelx - _this.c2.r2y * _this.b2.kinangvel - (_this.b1.kinvelx - _this.c2.r1y * _this.b1.kinangvel);
						_this.k2y = _this.b2.kinvely + _this.c2.r2x * _this.b2.kinangvel - (_this.b1.kinvely + _this.c2.r1x * _this.b1.kinangvel);
						_this.kMassa = mass_sum + _this.b1.sinertia * _this.rn1a * _this.rn1a + _this.b2.sinertia * _this.rn1b * _this.rn1b;
						_this.kMassb = mass_sum + _this.b1.sinertia * _this.rn1a * _this.rn2a + _this.b2.sinertia * _this.rn1b * _this.rn2b;
						_this.kMassc = mass_sum + _this.b1.sinertia * _this.rn2a * _this.rn2a + _this.b2.sinertia * _this.rn2b * _this.rn2b;
						var norm = _this.kMassa * _this.kMassa + 2 * _this.kMassb * _this.kMassb + _this.kMassc * _this.kMassc;
						if(norm < nape_Config.illConditionedThreshold * (_this.kMassa * _this.kMassc - _this.kMassb * _this.kMassb)) {
							_this.Ka = _this.kMassa;
							_this.Kb = _this.kMassb;
							_this.Kc = _this.kMassc;
							var det = _this.kMassa * _this.kMassc - _this.kMassb * _this.kMassb;
							if(det != det) {
								_this.kMassa = _this.kMassb = _this.kMassc = 0;
							} else if(det == 0) {
								var flag = 0;
								if(_this.kMassa != 0) {
									_this.kMassa = 1 / _this.kMassa;
								} else {
									_this.kMassa = 0;
									flag |= 1;
								}
								if(_this.kMassc != 0) {
									_this.kMassc = 1 / _this.kMassc;
								} else {
									_this.kMassc = 0;
									flag |= 2;
								}
								_this.kMassb = 0;
							} else {
								det = 1 / det;
								var t = _this.kMassc * det;
								_this.kMassc = _this.kMassa * det;
								_this.kMassa = t;
								_this.kMassb *= -det;
							}
						} else {
							_this.hc2 = false;
							if(_this.oc2.dist < _this.oc1.dist) {
								var t = _this.c1;
								_this.c1 = _this.c2;
								_this.c2 = t;
							}
							_this.oc2.active = false;
							_this.contacts.modified = true;
						}
					}
					_this.surfacex = _this.b2.svelx;
					_this.surfacey = _this.b2.svely;
					var t = 1.0;
					_this.surfacex += _this.b1.svelx * t;
					_this.surfacey += _this.b1.svely * t;
					_this.surfacex = -_this.surfacex;
					_this.surfacey = -_this.surfacey;
					_this.rMass = _this.b1.sinertia + _this.b2.sinertia;
					if(_this.rMass != 0) {
						_this.rMass = 1 / _this.rMass;
					}
					if(fst) {
						arb.active = false;
					}
				} else {
					var _this = arb.fluidarb;
					if(_this.pre_dt == -1.0) {
						_this.pre_dt = dt;
					}
					var dtratio = dt / _this.pre_dt;
					_this.pre_dt = dt;
					_this.r1x = _this.centroidx - _this.b1.posx;
					_this.r1y = _this.centroidy - _this.b1.posy;
					_this.r2x = _this.centroidx - _this.b2.posx;
					_this.r2y = _this.centroidy - _this.b2.posy;
					var g1x = 0.0;
					var g1y = 0.0;
					if(_this.ws1.fluidEnabled && _this.ws1.fluidProperties.wrap_gravity != null) {
						g1x = _this.ws1.fluidProperties.gravityx;
						g1y = _this.ws1.fluidProperties.gravityy;
					} else {
						g1x = this.gravityx;
						g1y = this.gravityy;
					}
					var g2x = 0.0;
					var g2y = 0.0;
					if(_this.ws2.fluidEnabled && _this.ws2.fluidProperties.wrap_gravity != null) {
						g2x = _this.ws2.fluidProperties.gravityx;
						g2y = _this.ws2.fluidProperties.gravityy;
					} else {
						g2x = this.gravityx;
						g2y = this.gravityy;
					}
					var buoyx = 0;
					var buoyy = 0;
					if(_this.ws1.fluidEnabled && _this.ws2.fluidEnabled) {
						var mass1 = _this.overlap * _this.ws1.fluidProperties.density;
						var mass2 = _this.overlap * _this.ws2.fluidProperties.density;
						if(mass1 > mass2) {
							var t = mass1 + mass2;
							buoyx -= g1x * t;
							buoyy -= g1y * t;
						} else if(mass1 < mass2) {
							var t = mass1 + mass2;
							buoyx += g2x * t;
							buoyy += g2y * t;
						} else {
							var gx = 0.0;
							var gy = 0.0;
							gx = g1x + g2x;
							gy = g1y + g2y;
							var t = 0.5;
							gx *= t;
							gy *= t;
							if(_this.ws1.worldCOMx * gx + _this.ws1.worldCOMy * gy > _this.ws2.worldCOMx * gx + _this.ws2.worldCOMy * gy) {
								var t = mass1 + mass2;
								buoyx -= gx * t;
								buoyy -= gy * t;
							} else {
								var t = mass1 + mass2;
								buoyx += gx * t;
								buoyy += gy * t;
							}
						}
					} else if(_this.ws1.fluidEnabled) {
						var mass = _this.overlap * _this.ws1.fluidProperties.density;
						var t = mass;
						buoyx -= g1x * t;
						buoyy -= g1y * t;
					} else if(_this.ws2.fluidEnabled) {
						var mass = _this.overlap * _this.ws2.fluidProperties.density;
						var t = mass;
						buoyx += g2x * t;
						buoyy += g2y * t;
					}
					var t = dt;
					buoyx *= t;
					buoyy *= t;
					_this.buoyx = buoyx;
					_this.buoyy = buoyy;
					if(_this.b1.type == 2) {
						var t = _this.b1.imass;
						_this.b1.velx -= buoyx * t;
						_this.b1.vely -= buoyy * t;
						_this.b1.angvel -= (buoyy * _this.r1x - buoyx * _this.r1y) * _this.b1.iinertia;
					}
					if(_this.b2.type == 2) {
						var t = _this.b2.imass;
						_this.b2.velx += buoyx * t;
						_this.b2.vely += buoyy * t;
						_this.b2.angvel += (buoyy * _this.r2x - buoyx * _this.r2y) * _this.b2.iinertia;
					}
					if((!_this.ws1.fluidEnabled || _this.ws1.fluidProperties.viscosity == 0) && (!_this.ws2.fluidEnabled || _this.ws2.fluidProperties.viscosity == 0)) {
						_this.nodrag = true;
						_this.dampx = 0;
						_this.dampy = 0;
						_this.adamp = 0;
					} else {
						_this.nodrag = false;
						var tViscosity = 0.0;
						if(_this.ws1.fluidEnabled) {
							_this.ws2.validate_angDrag();
							tViscosity += _this.ws1.fluidProperties.viscosity * _this.ws2.angDrag * _this.overlap / _this.ws2.area;
						}
						if(_this.ws2.fluidEnabled) {
							_this.ws1.validate_angDrag();
							tViscosity += _this.ws2.fluidProperties.viscosity * _this.ws1.angDrag * _this.overlap / _this.ws1.area;
						}
						if(tViscosity != 0) {
							var iSum = _this.b1.sinertia + _this.b2.sinertia;
							if(iSum != 0) {
								_this.wMass = 1 / iSum;
							} else {
								_this.wMass = 0.0;
							}
							tViscosity *= 0.0004;
							var omega = 2 * Math.PI * tViscosity;
							_this.agamma = 1 / (dt * omega * (2 + omega * dt));
							var ig = 1 / (1 + _this.agamma);
							var biasCoef = dt * omega * omega * _this.agamma;
							_this.agamma *= ig;
							_this.wMass *= ig;
						} else {
							_this.wMass = 0.0;
							_this.agamma = 0.0;
						}
						var vrnx = _this.b2.velx + _this.b2.kinvelx - _this.r2y * (_this.b2.angvel + _this.b2.kinangvel) - (_this.b1.velx + _this.b1.kinvelx - _this.r1y * (_this.b2.angvel + _this.b2.kinangvel));
						var vrny = _this.b2.vely + _this.b2.kinvely + _this.r2x * (_this.b2.angvel + _this.b2.kinangvel) - (_this.b1.vely + _this.b1.kinvely + _this.r1x * (_this.b1.angvel + _this.b1.kinangvel));
						if(!(vrnx * vrnx + vrny * vrny < nape_Config.epsilon * nape_Config.epsilon)) {
							var d = vrnx * vrnx + vrny * vrny;
							var imag = 1.0 / Math.sqrt(d);
							var t = imag;
							vrnx *= t;
							vrny *= t;
							_this.nx = vrnx;
							_this.ny = vrny;
						}
						var tViscosity = 0.0;
						if(_this.ws1.fluidEnabled) {
							var f = -_this.ws1.fluidProperties.viscosity * _this.overlap / _this.ws2.area;
							if(_this.ws2.type == 0) {
								tViscosity -= f * _this.ws2.circle.radius * nape_Config.fluidLinearDrag / (2 * _this.ws2.circle.radius * Math.PI);
							} else {
								var poly = _this.ws2.polygon;
								var bord = 0.0;
								var acc = 0.0;
								var cx_ite = poly.edges.head;
								while(cx_ite != null) {
									var ex = cx_ite.elt;
									bord += ex.length;
									var fact = f * ex.length * (ex.gnormx * _this.nx + ex.gnormy * _this.ny);
									if(fact > 0) {
										fact *= -nape_Config.fluidVacuumDrag;
									}
									acc -= fact * 0.5 * nape_Config.fluidLinearDrag;
									cx_ite = cx_ite.next;
								}
								tViscosity += acc / bord;
							}
						}
						if(_this.ws2.fluidEnabled) {
							var f = -_this.ws2.fluidProperties.viscosity * _this.overlap / _this.ws1.area;
							if(_this.ws1.type == 0) {
								tViscosity -= f * _this.ws1.circle.radius * nape_Config.fluidLinearDrag / (2 * _this.ws1.circle.radius * Math.PI);
							} else {
								var poly = _this.ws1.polygon;
								var bord = 0.0;
								var acc = 0.0;
								var cx_ite = poly.edges.head;
								while(cx_ite != null) {
									var ex = cx_ite.elt;
									bord += ex.length;
									var fact = f * ex.length * (ex.gnormx * _this.nx + ex.gnormy * _this.ny);
									if(fact > 0) {
										fact *= -nape_Config.fluidVacuumDrag;
									}
									acc -= fact * 0.5 * nape_Config.fluidLinearDrag;
									cx_ite = cx_ite.next;
								}
								tViscosity += acc / bord;
							}
						}
						if(tViscosity != 0) {
							var m = _this.b1.smass + _this.b2.smass;
							var Ka = 0.0;
							var Kb = 0.0;
							var Kc = 0.0;
							Ka = m;
							Kb = 0;
							Kc = m;
							if(_this.b1.sinertia != 0) {
								var X = _this.r1x * _this.b1.sinertia;
								var Y = _this.r1y * _this.b1.sinertia;
								Ka += Y * _this.r1y;
								Kb += -Y * _this.r1x;
								Kc += X * _this.r1x;
							}
							if(_this.b2.sinertia != 0) {
								var X = _this.r2x * _this.b2.sinertia;
								var Y = _this.r2y * _this.b2.sinertia;
								Ka += Y * _this.r2y;
								Kb += -Y * _this.r2x;
								Kc += X * _this.r2x;
							}
							var det = Ka * Kc - Kb * Kb;
							if(det != det) {
								Kc = 0;
								Kb = Kc;
								Ka = Kb;
							} else if(det == 0) {
								var flag = 0;
								if(Ka != 0) {
									Ka = 1 / Ka;
								} else {
									Ka = 0;
									flag |= 1;
								}
								if(Kc != 0) {
									Kc = 1 / Kc;
								} else {
									Kc = 0;
									flag |= 2;
								}
								Kb = 0;
							} else {
								det = 1 / det;
								var t = Kc * det;
								Kc = Ka * det;
								Ka = t;
								Kb *= -det;
							}
							_this.vMassa = Ka;
							_this.vMassb = Kb;
							_this.vMassc = Kc;
							var biasCoef;
							var omega = 2 * Math.PI * tViscosity;
							_this.lgamma = 1 / (dt * omega * (2 + omega * dt));
							var ig = 1 / (1 + _this.lgamma);
							biasCoef = dt * omega * omega * _this.lgamma;
							_this.lgamma *= ig;
							var X = ig;
							_this.vMassa *= X;
							_this.vMassb *= X;
							_this.vMassc *= X;
						} else {
							_this.vMassa = 0;
							_this.vMassb = 0;
							_this.vMassc = 0;
							_this.lgamma = 0.0;
						}
					}
					var t = dtratio;
					_this.dampx *= t;
					_this.dampy *= t;
					_this.adamp *= dtratio;
				}
			}
		} else if(arb.colarb != null) {
			var _this = arb.colarb;
			var fst = true;
			var pre = null;
			var prei = null;
			var cx_itei = _this.innards.next;
			_this.hc2 = false;
			var cx_ite = _this.contacts.next;
			while(cx_ite != null) {
				var c = cx_ite;
				if(c.stamp + nape_Config.arbiterExpirationDelay < _this.stamp) {
					var _this1 = _this.contacts;
					var old;
					var ret;
					if(pre == null) {
						old = _this1.next;
						ret = old.next;
						_this1.next = ret;
						if(_this1.next == null) {
							_this1.pushmod = true;
						}
					} else {
						old = pre.next;
						ret = old.next;
						pre.next = ret;
						if(ret == null) {
							_this1.pushmod = true;
						}
					}
					old._inuse = false;
					_this1.modified = true;
					_this1.length--;
					_this1.pushmod = true;
					cx_ite = ret;
					var _this2 = _this.innards;
					var old1;
					var ret1;
					if(prei == null) {
						old1 = _this2.next;
						ret1 = old1.next;
						_this2.next = ret1;
						if(_this2.next == null) {
							_this2.pushmod = true;
						}
					} else {
						old1 = prei.next;
						ret1 = old1.next;
						prei.next = ret1;
						if(ret1 == null) {
							_this2.pushmod = true;
						}
					}
					old1._inuse = false;
					_this2.modified = true;
					_this2.length--;
					_this2.pushmod = true;
					cx_itei = ret1;
					var o = c;
					o.arbiter = null;
					o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
					zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
					continue;
				}
				var ci = c.inner;
				var pact1 = c.active;
				c.active = c.stamp == _this.stamp;
				if(c.active) {
					if(fst) {
						fst = false;
						_this.c1 = ci;
						_this.oc1 = c;
					} else {
						_this.hc2 = true;
						_this.c2 = ci;
						_this.oc2 = c;
					}
				}
				if(pact1 != c.active) {
					_this.contacts.modified = true;
				}
				pre = cx_ite;
				prei = cx_itei;
				cx_itei = cx_itei.next;
				cx_ite = cx_ite.next;
			}
			if(_this.hc2) {
				_this.hpc2 = true;
				if(_this.oc1.posOnly) {
					var tmp = _this.c1;
					_this.c1 = _this.c2;
					_this.c2 = tmp;
					var tmp2 = _this.oc1;
					_this.oc1 = _this.oc2;
					_this.oc2 = tmp2;
					_this.hc2 = false;
				} else if(_this.oc2.posOnly) {
					_this.hc2 = false;
				}
				if(_this.oc1.posOnly) {
					fst = true;
				}
			} else {
				_this.hpc2 = false;
			}
			if(fst) {
				arb.active = false;
			}
		}
		if(pact != arb.active) {
			arb.b1.arbiters.modified = true;
			arb.b2.arbiters.modified = true;
			this.c_arbiters_true.modified = this.c_arbiters_false.modified = true;
			this.s_arbiters.modified = this.f_arbiters.modified = true;
		}
		return false;
	}
	,prestep: function(dt) {
		var pre = null;
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.preStep(dt)) {
				cx_ite = this.live_constraints.erase(pre);
				con.broken();
				this.constraintCbBreak(con);
				if(con.removeOnBreak) {
					con.component.sleeping = true;
					this.midstep = false;
					if(con.compound != null) {
						con.compound.wrap_constraints.remove(con.outer);
					} else {
						this.wrap_constraints.remove(con.outer);
					}
					this.midstep = true;
				} else {
					con.active = false;
				}
				con.clearcache();
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var pre = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(this.presteparb(arb,dt)) {
				var old;
				var ret;
				if(pre == null) {
					old = arbs.head;
					ret = old.next;
					arbs.head = ret;
					if(arbs.head == null) {
						arbs.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						arbs.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
				arbs.modified = true;
				arbs.length--;
				arbs.pushmod = true;
				arbite = ret;
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre = null;
			}
		}
		var pre = null;
		var arbs = this.f_arbiters;
		var arbite = arbs.head;
		var fst = false;
		if(fst && arbite == null) {
			fst = false;
			arbite = null.begin();
			arbs = null;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(this.presteparb(arb,dt)) {
				var old;
				var ret;
				if(pre == null) {
					old = arbs.head;
					ret = old.next;
					arbs.head = ret;
					if(arbs.head == null) {
						arbs.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						arbs.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = o;
				arbs.modified = true;
				arbs.length--;
				arbs.pushmod = true;
				arbite = ret;
				if(fst && arbite == null) {
					fst = false;
					arbite = null.begin();
					arbs = null;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = null.begin();
				arbs = null;
				pre = null;
			}
		}
		var pre = null;
		var arbs = this.s_arbiters;
		var arbite = arbs.head;
		var fst = false;
		if(fst && arbite == null) {
			fst = false;
			arbite = null.begin();
			arbs = null;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(this.presteparb(arb,dt)) {
				var old;
				var ret;
				if(pre == null) {
					old = arbs.head;
					ret = old.next;
					arbs.head = ret;
					if(arbs.head == null) {
						arbs.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						arbs.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = o;
				arbs.modified = true;
				arbs.length--;
				arbs.pushmod = true;
				arbite = ret;
				if(fst && arbite == null) {
					fst = false;
					arbite = null.begin();
					arbs = null;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = null.begin();
				arbs = null;
				pre = null;
			}
		}
	}
	,warmStart: function() {
		var cx_ite = this.f_arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active && (arb.immState & 1) != 0) {
				var t = arb.b1.imass;
				arb.b1.velx -= arb.dampx * t;
				arb.b1.vely -= arb.dampy * t;
				var t1 = arb.b2.imass;
				arb.b2.velx += arb.dampx * t1;
				arb.b2.vely += arb.dampy * t1;
				arb.b1.angvel -= arb.b1.iinertia * (arb.dampy * arb.r1x - arb.dampx * arb.r1y);
				arb.b2.angvel += arb.b2.iinertia * (arb.dampy * arb.r2x - arb.dampx * arb.r2y);
				arb.b1.angvel -= arb.adamp * arb.b1.iinertia;
				arb.b2.angvel += arb.adamp * arb.b2.iinertia;
			}
			cx_ite = cx_ite.next;
		}
		var arbi = this.c_arbiters_false.head;
		var fst = true;
		if(arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
		while(arbi != null) {
			var arb = arbi.elt;
			if(arb.active && (arb.immState & 1) != 0) {
				var jx = arb.nx * arb.c1.jnAcc - arb.ny * arb.c1.jtAcc;
				var jy = arb.ny * arb.c1.jnAcc + arb.nx * arb.c1.jtAcc;
				var t = arb.b1.imass;
				arb.b1.velx -= jx * t;
				arb.b1.vely -= jy * t;
				arb.b1.angvel -= arb.b1.iinertia * (jy * arb.c1.r1x - jx * arb.c1.r1y);
				var t1 = arb.b2.imass;
				arb.b2.velx += jx * t1;
				arb.b2.vely += jy * t1;
				arb.b2.angvel += arb.b2.iinertia * (jy * arb.c1.r2x - jx * arb.c1.r2y);
				if(arb.hc2) {
					var jx1 = arb.nx * arb.c2.jnAcc - arb.ny * arb.c2.jtAcc;
					var jy1 = arb.ny * arb.c2.jnAcc + arb.nx * arb.c2.jtAcc;
					var t2 = arb.b1.imass;
					arb.b1.velx -= jx1 * t2;
					arb.b1.vely -= jy1 * t2;
					arb.b1.angvel -= arb.b1.iinertia * (jy1 * arb.c2.r1x - jx1 * arb.c2.r1y);
					var t3 = arb.b2.imass;
					arb.b2.velx += jx1 * t3;
					arb.b2.vely += jy1 * t3;
					arb.b2.angvel += arb.b2.iinertia * (jy1 * arb.c2.r2x - jx1 * arb.c2.r2y);
				}
				arb.b2.angvel += arb.jrAcc * arb.b2.iinertia;
				arb.b1.angvel -= arb.jrAcc * arb.b1.iinertia;
			}
			arbi = arbi.next;
			if(fst && arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
		}
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			con.warmStart();
			cx_ite = cx_ite.next;
		}
	}
	,iterateVel: function(times) {
		var _g = 0;
		var _g1 = times;
		while(_g < _g1) {
			var i = _g++;
			var cx_ite = this.f_arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if(arb.active && (arb.immState & 1) != 0) {
					if(!arb.nodrag) {
						var w1 = arb.b1.angvel + arb.b1.kinangvel;
						var w2 = arb.b2.angvel + arb.b2.kinangvel;
						var jx = arb.b1.velx + arb.b1.kinvelx - arb.r1y * w1 - (arb.b2.velx + arb.b2.kinvelx - arb.r2y * w2);
						var jy = arb.b1.vely + arb.b1.kinvely + arb.r1x * w1 - (arb.b2.vely + arb.b2.kinvely + arb.r2x * w2);
						var t = arb.vMassa * jx + arb.vMassb * jy;
						jy = arb.vMassb * jx + arb.vMassc * jy;
						jx = t;
						var t1 = arb.lgamma;
						jx -= arb.dampx * t1;
						jy -= arb.dampy * t1;
						var t2 = 1.0;
						arb.dampx += jx * t2;
						arb.dampy += jy * t2;
						var t3 = arb.b1.imass;
						arb.b1.velx -= jx * t3;
						arb.b1.vely -= jy * t3;
						var t4 = arb.b2.imass;
						arb.b2.velx += jx * t4;
						arb.b2.vely += jy * t4;
						arb.b1.angvel -= arb.b1.iinertia * (jy * arb.r1x - jx * arb.r1y);
						arb.b2.angvel += arb.b2.iinertia * (jy * arb.r2x - jx * arb.r2y);
						var j_damp = (w1 - w2) * arb.wMass - arb.adamp * arb.agamma;
						arb.adamp += j_damp;
						arb.b1.angvel -= j_damp * arb.b1.iinertia;
						arb.b2.angvel += j_damp * arb.b2.iinertia;
					}
				}
				cx_ite = cx_ite.next;
			}
			var pre = null;
			var cx_ite1 = this.live_constraints.head;
			while(cx_ite1 != null) {
				var con = cx_ite1.elt;
				if(con.applyImpulseVel()) {
					cx_ite1 = this.live_constraints.erase(pre);
					con.broken();
					this.constraintCbBreak(con);
					if(con.removeOnBreak) {
						con.component.sleeping = true;
						this.midstep = false;
						if(con.compound != null) {
							con.compound.wrap_constraints.remove(con.outer);
						} else {
							this.wrap_constraints.remove(con.outer);
						}
						this.midstep = true;
					} else {
						con.active = false;
					}
					con.clearcache();
					continue;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb1 = arbi.elt;
				if(arb1.active && (arb1.immState & 1) != 0) {
					var v1x = arb1.k1x + arb1.b2.velx - arb1.c1.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c1.r1y * arb1.b1.angvel);
					var v1y = arb1.k1y + arb1.b2.vely + arb1.c1.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c1.r1x * arb1.b1.angvel);
					var j = (v1y * arb1.nx - v1x * arb1.ny + arb1.surfacex) * arb1.c1.tMass;
					var jMax = arb1.c1.friction * arb1.c1.jnAcc;
					var jOld = arb1.c1.jtAcc;
					var cjAcc = jOld - j;
					if(cjAcc > jMax) {
						cjAcc = jMax;
					} else if(cjAcc < -jMax) {
						cjAcc = -jMax;
					}
					j = cjAcc - jOld;
					arb1.c1.jtAcc = cjAcc;
					var jx1 = -arb1.ny * j;
					var jy1 = arb1.nx * j;
					arb1.b2.velx += jx1 * arb1.b2.imass;
					arb1.b2.vely += jy1 * arb1.b2.imass;
					arb1.b1.velx -= jx1 * arb1.b1.imass;
					arb1.b1.vely -= jy1 * arb1.b1.imass;
					arb1.b2.angvel += arb1.rt1b * j * arb1.b2.iinertia;
					arb1.b1.angvel -= arb1.rt1a * j * arb1.b1.iinertia;
					if(arb1.hc2) {
						var v2x = arb1.k2x + arb1.b2.velx - arb1.c2.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c2.r1y * arb1.b1.angvel);
						var v2y = arb1.k2y + arb1.b2.vely + arb1.c2.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c2.r1x * arb1.b1.angvel);
						j = (v2y * arb1.nx - v2x * arb1.ny + arb1.surfacex) * arb1.c2.tMass;
						jMax = arb1.c2.friction * arb1.c2.jnAcc;
						jOld = arb1.c2.jtAcc;
						cjAcc = jOld - j;
						if(cjAcc > jMax) {
							cjAcc = jMax;
						} else if(cjAcc < -jMax) {
							cjAcc = -jMax;
						}
						j = cjAcc - jOld;
						arb1.c2.jtAcc = cjAcc;
						jx1 = -arb1.ny * j;
						jy1 = arb1.nx * j;
						arb1.b2.velx += jx1 * arb1.b2.imass;
						arb1.b2.vely += jy1 * arb1.b2.imass;
						arb1.b1.velx -= jx1 * arb1.b1.imass;
						arb1.b1.vely -= jy1 * arb1.b1.imass;
						arb1.b2.angvel += arb1.rt2b * j * arb1.b2.iinertia;
						arb1.b1.angvel -= arb1.rt2a * j * arb1.b1.iinertia;
						v1x = arb1.k1x + arb1.b2.velx - arb1.c1.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c1.r1y * arb1.b1.angvel);
						v1y = arb1.k1y + arb1.b2.vely + arb1.c1.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c1.r1x * arb1.b1.angvel);
						v2x = arb1.k2x + arb1.b2.velx - arb1.c2.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c2.r1y * arb1.b1.angvel);
						v2y = arb1.k2y + arb1.b2.vely + arb1.c2.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c2.r1x * arb1.b1.angvel);
						var ax = arb1.c1.jnAcc;
						var ay = arb1.c2.jnAcc;
						var jnx = v1x * arb1.nx + v1y * arb1.ny + arb1.surfacey + arb1.c1.bounce - (arb1.Ka * ax + arb1.Kb * ay);
						var jny = v2x * arb1.nx + v2y * arb1.ny + arb1.surfacey + arb1.c2.bounce - (arb1.Kb * ax + arb1.Kc * ay);
						var xx = -(arb1.kMassa * jnx + arb1.kMassb * jny);
						var xy = -(arb1.kMassb * jnx + arb1.kMassc * jny);
						if(xx >= 0 && xy >= 0) {
							jnx = xx - ax;
							jny = xy - ay;
							arb1.c1.jnAcc = xx;
							arb1.c2.jnAcc = xy;
						} else {
							xx = -arb1.c1.nMass * jnx;
							if(xx >= 0 && arb1.Kb * xx + jny >= 0) {
								jnx = xx - ax;
								jny = -ay;
								arb1.c1.jnAcc = xx;
								arb1.c2.jnAcc = 0;
							} else {
								xy = -arb1.c2.nMass * jny;
								if(xy >= 0 && arb1.Kb * xy + jnx >= 0) {
									jnx = -ax;
									jny = xy - ay;
									arb1.c1.jnAcc = 0;
									arb1.c2.jnAcc = xy;
								} else if(jnx >= 0 && jny >= 0) {
									jnx = -ax;
									jny = -ay;
									arb1.c1.jnAcc = arb1.c2.jnAcc = 0;
								} else {
									jnx = 0;
									jny = 0;
								}
							}
						}
						j = jnx + jny;
						jx1 = arb1.nx * j;
						jy1 = arb1.ny * j;
						arb1.b2.velx += jx1 * arb1.b2.imass;
						arb1.b2.vely += jy1 * arb1.b2.imass;
						arb1.b1.velx -= jx1 * arb1.b1.imass;
						arb1.b1.vely -= jy1 * arb1.b1.imass;
						arb1.b2.angvel += (arb1.rn1b * jnx + arb1.rn2b * jny) * arb1.b2.iinertia;
						arb1.b1.angvel -= (arb1.rn1a * jnx + arb1.rn2a * jny) * arb1.b1.iinertia;
					} else {
						if(arb1.radius != 0.0) {
							var dw = arb1.b2.angvel - arb1.b1.angvel;
							j = dw * arb1.rMass;
							jMax = arb1.rfric * arb1.c1.jnAcc;
							jOld = arb1.jrAcc;
							arb1.jrAcc -= j;
							if(arb1.jrAcc > jMax) {
								arb1.jrAcc = jMax;
							} else if(arb1.jrAcc < -jMax) {
								arb1.jrAcc = -jMax;
							}
							j = arb1.jrAcc - jOld;
							arb1.b2.angvel += j * arb1.b2.iinertia;
							arb1.b1.angvel -= j * arb1.b1.iinertia;
						}
						v1x = arb1.k1x + arb1.b2.velx - arb1.c1.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c1.r1y * arb1.b1.angvel);
						v1y = arb1.k1y + arb1.b2.vely + arb1.c1.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c1.r1x * arb1.b1.angvel);
						j = (arb1.c1.bounce + (arb1.nx * v1x + arb1.ny * v1y) + arb1.surfacey) * arb1.c1.nMass;
						jOld = arb1.c1.jnAcc;
						cjAcc = jOld - j;
						if(cjAcc < 0.0) {
							cjAcc = 0.0;
						}
						j = cjAcc - jOld;
						arb1.c1.jnAcc = cjAcc;
						jx1 = arb1.nx * j;
						jy1 = arb1.ny * j;
						arb1.b2.velx += jx1 * arb1.b2.imass;
						arb1.b2.vely += jy1 * arb1.b2.imass;
						arb1.b1.velx -= jx1 * arb1.b1.imass;
						arb1.b1.vely -= jy1 * arb1.b1.imass;
						arb1.b2.angvel += arb1.rn1b * j * arb1.b2.iinertia;
						arb1.b1.angvel -= arb1.rn1a * j * arb1.b1.iinertia;
					}
				}
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,iteratePos: function(times) {
		var _g = 0;
		var _g1 = times;
		while(_g < _g1) {
			var i = _g++;
			var pre = null;
			var cx_ite = this.live_constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(!con.__velocity && con.stiff) {
					if(con.applyImpulsePos()) {
						cx_ite = this.live_constraints.erase(pre);
						con.broken();
						this.constraintCbBreak(con);
						if(con.removeOnBreak) {
							con.component.sleeping = true;
							this.midstep = false;
							if(con.compound != null) {
								con.compound.wrap_constraints.remove(con.outer);
							} else {
								this.wrap_constraints.remove(con.outer);
							}
							this.midstep = true;
						} else {
							con.active = false;
						}
						con.clearcache();
						continue;
					}
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb = arbi.elt;
				if(arb.active && (arb.immState & 1) != 0) {
					if(arb.ptype == 2) {
						var c = arb.c1;
						var r2x = 0.0;
						var r2y = 0.0;
						r2x = arb.b2.axisy * c.lr2x - arb.b2.axisx * c.lr2y;
						r2y = c.lr2x * arb.b2.axisx + c.lr2y * arb.b2.axisy;
						var t = 1.0;
						r2x += arb.b2.posx * t;
						r2y += arb.b2.posy * t;
						var r1x = 0.0;
						var r1y = 0.0;
						r1x = arb.b1.axisy * c.lr1x - arb.b1.axisx * c.lr1y;
						r1y = c.lr1x * arb.b1.axisx + c.lr1y * arb.b1.axisy;
						var t1 = 1.0;
						r1x += arb.b1.posx * t1;
						r1y += arb.b1.posy * t1;
						var dx = 0.0;
						var dy = 0.0;
						dx = r2x - r1x;
						dy = r2y - r1y;
						var dl = Math.sqrt(dx * dx + dy * dy);
						var r = arb.radius - nape_Config.collisionSlop;
						var err = dl - r;
						if(dx * arb.nx + dy * arb.ny < 0) {
							dx = -dx;
							dy = -dy;
							err -= arb.radius;
						}
						if(err < 0) {
							if(dl < nape_Config.epsilon) {
								if(arb.b1.smass != 0.0) {
									arb.b1.posx += nape_Config.epsilon * 10;
								} else {
									arb.b2.posx += nape_Config.epsilon * 10;
								}
							} else {
								var t2 = 1.0 / dl;
								dx *= t2;
								dy *= t2;
								var px = 0.5 * (r1x + r2x);
								var py = 0.5 * (r1y + r2y);
								var pen = dl - r;
								r1x = px - arb.b1.posx;
								r1y = py - arb.b1.posy;
								r2x = px - arb.b2.posx;
								r2y = py - arb.b2.posy;
								var rn1 = dy * r1x - dx * r1y;
								var rn2 = dy * r2x - dx * r2y;
								var K = arb.b2.smass + rn2 * rn2 * arb.b2.sinertia + arb.b1.smass + rn1 * rn1 * arb.b1.sinertia;
								if(K != 0) {
									var jn = -arb.biasCoef * pen / K;
									var Jx = 0.0;
									var Jy = 0.0;
									var t3 = jn;
									Jx = dx * t3;
									Jy = dy * t3;
									var t4 = arb.b1.imass;
									arb.b1.posx -= Jx * t4;
									arb.b1.posy -= Jy * t4;
									var _this = arb.b1;
									var dr = -rn1 * arb.b1.iinertia * jn;
									_this.rot += dr;
									if(dr * dr > 0.0001) {
										_this.axisx = Math.sin(_this.rot);
										_this.axisy = Math.cos(_this.rot);
									} else {
										var d2 = dr * dr;
										var p = 1 - 0.5 * d2;
										var m = 1 - d2 * d2 / 8;
										var nx = (p * _this.axisx + dr * _this.axisy) * m;
										_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
										_this.axisx = nx;
									}
									var t5 = arb.b2.imass;
									arb.b2.posx += Jx * t5;
									arb.b2.posy += Jy * t5;
									var _this1 = arb.b2;
									var dr1 = rn2 * arb.b2.iinertia * jn;
									_this1.rot += dr1;
									if(dr1 * dr1 > 0.0001) {
										_this1.axisx = Math.sin(_this1.rot);
										_this1.axisy = Math.cos(_this1.rot);
									} else {
										var d21 = dr1 * dr1;
										var p1 = 1 - 0.5 * d21;
										var m1 = 1 - d21 * d21 / 8;
										var nx1 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m1;
										_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m1;
										_this1.axisx = nx1;
									}
								}
							}
						}
					} else {
						var gnormx = 0.0;
						var gnormy = 0.0;
						var gproj;
						var clip1x = 0.0;
						var clip1y = 0.0;
						var clip2x = 0;
						var clip2y = 0;
						if(arb.ptype == 0) {
							gnormx = arb.b1.axisy * arb.lnormx - arb.b1.axisx * arb.lnormy;
							gnormy = arb.lnormx * arb.b1.axisx + arb.lnormy * arb.b1.axisy;
							gproj = arb.lproj + (gnormx * arb.b1.posx + gnormy * arb.b1.posy);
							clip1x = arb.b2.axisy * arb.c1.lr1x - arb.b2.axisx * arb.c1.lr1y;
							clip1y = arb.c1.lr1x * arb.b2.axisx + arb.c1.lr1y * arb.b2.axisy;
							var t6 = 1.0;
							clip1x += arb.b2.posx * t6;
							clip1y += arb.b2.posy * t6;
							if(arb.hpc2) {
								clip2x = arb.b2.axisy * arb.c2.lr1x - arb.b2.axisx * arb.c2.lr1y;
								clip2y = arb.c2.lr1x * arb.b2.axisx + arb.c2.lr1y * arb.b2.axisy;
								var t7 = 1.0;
								clip2x += arb.b2.posx * t7;
								clip2y += arb.b2.posy * t7;
							}
						} else {
							gnormx = arb.b2.axisy * arb.lnormx - arb.b2.axisx * arb.lnormy;
							gnormy = arb.lnormx * arb.b2.axisx + arb.lnormy * arb.b2.axisy;
							gproj = arb.lproj + (gnormx * arb.b2.posx + gnormy * arb.b2.posy);
							clip1x = arb.b1.axisy * arb.c1.lr1x - arb.b1.axisx * arb.c1.lr1y;
							clip1y = arb.c1.lr1x * arb.b1.axisx + arb.c1.lr1y * arb.b1.axisy;
							var t8 = 1.0;
							clip1x += arb.b1.posx * t8;
							clip1y += arb.b1.posy * t8;
							if(arb.hpc2) {
								clip2x = arb.b1.axisy * arb.c2.lr1x - arb.b1.axisx * arb.c2.lr1y;
								clip2y = arb.c2.lr1x * arb.b1.axisx + arb.c2.lr1y * arb.b1.axisy;
								var t9 = 1.0;
								clip2x += arb.b1.posx * t9;
								clip2y += arb.b1.posy * t9;
							}
						}
						var err1 = clip1x * gnormx + clip1y * gnormy - gproj - arb.radius;
						err1 += nape_Config.collisionSlop;
						var err2 = 0.0;
						if(arb.hpc2) {
							err2 = clip2x * gnormx + clip2y * gnormy - gproj - arb.radius;
							err2 += nape_Config.collisionSlop;
						}
						if(err1 < 0 || err2 < 0) {
							if(arb.rev) {
								gnormx = -gnormx;
								gnormy = -gnormy;
							}
							var c1r1x = 0.0;
							var c1r1y = 0.0;
							c1r1x = clip1x - arb.b1.posx;
							c1r1y = clip1y - arb.b1.posy;
							var c1r2x = 0.0;
							var c1r2y = 0.0;
							c1r2x = clip1x - arb.b2.posx;
							c1r2y = clip1y - arb.b2.posy;
							var c2r1x = 0;
							var c2r1y = 0;
							var c2r2x = 0;
							var c2r2y = 0;
							if(arb.hpc2) {
								c2r1x = clip2x - arb.b1.posx;
								c2r1y = clip2y - arb.b1.posy;
								c2r2x = clip2x - arb.b2.posx;
								c2r2y = clip2y - arb.b2.posy;
								var rn1a = gnormy * c1r1x - gnormx * c1r1y;
								var rn1b = gnormy * c1r2x - gnormx * c1r2y;
								var rn2a = gnormy * c2r1x - gnormx * c2r1y;
								var rn2b = gnormy * c2r2x - gnormx * c2r2y;
								var mass_sum = arb.b1.smass + arb.b2.smass;
								arb.kMassa = mass_sum + arb.b1.sinertia * rn1a * rn1a + arb.b2.sinertia * rn1b * rn1b;
								arb.kMassb = mass_sum + arb.b1.sinertia * rn1a * rn2a + arb.b2.sinertia * rn1b * rn2b;
								arb.kMassc = mass_sum + arb.b1.sinertia * rn2a * rn2a + arb.b2.sinertia * rn2b * rn2b;
								var Ka = 0.0;
								var Kb = 0.0;
								var Kc = 0.0;
								Ka = arb.kMassa;
								Kb = arb.kMassb;
								Kc = arb.kMassc;
								var bx = err1 * arb.biasCoef;
								var by = err2 * arb.biasCoef;
								while(true) {
									var xx = 0.0;
									var xy = 0.0;
									xx = bx;
									xy = by;
									xx = -xx;
									xy = -xy;
									var det = arb.kMassa * arb.kMassc - arb.kMassb * arb.kMassb;
									if(det != det) {
										xy = 0;
										xx = xy;
									} else if(det == 0) {
										if(arb.kMassa != 0) {
											xx /= arb.kMassa;
										} else {
											xx = 0;
										}
										if(arb.kMassc != 0) {
											xy /= arb.kMassc;
										} else {
											xy = 0;
										}
									} else {
										det = 1 / det;
										var t10 = det * (arb.kMassc * xx - arb.kMassb * xy);
										xy = det * (arb.kMassa * xy - arb.kMassb * xx);
										xx = t10;
									}
									if(xx >= 0 && xy >= 0) {
										var t11 = (xx + xy) * arb.b1.imass;
										arb.b1.posx -= gnormx * t11;
										arb.b1.posy -= gnormy * t11;
										var _this2 = arb.b1;
										var dr2 = -arb.b1.iinertia * (rn1a * xx + rn2a * xy);
										_this2.rot += dr2;
										if(dr2 * dr2 > 0.0001) {
											_this2.axisx = Math.sin(_this2.rot);
											_this2.axisy = Math.cos(_this2.rot);
										} else {
											var d22 = dr2 * dr2;
											var p2 = 1 - 0.5 * d22;
											var m2 = 1 - d22 * d22 / 8;
											var nx2 = (p2 * _this2.axisx + dr2 * _this2.axisy) * m2;
											_this2.axisy = (p2 * _this2.axisy - dr2 * _this2.axisx) * m2;
											_this2.axisx = nx2;
										}
										var t12 = (xx + xy) * arb.b2.imass;
										arb.b2.posx += gnormx * t12;
										arb.b2.posy += gnormy * t12;
										var _this3 = arb.b2;
										var dr3 = arb.b2.iinertia * (rn1b * xx + rn2b * xy);
										_this3.rot += dr3;
										if(dr3 * dr3 > 0.0001) {
											_this3.axisx = Math.sin(_this3.rot);
											_this3.axisy = Math.cos(_this3.rot);
										} else {
											var d23 = dr3 * dr3;
											var p3 = 1 - 0.5 * d23;
											var m3 = 1 - d23 * d23 / 8;
											var nx3 = (p3 * _this3.axisx + dr3 * _this3.axisy) * m3;
											_this3.axisy = (p3 * _this3.axisy - dr3 * _this3.axisx) * m3;
											_this3.axisx = nx3;
										}
										break;
									}
									xx = -bx / Ka;
									xy = 0;
									var vn2 = Kb * xx + by;
									if(xx >= 0 && vn2 >= 0) {
										var t13 = (xx + xy) * arb.b1.imass;
										arb.b1.posx -= gnormx * t13;
										arb.b1.posy -= gnormy * t13;
										var _this4 = arb.b1;
										var dr4 = -arb.b1.iinertia * (rn1a * xx + rn2a * xy);
										_this4.rot += dr4;
										if(dr4 * dr4 > 0.0001) {
											_this4.axisx = Math.sin(_this4.rot);
											_this4.axisy = Math.cos(_this4.rot);
										} else {
											var d24 = dr4 * dr4;
											var p4 = 1 - 0.5 * d24;
											var m4 = 1 - d24 * d24 / 8;
											var nx4 = (p4 * _this4.axisx + dr4 * _this4.axisy) * m4;
											_this4.axisy = (p4 * _this4.axisy - dr4 * _this4.axisx) * m4;
											_this4.axisx = nx4;
										}
										var t14 = (xx + xy) * arb.b2.imass;
										arb.b2.posx += gnormx * t14;
										arb.b2.posy += gnormy * t14;
										var _this5 = arb.b2;
										var dr5 = arb.b2.iinertia * (rn1b * xx + rn2b * xy);
										_this5.rot += dr5;
										if(dr5 * dr5 > 0.0001) {
											_this5.axisx = Math.sin(_this5.rot);
											_this5.axisy = Math.cos(_this5.rot);
										} else {
											var d25 = dr5 * dr5;
											var p5 = 1 - 0.5 * d25;
											var m5 = 1 - d25 * d25 / 8;
											var nx5 = (p5 * _this5.axisx + dr5 * _this5.axisy) * m5;
											_this5.axisy = (p5 * _this5.axisy - dr5 * _this5.axisx) * m5;
											_this5.axisx = nx5;
										}
										break;
									}
									xx = 0;
									xy = -by / Kc;
									var vn1 = Kb * xy + bx;
									if(xy >= 0 && vn1 >= 0) {
										var t15 = (xx + xy) * arb.b1.imass;
										arb.b1.posx -= gnormx * t15;
										arb.b1.posy -= gnormy * t15;
										var _this6 = arb.b1;
										var dr6 = -arb.b1.iinertia * (rn1a * xx + rn2a * xy);
										_this6.rot += dr6;
										if(dr6 * dr6 > 0.0001) {
											_this6.axisx = Math.sin(_this6.rot);
											_this6.axisy = Math.cos(_this6.rot);
										} else {
											var d26 = dr6 * dr6;
											var p6 = 1 - 0.5 * d26;
											var m6 = 1 - d26 * d26 / 8;
											var nx6 = (p6 * _this6.axisx + dr6 * _this6.axisy) * m6;
											_this6.axisy = (p6 * _this6.axisy - dr6 * _this6.axisx) * m6;
											_this6.axisx = nx6;
										}
										var t16 = (xx + xy) * arb.b2.imass;
										arb.b2.posx += gnormx * t16;
										arb.b2.posy += gnormy * t16;
										var _this7 = arb.b2;
										var dr7 = arb.b2.iinertia * (rn1b * xx + rn2b * xy);
										_this7.rot += dr7;
										if(dr7 * dr7 > 0.0001) {
											_this7.axisx = Math.sin(_this7.rot);
											_this7.axisy = Math.cos(_this7.rot);
										} else {
											var d27 = dr7 * dr7;
											var p7 = 1 - 0.5 * d27;
											var m7 = 1 - d27 * d27 / 8;
											var nx7 = (p7 * _this7.axisx + dr7 * _this7.axisy) * m7;
											_this7.axisy = (p7 * _this7.axisy - dr7 * _this7.axisx) * m7;
											_this7.axisx = nx7;
										}
										break;
									}
									if(!false) {
										break;
									}
								}
							} else {
								var rn11 = gnormy * c1r1x - gnormx * c1r1y;
								var rn21 = gnormy * c1r2x - gnormx * c1r2y;
								var K1 = arb.b2.smass + rn21 * rn21 * arb.b2.sinertia + arb.b1.smass + rn11 * rn11 * arb.b1.sinertia;
								if(K1 != 0) {
									var jn1 = -arb.biasCoef * err1 / K1;
									var Jx1 = 0.0;
									var Jy1 = 0.0;
									var t17 = jn1;
									Jx1 = gnormx * t17;
									Jy1 = gnormy * t17;
									var t18 = arb.b1.imass;
									arb.b1.posx -= Jx1 * t18;
									arb.b1.posy -= Jy1 * t18;
									var _this8 = arb.b1;
									var dr8 = -rn11 * arb.b1.iinertia * jn1;
									_this8.rot += dr8;
									if(dr8 * dr8 > 0.0001) {
										_this8.axisx = Math.sin(_this8.rot);
										_this8.axisy = Math.cos(_this8.rot);
									} else {
										var d28 = dr8 * dr8;
										var p8 = 1 - 0.5 * d28;
										var m8 = 1 - d28 * d28 / 8;
										var nx8 = (p8 * _this8.axisx + dr8 * _this8.axisy) * m8;
										_this8.axisy = (p8 * _this8.axisy - dr8 * _this8.axisx) * m8;
										_this8.axisx = nx8;
									}
									var t19 = arb.b2.imass;
									arb.b2.posx += Jx1 * t19;
									arb.b2.posy += Jy1 * t19;
									var _this9 = arb.b2;
									var dr9 = rn21 * arb.b2.iinertia * jn1;
									_this9.rot += dr9;
									if(dr9 * dr9 > 0.0001) {
										_this9.axisx = Math.sin(_this9.rot);
										_this9.axisy = Math.cos(_this9.rot);
									} else {
										var d29 = dr9 * dr9;
										var p9 = 1 - 0.5 * d29;
										var m9 = 1 - d29 * d29 / 8;
										var nx9 = (p9 * _this9.axisx + dr9 * _this9.axisy) * m9;
										_this9.axisy = (p9 * _this9.axisy - dr9 * _this9.axisx) * m9;
										_this9.axisx = nx9;
									}
								}
							}
						}
					}
				}
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,narrowPhase: function(s1,s2,stat,in_arb,continuous) {
		var _gthis = this;
		var ret = null;
		var b1 = s1.body;
		var b2 = s2.body;
		var con_ignore;
		con_ignore = false;
		var cx_ite = b1.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.ignore && con.pair_exists(b1.id,b2.id)) {
				con_ignore = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		var itype;
		var itype1;
		if(!con_ignore) {
			var cur = s1;
			while(cur != null && cur.group == null) if(cur.ishape != null) {
				cur = cur.ishape.body;
			} else if(cur.icompound != null) {
				cur = cur.icompound.compound;
			} else {
				cur = cur.ibody.compound;
			}
			var g1 = cur == null ? null : cur.group;
			var itype2;
			if(g1 == null) {
				itype2 = false;
			} else {
				var cur = s2;
				while(cur != null && cur.group == null) if(cur.ishape != null) {
					cur = cur.ishape.body;
				} else if(cur.icompound != null) {
					cur = cur.icompound.compound;
				} else {
					cur = cur.ibody.compound;
				}
				var g2 = cur == null ? null : cur.group;
				if(g2 == null) {
					itype2 = false;
				} else {
					var ret1 = false;
					while(g1 != null && g2 != null) {
						if(g1 == g2) {
							ret1 = g1.ignore;
							break;
						}
						if(g1.depth < g2.depth) {
							g2 = g2.group;
						} else {
							g1 = g1.group;
						}
					}
					itype2 = ret1;
				}
			}
			itype1 = !itype2;
		} else {
			itype1 = false;
		}
		if(itype1) {
			var itype1;
			if(s1.sensorEnabled || s2.sensorEnabled) {
				var _this = s1.filter;
				var x = s2.filter;
				itype1 = (_this.sensorMask & x.sensorGroup) != 0 && (x.sensorMask & _this.sensorGroup) != 0;
			} else {
				itype1 = false;
			}
			if(itype1) {
				itype = 2;
			} else {
				var itype1;
				if(s1.fluidEnabled || s2.fluidEnabled) {
					var _this = s1.filter;
					var x = s2.filter;
					itype1 = (_this.fluidMask & x.fluidGroup) != 0 && (x.fluidMask & _this.fluidGroup) != 0;
				} else {
					itype1 = false;
				}
				if(itype1 && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) {
					itype = 0;
				} else {
					var _this = s1.filter;
					var x = s2.filter;
					itype = (_this.collisionMask & x.collisionGroup) != 0 && (x.collisionMask & _this.collisionGroup) != 0 && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0) ? 1 : -1;
				}
			}
		} else {
			itype = -1;
		}
		if(itype != -1) {
			var sa;
			var sb;
			if(s1.type > s2.type) {
				sa = s2;
				sb = s1;
			} else if(s1.type == s2.type) {
				if(s1.id < s2.id) {
					sa = s1;
					sb = s2;
				} else {
					sb = s1;
					sa = s2;
				}
			} else {
				sa = s1;
				sb = s2;
			}
			var reverse = sa == s2;
			if(itype == 0) {
				var xarb;
				if(in_arb == null) {
					var ret1 = null;
					var b = b1.arbiters.length < b2.arbiters.length ? b1 : b2;
					var cx_ite = b.arbiters.head;
					while(cx_ite != null) {
						var arb = cx_ite.elt;
						if(arb.id == sa.id && arb.di == sb.id) {
							ret1 = arb;
							break;
						}
						cx_ite = cx_ite.next;
					}
					xarb = ret1;
				} else {
					xarb = in_arb;
				}
				var first = xarb == null;
				var arb;
				var swapped = false;
				if(first) {
					if(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool == null) {
						arb = new zpp_$nape_dynamics_ZPP_$FluidArbiter();
					} else {
						arb = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
				} else if(xarb.fluidarb == null) {
					var b = null;
					xarb.cleared = true;
					if(b == null || xarb.b2 == b) {
						var _this = xarb.b1.arbiters;
						var pre = null;
						var cur = _this.head;
						var ret1 = false;
						while(cur != null) {
							if(cur.elt == xarb) {
								var old;
								var ret2;
								if(pre == null) {
									old = _this.head;
									ret2 = old.next;
									_this.head = ret2;
									if(_this.head == null) {
										_this.pushmod = true;
									}
								} else {
									old = pre.next;
									ret2 = old.next;
									pre.next = ret2;
									if(ret2 == null) {
										_this.pushmod = true;
									}
								}
								var o = old;
								o.elt = null;
								o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
								_this.modified = true;
								_this.length--;
								_this.pushmod = true;
								ret1 = true;
								break;
							}
							pre = cur;
							cur = cur.next;
						}
					}
					if(b == null || xarb.b1 == b) {
						var _this = xarb.b2.arbiters;
						var pre = null;
						var cur = _this.head;
						var ret1 = false;
						while(cur != null) {
							if(cur.elt == xarb) {
								var old;
								var ret2;
								if(pre == null) {
									old = _this.head;
									ret2 = old.next;
									_this.head = ret2;
									if(_this.head == null) {
										_this.pushmod = true;
									}
								} else {
									old = pre.next;
									ret2 = old.next;
									pre.next = ret2;
									if(ret2 == null) {
										_this.pushmod = true;
									}
								}
								var o = old;
								o.elt = null;
								o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
								_this.modified = true;
								_this.length--;
								_this.pushmod = true;
								ret1 = true;
								break;
							}
							pre = cur;
							cur = cur.next;
						}
					}
					if(xarb.pair != null) {
						xarb.pair.arb = null;
						xarb.pair = null;
					}
					xarb.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool == null) {
						arb = new zpp_$nape_dynamics_ZPP_$FluidArbiter();
					} else {
						arb = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					arb.intchange = true;
					first = true;
					swapped = true;
				} else {
					arb = xarb.fluidarb;
				}
				var inttype = 4;
				if(first || arb.stamp != this.stamp || continuous) {
					arb.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.flowCollide(sa,sb,arb)) {
						if(first) {
							var di = sb.id;
							arb.b1 = s1.body;
							arb.ws1 = s1;
							arb.b2 = s2.body;
							arb.ws2 = s2;
							arb.id = sa.id;
							arb.di = di;
							var _this = arb.b1.arbiters;
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = arb;
							var temp = ret1;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
							var _this = arb.b2.arbiters;
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = arb;
							var temp = ret1;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
							arb.active = true;
							arb.present = 0;
							arb.cleared = false;
							arb.sleeping = false;
							arb.fresh = false;
							arb.presentable = false;
							arb.nx = 0;
							arb.ny = 1;
							arb.dampx = 0;
							arb.dampy = 0;
							arb.adamp = 0.0;
							var _this = this.f_arbiters;
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = arb;
							var temp = ret1;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
							arb.fresh = !swapped;
						} else {
							arb.fresh = arb.up_stamp < this.stamp - 1 || arb.endGenerated == this.stamp && continuous;
						}
						arb.up_stamp = arb.stamp;
						if(arb.fresh || (arb.immState & 4) == 0) {
							arb.immState = 1;
							var anyimpure = false;
							var arbs1 = arb.ws1.id > arb.ws2.id ? arb.ws2 : arb.ws1;
							var arbs2 = arb.ws1.id > arb.ws2.id ? arb.ws1 : arb.ws2;
							var _this = this.mrca1;
							while(_this.head != null) {
								var ret1 = _this.head;
								_this.head = ret1.next;
								var o = ret1;
								o.elt = null;
								o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
								if(_this.head == null) {
									_this.pushmod = true;
								}
								_this.modified = true;
								_this.length--;
							}
							_this.pushmod = true;
							var _this = this.mrca2;
							while(_this.head != null) {
								var ret1 = _this.head;
								_this.head = ret1.next;
								var o = ret1;
								o.elt = null;
								o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
								if(_this.head == null) {
									_this.pushmod = true;
								}
								_this.modified = true;
								_this.length--;
							}
							_this.pushmod = true;
							if(arbs1.cbSet != null) {
								var _this = this.mrca1;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = arbs1;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							}
							if(arbs1.body.cbSet != null) {
								var _this = this.mrca1;
								var o = arbs1.body;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = o;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							}
							if(arbs2.cbSet != null) {
								var _this = this.mrca2;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = arbs2;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							}
							if(arbs2.body.cbSet != null) {
								var _this = this.mrca2;
								var o = arbs2.body;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = o;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							}
							var c1 = arbs1.body.compound;
							var c2 = arbs2.body.compound;
							while(c1 != c2) {
								var d1 = c1 == null ? 0 : c1.depth;
								var d2 = c2 == null ? 0 : c2.depth;
								if(d1 < d2) {
									if(c2.cbSet != null) {
										var _this = this.mrca2;
										var ret1;
										if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
											ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
										} else {
											ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
											zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
											ret1.next = null;
										}
										ret1.elt = c2;
										var temp = ret1;
										temp.next = _this.head;
										_this.head = temp;
										_this.modified = true;
										_this.length++;
									}
									c2 = c2.compound;
								} else {
									if(c1.cbSet != null) {
										var _this1 = this.mrca1;
										var ret2;
										if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
											ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
										} else {
											ret2 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
											zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret2.next;
											ret2.next = null;
										}
										ret2.elt = c1;
										var temp1 = ret2;
										temp1.next = _this1.head;
										_this1.head = temp1;
										_this1.modified = true;
										_this1.length++;
									}
									c1 = c1.compound;
								}
							}
							var cx_ite = this.mrca1.head;
							while(cx_ite != null) {
								var i1 = cx_ite.elt;
								var cx_ite1 = this.mrca2.head;
								while(cx_ite1 != null) {
									var i2 = cx_ite1.elt;
									var cb1 = i1.cbSet;
									var cb2 = i2.cbSet;
									var _this = cb1.manager;
									var ret1 = null;
									var pairs = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
									var cx_ite2 = pairs.head;
									while(cx_ite2 != null) {
										var p = cx_ite2.elt;
										if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
											ret1 = p;
											break;
										}
										cx_ite2 = cx_ite2.next;
									}
									if(ret1 == null) {
										var ret2;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret2 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret2 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret2.next;
											ret2.next = null;
										}
										ret2.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
											ret2.a = cb1;
											ret2.b = cb2;
										} else {
											ret2.a = cb2;
											ret2.b = cb1;
										}
										ret1 = ret2;
										cb1.cbpairs.add(ret1);
										if(cb2 != cb1) {
											cb2.cbpairs.add(ret1);
										}
									}
									if(ret1.zip_listeners) {
										ret1.zip_listeners = false;
										ret1.__validate();
									}
									if(ret1.listeners.head == null) {
										cx_ite1 = cx_ite1.next;
										continue;
									}
									var callbackset = null;
									var ncallbackset = null;
									var _this1 = this.prelisteners;
									while(_this1.head != null) {
										var ret3 = _this1.head;
										_this1.head = ret3.next;
										var o = ret3;
										o.elt = null;
										o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
										if(_this1.head == null) {
											_this1.pushmod = true;
										}
										_this1.modified = true;
										_this1.length--;
									}
									_this1.pushmod = true;
									var lite = null;
									var _this2 = cb1.manager;
									var ret4 = null;
									var pairs1 = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
									var cx_ite3 = pairs1.head;
									while(cx_ite3 != null) {
										var p1 = cx_ite3.elt;
										if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
											ret4 = p1;
											break;
										}
										cx_ite3 = cx_ite3.next;
									}
									if(ret4 == null) {
										var ret5;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret5 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret5 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret5.next;
											ret5.next = null;
										}
										ret5.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
											ret5.a = cb1;
											ret5.b = cb2;
										} else {
											ret5.a = cb2;
											ret5.b = cb1;
										}
										ret4 = ret5;
										cb1.cbpairs.add(ret4);
										if(cb2 != cb1) {
											cb2.cbpairs.add(ret4);
										}
									}
									if(ret4.zip_listeners) {
										ret4.zip_listeners = false;
										ret4.__validate();
									}
									var cx_ite4 = ret4.listeners.head;
									while(cx_ite4 != null) {
										var x = cx_ite4.elt;
										if(x.event == 5) {
											if((x.itype & inttype) != 0) {
												var _this3 = _gthis.prelisteners;
												var ret6;
												if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
													ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
												} else {
													ret6 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
													zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret6.next;
													ret6.next = null;
												}
												ret6.elt = x;
												var temp = ret6;
												if(lite == null) {
													temp.next = _this3.head;
													_this3.head = temp;
												} else {
													temp.next = lite.next;
													lite.next = temp;
												}
												_this3.pushmod = _this3.modified = true;
												_this3.length++;
												lite = temp;
												anyimpure = anyimpure || !x.pure;
											}
										}
										cx_ite4 = cx_ite4.next;
									}
									if(this.prelisteners.head == null) {
										cx_ite1 = cx_ite1.next;
										continue;
									}
									callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
									if(callbackset == null) {
										ncallbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
										this.add_callbackset(ncallbackset);
									}
									if(callbackset == null || (callbackset.FLUIDstamp != this.stamp || continuous) && (callbackset.FLUIDstate & 4) == 0) {
										if(ncallbackset != null) {
											callbackset = ncallbackset;
										}
										if(callbackset != null) {
											var cx_ite5 = this.prelisteners.head;
											while(cx_ite5 != null) {
												var listener = cx_ite5.elt;
												if(listener.itype == 7) {
													callbackset.COLLISIONstamp = this.stamp;
													callbackset.SENSORstamp = this.stamp;
													callbackset.FLUIDstamp = this.stamp;
												} else {
													callbackset.FLUIDstamp = this.stamp;
												}
												cx_ite5 = cx_ite5.next;
											}
										}
										arb.mutable = true;
										if(arb.wrap_position != null) {
											arb.wrap_position.zpp_inner._immutable = false;
										}
										var pact = arb.active;
										arb.active = true;
										var emptycontacts = false;
										this.precb.zpp_inner.pre_arbiter = arb;
										this.precb.zpp_inner.set = callbackset;
										var cx_ite6 = this.prelisteners.head;
										while(cx_ite6 != null) {
											var listener1 = cx_ite6.elt;
											this.precb.zpp_inner.listener = listener1;
											var cb = this.precb.zpp_inner;
											var o1 = callbackset.int1;
											var o2 = callbackset.int2;
											var ret7;
											var _this4 = listener1.options1;
											var xs = o1.cbTypes;
											if(_this4.nonemptyintersection(xs,_this4.includes) && !_this4.nonemptyintersection(xs,_this4.excludes)) {
												var _this5 = listener1.options2;
												var xs1 = o2.cbTypes;
												ret7 = _this5.nonemptyintersection(xs1,_this5.includes) && !_this5.nonemptyintersection(xs1,_this5.excludes);
											} else {
												ret7 = false;
											}
											if(ret7) {
												cb.int1 = o1;
												cb.int2 = o2;
											} else {
												cb.int1 = o2;
												cb.int2 = o1;
											}
											this.precb.zpp_inner.pre_swapped = i1 != this.precb.zpp_inner.int1;
											var ret8 = listener1.handlerp(this.precb);
											if(ret8 != null) {
												var ret9;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												if(ret8 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT) {
													ret9 = 5;
												} else {
													if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
														zpp_$nape_util_ZPP_$Flags.internal = true;
														zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
														zpp_$nape_util_ZPP_$Flags.internal = false;
													}
													if(ret8 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE) {
														ret9 = 1;
													} else {
														if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
															zpp_$nape_util_ZPP_$Flags.internal = true;
															zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
															zpp_$nape_util_ZPP_$Flags.internal = false;
														}
														ret9 = ret8 == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE ? 6 : 2;
													}
												}
												arb.immState = ret9;
											}
											cx_ite6 = cx_ite6.next;
										}
										arb.mutable = false;
										if(arb.wrap_position != null) {
											arb.wrap_position.zpp_inner._immutable = true;
										}
										arb.active = pact;
										if(callbackset != null) {
											var cx_ite7 = this.prelisteners.head;
											while(cx_ite7 != null) {
												var listener2 = cx_ite7.elt;
												if(listener2.itype == 7) {
													callbackset.COLLISIONstate = arb.immState;
													callbackset.SENSORstate = arb.immState;
													callbackset.FLUIDstate = arb.immState;
												} else {
													callbackset.FLUIDstate = arb.immState;
												}
												cx_ite7 = cx_ite7.next;
											}
										}
									} else if(callbackset == null) {
										if((arb.immState & 4) == 0) {
											arb.immState = 1;
										}
									} else {
										arb.immState = callbackset.FLUIDstate;
									}
									cx_ite1 = cx_ite1.next;
								}
								cx_ite = cx_ite.next;
							}
							if(anyimpure && (arb.immState & 4) == 0) {
								if(arb.b1.type == 2) {
									var o = arb.b1;
									if(!o.world) {
										o.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o.type == 3) {
											o.kinematicDelaySleep = true;
										}
										if(o.component.sleeping) {
											this.really_wake(o,false);
										}
									}
								}
								if(arb.b1.type == 2) {
									var o = arb.b2;
									if(!o.world) {
										o.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o.type == 3) {
											o.kinematicDelaySleep = true;
										}
										if(o.component.sleeping) {
											this.really_wake(o,false);
										}
									}
								}
							}
						}
						if((arb.immState & 1) != 0) {
							if(arb.b1.type == 2 && arb.b1.component.sleeping) {
								var o = arb.b1;
								if(!o.world) {
									o.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o.type == 3) {
										o.kinematicDelaySleep = true;
									}
									if(o.component.sleeping) {
										this.really_wake(o,false);
									}
								}
							}
							if(arb.b2.type == 2 && arb.b2.component.sleeping) {
								var o = arb.b2;
								if(!o.world) {
									o.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o.type == 3) {
										o.kinematicDelaySleep = true;
									}
									if(o.component.sleeping) {
										this.really_wake(o,false);
									}
								}
							}
						}
						if(arb.sleeping) {
							arb.sleeping = false;
							var _this = this.f_arbiters;
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = arb;
							var temp = ret1;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
						}
						ret = arb;
					} else if(first) {
						var o = arb;
						o.next = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = o;
						ret = null;
					} else {
						ret = arb;
					}
				} else {
					ret = arb;
				}
			} else if(itype == 1) {
				var carbs = stat ? this.c_arbiters_true : this.c_arbiters_false;
				var xarb;
				if(in_arb == null) {
					var ret1 = null;
					var b = b1.arbiters.length < b2.arbiters.length ? b1 : b2;
					var cx_ite = b.arbiters.head;
					while(cx_ite != null) {
						var arb = cx_ite.elt;
						if(arb.id == sa.id && arb.di == sb.id) {
							ret1 = arb;
							break;
						}
						cx_ite = cx_ite.next;
					}
					xarb = ret1;
				} else {
					xarb = in_arb;
				}
				var first = xarb == null;
				var arb;
				var swapped = false;
				if(first) {
					if(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool == null) {
						arb = new zpp_$nape_dynamics_ZPP_$ColArbiter();
					} else {
						arb = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					arb.stat = stat;
				} else if(xarb.colarb == null) {
					var b = null;
					xarb.cleared = true;
					if(b == null || xarb.b2 == b) {
						var _this = xarb.b1.arbiters;
						var pre = null;
						var cur = _this.head;
						var ret1 = false;
						while(cur != null) {
							if(cur.elt == xarb) {
								var old;
								var ret2;
								if(pre == null) {
									old = _this.head;
									ret2 = old.next;
									_this.head = ret2;
									if(_this.head == null) {
										_this.pushmod = true;
									}
								} else {
									old = pre.next;
									ret2 = old.next;
									pre.next = ret2;
									if(ret2 == null) {
										_this.pushmod = true;
									}
								}
								var o = old;
								o.elt = null;
								o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
								_this.modified = true;
								_this.length--;
								_this.pushmod = true;
								ret1 = true;
								break;
							}
							pre = cur;
							cur = cur.next;
						}
					}
					if(b == null || xarb.b1 == b) {
						var _this = xarb.b2.arbiters;
						var pre = null;
						var cur = _this.head;
						var ret1 = false;
						while(cur != null) {
							if(cur.elt == xarb) {
								var old;
								var ret2;
								if(pre == null) {
									old = _this.head;
									ret2 = old.next;
									_this.head = ret2;
									if(_this.head == null) {
										_this.pushmod = true;
									}
								} else {
									old = pre.next;
									ret2 = old.next;
									pre.next = ret2;
									if(ret2 == null) {
										_this.pushmod = true;
									}
								}
								var o = old;
								o.elt = null;
								o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
								_this.modified = true;
								_this.length--;
								_this.pushmod = true;
								ret1 = true;
								break;
							}
							pre = cur;
							cur = cur.next;
						}
					}
					if(xarb.pair != null) {
						xarb.pair.arb = null;
						xarb.pair = null;
					}
					xarb.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool == null) {
						arb = new zpp_$nape_dynamics_ZPP_$ColArbiter();
					} else {
						arb = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					arb.intchange = true;
					arb.stat = stat;
					first = true;
					swapped = true;
				} else {
					arb = xarb.colarb;
					reverse = sa != arb.s1;
					if(arb.stat != stat) {
						arb.stat = stat;
						if(!arb.sleeping) {
							(stat ? this.c_arbiters_false : this.c_arbiters_true).remove(arb);
							carbs.add(arb);
						}
					}
				}
				var inttype = 1;
				if(first || arb.stamp != this.stamp || continuous) {
					arb.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.contactCollide(sa,sb,arb,reverse)) {
						if(first) {
							var di = sb.id;
							arb.b1 = s1.body;
							arb.ws1 = s1;
							arb.b2 = s2.body;
							arb.ws2 = s2;
							arb.id = sa.id;
							arb.di = di;
							var _this = arb.b1.arbiters;
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = arb;
							var temp = ret1;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
							var _this = arb.b2.arbiters;
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = arb;
							var temp = ret1;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
							arb.active = true;
							arb.present = 0;
							arb.cleared = false;
							arb.sleeping = false;
							arb.fresh = false;
							arb.presentable = false;
							arb.s1 = s1;
							arb.s2 = s2;
							if(!arb.userdef_restitution) {
								if(arb.s1.material.elasticity <= -Infinity || arb.s2.material.elasticity <= -Infinity) {
									arb.restitution = 0;
								} else if(arb.s1.material.elasticity >= Infinity || arb.s2.material.elasticity >= Infinity) {
									arb.restitution = 1;
								} else {
									arb.restitution = (arb.s1.material.elasticity + arb.s2.material.elasticity) / 2;
								}
								if(arb.restitution < 0) {
									arb.restitution = 0;
								}
								if(arb.restitution > 1) {
									arb.restitution = 1;
								}
							}
							if(!arb.userdef_dyn_fric) {
								arb.dyn_fric = Math.sqrt(arb.s1.material.dynamicFriction * arb.s2.material.dynamicFriction);
							}
							if(!arb.userdef_stat_fric) {
								arb.stat_fric = Math.sqrt(arb.s1.material.staticFriction * arb.s2.material.staticFriction);
							}
							if(!arb.userdef_rfric) {
								arb.rfric = Math.sqrt(arb.s1.material.rollingFriction * arb.s2.material.rollingFriction);
							}
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = arb;
							var temp = ret1;
							temp.next = carbs.head;
							carbs.head = temp;
							carbs.modified = true;
							carbs.length++;
							arb.fresh = !swapped;
						} else {
							arb.fresh = arb.up_stamp < this.stamp - 1 || arb.endGenerated == this.stamp && continuous;
						}
						arb.up_stamp = arb.stamp;
						if(arb.fresh || (arb.immState & 4) == 0) {
							arb.immState = 1;
							var anyimpure = false;
							var arbs1 = arb.ws1.id > arb.ws2.id ? arb.ws2 : arb.ws1;
							var arbs2 = arb.ws1.id > arb.ws2.id ? arb.ws1 : arb.ws2;
							var _this = this.mrca1;
							while(_this.head != null) {
								var ret1 = _this.head;
								_this.head = ret1.next;
								var o = ret1;
								o.elt = null;
								o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
								if(_this.head == null) {
									_this.pushmod = true;
								}
								_this.modified = true;
								_this.length--;
							}
							_this.pushmod = true;
							var _this = this.mrca2;
							while(_this.head != null) {
								var ret1 = _this.head;
								_this.head = ret1.next;
								var o = ret1;
								o.elt = null;
								o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
								if(_this.head == null) {
									_this.pushmod = true;
								}
								_this.modified = true;
								_this.length--;
							}
							_this.pushmod = true;
							if(arbs1.cbSet != null) {
								var _this = this.mrca1;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = arbs1;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							}
							if(arbs1.body.cbSet != null) {
								var _this = this.mrca1;
								var o = arbs1.body;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = o;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							}
							if(arbs2.cbSet != null) {
								var _this = this.mrca2;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = arbs2;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							}
							if(arbs2.body.cbSet != null) {
								var _this = this.mrca2;
								var o = arbs2.body;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = o;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							}
							var c1 = arbs1.body.compound;
							var c2 = arbs2.body.compound;
							while(c1 != c2) {
								var d1 = c1 == null ? 0 : c1.depth;
								var d2 = c2 == null ? 0 : c2.depth;
								if(d1 < d2) {
									if(c2.cbSet != null) {
										var _this = this.mrca2;
										var ret1;
										if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
											ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
										} else {
											ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
											zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
											ret1.next = null;
										}
										ret1.elt = c2;
										var temp = ret1;
										temp.next = _this.head;
										_this.head = temp;
										_this.modified = true;
										_this.length++;
									}
									c2 = c2.compound;
								} else {
									if(c1.cbSet != null) {
										var _this1 = this.mrca1;
										var ret2;
										if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
											ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
										} else {
											ret2 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
											zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret2.next;
											ret2.next = null;
										}
										ret2.elt = c1;
										var temp1 = ret2;
										temp1.next = _this1.head;
										_this1.head = temp1;
										_this1.modified = true;
										_this1.length++;
									}
									c1 = c1.compound;
								}
							}
							var cx_ite = this.mrca1.head;
							while(cx_ite != null) {
								var i1 = cx_ite.elt;
								var cx_ite1 = this.mrca2.head;
								while(cx_ite1 != null) {
									var i2 = cx_ite1.elt;
									var cb1 = i1.cbSet;
									var cb2 = i2.cbSet;
									var _this = cb1.manager;
									var ret1 = null;
									var pairs = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
									var cx_ite2 = pairs.head;
									while(cx_ite2 != null) {
										var p = cx_ite2.elt;
										if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
											ret1 = p;
											break;
										}
										cx_ite2 = cx_ite2.next;
									}
									if(ret1 == null) {
										var ret2;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret2 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret2 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret2.next;
											ret2.next = null;
										}
										ret2.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
											ret2.a = cb1;
											ret2.b = cb2;
										} else {
											ret2.a = cb2;
											ret2.b = cb1;
										}
										ret1 = ret2;
										cb1.cbpairs.add(ret1);
										if(cb2 != cb1) {
											cb2.cbpairs.add(ret1);
										}
									}
									if(ret1.zip_listeners) {
										ret1.zip_listeners = false;
										ret1.__validate();
									}
									if(ret1.listeners.head == null) {
										cx_ite1 = cx_ite1.next;
										continue;
									}
									var callbackset = null;
									var ncallbackset = null;
									var _this1 = this.prelisteners;
									while(_this1.head != null) {
										var ret3 = _this1.head;
										_this1.head = ret3.next;
										var o = ret3;
										o.elt = null;
										o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
										if(_this1.head == null) {
											_this1.pushmod = true;
										}
										_this1.modified = true;
										_this1.length--;
									}
									_this1.pushmod = true;
									var lite = null;
									var _this2 = cb1.manager;
									var ret4 = null;
									var pairs1 = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
									var cx_ite3 = pairs1.head;
									while(cx_ite3 != null) {
										var p1 = cx_ite3.elt;
										if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
											ret4 = p1;
											break;
										}
										cx_ite3 = cx_ite3.next;
									}
									if(ret4 == null) {
										var ret5;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret5 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret5 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret5.next;
											ret5.next = null;
										}
										ret5.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
											ret5.a = cb1;
											ret5.b = cb2;
										} else {
											ret5.a = cb2;
											ret5.b = cb1;
										}
										ret4 = ret5;
										cb1.cbpairs.add(ret4);
										if(cb2 != cb1) {
											cb2.cbpairs.add(ret4);
										}
									}
									if(ret4.zip_listeners) {
										ret4.zip_listeners = false;
										ret4.__validate();
									}
									var cx_ite4 = ret4.listeners.head;
									while(cx_ite4 != null) {
										var x = cx_ite4.elt;
										if(x.event == 5) {
											if((x.itype & inttype) != 0) {
												var _this3 = _gthis.prelisteners;
												var ret6;
												if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
													ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
												} else {
													ret6 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
													zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret6.next;
													ret6.next = null;
												}
												ret6.elt = x;
												var temp = ret6;
												if(lite == null) {
													temp.next = _this3.head;
													_this3.head = temp;
												} else {
													temp.next = lite.next;
													lite.next = temp;
												}
												_this3.pushmod = _this3.modified = true;
												_this3.length++;
												lite = temp;
												anyimpure = anyimpure || !x.pure;
											}
										}
										cx_ite4 = cx_ite4.next;
									}
									if(this.prelisteners.head == null) {
										cx_ite1 = cx_ite1.next;
										continue;
									}
									callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
									if(callbackset == null) {
										ncallbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
										this.add_callbackset(ncallbackset);
									}
									if(callbackset == null || (callbackset.COLLISIONstamp != this.stamp || continuous) && (callbackset.COLLISIONstate & 4) == 0) {
										if(ncallbackset != null) {
											callbackset = ncallbackset;
										}
										if(callbackset != null) {
											var cx_ite5 = this.prelisteners.head;
											while(cx_ite5 != null) {
												var listener = cx_ite5.elt;
												if(listener.itype == 7) {
													callbackset.COLLISIONstamp = this.stamp;
													callbackset.SENSORstamp = this.stamp;
													callbackset.FLUIDstamp = this.stamp;
												} else {
													callbackset.COLLISIONstamp = this.stamp;
												}
												cx_ite5 = cx_ite5.next;
											}
										}
										arb.mutable = true;
										if(arb.wrap_normal != null) {
											arb.wrap_normal.zpp_inner._immutable = false;
										}
										if(arb.wrap_contacts != null) {
											arb.wrap_contacts.zpp_inner.immutable = false;
										}
										var pact = arb.active;
										arb.active = true;
										var emptycontacts = false;
										var fst = true;
										var pre = null;
										var prei = null;
										var cx_itei = arb.innards.next;
										arb.hc2 = false;
										var cx_ite6 = arb.contacts.next;
										while(cx_ite6 != null) {
											var c = cx_ite6;
											if(c.stamp + nape_Config.arbiterExpirationDelay < arb.stamp) {
												var _this4 = arb.contacts;
												var old;
												var ret7;
												if(pre == null) {
													old = _this4.next;
													ret7 = old.next;
													_this4.next = ret7;
													if(_this4.next == null) {
														_this4.pushmod = true;
													}
												} else {
													old = pre.next;
													ret7 = old.next;
													pre.next = ret7;
													if(ret7 == null) {
														_this4.pushmod = true;
													}
												}
												old._inuse = false;
												_this4.modified = true;
												_this4.length--;
												_this4.pushmod = true;
												cx_ite6 = ret7;
												var _this5 = arb.innards;
												var old1;
												var ret8;
												if(prei == null) {
													old1 = _this5.next;
													ret8 = old1.next;
													_this5.next = ret8;
													if(_this5.next == null) {
														_this5.pushmod = true;
													}
												} else {
													old1 = prei.next;
													ret8 = old1.next;
													prei.next = ret8;
													if(ret8 == null) {
														_this5.pushmod = true;
													}
												}
												old1._inuse = false;
												_this5.modified = true;
												_this5.length--;
												_this5.pushmod = true;
												cx_itei = ret8;
												var o1 = c;
												o1.arbiter = null;
												o1.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
												zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o1;
												continue;
											}
											var ci = c.inner;
											var pact1 = c.active;
											c.active = c.stamp == arb.stamp;
											if(c.active) {
												if(fst) {
													fst = false;
													arb.c1 = ci;
													arb.oc1 = c;
												} else {
													arb.hc2 = true;
													arb.c2 = ci;
													arb.oc2 = c;
												}
											}
											if(pact1 != c.active) {
												arb.contacts.modified = true;
											}
											pre = cx_ite6;
											prei = cx_itei;
											cx_itei = cx_itei.next;
											cx_ite6 = cx_ite6.next;
										}
										if(arb.hc2) {
											arb.hpc2 = true;
											if(arb.oc1.posOnly) {
												var tmp = arb.c1;
												arb.c1 = arb.c2;
												arb.c2 = tmp;
												var tmp2 = arb.oc1;
												arb.oc1 = arb.oc2;
												arb.oc2 = tmp2;
												arb.hc2 = false;
											} else if(arb.oc2.posOnly) {
												arb.hc2 = false;
											}
											if(arb.oc1.posOnly) {
												fst = true;
											}
										} else {
											arb.hpc2 = false;
										}
										this.precb.zpp_inner.pre_arbiter = arb;
										this.precb.zpp_inner.set = callbackset;
										var cx_ite7 = this.prelisteners.head;
										while(cx_ite7 != null) {
											var listener1 = cx_ite7.elt;
											this.precb.zpp_inner.listener = listener1;
											var cb = this.precb.zpp_inner;
											var o11 = callbackset.int1;
											var o2 = callbackset.int2;
											var ret9;
											var _this6 = listener1.options1;
											var xs = o11.cbTypes;
											if(_this6.nonemptyintersection(xs,_this6.includes) && !_this6.nonemptyintersection(xs,_this6.excludes)) {
												var _this7 = listener1.options2;
												var xs1 = o2.cbTypes;
												ret9 = _this7.nonemptyintersection(xs1,_this7.includes) && !_this7.nonemptyintersection(xs1,_this7.excludes);
											} else {
												ret9 = false;
											}
											if(ret9) {
												cb.int1 = o11;
												cb.int2 = o2;
											} else {
												cb.int1 = o2;
												cb.int2 = o11;
											}
											this.precb.zpp_inner.pre_swapped = i1 != this.precb.zpp_inner.int1;
											var ret10 = listener1.handlerp(this.precb);
											if(ret10 != null) {
												var ret11;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												if(ret10 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT) {
													ret11 = 5;
												} else {
													if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
														zpp_$nape_util_ZPP_$Flags.internal = true;
														zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
														zpp_$nape_util_ZPP_$Flags.internal = false;
													}
													if(ret10 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE) {
														ret11 = 1;
													} else {
														if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
															zpp_$nape_util_ZPP_$Flags.internal = true;
															zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
															zpp_$nape_util_ZPP_$Flags.internal = false;
														}
														ret11 = ret10 == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE ? 6 : 2;
													}
												}
												arb.immState = ret11;
											}
											cx_ite7 = cx_ite7.next;
										}
										arb.mutable = false;
										if(arb.wrap_normal != null) {
											arb.wrap_normal.zpp_inner._immutable = true;
										}
										if(arb.wrap_contacts != null) {
											arb.wrap_contacts.zpp_inner.immutable = true;
										}
										arb.active = pact;
										if(callbackset != null) {
											var cx_ite8 = this.prelisteners.head;
											while(cx_ite8 != null) {
												var listener2 = cx_ite8.elt;
												if(listener2.itype == 7) {
													callbackset.COLLISIONstate = arb.immState;
													callbackset.SENSORstate = arb.immState;
													callbackset.FLUIDstate = arb.immState;
												} else {
													callbackset.COLLISIONstate = arb.immState;
												}
												cx_ite8 = cx_ite8.next;
											}
										}
									} else if(callbackset == null) {
										if((arb.immState & 4) == 0) {
											arb.immState = 1;
										}
									} else {
										arb.immState = callbackset.COLLISIONstate;
									}
									cx_ite1 = cx_ite1.next;
								}
								cx_ite = cx_ite.next;
							}
							if(anyimpure && (arb.immState & 4) == 0) {
								if(arb.b1.type == 2) {
									var o = arb.b1;
									if(!o.world) {
										o.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o.type == 3) {
											o.kinematicDelaySleep = true;
										}
										if(o.component.sleeping) {
											this.really_wake(o,false);
										}
									}
								}
								if(arb.b1.type == 2) {
									var o = arb.b2;
									if(!o.world) {
										o.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o.type == 3) {
											o.kinematicDelaySleep = true;
										}
										if(o.component.sleeping) {
											this.really_wake(o,false);
										}
									}
								}
							}
						}
						if((arb.immState & 1) != 0) {
							if(arb.b1.type == 2 && arb.b1.component.sleeping) {
								var o = arb.b1;
								if(!o.world) {
									o.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o.type == 3) {
										o.kinematicDelaySleep = true;
									}
									if(o.component.sleeping) {
										this.really_wake(o,false);
									}
								}
							}
							if(arb.b2.type == 2 && arb.b2.component.sleeping) {
								var o = arb.b2;
								if(!o.world) {
									o.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o.type == 3) {
										o.kinematicDelaySleep = true;
									}
									if(o.component.sleeping) {
										this.really_wake(o,false);
									}
								}
							}
						}
						if(arb.sleeping) {
							arb.sleeping = false;
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = arb;
							var temp = ret1;
							temp.next = carbs.head;
							carbs.head = temp;
							carbs.modified = true;
							carbs.length++;
						}
						ret = arb;
					} else if(first) {
						var o = arb;
						o.userdef_dyn_fric = false;
						o.userdef_stat_fric = false;
						o.userdef_restitution = false;
						o.userdef_rfric = false;
						o.__ref_edge1 = o.__ref_edge2 = null;
						o.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = o;
						ret = null;
					} else {
						ret = arb;
					}
				} else {
					ret = arb;
				}
			} else {
				var xarb;
				if(in_arb == null) {
					var ret1 = null;
					var b = b1.arbiters.length < b2.arbiters.length ? b1 : b2;
					var cx_ite = b.arbiters.head;
					while(cx_ite != null) {
						var arb = cx_ite.elt;
						if(arb.id == sa.id && arb.di == sb.id) {
							ret1 = arb;
							break;
						}
						cx_ite = cx_ite.next;
					}
					xarb = ret1;
				} else {
					xarb = in_arb;
				}
				var first = xarb == null;
				var arb;
				var swapped = false;
				if(first) {
					if(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool == null) {
						arb = new zpp_$nape_dynamics_ZPP_$SensorArbiter();
					} else {
						arb = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
				} else if(xarb.sensorarb == null) {
					var b = null;
					xarb.cleared = true;
					if(b == null || xarb.b2 == b) {
						var _this = xarb.b1.arbiters;
						var pre = null;
						var cur = _this.head;
						var ret1 = false;
						while(cur != null) {
							if(cur.elt == xarb) {
								var old;
								var ret2;
								if(pre == null) {
									old = _this.head;
									ret2 = old.next;
									_this.head = ret2;
									if(_this.head == null) {
										_this.pushmod = true;
									}
								} else {
									old = pre.next;
									ret2 = old.next;
									pre.next = ret2;
									if(ret2 == null) {
										_this.pushmod = true;
									}
								}
								var o = old;
								o.elt = null;
								o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
								_this.modified = true;
								_this.length--;
								_this.pushmod = true;
								ret1 = true;
								break;
							}
							pre = cur;
							cur = cur.next;
						}
					}
					if(b == null || xarb.b1 == b) {
						var _this = xarb.b2.arbiters;
						var pre = null;
						var cur = _this.head;
						var ret1 = false;
						while(cur != null) {
							if(cur.elt == xarb) {
								var old;
								var ret2;
								if(pre == null) {
									old = _this.head;
									ret2 = old.next;
									_this.head = ret2;
									if(_this.head == null) {
										_this.pushmod = true;
									}
								} else {
									old = pre.next;
									ret2 = old.next;
									pre.next = ret2;
									if(ret2 == null) {
										_this.pushmod = true;
									}
								}
								var o = old;
								o.elt = null;
								o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
								_this.modified = true;
								_this.length--;
								_this.pushmod = true;
								ret1 = true;
								break;
							}
							pre = cur;
							cur = cur.next;
						}
					}
					if(xarb.pair != null) {
						xarb.pair.arb = null;
						xarb.pair = null;
					}
					xarb.active = false;
					this.f_arbiters.modified = true;
					if(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool == null) {
						arb = new zpp_$nape_dynamics_ZPP_$SensorArbiter();
					} else {
						arb = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					arb.intchange = true;
					first = true;
					swapped = true;
				} else {
					arb = xarb.sensorarb;
				}
				var inttype = 2;
				if(first || arb.stamp != this.stamp || continuous) {
					arb.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.testCollide(sa,sb)) {
						if(first) {
							var di = sb.id;
							arb.b1 = s1.body;
							arb.ws1 = s1;
							arb.b2 = s2.body;
							arb.ws2 = s2;
							arb.id = sa.id;
							arb.di = di;
							var _this = arb.b1.arbiters;
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = arb;
							var temp = ret1;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
							var _this = arb.b2.arbiters;
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = arb;
							var temp = ret1;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
							arb.active = true;
							arb.present = 0;
							arb.cleared = false;
							arb.sleeping = false;
							arb.fresh = false;
							arb.presentable = false;
							var _this = this.s_arbiters;
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = arb;
							var temp = ret1;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
							arb.fresh = !swapped;
						} else {
							arb.fresh = arb.up_stamp < this.stamp - 1 || arb.endGenerated == this.stamp && continuous;
						}
						arb.up_stamp = arb.stamp;
						if(arb.fresh || (arb.immState & 4) == 0) {
							arb.immState = 1;
							var anyimpure = false;
							var arbs1 = arb.ws1.id > arb.ws2.id ? arb.ws2 : arb.ws1;
							var arbs2 = arb.ws1.id > arb.ws2.id ? arb.ws1 : arb.ws2;
							var _this = this.mrca1;
							while(_this.head != null) {
								var ret1 = _this.head;
								_this.head = ret1.next;
								var o = ret1;
								o.elt = null;
								o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
								if(_this.head == null) {
									_this.pushmod = true;
								}
								_this.modified = true;
								_this.length--;
							}
							_this.pushmod = true;
							var _this = this.mrca2;
							while(_this.head != null) {
								var ret1 = _this.head;
								_this.head = ret1.next;
								var o = ret1;
								o.elt = null;
								o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
								if(_this.head == null) {
									_this.pushmod = true;
								}
								_this.modified = true;
								_this.length--;
							}
							_this.pushmod = true;
							if(arbs1.cbSet != null) {
								var _this = this.mrca1;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = arbs1;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							}
							if(arbs1.body.cbSet != null) {
								var _this = this.mrca1;
								var o = arbs1.body;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = o;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							}
							if(arbs2.cbSet != null) {
								var _this = this.mrca2;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = arbs2;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							}
							if(arbs2.body.cbSet != null) {
								var _this = this.mrca2;
								var o = arbs2.body;
								var ret1;
								if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
									ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
								} else {
									ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
									zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
									ret1.next = null;
								}
								ret1.elt = o;
								var temp = ret1;
								temp.next = _this.head;
								_this.head = temp;
								_this.modified = true;
								_this.length++;
							}
							var c1 = arbs1.body.compound;
							var c2 = arbs2.body.compound;
							while(c1 != c2) {
								var d1 = c1 == null ? 0 : c1.depth;
								var d2 = c2 == null ? 0 : c2.depth;
								if(d1 < d2) {
									if(c2.cbSet != null) {
										var _this = this.mrca2;
										var ret1;
										if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
											ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
										} else {
											ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
											zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
											ret1.next = null;
										}
										ret1.elt = c2;
										var temp = ret1;
										temp.next = _this.head;
										_this.head = temp;
										_this.modified = true;
										_this.length++;
									}
									c2 = c2.compound;
								} else {
									if(c1.cbSet != null) {
										var _this1 = this.mrca1;
										var ret2;
										if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
											ret2 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
										} else {
											ret2 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
											zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret2.next;
											ret2.next = null;
										}
										ret2.elt = c1;
										var temp1 = ret2;
										temp1.next = _this1.head;
										_this1.head = temp1;
										_this1.modified = true;
										_this1.length++;
									}
									c1 = c1.compound;
								}
							}
							var cx_ite = this.mrca1.head;
							while(cx_ite != null) {
								var i1 = cx_ite.elt;
								var cx_ite1 = this.mrca2.head;
								while(cx_ite1 != null) {
									var i2 = cx_ite1.elt;
									var cb1 = i1.cbSet;
									var cb2 = i2.cbSet;
									var _this = cb1.manager;
									var ret1 = null;
									var pairs = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
									var cx_ite2 = pairs.head;
									while(cx_ite2 != null) {
										var p = cx_ite2.elt;
										if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
											ret1 = p;
											break;
										}
										cx_ite2 = cx_ite2.next;
									}
									if(ret1 == null) {
										var ret2;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret2 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret2 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret2.next;
											ret2.next = null;
										}
										ret2.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
											ret2.a = cb1;
											ret2.b = cb2;
										} else {
											ret2.a = cb2;
											ret2.b = cb1;
										}
										ret1 = ret2;
										cb1.cbpairs.add(ret1);
										if(cb2 != cb1) {
											cb2.cbpairs.add(ret1);
										}
									}
									if(ret1.zip_listeners) {
										ret1.zip_listeners = false;
										ret1.__validate();
									}
									if(ret1.listeners.head == null) {
										cx_ite1 = cx_ite1.next;
										continue;
									}
									var callbackset = null;
									var ncallbackset = null;
									var _this1 = this.prelisteners;
									while(_this1.head != null) {
										var ret3 = _this1.head;
										_this1.head = ret3.next;
										var o = ret3;
										o.elt = null;
										o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
										zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
										if(_this1.head == null) {
											_this1.pushmod = true;
										}
										_this1.modified = true;
										_this1.length--;
									}
									_this1.pushmod = true;
									var lite = null;
									var _this2 = cb1.manager;
									var ret4 = null;
									var pairs1 = cb1.cbpairs.length < cb2.cbpairs.length ? cb1.cbpairs : cb2.cbpairs;
									var cx_ite3 = pairs1.head;
									while(cx_ite3 != null) {
										var p1 = cx_ite3.elt;
										if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
											ret4 = p1;
											break;
										}
										cx_ite3 = cx_ite3.next;
									}
									if(ret4 == null) {
										var ret5;
										if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
											ret5 = new zpp_$nape_callbacks_ZPP_$CbSetPair();
										} else {
											ret5 = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
											zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret5.next;
											ret5.next = null;
										}
										ret5.zip_listeners = true;
										if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(cb1,cb2)) {
											ret5.a = cb1;
											ret5.b = cb2;
										} else {
											ret5.a = cb2;
											ret5.b = cb1;
										}
										ret4 = ret5;
										cb1.cbpairs.add(ret4);
										if(cb2 != cb1) {
											cb2.cbpairs.add(ret4);
										}
									}
									if(ret4.zip_listeners) {
										ret4.zip_listeners = false;
										ret4.__validate();
									}
									var cx_ite4 = ret4.listeners.head;
									while(cx_ite4 != null) {
										var x = cx_ite4.elt;
										if(x.event == 5) {
											if((x.itype & inttype) != 0) {
												var _this3 = _gthis.prelisteners;
												var ret6;
												if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
													ret6 = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
												} else {
													ret6 = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
													zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret6.next;
													ret6.next = null;
												}
												ret6.elt = x;
												var temp = ret6;
												if(lite == null) {
													temp.next = _this3.head;
													_this3.head = temp;
												} else {
													temp.next = lite.next;
													lite.next = temp;
												}
												_this3.pushmod = _this3.modified = true;
												_this3.length++;
												lite = temp;
												anyimpure = anyimpure || !x.pure;
											}
										}
										cx_ite4 = cx_ite4.next;
									}
									if(this.prelisteners.head == null) {
										cx_ite1 = cx_ite1.next;
										continue;
									}
									callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
									if(callbackset == null) {
										ncallbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
										this.add_callbackset(ncallbackset);
									}
									if(callbackset == null || (callbackset.SENSORstamp != this.stamp || continuous) && (callbackset.SENSORstate & 4) == 0) {
										if(ncallbackset != null) {
											callbackset = ncallbackset;
										}
										if(callbackset != null) {
											var cx_ite5 = this.prelisteners.head;
											while(cx_ite5 != null) {
												var listener = cx_ite5.elt;
												if(listener.itype == 7) {
													callbackset.COLLISIONstamp = this.stamp;
													callbackset.SENSORstamp = this.stamp;
													callbackset.FLUIDstamp = this.stamp;
												} else {
													callbackset.SENSORstamp = this.stamp;
												}
												cx_ite5 = cx_ite5.next;
											}
										}
										var pact = arb.active;
										arb.active = true;
										var emptycontacts = false;
										this.precb.zpp_inner.pre_arbiter = arb;
										this.precb.zpp_inner.set = callbackset;
										var cx_ite6 = this.prelisteners.head;
										while(cx_ite6 != null) {
											var listener1 = cx_ite6.elt;
											this.precb.zpp_inner.listener = listener1;
											var cb = this.precb.zpp_inner;
											var o1 = callbackset.int1;
											var o2 = callbackset.int2;
											var ret7;
											var _this4 = listener1.options1;
											var xs = o1.cbTypes;
											if(_this4.nonemptyintersection(xs,_this4.includes) && !_this4.nonemptyintersection(xs,_this4.excludes)) {
												var _this5 = listener1.options2;
												var xs1 = o2.cbTypes;
												ret7 = _this5.nonemptyintersection(xs1,_this5.includes) && !_this5.nonemptyintersection(xs1,_this5.excludes);
											} else {
												ret7 = false;
											}
											if(ret7) {
												cb.int1 = o1;
												cb.int2 = o2;
											} else {
												cb.int1 = o2;
												cb.int2 = o1;
											}
											this.precb.zpp_inner.pre_swapped = i1 != this.precb.zpp_inner.int1;
											var ret8 = listener1.handlerp(this.precb);
											if(ret8 != null) {
												var ret9;
												if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
													zpp_$nape_util_ZPP_$Flags.internal = true;
													zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
													zpp_$nape_util_ZPP_$Flags.internal = false;
												}
												if(ret8 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT) {
													ret9 = 5;
												} else {
													if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
														zpp_$nape_util_ZPP_$Flags.internal = true;
														zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
														zpp_$nape_util_ZPP_$Flags.internal = false;
													}
													if(ret8 == zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE) {
														ret9 = 1;
													} else {
														if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
															zpp_$nape_util_ZPP_$Flags.internal = true;
															zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
															zpp_$nape_util_ZPP_$Flags.internal = false;
														}
														ret9 = ret8 == zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE ? 6 : 2;
													}
												}
												arb.immState = ret9;
											}
											cx_ite6 = cx_ite6.next;
										}
										arb.active = pact;
										if(callbackset != null) {
											var cx_ite7 = this.prelisteners.head;
											while(cx_ite7 != null) {
												var listener2 = cx_ite7.elt;
												if(listener2.itype == 7) {
													callbackset.COLLISIONstate = arb.immState;
													callbackset.SENSORstate = arb.immState;
													callbackset.FLUIDstate = arb.immState;
												} else {
													callbackset.SENSORstate = arb.immState;
												}
												cx_ite7 = cx_ite7.next;
											}
										}
									} else if(callbackset == null) {
										if((arb.immState & 4) == 0) {
											arb.immState = 1;
										}
									} else {
										arb.immState = callbackset.SENSORstate;
									}
									cx_ite1 = cx_ite1.next;
								}
								cx_ite = cx_ite.next;
							}
							if(anyimpure && (arb.immState & 4) == 0) {
								if(arb.b1.type != 1) {
									var o = arb.b1;
									if(!o.world) {
										o.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o.type == 3) {
											o.kinematicDelaySleep = true;
										}
										if(o.component.sleeping) {
											this.really_wake(o,false);
										}
									}
								}
								if(arb.b2.type != 1) {
									var o = arb.b2;
									if(!o.world) {
										o.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o.type == 3) {
											o.kinematicDelaySleep = true;
										}
										if(o.component.sleeping) {
											this.really_wake(o,false);
										}
									}
								}
							}
						}
						if(arb.sleeping) {
							arb.sleeping = false;
							var _this = this.s_arbiters;
							var ret1;
							if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) {
								ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter();
							} else {
								ret1 = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
								zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = arb;
							var temp = ret1;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
						}
						ret = arb;
					} else if(first) {
						var o = arb;
						o.next = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = o;
						ret = null;
					} else {
						ret = arb;
					}
				} else {
					ret = arb;
				}
			}
		}
		return ret;
	}
	,MRCA_chains: function(s1,s2) {
		var _this = this.mrca1;
		while(_this.head != null) {
			var ret = _this.head;
			_this.head = ret.next;
			var o = ret;
			o.elt = null;
			o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
			if(_this.head == null) {
				_this.pushmod = true;
			}
			_this.modified = true;
			_this.length--;
		}
		_this.pushmod = true;
		var _this = this.mrca2;
		while(_this.head != null) {
			var ret = _this.head;
			_this.head = ret.next;
			var o = ret;
			o.elt = null;
			o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
			if(_this.head == null) {
				_this.pushmod = true;
			}
			_this.modified = true;
			_this.length--;
		}
		_this.pushmod = true;
		if(s1.cbSet != null) {
			var _this = this.mrca1;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = s1;
			var temp = ret;
			temp.next = _this.head;
			_this.head = temp;
			_this.modified = true;
			_this.length++;
		}
		if(s1.body.cbSet != null) {
			var _this = this.mrca1;
			var o = s1.body;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = o;
			var temp = ret;
			temp.next = _this.head;
			_this.head = temp;
			_this.modified = true;
			_this.length++;
		}
		if(s2.cbSet != null) {
			var _this = this.mrca2;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = s2;
			var temp = ret;
			temp.next = _this.head;
			_this.head = temp;
			_this.modified = true;
			_this.length++;
		}
		if(s2.body.cbSet != null) {
			var _this = this.mrca2;
			var o = s2.body;
			var ret;
			if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
				ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
			} else {
				ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = o;
			var temp = ret;
			temp.next = _this.head;
			_this.head = temp;
			_this.modified = true;
			_this.length++;
		}
		var c1 = s1.body.compound;
		var c2 = s2.body.compound;
		while(c1 != c2) {
			var d1 = c1 == null ? 0 : c1.depth;
			var d2 = c2 == null ? 0 : c2.depth;
			if(d1 < d2) {
				if(c2.cbSet != null) {
					var _this = this.mrca2;
					var ret;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
						ret.next = null;
					}
					ret.elt = c2;
					var temp = ret;
					temp.next = _this.head;
					_this.head = temp;
					_this.modified = true;
					_this.length++;
				}
				c2 = c2.compound;
			} else {
				if(c1.cbSet != null) {
					var _this1 = this.mrca1;
					var ret1;
					if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
						ret1 = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
					} else {
						ret1 = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
						zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret1.next;
						ret1.next = null;
					}
					ret1.elt = c1;
					var temp1 = ret1;
					temp1.next = _this1.head;
					_this1.head = temp1;
					_this1.modified = true;
					_this1.length++;
				}
				c1 = c1.compound;
			}
		}
	}
};
var zpp_$nape_space_ZPP_$SweepData = function() {
	this.aabb = null;
	this.shape = null;
	this.prev = null;
	this.next = null;
};
zpp_$nape_space_ZPP_$SweepData.__name__ = true;
var zpp_$nape_space_ZPP_$SweepPhase = function(space) {
	this.list = null;
	zpp_$nape_space_ZPP_$Broadphase.call(this);
	this.space = space;
	this.is_sweep = true;
	this.sweep = this;
};
zpp_$nape_space_ZPP_$SweepPhase.__name__ = true;
zpp_$nape_space_ZPP_$SweepPhase.__super__ = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$SweepPhase.prototype = $extend(zpp_$nape_space_ZPP_$Broadphase.prototype,{
	__insert: function(shape) {
		var dat;
		if(zpp_$nape_space_ZPP_$SweepData.zpp_pool == null) {
			dat = new zpp_$nape_space_ZPP_$SweepData();
		} else {
			dat = zpp_$nape_space_ZPP_$SweepData.zpp_pool;
			zpp_$nape_space_ZPP_$SweepData.zpp_pool = dat.next;
			dat.next = null;
		}
		shape.sweep = dat;
		dat.shape = shape;
		dat.aabb = shape.aabb;
		dat.next = this.list;
		if(this.list != null) {
			this.list.prev = dat;
		}
		this.list = dat;
	}
	,__remove: function(shape) {
		var dat = shape.sweep;
		if(dat.prev == null) {
			this.list = dat.next;
		} else {
			dat.prev.next = dat.next;
		}
		if(dat.next != null) {
			dat.next.prev = dat.prev;
		}
		shape.sweep = null;
		var o = dat;
		o.prev = null;
		o.shape = null;
		o.aabb = null;
		o.next = zpp_$nape_space_ZPP_$SweepData.zpp_pool;
		zpp_$nape_space_ZPP_$SweepData.zpp_pool = o;
	}
	,sync_broadphase: function() {
		this.space.validation();
		if(this.list != null) {
			var a = this.list.next;
			while(a != null) {
				var n = a.next;
				var b = a.prev;
				if(a.aabb.minx > b.aabb.minx) {
					a = n;
					continue;
				}
				while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
				var prev = a.prev;
				prev.next = a.next;
				if(a.next != null) {
					a.next.prev = prev;
				}
				if(b.prev == null) {
					a.prev = null;
					this.list = a;
					a.next = b;
					b.prev = a;
				} else {
					a.prev = b.prev;
					b.prev = a;
					a.prev.next = a;
					a.next = b;
				}
				a = n;
			}
		}
	}
	,broadphase: function(space,discrete) {
		if(this.list != null) {
			var a = this.list.next;
			while(a != null) {
				var n = a.next;
				var b = a.prev;
				if(a.aabb.minx > b.aabb.minx) {
					a = n;
					continue;
				}
				while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
				var prev = a.prev;
				prev.next = a.next;
				if(a.next != null) {
					a.next.prev = prev;
				}
				if(b.prev == null) {
					a.prev = null;
					this.list = a;
					a.next = b;
					b.prev = a;
				} else {
					a.prev = b.prev;
					b.prev = a;
					a.prev.next = a;
					a.next = b;
				}
				a = n;
			}
			var d1 = this.list;
			while(d1 != null) {
				var d2 = d1.next;
				var s1 = d1.shape;
				var b1 = s1.body;
				var bottom = d1.aabb.maxx;
				while(d2 != null) {
					if(d2.aabb.minx > bottom) {
						break;
					}
					var s2 = d2.shape;
					var b2 = s2.body;
					if(b2 == b1) {
						d2 = d2.next;
						continue;
					}
					if(b1.type == 1 && b2.type == 1) {
						d2 = d2.next;
						continue;
					}
					if(b1.component.sleeping && b2.component.sleeping) {
						d2 = d2.next;
						continue;
					}
					var _this = s1.aabb;
					var x = s2.aabb;
					if(!(x.miny > _this.maxy || _this.miny > x.maxy)) {
						if(discrete) {
							space.narrowPhase(s1,s2,b1.type != 2 || b2.type != 2,null,false);
						} else {
							space.continuousEvent(s1,s2,b1.type != 2 || b2.type != 2,null,false);
						}
					}
					d2 = d2.next;
				}
				d1 = d1.next;
			}
		}
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var ret;
		if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_geom_ZPP_$Vec2();
		} else {
			ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.weak = false;
		ret._immutable = false;
		ret.x = x;
		ret.y = y;
		var v = ret;
		var ret = output == null ? new nape_phys_BodyList() : output;
		var a = this.list;
		while(a != null && a.aabb.minx > x) a = a.next;
		while(a != null && a.aabb.minx <= x) {
			if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
				var shape = a.shape;
				var body = shape.body.outer;
				if(!ret.has(body)) {
					var tmp;
					if(filter != null) {
						var _this = shape.filter;
						tmp = (_this.collisionMask & filter.collisionGroup) != 0 && (filter.collisionMask & _this.collisionGroup) != 0;
					} else {
						tmp = true;
					}
					if(tmp) {
						if(shape.type == 0) {
							if(zpp_$nape_geom_ZPP_$Collide.circleContains(shape.circle,v)) {
								ret.push(body);
							}
						} else if(zpp_$nape_geom_ZPP_$Collide.polyContains(shape.polygon,v)) {
							ret.push(body);
						}
					}
				}
			}
			a = a.next;
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		return ret;
	}
});
var zpp_$nape_util_ZNPList_$ZPP_$Compound = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Compound.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Compound.prototype = {
	remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$AABBNode = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$AABBNode.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$AABBNode.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$AABBNode();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$Edge = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Edge.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Edge.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Edge();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Edge();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$AABBPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$AABBPair.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$AABBPair.prototype = {
	pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$Shape = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Shape.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Shape.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Shape();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Shape();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$Arbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.prototype = {
	pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$Body = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Body.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Body.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$CallbackSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$CallbackSet.__name__ = true;
var zpp_$nape_util_ZNPList_$ZPP_$Component = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Component.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Component.prototype = {
	pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter.__name__ = true;
var zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter.__name__ = true;
var zpp_$nape_util_ZNPList_$ZPP_$Listener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$Listener.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$Listener.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Listener();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Listener();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$ColArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$ColArbiter.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$ColArbiter.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$ToiEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$ToiEvent.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$ToiEvent.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$CbSetPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$CbSetPair.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$CbSetPair.prototype = {
	add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = o;
		var temp = ret;
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = o;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret1;
				if(pre == null) {
					old = this.head;
					ret1 = old.next;
					this.head = ret1;
					if(this.head == null) {
						this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret1 = old.next;
					pre.next = ret1;
					if(ret1 == null) {
						this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = o;
				this.modified = true;
				this.length--;
				this.pushmod = true;
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
};
var zpp_$nape_util_ZNPList_$ConvexResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ConvexResult.__name__ = true;
zpp_$nape_util_ZNPList_$ConvexResult.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$ZPP_$GeomPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.__name__ = true;
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
};
var zpp_$nape_util_ZNPList_$RayResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_$nape_util_ZNPList_$RayResult.__name__ = true;
zpp_$nape_util_ZNPList_$RayResult.prototype = {
	iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
};
var zpp_$nape_util_ZNPNode_$ZPP_$Compound = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Compound.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$AABBNode = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$AABBNode.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$Edge = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Edge.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$AABBPair = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$Shape = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Shape.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$Arbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$Constraint = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$Body = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Body.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$CbType = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$CbType.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$Component = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Component.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$Vec2 = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$Listener = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Listener.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$Interactor = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$CbSet = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$CbSet.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$BodyListener = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.__name__ = true;
var zpp_$nape_util_ZNPNode_$ConvexResult = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ConvexResult.__name__ = true;
var zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.__name__ = true;
var zpp_$nape_util_ZNPNode_$RayResult = function() {
	this.elt = null;
	this.next = null;
};
zpp_$nape_util_ZNPNode_$RayResult.__name__ = true;
var zpp_$nape_util_ZPP_$MixVec2List = function() {
	this.at_index = 0;
	this.at_ite = null;
	this.zip_length = false;
	this._length = 0;
	this.inner = null;
	nape_geom_Vec2List.call(this);
	this.at_ite = null;
	this.at_index = 0;
	this.zip_length = true;
	this._length = 0;
};
zpp_$nape_util_ZPP_$MixVec2List.__name__ = true;
zpp_$nape_util_ZPP_$MixVec2List.get = function(list,immutable) {
	if(immutable == null) {
		immutable = false;
	}
	var ret = new zpp_$nape_util_ZPP_$MixVec2List();
	ret.inner = list;
	ret.zpp_inner.immutable = immutable;
	return ret;
};
zpp_$nape_util_ZPP_$MixVec2List.__super__ = nape_geom_Vec2List;
zpp_$nape_util_ZPP_$MixVec2List.prototype = $extend(nape_geom_Vec2List.prototype,{
	zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var cx_ite = this.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				this._length++;
				cx_ite = cx_ite.next;
			}
			this.zip_length = false;
		}
		return this._length;
	}
	,zpp_vm: function() {
		this.zpp_inner.validate();
		if(this.inner.modified) {
			this.zip_length = true;
			this._length = 0;
			this.at_ite = null;
		}
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) {
			throw haxe_Exception.thrown("Error: Index out of bounds");
		}
		if(this.zpp_inner.reverse_flag) {
			index = this.zpp_gl() - 1 - index;
		}
		if(index < this.at_index || this.at_ite == null) {
			this.at_index = 0;
			this.at_ite = this.inner.next;
			while(true) {
				var x = this.at_ite;
				break;
			}
		}
		while(this.at_index != index) {
			this.at_index++;
			this.at_ite = this.at_ite.next;
			while(true) {
				var x = this.at_ite;
				break;
			}
		}
		var _this = this.at_ite;
		if(_this.outer == null) {
			_this.outer = new nape_geom_Vec2();
			var o = _this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
			_this.outer.zpp_inner = _this;
		}
		return _this.outer;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + "List is immutable");
		}
		this.zpp_inner.modify_test();
		this.zpp_vm();
		if(obj.zpp_inner._inuse) {
			throw haxe_Exception.thrown("Error: " + "Vec2" + " is already in use");
		}
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.inner.add(obj.zpp_inner);
			} else {
				var ite = this.inner.iterator_at(this.zpp_gl() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
});
var zpp_$nape_util_ZPP_$EdgeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Edge();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$EdgeList.__name__ = true;
zpp_$nape_util_ZPP_$EdgeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
};
var zpp_$nape_util_ZPP_$ShapeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$ShapeList.__name__ = true;
zpp_$nape_util_ZPP_$ShapeList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_shape_ShapeList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ShapeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
};
var zpp_$nape_util_ZPP_$BodyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$BodyList.__name__ = true;
zpp_$nape_util_ZPP_$BodyList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_phys_BodyList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$BodyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
};
var zpp_$nape_util_ZPP_$CompoundList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$CompoundList.__name__ = true;
zpp_$nape_util_ZPP_$CompoundList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_phys_CompoundList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$CompoundList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
};
var zpp_$nape_util_ZPP_$InteractorList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$InteractorList.__name__ = true;
zpp_$nape_util_ZPP_$InteractorList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
};
var zpp_$nape_util_ZPP_$ConvexResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ConvexResult();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$ConvexResultList.__name__ = true;
zpp_$nape_util_ZPP_$ConvexResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
};
var zpp_$nape_util_ZPP_$GeomPolyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$GeomPoly();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$GeomPolyList.__name__ = true;
zpp_$nape_util_ZPP_$GeomPolyList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
};
var zpp_$nape_util_ZPP_$RayResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$RayResult();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$RayResultList.__name__ = true;
zpp_$nape_util_ZPP_$RayResultList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
};
var zpp_$nape_util_ZPP_$Vec2List = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$Vec2List.__name__ = true;
zpp_$nape_util_ZPP_$Vec2List.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
};
var zpp_$nape_util_ZPP_$ArbiterList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$ArbiterList.__name__ = true;
zpp_$nape_util_ZPP_$ArbiterList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_dynamics_ArbiterList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ArbiterList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
};
var zpp_$nape_util_ZPP_$ContactList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_dynamics_ZPP_$Contact();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$ContactList.__name__ = true;
zpp_$nape_util_ZPP_$ContactList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
};
var zpp_$nape_util_ZPP_$InteractionGroupList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$InteractionGroupList.__name__ = true;
zpp_$nape_util_ZPP_$InteractionGroupList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
};
var zpp_$nape_util_ZPP_$ConstraintList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$ConstraintList.__name__ = true;
zpp_$nape_util_ZPP_$ConstraintList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_constraint_ConstraintList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ConstraintList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
};
var zpp_$nape_util_ZPP_$CbTypeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$CbTypeList.__name__ = true;
zpp_$nape_util_ZPP_$CbTypeList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_callbacks_CbTypeList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$CbTypeList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
};
var zpp_$nape_util_ZPP_$ListenerList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Listener();
	this._invalidated = true;
};
zpp_$nape_util_ZPP_$ListenerList.__name__ = true;
zpp_$nape_util_ZPP_$ListenerList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_callbacks_ListenerList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ListenerList.prototype = {
	valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) {
			this._modifiable();
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
};
var zpp_$nape_util_ZPP_$PubPool = function() { };
zpp_$nape_util_ZPP_$PubPool.__name__ = true;
var zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.__name__ = true;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.prototype = {
	empty: function() {
		return this.parent == null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) {
			cur = cur.prev;
		} else {
			cur = cur.next;
		}
		return cur;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) {
			cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			cur = cur.next;
		} else {
			break;
		}
		return cur;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) {
				this.swapped(cur.data,sm.data);
			}
			cur = sm;
		}
		var child = cur.prev == null ? cur.next : cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) {
				child.colour = 1;
			} else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) {
							parent.colour = 1;
						} else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) {
			this.parent = child;
		} else if(par.prev == cur) {
			par.prev = child;
		} else {
			par.next = child;
		}
		if(child != null) {
			child.parent = par;
		}
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = o;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) {
				trl.parent = negred;
			}
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) {
				this.swapped(parent.data,nr.data);
			}
			nr.prev = trr;
			if(trr != null) {
				trr.parent = nr;
			}
			nr.next = parent.next;
			if(parent.next != null) {
				parent.next.parent = nr;
			}
			parent.next = nr;
			if(nr != null) {
				nr.parent = parent;
			}
			child = nl;
		} else {
			var nl = negred.next;
			var nr = negred.prev;
			var trl = nr.next;
			var trr = nr.prev;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl;
			if(trl != null) {
				trl.parent = negred;
			}
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) {
				this.swapped(parent.data,nr.data);
			}
			nr.next = trr;
			if(trr != null) {
				trr.parent = nr;
			}
			nr.prev = parent.prev;
			if(parent.prev != null) {
				parent.prev.parent = nr;
			}
			parent.prev = nr;
			if(nr != null) {
				nr.parent = parent;
			}
			child = nl;
		}
		if(child.prev != null && child.prev.colour == 0) {
			this.__fix_dbl_red(child.prev);
		} else if(child.next != null && child.next.colour == 0) {
			this.__fix_dbl_red(child.next);
		}
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) {
				this.parent = n2;
			} else if(par1.prev == g) {
				par1.prev = n2;
			} else {
				par1.next = n2;
			}
			if(n2 != null) {
				n2.parent = par1;
			}
			n1.prev = t1;
			if(t1 != null) {
				t1.parent = n1;
			}
			n1.next = t2;
			if(t2 != null) {
				t2.parent = n1;
			}
			n2.prev = n1;
			if(n1 != null) {
				n1.parent = n2;
			}
			n2.next = n3;
			if(n3 != null) {
				n3.parent = n2;
			}
			n3.prev = t3;
			if(t3 != null) {
				t3.parent = n3;
			}
			n3.next = t4;
			if(t4 != null) {
				t4.parent = n3;
			}
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) {
				this.parent.colour = 1;
			} else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) {
			x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet();
		} else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		if(this.parent == null) {
			this.parent = x;
		} else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else {
					cur = cur.prev;
				}
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		}
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return x;
	}
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.__name__ = true;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.prototype = {
	__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) {
				this.parent = n2;
			} else if(par1.prev == g) {
				par1.prev = n2;
			} else {
				par1.next = n2;
			}
			if(n2 != null) {
				n2.parent = par1;
			}
			n1.prev = t1;
			if(t1 != null) {
				t1.parent = n1;
			}
			n1.next = t2;
			if(t2 != null) {
				t2.parent = n1;
			}
			n2.prev = n1;
			if(n1 != null) {
				n1.parent = n2;
			}
			n2.next = n3;
			if(n3 != null) {
				n3.parent = n2;
			}
			n3.prev = t3;
			if(t3 != null) {
				t3.parent = n3;
			}
			n3.next = t4;
			if(t4 != null) {
				t4.parent = n3;
			}
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) {
				this.parent.colour = 1;
			} else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
				x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
			} else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
						x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
					} else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else {
					cur = cur.prev;
				}
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
						x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
					} else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else {
					cur = cur.next;
				}
			} else {
				break;
			}
		}
		if(x == null) {
			return cur;
		} else {
			if(x.parent == null) {
				x.colour = 1;
			} else {
				x.colour = 0;
				if(x.parent.colour == 0) {
					this.__fix_dbl_red(x);
				}
			}
			return x;
		}
	}
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
TrainingDatas.american_desserts = ["ambrosia","angelcake","applecrisp","appledumpling","applepie","bananapudding","bananasplit","beanpie","blackberrypie","blackbottompie","blondie","blueberrypie","bostoncreampie","brownbetty","brownie","bundtcake","buttermilkpie","butterscotch","caramel","checkerboardcake","cheesecake","cherrypie","chiffonpie","chocolatebrownie","chocolatechipcookie","chocolatepudding","cobbler","coconutcake","congobar","corncookie","creampie","cupcake","cupcone","derbypie","dessertbar","dirtcake","dobergecake","doughnut","frieddough","friedicecream","friedpie","frozenyogurt","fudge","funnelcake","gooeybuttercake","grapepie","grasshopperpie","grasshopperpie","hastypudding","hermitcookies","hotmilkcake","huckleberrypie","hummingbirdcake","iceboxcake","icecreamcake","icecreamcone","jamcake","jello","jellybean","jellycreampie","keylimepie","kingcake","lanecake","lemonsquares","maracapie","marshmallowcreme","moltenchocolatecake","mudpie","oreo","panocha","parfait","pastryhearts","pecanpie","persimmonpudding","pistachiopudding","potpie","pumpkinpie","redvelvetcake","rhubarbpie","ricepudding","scotcheroos","shooflypie","snackcake","snickerdoodles","snickerssalad","stackcake","strawberryshortcake","sundae","sweetpotatopie","tapiocapudding","tipsycake","twinkie","waldorfpudding","watergatesalad","whoopiepie"];
TrainingDatas.american_forenames = ["aaron","ada","adam","adrian","adrienne","agnes","alan","albert","alberta","alberto","alex","alexander","alexandra","alexis","alfred","alfredo","alice","alicia","alison","allan","allen","allison","alma","alvin","alyssa","amanda","amber","amelia","amy","ana","andre","andrea","andrew","andy","angel","angel","angela","angelica","angelina","angie","anita","ann","anna","anne","annette","annie","anthony","antoinette","antonia","antonio","april","arlene","armando","arnold","arthur","ashley","audrey","barbara","barry","beatrice","becky","belinda","ben","benjamin","bernadette","bernard","bernice","bertha","bessie","beth","bethany","betsy","betty","beulah","beverly","bill","billie","billy","blanca","blanche","bob","bobbie","bobby","bonnie","brad","bradley","brandi","brandon","brandy","brenda","brent","brett","brian","bridget","brittany","brooke","bruce","bryan","byron","calvin","camille","candace","candice","carl","carla","carlos","carmen","carol","carole","caroline","carolyn","carrie","casey","casey","cassandra","catherine","cathy","cecelia","cecil","cecilia","celia","chad","charlene","charles","charlie","charlotte","chelsea","cheryl","chester","chris","christian","christie","christina","christine","christopher","christy","cindy","claire","clara","clarence","claude","claudia","clayton","clifford","clifton","clinton","clyde","cody","colleen","connie","constance","cora","corey","cory","courtney","craig","cristina","crystal","curtis","cynthia","daisy","dale","dan","dana","daniel","danielle","danny","darla","darlene","darrell","darren","darryl","daryl","dave","david","dawn","dean","deanna","debbie","deborah","debra","delia","della","delores","denise","dennis","derek","derrick","desiree","diana","diane","dianna","dianne","dixie","dolores","don","donald","donna","dora","doreen","doris","dorothy","douglas","duane","dustin","dwayne","dwight","earl","ebony","eddie","edgar","edith","edna","eduardo","edward","edwin","eileen","elaine","eleanor","elena","elisa","elizabeth","ella","ellen","elmer","eloise","elsa","elsie","elvira","emily","emma","enrique","eric","erica","erik","erika","erin","erma","ernest","ernestine","essie","estelle","esther","ethel","eugene","eula","eunice","eva","evelyn","everett","faith","fannie","faye","felicia","felix","fernando","flora","florence","floyd","frances","francis","francis","francisco","frank","franklin","fred","freda","freddie","frederick","gabriel","gail","gary","gayle","gene","geneva","genevieve","george","georgia","gerald","geraldine","gertrude","gilbert","gina","ginger","gladys","glen","glenda","glenn","gloria","gordon","grace","greg","gregory","gretchen","guadalupe","guy","gwen","gwendolyn","hannah","harold","harriet","harry","harvey","hattie","hazel","heather","hector","heidi","helen","henrietta","henry","herbert","herman","hilda","holly","hope","howard","hugh","ian","ida","inez","irene","iris","irma","isaac","isabel","ivan","jack","jackie","jacob","jacqueline","jacquelyn","jaime","jaime","james","jamie","jamie","jan","jana","jane","janet","janice","janie","janis","jared","jasmine","jason","javier","jay","jean","jeanette","jeanne","jeannette","jeannie","jeff","jeffery","jeffrey","jenna","jennie","jennifer","jenny","jeremy","jerome","jerry","jesse","jessica","jessie","jessie","jesus","jill","jim","jimmie","jimmy","jo","joan","joann","joanna","joanne","jodi","jody","joe","joel","johanna","john","johnnie","johnnie","johnny","jon","jonathan","jordan","jorge","jose","josefina","joseph","josephine","joshua","joy","joyce","juan","juana","juanita","judith","judy","julia","julian","julie","julio","june","justin","kara","karen","kari","karl","karla","kate","katherine","kathleen","kathryn","kathy","katie","katrina","kay","kayla","keith","kelley","kelli","kellie","kelly","kelly","ken","kendra","kenneth","kent","kerry","kevin","kim","kimberly","kirk","krista","kristen","kristi","kristie","kristin","kristina","kristine","kristy","krystal","kurt","kyle","lana","lance","larry","latoya","laura","lauren","laurie","laverne","lawrence","leah","lee","lee","leigh","lela","lena","leo","leon","leona","leonard","leroy","leslie","leslie","lester","leticia","lewis","lila","lillian","lillie","linda","lindsay","lindsey","lisa","lloyd","lois","lola","lonnie","lora","lorena","lorene","loretta","lori","lorraine","louis","louise","lucia","lucille","lucy","luis","lula","luz","lydia","lynda","lynette","lynn","lynne","mabel","mable","madeline","mae","maggie","mamie","mandy","manuel","marc","marcella","marcia","marcus","margaret","margarita","margie","marguerite","maria","marian","marianne","marie","marilyn","mario","marion","marion","marjorie","mark","marlene","marsha","marshall","marta","martha","martin","marvin","mary","maryann","mathew","matthew","mattie","maureen","maurice","max","maxine","may","megan","meghan","melanie","melba","melinda","melissa","melody","melvin","mercedes","meredith","michael","micheal","michele","michelle","miguel","mike","mildred","milton","mindy","minnie","miranda","miriam","misty","mitchell","molly","mona","monica","monique","morris","muriel","myra","myrtle","nadine","nancy","naomi","natalie","natasha","nathan","nathaniel","neil","nellie","nelson","nettie","nicholas","nichole","nicole","nina","nora","norma","norman","olga","olive","olivia","ollie","opal","ora","oscar","pam","pamela","pat","patricia","patrick","patsy","patti","patty","paul","paula","paulette","pauline","pearl","pedro","peggy","penny","perry","peter","philip","phillip","phyllis","priscilla","rachael","rachel","rafael","ralph","ramon","ramona","randall","randy","raquel","raul","ray","raymond","rebecca","regina","reginald","rene","renee","rhonda","ricardo","richard","rick","ricky","rita","robert","roberta","roberto","robin","robyn","rochelle","rodney","roger","roland","ron","ronald","ronnie","rosa","rosalie","rose","rosemarie","rosemary","rosie","ross","roxanne","roy","ruben","ruby","russell","ruth","ryan","sabrina","sadie","sally","salvador","sam","samantha","samuel","sandra","sandy","sara","sarah","scott","sean","sergio","seth","shane","shannon","shari","sharon","shawn","shawna","sheila","shelia","shelley","shelly","sheri","sherri","sherry","sheryl","shirley","sidney","silvia","sonia","sonja","sonya","sophia","sophie","stacey","stacy","stanley","stella","stephanie","stephen","steve","steven","sue","susan","susie","suzanne","sylvia","tabitha","tamara","tami","tammy","tanya","tara","tasha","ted","teresa","teri","terrance","terrence","terri","terry","terry","thelma","theodore","theresa","thomas","tiffany","tim","timothy","tina","todd","tom","tommy","toni","tony","tonya","tracey","traci","tracy","tracy","travis","tricia","troy","tyler","tyrone","valerie","vanessa","velma","vera","verna","vernon","veronica","vicki","vickie","vicky","victor","victoria","vincent","viola","violet","virgil","virginia","vivian","wade","wallace","walter","wanda","warren","wayne","wendy","wesley","whitney","willard","william","willie","willie","wilma","winifred","yolanda","yvette","yvonne","zachary"];
TrainingDatas.animals = ["aardvark","aardwolf","albatross","alligator","alpaca","anaconda","angelfish","anglerfish","ant","anteater","antelope","antlion","ape","aphid","armadillo","asp","ass","baboon","badger","baldeagle","bandicoot","barnacle","barracuda","basilisk","bass","bat","bear","beaver","bedbug","bee","beetle","bird","bison","blackbird","blackpanther","blackwidow","bluebird","bluejay","bluewhale","boa","boar","bobcat","bonobo","buffalo","butterfly","buzzard","camel","capybara","caribou","carp","cat","caterpillar","catfish","catshark","centipede","chameleon","cheetah","chickadee","chicken","chimpanzee","chinchilla","chipmunk","clam","clownfish","cobra","cockroach","cod","condor","coral","cougar","cow","coyote","crab","crane","cranefly","crayfish","cricket","crocodile","crow","cuckoo","damselfly","deer","dingo","dog","dolphin","donkey","dormouse","dove","dragonfly","duck","dungbeetle","eagle","earthworm","earwig","echidna","eel","egret","elephant","elephantseal","elk","emu","ermine","falcon","ferret","finch","firefly","fish","flamingo","flea","fly","fowl","fox","frog","fruitbat","galliform","gamefowl","gazelle","gecko","gerbil","giantpanda","giantsquid","gibbon","giraffe","goat","goldfish","goose","gopher","gorilla","grasshopper","grizzlybear","groundshark","groundsloth","grouse","guan","guanaco","guineafowl","guineapig","gull","haddock","halibut","hammerheadshark","hamster","hare","hawk","hedgehog","hermitcrab","heron","herring","hippopotamus","hornet","horse","hoverfly","hummingbird","humpbackwhale","hyena","iguana","jackal","jaguar","jay","jellyfish","kangaroo","kingfisher","kiwi","koala","koi","komodo","krill","ladybug","lamprey","lark","leech","lemming","lemur","leopard","limpet","lion","lizard","llama","lobster","locust","loon","louse","lynx","macaw","mackerel","magpie","mammal","manatee","mantaray","marmoset","marmot","meadowlark","meerkat","mink","minnow","mite","mockingbird","mole","mollusk","mongoose","monitor","monkey","moose","mosquito","moth","mouse","mule","narwhal","newt","nightingale","octopus","orangutan","orca","ostrich","otter","owl","ox","panda","panther","parakeet","parrot","partridge","peacock","peafowl","pelican","penguin","perch","peregrine","pheasant","pig","pigeon","pike","piranha","platypus","polarbear","pony","porcupine","porpoise","possum","prairiedog","prawn","prayingmantis","primate","puffin","puma","python","quail","rabbit","raccoon","rat","rattlesnake","raven","redpanda","reindeer","reptile","rhinoceros","roadrunner","rodent","rook","rooster","salamander","salmon","scorpion","seahorse","sealion","seaslug","seasnail","shark","sheep","shrew","shrimp","silkworm","silverfish","skink","skunk","sloth","slug","snail","snake","snipe","sole","sparrow","spermwhale","spider","spidermonkey","squid","squirrel","starfish","stingray","stoat","stork","swallow","swan","swift","swordfish","swordtail","tarantula","termite","thrush","tiger","tigershark","toad","tortoise","toucan","treefrog","trout","tuna","turkey","turtle","tyrannosaurus","vampirebat","viper","vole","vulture","wallaby","walrus","wasp","waterbuffalo","weasel","whale","whitefish","wildcat","wildebeest","wolf","wolverine","wombat","woodpecker","yak","zebra"];
TrainingDatas.board_games = ["abalone","acronymble","agricola","alias","articulate","backgammon","balderdash","battleship","blockade","buckaroo","checkers","chess","clue","diamond","diplomacy","dominion","dominos","downfall","draughts","go","guesswho","hex","isola","jenga","kerplunk","kropki","ludo","mahjong","mastermind","monopoly","mousetrap","obsession","operation","othello","pandemic","pictionary","risk","scattergories","scrabble","senet","shogi","stratego","trivialpursuit","twister","ubongo","uno","upwords","yahtzee"];
TrainingDatas.breakfast_cereals = ["addamsfamilycereal","allbran","almonddelight","alpen","alphabits","applecinnamoncheerios","appleclones","applejacks","applejacksgliders","appleraisincrisp","applezingaroos","applezings","bakedapplelife","bananafrostedflakes","banananutcheerios","berrryluckycharms","berryberrykix","berryburstcheerios","berrykrispies","booberry","capncrunch","captainplanetcereal","caramelcrunchfuls","ceccettios","cheerios","chocapic","chococrunch","chocolatecheerios","chocolatechex","chocolatecrunchfuls","chocolatedonutz","chocolateflake","chocolatekrave","chocolateoatcrunchlife","chocolatetoastcrunch","chrebetcrunch","christmascrunch","cinnabon","cinnamoncheerios","cinnamonchex","cinnamoncrunch","cinnamongrahams","cinnamonjacks","cinnamonlife","cinnamonnutcheerios","cinnamontoastcrunch","cinnamontoasters","cinnasaryapplejacks","circusfun","clackers","clusters","cocoafrostedflakes","cocoahoots","cocoakrispies","cocoapebbles","cocoapuffs","cocopops","cocoroos","cocowheats","colossalcrunch","cometballs","cookiecrisp","cookiecrispbrownie","cookiecrispcereal","cornbran","cornbransquares","cornbursts","cornchex","cornflakes","cornpops","cornsoya","cornysnaps","countchocula","cranberryalmondcrunch","cranberrywheats","crazycow","crazyflakes","crispix","crispix","crispycritters","crispyrice","crispywheats","croonchystars","crunchberries","cruncheroos","crunchybran","crunchycornbran","crunchynutcornflakes","cupcakepebbles","diamondshreddies","dinersaurs","dinkydonuts","dinopebbles","doublechex","doubledipcrunch","dynobites","eggocereal","fantuzflakes","fiberone","flutieflakes","fortifiedoatflakes","frankenberry","freakies","frenchtoastcrunch","frootloops","frootloops","frostedcheerios","frostedflakes","frostedflakesgold","frostedminichex","frostedminiwheats","frosties","fruitbrute","fruitharvest","fruitycheerios","fruitypebbles","fruitypebbles","goldencrisp","goldengoals","goldengrahams","goldennuggets","goldenpuffs","goleancereal","gorillamunch","grahamchex","granola","granola","granolove","granula","grapenutflakes","grapenuts","halfsies","harvestcrunch","honeybunny","honeybuzzers","honeycomb","honeycomb","honeycrisps","honeycups","honeygrahamchex","honeykix","honeynutcheerios","honeypuffs","honeyricekrispies","honeysmacks","honeysmacks","hulkcereal","iceberrypebbles","jets","jif","jumbokrispies","jurassicparkcrunch","kaboom","kingvitaman","kix","kokokrunch","krispykritters","krunchios","krustyos","littlebites","luckycharms","luckycharms","magicpuffscereal","mallowoats","marshmallowpebbles","millenios","milocereal","miniwheats","moonstones","muesli","mueslix","muffets","multigraincheerios","nestlenesquik","nutrigrain","oatbake","oatbransquares","oatcrisp","oatibix","oatkrunchies","oatmealcookiecrisp","oatmealcrisp","oatmealsquares","optivita","orangeblossom","peanutbuttercrunch","pebblesboulders","pebblescereal","pinkpantherflakes","pokemoncereal","powdereddonutz","pronutro","prostarz","puffapuffarice","puffedrice","puffedwheat","puffins","puffkins","punchcrunch","quakequangaroos","quakerohs","quisp","railroadtracks","raisinbran","raisinbran","raisinbranccrunch","raisincrisps","raisinlife","raisinnutbran","raisinsquares","raisinwheats","razzledazzlericekrispies","readybrek","reesespuffs","reptarcrunch","ricebubbles","ricechex","ricehoneys","ricekrinkles","ricekrispies","rockyroad","scoobydoo","sesamestreetcereal","shredddspoonfuls","shreddedoats","shreddedwheat","shreddies","shreddies","shreks","sirgrapefellow","smartbbran","smartstart","smorz","smurfberrycrunch","snowflakes","spidermancereal","sprinklespangles","stars","starwarscereal","strawberryblastedhoneycomb","strawberryricekrispies","strawberryshortcake","strawberrysquares","sugarcrisp","sugarjets","sugarpuffs","sugarsmacks","sugarsprinkledtwinkles","sultanabran","suncrunchers","sunflakes","supermanstars","sweetenedwheatfuls","teamflakes","tigerpower","toastedcinnamonsquares","toastedwheatfuls","toasties","totalcinnamoncrunch","totalcorn","totalcranberrycrunch","totalhoneyclusters","triples","triplesnack","turbocereal","twinkles","unclesamcereal","undercoverbears","vanillycrunch","veggieos","vive","wackies","waffelos","wafflecrisp","weetabix","weetabixminis","weetbix","weetbix","weetos","wheatena","wheathoneys","wheaties","wheatstax","wildanimalcrunch","winterfruitypebbles","yogactive","zanyfruits"];
TrainingDatas.british_desserts = ["angelcake","angeldelight","applecake","applepie","arcticroll","bakewelltart","banburycake","banoffeepie","battenbergcake","blackbun","blancmange","brandysnaps","breadpudding","cabinetpudding","carawayseedcake","carrotcake","chelseabun","chorleycake","christmaspudding","clootie","cobbler","cranachan","crumble","custardtart ","dundeecake","ecclescake","empirebiscuit","etonmess","fatrascal","figgypudding","flummery","fruitfool","fruithat","fudgedoughnut","gypsytart","happyfaces","icecream","jaffacakes","jamrolypoly","knickerbockerglory","lardycake","lardycake","liverpooltart","madeiracake","maltloaf","malvernpudding","manchestertart","mincepie","parkin","penguin","pinkwafer","poundcake","raspberryripple","rhubarbpie","ricepudding","rockcake","scone","shortcake","shrewsburycake","spongecake","spoom","spotteddick","suetpudding","summerpudding","tottenhamcake","treaclespong","treacletart","trifle","welshcake"];
TrainingDatas.brythonic_deities = ["abandinus","abellio","abnoba","adsullata","aericura","agrona","alaunus","alisanos","ambisagrus","ancamna","ancasta","andarta","andraste","anextiomarus","ankou","arausio","arduinna","arnemetia","artio","arvernus","atepomarus","aufaniae","aventia","aveta","barinthus","belatucadros","belenus","belisama","borrum","borvo","brigantia","britannia","buxenus","campestres","camulus","canetonnessis","cernunnos","cicolluis","cimbrianus","cissonius","clota","cocidius","condatis","contrebis","coventina","damara","damona","esus","fagus","grannus","hueteris","huetiris","intarabus","iovantucarus","latobius","lenus","leucetios","lugus","luxovius","luxovius","maponos","maponus","moguns","moritasgus","mullo","nemausus","nerius","nodens","ogmios","robor","rudianos","sedatus","segomo","smertrios","sucellos","taranis","toutatis","tridamos","veteris","vheteris","vindonnus","vinotonus","virotutis","visucius","vitiris","vosegus"];
TrainingDatas.capital_cities = ["abudhabi","abuja","adamstown","addisababa","algiers","amman","amsterdam","ankara","antananarivo","asmara","astana","athens","baghdad","bangkok","basseterre","beijing","beirut","belgrade","berlin","bern","bloemfontein","bogota","brasilia","bratislava","brazzaville","bridgetown","brussels","bucharest","budapest","buenosaires","cairo","canberra","capetown","caracas","cayenne","cockburn town","conakry","copenhagen","dakar","damascus","dhaka","djibouti","doha","douglas","dublin","dushanbe","freetown","funafuti","gaborone","georgetown","gibraltar","grozny","gustavia","hamilton","hanoi","harare","hargeisa","havana","helsinki","hongkong","honiara","islamabad","jakarta","jamestown","jerusalem","juba","kabul","kathmandu","khartoum","kiev","kingston","kingstown","kualalumpur","kuwaitcity","libreville","lima","lisbon","london","luxembourg","madrid","manila","maputo","marigot","maseru","mexicocity","minsk","mogadishu","monaco","monrovia","montevideo","moscow","muscat","nairobi","nassau","nicosia","oslo","ottawa","paris","philipsburg","phnompenh","plymouth","prague","praia","pretoria","pristina","pyongyang","quito","rabat","ramallah","reykjavik","riga","riyadh","roadtown","rome","roseau","saipan","sanjose","sanjuan","sanmarino","sansalvador","santiago","santodomingo","saotome","sarajevo","seoul","singapore","skopje","sofia","stanley","stockholm","sukhumi","suva","taipei","tallinn","tashkent","tehran","tokyo","tripoli","tunis","vaduz","valletta","vaticancity","victoria","vienna","vientiane","vilnius","warsaw","washington","wellington","windhoek","zagreb"];
TrainingDatas.clothing = ["anorak","bikini","blazer","bloomers","blouse","bra","cape","cardigan","cloak","coat","corset","dress","dungarees","frock","garters","gloves","gown","jacket","jeans","jumper","kilt","kimino","knickers","leggings","leotard","lingerie","longjohns","mackintosh","mittens","negligee","nightgown","nylons","overalls","overcoat","pajamas","pants","petticoat","poncho","raincoat","robe","sari","sarong","scarf","shirt","skirt","skivvy","slacks","socks","stockings","suit","sweater","sweatshirt","tie","trousers","tshirt","tuxedo","underclothes","underpants","undershirt","underwear","uniform","veil","vest","waistcoat"];
TrainingDatas.colours = ["amaranth","amber","amethyst","apricot","aquamarine","azure","babyblue","beige","black","blue","bluegreen","blush","bronze","brown","burgundy","byzantium","carmine","cerise","cerulean","champagne","chocolate","cobaltblue","coffee","copper","coral","crimson","cyan","desertsand","electricblue","emerald","erin","gold","gray","green","harlequin","indigo","ivory","jade","junglegreen","lavender","lemon","lilac","lime","magenta","magentarose","maroon","mauve","navyblue","ocher","olive","orange","orchid","peach","pear","periwinkle","persianblue","pink","plum","prussianblue","puce","purple","raspberry","red","redviolet","rose","ruby","salmon","sangria","sapphire","scarlet","silver","slategray","springbud","springgreen","tan","taupe","teal","turquoise","violet","viridian","white","yellow"];
TrainingDatas.constellations_modern = ["andromeda","antlia","apus","aquarius","aquila","ara","aries","auriga","boötes","caelum","camelopardalis","cancer","canesvenatici","canismajor","canisminor","capricornus","carina","cassiopeia","centaurus","cepheus","cetus","chamaeleon","circinus","columba","coma","corona","corvus","crater","crux","cygnus","delphinus","dorado","draco","equuleus","eridanus","fornax","gemini","grus","hercules","horologium","hydra","hydrus","indus","lacerta","leo","leominor","lepus","libra","lupus","lynx","lyra","mensa","microscopium","monoceros","musca","norma","octans","ophiuchus","orion","pavo","pegasus","perseus","phoenix","pictor","pisces","puppis","pyxis","reticulum","sagitta","sagittarius","scorpius","sculptor","scutum","serpens","sextans","taurus","telescopium","triangulum","tucana","ursamajor","ursaminor","vela","virgo","volans","vulpecula"];
TrainingDatas.cooking_utensils = ["applecorer","applecutter","baster","biscuitcutter","biscuitpress","blowtorch","boiloverpreventer","bottleopener","bowl","breadknife","browningtray","buttercurler","cakeandpieserver","cheesecloth","cheeseknife","chefsknife","cherrypitter","chinois","chopfork","chopsticks","cleaver","colander","corkscrew","crabcracker","crabcracker","cuttingboard","doughscraper","eggpiercer","eggpoacher","eggseparator","eggslicer","eggtimer","filletknife","fishscaler","fishslice","floursifter","fonduefork","foodmill","fork","funnel","garlicpress","grapefruitknife","grater","gravystrainer","herbchopper","honeydipper","honeydipper","knife","knork","ladle","lame","lemonreamer","lemonsqueezer","lobsterpick","mandoline","matedcolanderpot","measuringcup","measuringspoon","meatgrinder","meattenderiser","meatthermometer","melonballer","mezzaluna","mortarandpestle","nutcracker","nutcracker","nutmeggrater","ovenglove","pastrybag","pastryblender","pastrybrush","pastrywheel","peel","peeler","peppermill","piebird","pizzacutter","pot-holder","potatomasher","potatoricer","poultryshears","rollerdocker","rollingpin","saltshaker","scales","scissors","scoop","sieve","skewer","slottedspoon","spatula","spider","spoon","sporf","spork","sugarthermometer","tamis","tinopener","tomatoknife","tongs","tongs","trongs","trussingneedle","twine","whisk","woodspoon","zester"];
TrainingDatas.countries = ["afghanistan","africa","albania","algeria","andorra","angola","antigua","arabia","argentina","armenia","ascension","australia","austria","bahamas","bahrain","bangladesh","barbados","belarus","belgium","belize","bermuda","bolivia","bosnia","botswana","brazil","britain","brunei","bulgaria","burundi","cambodia","cameroon","canada","chad","chile","china","china","colombia","congo","costarica","croatia","cuba","cyprus","cyrenaica","czech","denmark","ecuador","egypt","emirates","eritrea","estonia","ethiopia","falklands","finland","france","gambia","georgia","germany","ghana","greece","greenland","grenada","guam","guatemala","guernsey","guinea","guinea","haiti","hongkong","hungary","iceland","india","indonesia","iran","iraq","ireland","israel","italy","jamaica","japan","jordan","kashmir","kenya","korea","kosovo","kurdistan","kuwait","laos","latvia","lebanon","libya","liechtenstein","lithuania","luxembourg","macau","macedonia","madagascar","malaysia","maldives","mali","malta","mexico","micronesia","monaco","mongolia","morocco","mozambique","nepal","netherlands","nicaragua","niger","nigeria","norway","norway","oman","pakistan","palestine","panama","paraguay","peru","philippines","poland","portugal","romania","ross","russia","rwanda","salvador","saudi","serbia","seychelles","singapore","slovakia","slovenia","somalia","spain","sudan","sudan","svalbard","sweden","switzerland","syria","taiwan","taiwan","thailand","timor","tobago","trinidad","tunisia","turkey","turkmenistan","uganda","ukraine","unitedkingdom","uruguay","uzbekistan","vanuatu","vatican","venezuela","vietnam","yemen","zealand","zimbabwe"];
TrainingDatas.dinosaurs = ["aachenosaurus","aardonyx","abdallahsaurus","abelisaurus","abrictosaurus","abrosaurus","abydosaurus","acanthopholis","achelousaurus","acheroraptor","achillesaurus","achillobator","acristavus","acrocanthosaurus","acrotholus","actiosaurus","adamantisaurus","adasaurus","adelolophus","adeopapposaurus","aegyptosaurus","aeolosaurus","aepisaurus","aerosteon","aetonyx","afrovenator","agathaumas","aggiosaurus","agilisaurus","agnosphitys","agrosaurus","agujaceratops","agustinia","ahshislepelta","ajancingenia","ajkaceratops","alamosaurus","alaskacephale","albalophosaurus","albertaceratops","albertadromeus","albertonykus","albertosaurus","albinykus","albisaurus","alcovasaurus","alectrosaurus","aletopelta","algoasaurus","alioramus","aliwalia","allosaurus","alnashetri","alocodon","altirhinus","altispinax","alvarezsaurus","alwalkeria","alxasaurus","amargasaurus","amargastegos","amargatitanis","amazonsaurus","ammosaurus","ampelosaurus","amphicoelias","amphicoelicaudia","amphisaurus","amtocephale","amtosaurus","amurosaurus","amygdalodon","anabisetia","anasazisaurus","anatosaurus","anatotitan","anchiceratops","anchiornis","anchisaurus","andesaurus","andhrasaurus","angaturama","angloposeidon","angolatitan","angulomastacator","aniksosaurus","animantarx","ankistrodon","ankylosaurus","anodontosaurus","anoplosaurus","anserimimus","antarctopelta","antarctosaurus","antetonitrus","anthodon","antrodemus","anzu","aorun","apatodon","apatoraptor","apatosaurus","appalachiosaurus","aquilops","aragosaurus","aralosaurus","araucanoraptor","archaeoceratops","archaeodontosaurus","archaeopteryx","archaeoraptor","archaeornis","archaeornithoides","archaeornithomimus","arcovenator","arctosaurus","arcusaurus","arenysaurus","argentinosaurus","argyrosaurus","aristosaurus","aristosuchus","arizonasaurus","arkansaurus","arkharavia","arrhinoceratops","arstanosaurus","asiaceratops","asiamericana","asiatosaurus","astrodon","astrodonius","astrodontaurus","astrophocaudia","asylosaurus","atacamatitan","atlantosaurus","atlasaurus","atlascopcosaurus","atopodentatus","atrociraptor","atsinganosaurus","aublysodon","aucasaurus","augustia","augustynolophus","auroraceratops","aurornis","australodocus","australovenator","austrocheirus","austroraptor","austrosaurus","avaceratops","avalonia","avalonianus","aviatyrannis","avimimus","avipes","azendohsaurus","bactrosaurus","bagaceratops","bagaraatan","bahariasaurus","bainoceratops","bakesaurus","balaur","balochisaurus","bambiraptor","banji","baotianmansaurus","barapasaurus","barilium","barosaurus","barrosasaurus","barsboldia","baryonyx","bashunosaurus","basutodon","bathygnathus","batyrosaurus","baurutitan","bayosaurus","becklespinax","beelemodon","beipiaosaurus","beishanlong","bellusaurus","belodon","berberosaurus","betasuchus","bicentenaria","bienosaurus","bihariosaurus","bilbeyhallorum","bissektipelta","bistahieversor","blancocerosaurus","blasisaurus","blikanasaurus","bolong","bonapartenykus","bonatitan","bonitasaura","borealosaurus","boreonykus","borogovia","bothriospondylus","brachiosaurus","brachyceratops","brachylophosaurus","brachypodosaurus","brachyrophus","brachytaenius","brachytrachelopan","bradycneme","brasileosaurus","brasilotitan","bravoceratops","breviceratops","brohisaurus","brontomerus","brontoraptor","brontosaurus","bruhathkayosaurus","bugenasaura","buitreraptor","byranjaffia","byronosaurus","caenagnathasia","caenagnathus","calamosaurus","calamospondylus","calamospondylus","callovosaurus","camarasaurus","camarillasaurus","camelotia","camposaurus","camptonotus","camptosaurus","campylodon","campylodoniscus","canardia","capitalsaurus","carcharodontosaurus","cardiodon","carnotaurus","caseosaurus","cathartesaura","cathetosaurus","caudipteryx","caudocoelus","caulodon","cedarosaurus","cedarpelta","cedrorestes","centemodon","centrosaurus","cerasinops","ceratonykus","ceratops","ceratosaurus","cetiosauriscus","cetiosaurus","changchunsaurus","changdusaurus","changyuraptor","chaoyangsaurus","charonosaurus","chasmosaurus","chassternbergia","chebsaurus","cheneosaurus","chialingosaurus","chiayusaurus","chienkosaurus","chilantaisaurus","chilesaurus","chindesaurus","chingkankousaurus","chinshakiangosaurus","chirostenotes","chondrosteosaurus","chromogisaurus","chuandongocoelurus","chuanjiesaurus","chuanqilong","chubutisaurus","chungkingosaurus","chuxiongosaurus","cinizasaurus","cionodon","citipati","cladeiodon","claorhynchus","claosaurus","clarencea","clasmodosaurus","clepsysaurus","coahuilaceratops","coelophysis","coelosaurus","coeluroides","coelurosauravus","coelurus","colepiocephale","coloradia","coloradisaurus","colossosaurus","comahuesaurus","comanchesaurus","compsognathus","compsosuchus","concavenator","conchoraptor","condorraptor","coronosaurus","corythosaurus","craspedodon","crataeomus","craterosaurus","creosaurus","crichtonpelta","crichtonsaurus","cristatusaurus","crosbysaurus","cruxicheiros","cryolophosaurus","cryptodraco","cryptoraptor","cryptosaurus","cryptovolans","cumnoria","daanosaurus","dacentrurus","dachongosaurus","daemonosaurus","dahalokely","dakosaurus","dakotadon","dakotaraptor","damalasaurus","dandakosaurus","danubiosaurus","daptosaurus","darwinsaurus","dashanpusaurus","daspletosaurus","dasygnathoides","dasygnathus","datanglong","datonglong","datousaurus","daurosaurus","daxiatitan","deinocheirus","deinodon","deinonychus","delapparentia","deltadromeus","demandasaurus","denversaurus","deuterosaurus","diabloceratops","diamantinasaurus","dianchungosaurus","diceratops","diceratus","diclonius","dicraeosaurus","didanodon","dilong","dilophosaurus","dimodosaurus","dinheirosaurus","dinodocus","dinosaurus","dinotyrannus","diplodocus","diplotomodon","diracodon","dolichosuchus","dollodon","domeykosaurus","dongbeititan","dongyangopelta","dongyangosaurus","doratodon","doryphorosaurus","draconyx","dracopelta","dracoraptor","deinonychusskeleton","dracorex","dracovenator","dravidosaurus","dreadnoughtus","drinker","dromaeosauroides","dromaeosaurus","dromiceiomimus","dromicosaurus","drusilasaura","dryosaurus","dryptosauroides","dryptosaurus","dubreuillosaurus","duriatitan","duriavenator","dynamosaurus","dyoplosaurus","dysalotosaurus","dysganus","dyslocosaurus","dystrophaeus","dystylosaurus","echinodon","edmarka","edmontonia","edmontosaurus","efraasia","einiosaurus","ekrixinatosaurus","elachistosuchus","elaltitan","elaphrosaurus","elmisaurus","elopteryx","elosaurus","elrhazosaurus","elvisaurus","emausaurus","embasaurus","enigmosaurus","eoabelisaurus","eobrontosaurus","eocarcharia","eoceratops","eocursor","eodromaeus","eohadrosaurus","eolambia","eomamenchisaurus","eoplophysis","eoraptor","eosinopteryx","eotrachodon","eotriceratops","eotyrannus","eousdryosaurus","epachthosaurus","epanterias","ephoenosaurus","epicampodon","epichirostenotes","epidendrosaurus","epidexipteryx","equijubus","erectopus","erketu","erliansaurus","erlikosaurus","eshanosaurus","euacanthus","eucamerotus","eucentrosaurus","eucercosaurus","eucnemesaurus","eucoelophysis","eugongbusaurus","euhelopus","euoplocephalus","eupodosaurus","eureodon","eurolimnornis","euronychodon","europasaurus","europelta","euskelosaurus","eustreptospondylus","fabrosaurus","falcarius","fenestrosaurus","ferganasaurus","ferganastegos","ferganocephale","fosterovenator","frenguellisaurus","fruitadens","fukuiraptor","fukuisaurus","fukuivenator","fukuititan","fulengia","fulgurotherium","fusinasus","fusuisaurus","futabasaurus","futalognkosaurus","gadolosaurus","galeamopus","galesaurus","gallimimus","galtonia","galveosaurus","galvesaurus","gannansaurus","gansutitan","ganzhousaurus","gargoyleosaurus","garudimimus","gasosaurus","gasparinisaura","gastonia","gavinosaurus","geminiraptor","genusaurus","genyodectes","geranosaurus","gideonmantellia","giganotosaurus","gigantoraptor","gigantoscelus","gigantspinosaurus","gilmoreosaurus","ginnareemimus","giraffatitan","glacialisaurus","glishades","glyptodontopelta","gobiceratops","gobisaurus","gobititan","gobivenator","godzillasaurus","gojirasaurus","gondwanatitan","gongbusaurus","gongpoquansaurus","gongxianosaurus","gorgosaurus","goyocephale","graciliceratops","graciliraptor","gracilisuchus","gravitholus","gresslyosaurus","griphornis","griphosaurus","gryphoceratops","gryponyx","gryposaurus","guaibasaurus","guanlong","gwyneddosaurus","gyposaurus","hadrosauravus","hadrosaurus","haestasaurus","hagryphus","hallopus","halticosaurus","hanssuesia","hanwulosaurus","haplocanthosaurus","haplocanthus","haplocheirus","harpymimus","haya","hecatasaurus","heilongjiangosaurus","heishansaurus","helioceratops","helopus","heptasteornis","herbstosaurus","herrerasaurus","hesperonychus","hesperosaurus","heterodontosaurus","heterosaurus","hexing","hexinlusaurus","heyuannia","hierosaurus","hippodraco","hironosaurus","hisanohamasaurus","histriasaurus","homalocephale","honghesaurus","hongshanosaurus","hoplitosaurus","hoplosaurus","horshamosaurus","hortalotarsus","huabeisaurus","hualianceratops","huanansaurus","huanghetitan","huangshanlong","huaxiagnathus","huaxiaosaurus","huaxiasaurus","huayangosaurus","hudiesaurus","huehuecanauhtlus","hulsanpes","hungarosaurus","huxleysaurus","hylaeosaurus","hylosaurus","hypacrosaurus","hypselorhachis","hypselosaurus","hypselospinus","hypsibema","hypsilophodon","hypsirophus","ichabodcraniosaurus","ichthyovenator","ignavusaurus","iguanacolossus","iguanodon","iguanoides","iguanosaurus","iliosuchus","ilokelesia","incisivosaurus","indosaurus","indosuchus","ingenia","inosaurus","irritator","isanosaurus","ischioceratops","ischisaurus","ischyrosaurus","isisaurus","issasaurus","itemirus","iuticosaurus","jainosaurus","jaklapallisaurus","janenschia","jaxartosaurus","jeholosaurus","jenghizkhan","jensenosaurus","jeyawati","jianchangosaurus","jiangjunmiaosaurus","jiangjunosaurus","jiangshanosaurus","jiangxisaurus","jinfengopteryx","jingshanosaurus","jintasaurus","jinzhousaurus","jiutaisaurus","jobaria","jubbulpuria","judiceratops","jurapteryx","jurassosaurus","juratyrant","juravenator","kaatedocus","kagasaurus","kaijiangosaurus","kakuru","kangnasaurus","karongasaurus","katepensaurus","katsuyamasaurus","kayentavenator","kazaklambia","kelmayisaurus","kemkemia","kentrosaurus","kentrurosaurus","kerberosaurus","khaan","khetranisaurus","kileskus","kinnareemimus","kitadanisaurus","kittysaurus","klamelisaurus","kol","koparion","koreaceratops","koshisaurus","kosmoceratops","kotasaurus","koutalisaurus","kritosaurus","kryptops","krzyzanowskisaurus","kukufeldia","kulceratops","kulindadromeus","kulindapteryx","kunbarrasaurus","kundurosaurus","kunmingosaurus","kuszholia","labocania","labrosaurus","laelaps","laevisuchus","lagerpeton","lagosuchus","lamaceratops","lambeosaurus","lametasaurus","lamplughsaura","lanasaurus","lancangosaurus","lancanjiangosaurus","lanzhousaurus","laosaurus","lapampasaurus","laplatasaurus","lapparentosaurus","laquintasaura","latirhinus","leaellynasaura","leinkupal","leipsanosaurus","lengosaurus","leonerasaurus","lepidocheirosaurus","lepidus","leptoceratops","leptorhynchos","leptospondylus","leshansaurus","lesothosaurus","lessemsaurus","levnesovia","lewisuchus","lexovisaurus","leyesaurus","liaoceratops","liaoningosaurus","libycosaurus","ligabueino","ligabuesaurus","ligomasaurus","likhoelesaurus","liliensternus","limaysaurus","limnornis","limnosaurus","limusaurus","linhenykus","linheraptor","linhevenator","lirainosaurus","lisboasaurus","liubangosaurus","loncosaurus","longisquama","longosaurus","lophorhothon","lophostropheus","loricatosaurus","loricosaurus","losillasaurus","lourinhanosaurus","lourinhasaurus","luanchuanraptor","luanpingosaurus","lucianosaurus","lufengosaurus","lukousaurus","luoyanggia","lurdusaurus","lusitanosaurus","lusotitan","lycorhinus","lythronax","macelognathus","machairasaurus","macrodontophion","macrogryphosaurus","macrophalangia","macroscelosaurus","macrurosaurus","madsenius","magnapaulia","magnirostris","magnosaurus","magulodon","magyarosaurus","mahakala","maiasaura","majungasaurus","majungatholus","malarguesaurus","malawisaurus","maleevosaurus","maleevus","mamenchisaurus","manidens","mandschurosaurus","manospondylus","mantellisaurus","mantellodon","mapusaurus","marasuchus","marisaurus","marmarospondylus","marshosaurus","martharaptor","masiakasaurus","massospondylus","maxakalisaurus","medusaceratops","megacervixosaurus","megadactylus","megadontosaurus","megalosaurus","megapnosaurus","megaraptor","melanorosaurus","mendozasaurus","mercuriceratops","meroktenos","metriacanthosaurus","microcephale","microceratops","microceratus","microcoelus","microdontosaurus","microhadrosaurus","micropachycephalosaurus","microraptor","microvenator","mifunesaurus","minmi","minotaurasaurus","miragaia","mirischia","moabosaurus","mochlodon","mohammadisaurus","mojoceratops","mongolosaurus","monkonosaurus","monoclonius","monolophosaurus","mononychus","mononykus","montanoceratops","morelladon","morinosaurus","morosaurus","morrosaurus","mosaiceratops","moshisaurus","mtapaiasaurus","mtotosaurus","mussaurus","muttaburrasaurus","muyelensaurus","mymoorapelta","naashoibitosaurus","nambalia","nankangia","nanningosaurus","nanosaurus","nanotyrannus","nanshiungosaurus","nanuqsaurus","nanyangosaurus","narambuenatitan","nasutoceratops","natronasaurus","nebulasaurus","nectosaurus","nedcolbertia","nedoceratops","neimongosaurus","nemegtia","nemegtomaia","nemegtosaurus","neosaurus","neosodon","neovenator","neuquenraptor","neuquensaurus","newtonsaurus","ngexisaurus","nigersaurus","ningyuansaurus","niobrarasaurus","nipponosaurus","noasaurus","nodocephalosaurus","nodosaurus","nomingia","nopcsaspondylus","normanniasaurus","nothronychus","notoceratops","notocolossus","notohypsilophodon","nqwebasaurus","nteregosaurus","nurosaurus","nuthetes","nyasasaurus","nyororosaurus","ojoceratops","ojoraptorsaurus","oligosaurus","olorotitan","omeisaurus","omosaurus","onychosaurus","oohkotokia","opisthocoelicaudia","oplosaurus","orcomimus","orinosaurus","orkoraptor","ornatotholus","ornithodesmus","ornithoides","ornitholestes","ornithomerus","ornithomimoides","ornithomimus","ornithopsis","ornithosuchus","ornithotarsus","orodromeus","orosaurus","orthogoniosaurus","orthomerus","oryctodromeus","oshanosaurus","osmakasaurus","ostafrikasaurus","othnielia","othnielosaurus","otogosaurus","ouranosaurus","overosaurus","oviraptor","ovoraptor","owenodon","oxalaia","ozraptor","pachycephalosaurus","pachyrhinosaurus","pachysauriscus","pachysaurops","pachysaurus","pachyspondylus","pachysuchus","padillasaurus","pakisaurus","palaeoctonus","palaeocursornis","palaeolimnornis","palaeopteryx","palaeosauriscus","palaeoscincus","paleosaurus","paludititan","paluxysaurus","pampadromaeus","pamparaptor","panamericansaurus","panguraptor","panoplosaurus","panphagia","pantydraco","paraiguanodon","paralititan","paranthodon","pararhabdodon","parasaurolophus","pareiasaurus","parksosaurus","paronychodon","parrosaurus","parvicursor","patagonykus","patagosaurus","pawpawsaurus","pectinodon","pedopenna","pegomastax","peishansaurus","pekinosaurus","pelecanimimus","pellegrinisaurus","peloroplites","pelorosaurus","peltosaurus","penelopognathus","pentaceratops","petrobrasaurus","phaedrolosaurus","philovenator","phuwiangosaurus","phyllodon","piatnitzkysaurus","picrodon","pinacosaurus","pisanosaurus","pitekunsaurus","piveteausaurus","planicoxa","plateosauravus","plateosaurus","platyceratops","plesiohadros","pleurocoelus","pleuropeltus","pneumatoarthrus","pneumatoraptor","podokesaurus","poekilopleuron","polacanthoides","polacanthus","polyodontosaurus","polyonax","ponerosteus","poposaurus","postosuchus","pradhania","prenocephale","prenoceratops","priconodon","priodontognathus","probrachylophosaurus","probactrosaurus","proceratops","proceratosaurus","procheneosaurus","procompsognathus","prodeinodon","proiguanodon","propanoplosaurus","proplanicoxa","prosaurolophus","protarchaeopteryx","protecovasaurus","protiguanodon","protoavis","protoceratops","protognathosaurus","protognathus","protohadros","protrachodon","proyandusaurus","pseudolagosuchus","psittacosaurus","pteropelyx","pterospondylus","puertasaurus","pukyongosaurus","pulanesaura","pycnonemosaurus","pyroraptor","qantassaurus","qianzhousaurus","qiaowanlong","qijianglong","qinlingosaurus","qingxiusaurus","qiupalong","quaesitosaurus","quetecsaurus","quilmesaurus","rachitrema","rahiolisaurus","rahona","rahonavis","rajasaurus","rapator","rapetosaurus","raptorex","ratchasimasaurus","rayososaurus","razanandrongobe","rebbachisaurus","regaliceratops","regnosaurus","revueltosaurus","rhabdodon","rhadinosaurus","rhinorex","rhodanosaurus","rhoetosaurus","rhopalodon","riabininohadros","richardoestesia","rileya","rileyasuchus","rinchenia","rinconsaurus","rioarribasaurus","riodevasaurus","riojasaurus","riojasuchus","rocasaurus","roccosaurus","rubeosaurus","rukwatitan","ruyangosaurus","sacisaurus","sahaliyania","saichania","saldamosaurus","salimosaurus","saltasaurus","saltopus","saltriosaurus","sanchusaurus","sangonghesaurus","sanjuansaurus","sanpasaurus","santanaraptor","sarahsaurus","sarcolestes","sarcosaurus","sarmientosaurus","saturnalia","sauraechinodon","saurolophus","sauroniops","sauropelta","saurophaganax","saurophagus","sauroplites","sauroposeidon","saurornithoides","saurornitholestes","scansoriopteryx","scaphonyx","scelidosaurus","scipionyx","sciurumimus","scleromochlus","scolosaurus","scutellosaurus","secernosaurus","sefapanosaurus","segisaurus","segnosaurus","seismosaurus","seitaad","selimanosaurus","sellacoxa","sellosaurus","serendipaceratops","shamosaurus","shanshanosaurus","shantungosaurus","shanxia","shanyangosaurus","shaochilong","shenzhousaurus","shidaisaurus","shixinggia","shuangmiaosaurus","shunosaurus","shuvosaurus","shuvuuia","siamodon","siamodracon","siamosaurus","siamotyrannus","sibirosaurus","sigilmassasaurus","silesaurus","siluosaurus","silvisaurus","similicaudipteryx","sinocalliopteryx","sinoceratops","sinocoelurus","sinopeltosaurus","sinornithoides","sinornithomimus","sinornithosaurus","sinosauropteryx","sinosaurus","sinotyrannus","sinovenator","sinraptor","sinusonasus","sirindhorna","skorpiovenator","smilodon","sonidosaurus","sonorasaurus","sphaerotholus","sphenosaurus","sphenospondylus","spinophorosaurus","spinops","spinosaurus","spinostropheus","spinosuchus","spondylosoma","squalodon","staurikosaurus","stegoceras","stegopelta","stegosaurides","stegosaurus","stenonychosaurus","stenopelix","stenotholus","stephanosaurus","stereocephalus","sterrholophus","stokesosaurus","stormbergia","strenusaurus","streptospondylus","struthiomimus","struthiosaurus","stygimoloch","stygivenator","styracosaurus","succinodon","suchomimus","suchosaurus","suchoprion","sugiyamasaurus","skeletonofsuchomimus","sulaimanisaurus","supersaurus","suuwassea","suzhousaurus","symphyrophus","syngonosaurus","syntarsus","syrmosaurus","szechuanosaurus","tachiraptor","talarurus","talenkauen","tambatitanis","tangvayosaurus","tanius","tanycolagreus","tanystropheus","tanystrosuchus","taohelong","tapinocephalus","tapuiasaurus","tarascosaurus","tarbosaurus","tarchia","tastavinsaurus","tatankacephalus","tatankaceratops","tataouinea","tatisaurus","taveirosaurus","tawasaurus","tazoudasaurus","technosaurus","tecovasaurus","tehuelchesaurus","teinurosaurus","teleocrater","telmatosaurus","tenantosaurus","tenchisaurus","tendaguria","tenontosaurus","teratophoneus","teratosaurus","termatosaurus","tethyshadros","tetragonosaurus","texacephale","texasetes","teyuwasu","thecocoelurus","thecodontosaurus","thecospondylus","theiophytalia","therizinosaurus","therosaurus","thescelosaurus","thespesius","thotobolosaurus","tianchisaurus","tianchungosaurus","tianyulong","tianyuraptor","tianzhenosaurus","tichosteus","tienshanosaurus","timimus","timurlengia","titanoceratops","tochisaurus","tomodon","tonganosaurus","tonouchisaurus","torilion","tornieria","torosaurus","torvosaurus","tototlmimus","trachodon","traukutitan","trialestes","triassolestes","tribelesodon","triceratops","trigonosaurus","trimucrodon","trinisaura","troodon","tsaagan","tsagantegia","tsintaosaurus","tsuchikurasaurus","tugulusaurus","tuojiangosaurus","turanoceratops","turiasaurus","tylocephale","tylosteus","tyrannosaurus","tyrannotitan","uberabatitan","udanoceratops","ugrosaurus","ugrunaaluk","uintasaurus","ultrasauros","umarsaurus","unaysaurus","unenlagia","unescoceratops","unicerosaurus","unquillosaurus","urbacodon","utahceratops","utahraptor","uteodon","vagaceratops","vahiny","valdoraptor","valdosaurus","variraptor","vectensia","vectisaurus","velafrons","velocipes","velociraptor","velocisaurus","venaticosuchus","venenosaurus","veterupristisaurus","viavenator","vitakridrinda","vitakrisaurus","volkheimeria","vulcanodon","wadhurstia","wakinosaurus","walgettosuchus","walkeria","walkersaurus","wangonisaurus","wannanosaurus","wellnhoferia","wendiceratops","willinakaqe","wintonotitan","wuerhosaurus","wulagasaurus","wulatelong","wyleyia","wyomingraptor","xenoceratops","xenoposeidon","xenotarsosaurus","xianshanosaurus","xiaosaurus","xiaotingia","xinjiangovenator","xinjiangtitan","xiongguanlong","xixianykus","xixiasaurus","xixiposaurus","xuanhanosaurus","xuanhuaceratops","xuanhuasaurus","xuwulong","yaleosaurus","yamaceratops","yandusaurus","yangchuanosaurus","yaverlandia","yezosaurus","yibinosaurus","yimenosaurus","yingshanosaurus","yinlong","yixianosaurus","yizhousaurus","yongjinglong","yuanmouraptor","yuanmousaurus","yueosaurus","yulong","yunganglong","yunnanosaurus","yunxianosaurus","yurgovuchia","yutyrannus","zalmoxes","zanabazar","zanclodon","zapalasaurus","zapsalis","zaraapelta","zatomus","zephyrosaurus","zhanghenglong","zhejiangosaurus","zhenyuanlong","zhongornis","zhongyuansaurus","zhuchengceratops","zhuchengosaurus","zhuchengtyrannus","ziapelta","zigongosaurus","zizhongosaurus","zuniceratops","zuolong","zuoyunlong","zupaysaurus"];
TrainingDatas.diseases = ["abscess","anotia","anthrax","appendicitis","apraxia","argyria","arthritis","asthenia","asthma","astigmatism","atherosclerosis","athetosis","atrophy","beriberi","botulism","bronchitis","brucellosis","bubonic plague","bunion","calculi","cancer","candidiasis","chalazion","chancroid","chavia","cherubism","chickenpox","chlamydia","cholera","chordoma","chorea","coccidioidomycosis","cold","colitis","condyloma","cowpox","cretinism","dehydration","dengue","diabetes","diphtheria","dysentery","ebola","emphysema","encephalitis","epilepsy","fibromyalgia","gangrene","gastroenteritis","goitre","gonorrhea","hepatitis","hypermetropia","hyperopia","hyperthyroidism","hypothyroid","hypotonia","impetigo","infertility","influenza","iritis","jaundice","keloids","kuru","laryngitis","legionellosis","leishmaniasis","leprosy","leptospirosis","leukemia","lice","listeriosis","loiasis","lymphoma","malaria","measles","melanoma","meningitis","migraine","mononucleosis","mumps","myelitis","myoclonus","myopia","myxedema","neoplasm","nightblindness","obesity","osteoarthritis","osteoporosis","otitis","peritonitis","pertussis","phenylketonuria","pilia","plague","pneumonia","poliomyelitis","porphyria","progeria","prostatitis","psittacosis","psoriasis","rabies","rheumatism","rickets","rubella","salmonellosis","scabies","schizophrenia","sciatica","scleroderma","scrapie","scurvy","sepsis","septicemia","shigellosis","shingles","siderosis","silicosis","smallpox","strabismus","strepthroat","swineflu","synovitis","syphilis","taeniasis","teratoma","tetanus","thalassaemia","thrush","thymoma","tinnitus","tonsillitis","trichinosis","trichomoniasis","trisomy","tuberculosis","tularemia","tumor","tungiasis","typhus","ulcers","uremia","urticaria","uveitis","varicella","vitiligo","warts","watkins","yersiniosis"];
TrainingDatas.dragons = ["aithusa","alduin","ancalagon","ash","azhdeen","bahamut","blaze","buraki","burn","deathwing","discord","draco","dracolich","draconia","draconis","drago","dragon","draigoch","drake","drakon","drogon","eldrax","errol","fafnir","falkor","falkor","faranth","feyrbrand","firetongue","firnen","flame","flametongue","flammie","fraenir","glaedr","glaurung","glouroth","griffin","hasai","hydra","icefyre","kalameet","kalessin","katla","leviathan","livyathan","melba","melusine","mnementh","moon","narse","nidhogg","orm","orochi","ouroboros","paarthurnax","pyre","ramoth","rhaegal","ruin","ryuu","saphira","scatha","scorch","scorcher","seath","smaug","spyro","stormfly","tiamat","typhon","viserion","volvagia"];
TrainingDatas.english_towns = ["abingdon","accrington","acle","acton","adlington","alcester","aldeburgh","aldershot","alford","alfreton","alnwick","alsager","alston","alton","altrincham","amble","ambleside","amersham","amesbury","ampthill","andover","appleby","arlesey","arundel","ashbourne","ashburton","ashby","ashford","ashington","ashton","askern","aspatria","atherstone","attleborough","axbridge","axminster","aylesbury","aylsham","bacup","bakewell","bampton","banbury","barking","barnard","barnes","barnet","barnoldswick","barnsley","barnstaple","barrow","barton","basildon","basingstoke","batley","battle","bawtry","beaconsfield","beaminster","bebington","beccles","beckenham","bedale","bedford","bedworth","belper","bentham","berkeley","berkhamsted","berwick","beverley","bewdley","bexhill","bexley","bicester","biddulph","bideford","biggleswade","billericay","billingham","bilston","bingham","bingley","birchwood","birkenhead","bishop","blackburn","blackpool","blackrod","blackwater","blandford","bletchley","blyth","bodmin","bognor","bollington","bolsover","bolton","bootle","bordon","boroughbridge","boston","bottesford","bourne","bournemouth","bovey","brackley","bracknell","bradford","brading","bradley","bradninch","braintree","brampton","brandon","braunstone","brentford","brentwood","bridgnorth","bridgwater","bridlington","bridport","brierfield","brierley","brigg","brighouse","brightlingsea","brixham","broadstairs","bromborough","bromley","bromsgrove","bromyard","broseley","brough","broughton","bruton","buckfastleigh","buckingham","bude","budleigh","bulwell","bungay","buntingford","burford","burgess","burgh","burnham","burnley","burntwood","burslem","burton","burton","bury","bury","bushey","buxton","caistor","callington","calne","camborne","camelford","cannock","canvey","carlton","carnforth","carshalton","carterton","castle","castleford","chagford","chapel","chard","charlbury","chatham","chatteris","cheadle","cheltenham","chertsey","chesham","cheshunt","chester","chesterfield","chickerell","chilton","chingford","chippenham","chipping","chipping","chipping","chorley","chorleywood","christchurch","chudleigh","chulmleigh","church","cinderford","cirencester","clare","clay","cleator","cleethorpes","cleobury","clevedon","clitheroe","clun","cockermouth","coggeshall","colburn","colchester","coleford","coleshill","colne","colyton","congleton","conisbrough","corbridge","corby","corringham","corsham","cotgrave","coulsdon","cowes","cramlington","cranbrook","craven","crawley","crediton","crewe","crewkerne","cricklade","cromer","crook","crosby","crowborough","crowland","crowle","croydon","cullompton","dagenham","dalton","darley","darlington","dartford","dartmouth","darwen","daventry","dawley","dawlish","deal","denholme","dereham","desborough","devizes","dewsbury","didcot","dinnington","diss","doncaster","dorchester","dorking","dover","dovercourt","downham","driffield","droitwich","dronfield","dudley","dukinfield","dulverton","dunstable","dunwich","dursley","ealing","earby","earl","earley","easingwold","east","east","east","east","eastbourne","eastleigh","eastwood","eccles","eccleshall","edenbridge","edgware","edmonton","egremont","elland","ellesmere","ellesmere","elstree","emsworth","enfield","epping","epworth","erith","eton","evesham","exmouth","eye","fairford","fakenham","falmouth","fareham","faringdon","farnham","faversham","fazeley","featherstone","felixstowe","ferndown","ferryhill","filey","filton","finchley","fleet","fleetwood","flitwick","folkestone","fordbridge","fordingbridge","fordwich","fowey","framlingham","frinton","frodsham","frome","gainsborough","garstang","gateshead","gillingham","gillingham","glastonbury","glossop","godalming","godmanchester","goole","gorleston","gosport","grange","grantham","grassington","gravesend","grays","great","great","great","greater","grimsby","guildford","guisborough","hadleigh","hailsham","halesowen","halesworth","halewood","halifax","halstead","haltwhistle","harlow","harpenden","harrogate","harrow","hartland","hartlepool","harwich","harworth","haslemere","haslingden","hastings","hatfield","hatfield","hatherleigh","havant","haverhill","hawes","hawkinge","haxby","hayle","haywards","heanor","heathfield","hebden","hedge","hednesford","hedon","helmsley","helston","hemel","hemsworth","hendon","henley","hertford","hessle","hetton","hexham","heywood","high","higham","highbridge","highworth","hinckley","hingham","hitchin","hoddesdon","holbeach","holsworthy","holt","honiton","horley","horncastle","hornsea","hornsey","horsforth","horsham","horwich","houghton","hounslow","howden","huddersfield","hungerford","hunstanton","huntingdon","hyde","hythe","ilford","ilfracombe","ilkeston","ilkley","ilminster","immingham","ingleby","ipswich","irthlingborough","ivybridge","jarrow","keighley","kempston","kendal","kenilworth","kesgrave","keswick","kettering","keynsham","kidderminster","kidsgrove","kimberley","kingsbridge","kingsteignton","kingston","kington","kirkby","kirkbymoorside","kirkham","kirton","knaresborough","knutsford","langport","launceston","leatherhead","lechlade","ledbury","leek","leigh","leighton","leiston","leominster","letchworth","lewes","leyburn","leyton","liskeard","littlehampton","loddon","loftus","long","longridge","longtown","looe","lostwithiel","loughborough","loughton","louth","lowestoft","ludgershall","ludlow","luton","lutterworth","lydd","lydney","lyme","lymington","lynton","lytchett","lytham","mablethorpe","macclesfield","madeley","maghull","maidenhead","maidstone","maldon","malmesbury","maltby","malton","malvern","manningtree","mansfield","marazion","march","margate","marlborough","marlow","maryport","masham","matlock","medlar","melksham","meltham","melton","mere","mexborough","middleham","middlesbrough","middleton","middlewich","midhurst","midsomer","mildenhall","millom","milton","minchinhampton","minehead","minster","mirfield","mitcham","mitcheldean","modbury","morecambe","moreton","moretonhampstead","morley","morpeth","mossley","much","nailsea","nailsworth","nantwich","needham","nelson","neston","newark","newbiggin","newbury","newcastle","newent","newhaven","newlyn","newmarket","newport","newquay","newton","normanton","north","northallerton","northam","northampton","northfleet","northleach","northwich","norton","nuneaton","oakengates","oakham","okehampton","oldbury","oldham","ollerton","olney","ongar","orford","ormskirk","ossett","oswestry","otley","ottery","oundle","paddock","padiham","padstow","paignton","painswick","partington","patchway","pateley","peacehaven","penistone","penkridge","penrith","penryn","penwortham","penzance","pershore","peterlee","petersfield","petworth","pickering","plympton","pocklington","polegate","pontefract","ponteland","poole","porthleven","portishead","portland","potton","poynton","preesall","prescot","princes","prudhoe","pudsey","queenborough","radstock","ramsey","ramsgate","raunds","rawtenstall","rayleigh","reading","redcar","redditch","redenhall","redruth","reepham","reigate","richmond","richmond","ringwood","ripley","rochdale","rochester","rochford","romford","romsey","ross","rothbury","rotherham","rothwell","rowley","royal","royston","rugby","rugeley","rushden","ryde","rye","saffron","salcombe","sale","saltash","sandbach","sandhurst","sandiacre","sandown","sandwich","sandy","sawbridgeworth","saxmundham","scarborough","scunthorpe","seaford","seaham","seaton","sedbergh","sedgefield","selby","selsey","settle","sevenoaks","shaftesbury","shanklin","shefford","shepshed","shepton","sherborne","sheringham","shifnal","shildon","shipston","shirebrook","shoreham","shrewsbury","sidmouth","silloth","silsden","sittingbourne","skegness","skelmersdale","skelton","skipton","sleaford","slough","smethwick","snaith","snodland","soham","solihull","somerton","southall","southam","southborough","southend","southgate","southminster","southport","southsea","southwell","southwick","southwold","spalding","spennymoor","spilsby","sprowston","stafford","staines","stainforth","stalbridge","stalham","stalybridge","stamford","stanhope","stanley","stapleford","staveley","stevenage","steyning","stockport","stocksbridge","stockton","stone","stonehouse","stony","stotfold","stourbridge","stourport","stow","stowmarket","stratford","stretford","strood","stroud","sturminster","sudbury","surbiton","sutton","sutton","swaffham","swanage","swanley","swanscombe","swindon","syston","tadcaster","tadley","tamworth","taunton","tavistock","teignmouth","telford","telscombe","tenbury","tenterden","tetbury","tewkesbury","thame","thatcham","thaxted","thetford","thirsk","thornaby","thornbury","thorne","thorpe","thrapston","tickhill","tidworth","tipton","tisbury","tiverton","todmorden","tonbridge","topsham","torpoint","torquay","totnes","tottenham","totton","tow","towcester","town","tring","trowbridge","twickenham","tynemouth","uckfield","ulverston","uppingham","upton","uttoxeter","uxbridge","ventnor","verwood","wadebridge","wadhurst","wainfleet","wallasey","wallingford","wallsend","walsall","waltham","waltham","walthamstow","walton","wantage","ware","wareham","warminster","warrington","warwick","washington","watchet","watford","wath","watlington","watton","wednesbury","wellingborough","wellington","wells","welwyn","wembley","wendover","westbury","westerham","westhoughton","weston","wetherby","weybridge","weymouth","whaley","whitby","whitchurch","whitehaven","whitehill","whitnash","whittlesey","whitworth","wickham","wickwar","widnes","wigan","wigton","willenhall","willesden","wilmslow","wilton","wimbledon","wimborne","wincanton","winchcombe","winchelsea","windermere","windsor","winsford","winslow","winterton","wirksworth","wisbech","witham","withernsea","witney","wiveliscombe","wivenhoe","woburn","woburn","woking","wokingham","wolsingham","wolverton","wood","woodbridge","woodley","woodstock","wooler","workington","worksop","worthing","wotton","wragby","wymondham","yarm","yarmouth","yate","yateley","yeovil"];
TrainingDatas.ethnic_groups_contemporary = ["albanians","arabs","armenians","assyrians","azerbaijanis","balochis","bamars","basques","bengalis","berbers","biharis","bosniaks","bulgarians","catalans","chuvash","circassians","congolese","croats","czechs","danes","dutch","english","estonians","faroese","finns","french","gagauz","galician","georgians","germans","gorans","greeks","gujaratis","han","hui","hungarians","icelanders","india","irish","italians","japanese","javanese","jews","kannada","kazakhs","koreans","kurds","kyrgyz","laz","lebanese","macedonians","malayali","malays","manchu","marathi","mongols","norwegians","oromo","pashtuns","persians","poles","portuguese","punjabis","romani","romanians","russians","scotland","scottish","serbs","sindhis","sinhalese","slovaks","slovenes","sorans","spaniards","sundanese","swedes","tamils","tatars","telugu","thais","tibetan","tuaregs","turkmens","turks","ukrainians","uyghur","vietnamese","welsh","zazas","zhuang"];
TrainingDatas.fells_in_cumbria = ["allencrags","angletarnpikes","ardcrags","armbothfell","arnisoncrag","arthurspike","bakestall","bannerdalecrags","barrow","basebrown","bedafell","binsey","birkerfell","birkhousemoor","birks","blackcombe","blackfell","blakefell","bleaberryfell","blearigg","blencathra","bonscalepike","bowfell","bowscalefell","braefell","brandreth","branstree","brimfell","brockcrags","broomfell","brownpike","buckbarrow","buckpike","burnbankfell","calfcrag","carlside","carrockfell","castlecrag","catbells","catstycam","caudalemoor","causeypike","cawfell","cloughhead","coldpike","conistonoldman","cragfell","craghill","crinklecrags","dalehead","dent","dollywaggonpike","dovecrag","dowcrag","eaglecrag","eskpike","fairfield","fellbarrow","firbankfell","fleetwithpike","froswick","gavelfell","gibsonknott","glaramara","gowbarrowfell","grangefell","grasmoor","graycrag","grayrigg","graystones","greatborne","greatcalva","greatcarrs","greatcrag","greatdodd","greatend","greatgable","greatmellfell","greatrigg","greatscafell","greencrag","greengable","greycrag","greyfriar","greyknotts","grike","grisedalepike","hallinfell","hardknott","hartcrag","harterfell","harterfell","hartside","hartsopdodd","hartsophow","haycock","haystacks","helmcrag","helvellyn","hencomb","heronpike","highcrag","highpike","highpike","highraise","highrigg","highseat","highspy","highstile","highstreet","hightove","hindscarth","holmefell","hopegillhead","illbell","illgill","kentmerepike","kidstypike","kirkfell","knott","knottrigg","lankrigg","latrigg","lingfell","lingmell","lingmoorfell","littlehartcrag","littlemellfell","loadpothill","loftcrag","longlandsfell","longside","lonscalefell","lordseat","loughriggfell","lowfell","lowpike","lowthwaitefell","maidenmoor","mealfell","mellbreak","middledodd","middlefell","muncasterfell","mungrisdale","nabscar","nethermostpike","outerside","paveyark","pillar","placefell","raise","rampsgillhead","rannerdaleknotts","ravencrag","redpike","redscrees","restdodd","robinson","rossettpike","rosthwaitefell","sail","saintsundaycrag","salefell","sallows","scafell","scafellpike","scarcrags","scoatfell","seatallan","seathwaitefell","seatsandal","selsidepike","sergeantman","sergeantscrag","sheffieldpike","shipmanknotts","silverhow","skiddaw","slatefell","slightside","sourhowes","southerfell","starlingdodd","steelfell","steelknotts","steeple","stonearthur","stybarrow","swirlhow","tarncrag ","thornthwaitecrag","thunacarknott","troutbecktongue","ullockpike","ullscarf","wainwrights","wallacrag","wandope","wansfell","watchhill","wetherhill","wetherlam","whinlatter","whinrigg","whitelesspike","whiteside","whiteside","whitfell","yewbarrow","yoke"];
TrainingDatas.fish = ["albacore","albacore","alewife","alfonsino","algaeeater","alligator","alligatorfish","amberjack","anchovy","anchovy","anemonefish","angelfish","angler","anglerfish","arapaima","archerfish","armorhead","arowana","arrowtooth","aruana","ayu","baikal","bala","ballan","bandfish","bangus","banjo","barb","barbel","barfish","barracuda","barracuda","barracudina","barramundi","barreleye","baskingshark","bass","basslet","basslet","batfish","batfish","batray","beachsalmon","beardfish","betta","bichir","bigeye","bigscale","billfish","bitterling","blackchin","blackfish","blackfish","bleak","blenny","blenny","blobfish","blowfish","blueeye","bluefin","bluefish","bluegill","boafish","boarfish","bocaccio","boga","bonefish","bonito","bonnetmouth","bonytongue","bowfin","boxfish","bream","bream","brill","bristlemouth","bristlenose","brooder","brotula","brotula","buffalo","buffalofish","bullhead","bullheadshark","bullshark","bulltrout","burbot","buri","burmadanio","burrfish","butterflyfish","butterflyray","candiru","candlefish","capelin","cardinalfish","cardinalfish","cardinaltetra","carp","carp","carp","carpetshark","carpetshark","carpsucker","catalufa","catalufa","catfish","catfish","catla","catshark","cavefish","channelbass","channelcatfish","char","char","cherrysalmon","cherubfish","chimaera","chimaera","chinooksalmon","chub","chub","chubsucker","chumsalmon","cichlid","cichlid","cisco","clingfish","clingfish","clownfish","cobbler","cobia","cod","cod","codlet","codlet","codling","coelacanth","coffinfish","cohosalmon","coley","combfish","conger","cookiecutter","coolieloach","cornetfish","corydoras","cowfish","cownose","cowshark","crappie","crestfish","croaker","crocodileshark","cuckoowrasse","cusk","cuskeel","cutlassfish","cutthroateel","cutthroattrout","dab","dace","dace","daggertooth","daggertooth","damselfish","danio","danio","danio","darter","darter","darter","dartfish","dealfish","demoiselle","devario","devilray","dhufish","discus","diver","dogfish","dogfish","dogteeth","dolphinfish","dorab","dorado","dory","dory","dottyback","dragonet","dragonfish","dragonfish","dragongoby","driftfish","drum","duckbill","duskygrouper","eagleray","eel","eelgoby","eelpout","eeltailcatfish","elasmobranch","electriceel","elephantnose","elephantnose","elver","emperor","escolar","escolar","eulachon","fangtooth","featherback","fierasfer","filefish","fingerfish","firefish","flagblenny","flagfin","flagfish","flagtail","flashlightfish","flatfish","flathead","flathead","flier","flounder","flounder","flyingfish","flyingfish","footballfish","fringehead","frogfish","fusilier","galjoen","gangesshark","gar","garibaldi","garpike","ghostfish","ghostflathead","ghostknifefish","ghostpipefish","ghostshark","ghoul","gibberfish","glassfish","glassfish","goatfish","goatfish","goby","goby","goldentrout","goldeye","goldfish","gombessa","goosefish","gourami","gourami","gourami","graveldiver","grayling","grayling","greeneye","greenling","grenadier","groundshark","grouper","grunion","grunt","grunter","gruntsculpin","gudgeon","guitarfish","gulper","gulper","gunnel","gunnel","guppy","gurnard","gurnard","gurnard","haddock","hagfish","hairtail","hake","hake","halfbeak","halfmoon","halibut","halibut","halosaur","hamlet","hammerhead","hammerjaw","handfish","hardhead","harelip","hatchetfish","hatchetfish","hawkfish","herring","herring","hogsucker","hoki","hornshark","horsefish","horsemackerel","houndshark","houndshark","huchen","hussar","icefish","icefish","ide","ilisha","inanga","inconnu","jack","jackfish","javelin","jawfish","jellynose","jewel","jewelfish","jewfish","johndory","kafue","kahawai","kaluga","kanyu","kelpfish","kelpfish","kelpperch","killifish","killifish","kingfish","kingofthesalmon","knifefish","knifefish","knifejaw","koi","kokanee","kokopu","labyrinthfish","ladyfish","lagena","lampfish","lampfish","lamprey","lamprey","lancetfish","lanternfish","lanternshark","largemouth","leaffish","leatherjacket","lefteyeflounder","lemonshark","lemonsole","lenok","leopard","lightfish","limia","linedsole","ling","lingcod","lionfish","lionfish","livebearer","lizardfish","loach","longfin","loosejaw","louvar","luderick","lumpsucker","lungfish","lungfish","mackerel","mackerel","mackerelshark","madtom","mahseer","makoshark","manefish","manofwar","mantaray","marblefish","marlin","masu","medaka","medusafish","megamouthshark","menhaden","menhaden","milkfish","minnow","minnow","minnowofthedeep","modocsucker","mojarra","mola","mola","monkfish","mooneye","moonfish","mora","moray","moray","morid","morwong","mosquitofish","mouthbrooder","mrigal","mudcat","mudfish","mudminnow","mudminnow","mudminnow","mudskipper","mudsucker","mudsucker","mullet","mullet","mummichog","murraycod","muskellunge","mustardeel","nase","needlefish","nibblefish","noodlefish","noodlefish","nurseryfish","nurseshark","oarfish","oilfish","oilfish","oldwife","opah","opaleye","oscar","paddlefish","panga","paradisefish","parore","parrotfish","parrotfish","peacockflounder","peamouth","pearleye","pearlfish","pelicaneel","pencilfish","pencilsmelt","perch","pickerel","pickerel","pigfish","pike","pikeblenny","pikeconger","pikeperch","pilchard","pilotfish","pineapplefish","pineconefish","pinksalmon","pipefish","piranha","pirarucu","pirateperch","plaice","platy","platyfish","pleco","plownose","poacher","pollock","pollock","pollyfish","pomfret","pomfret","pompano","ponyfish","porbeagle","porcupinefish","porgy","powen","prickleback","prickleback","pricklefish","pricklyshark","prowfish","prowfish","puffer","puffer","pufferfish","pumpkinseed","pupfish","pupfish","píntano","quillback","quillfish","rabbitfish","ragfish","rainbowfish","rainbowfish","rainbowtrout","rasbora","ratfish","rattail","ray","razorfish","redfin","redfish","redlip","redmouth","redsalmon","redsnapper","reedfish","reefshark","reefshark","remora","requiemshark","ribboneel","ribbonfish","riceeel","ricefish","ridgehead","rivuline","rivuline","roach","roanokebass","rockbass","rockbeauty","rockcod","rockfish","rockfish","rockfish","rockling","rohu","ronquil","roosterfish","ropefish","roughscad","roughsculpin","roughy","roughy","roundhead","rudd","rudderfish","ruffe","sabertooth","sabertoothfish","sablefish","sailfish","salamanderfish","salmon","salmon","salmonshark","sandbarshark","sandburrower","sanddab","sanddiver","sandeel","sandfish","sandgoby","sandknifefish","sandlance","sandperch","sandroller","sandstargazer","sandtiger","sandtilefish","sardine","sargassumfish","sauger","saury","saury","sawfish","sawshark","scabbardfish","scabbardfish","scalyfin","scat","scissortail","scorpionfish","sculpin","sculpin","sculpin","scup","seabass","seabream","seacatfish","seachub","seadevil","seadragon","seahorse","sealamprey","seamoth","searaven","searobin","searobin","searobin","seasnail","seatoad","shad","shad","shark","sharksucker","sharpnose","sheatfish","sheepshead","sheepshead","shiner","shiner","shrimpfish","siamesefightingfish","sillago","silverside","silverside","sixgillray","sixgillshark","skate","skilfish","skipjacktuna","sleeper","sleepershark","slickhead","slimehead","slipmouth","smelt","smelt","smeltwhiting","snailfish","snakeeel","snakehead","snapper","snapper","snipeeel","snipeeel","snipeeel","snipefish","snoek","snook","snubnose","soldierfish","sole","spadefish","spaghettieel","spearfish","speckledtrout","spiderfish","spikefish","spinefoot","spinyfin","splitfin","spookfish","sprat","springfish","squaretail","squaretail","squaretail","squawfish","squawfish","squawfish","squeaker","squirrelfish","stargazer","stargazer","steelhead","stickleback","stickleback","stingfish","stingray","stingray","stonecat","stonefish","stoneroller","sturgeon","sturgeon","sturgeon","sucker","sunfish","sunfish","sunfish","surfperch","surgeonfish","swallower","swallower","swampeel","swampfish","sweeper","swordfish","swordtail","swordtail","sábalo","tadpolefish","tailor","taimen","tang","tang","tapetail","tarpon","tarwhine","telescopefish","tench","tenpounder","tenuis","tetra","tetra","thornfish","threadfin","threadtail","thresher","tigerbarb","tigerperch","tigershark","tilapia","tilefish","toadfish","tommyruff","tompot","tonguefish","tope","topminnow","torpedo","trahira","treefish","trevally","trevally","triggerfish","triggerfish","triplefin","triplespine","tripletail","trout","troutperch","trumpeter","trumpetfish","trunkfish","tubeblenny","tubeeye","tubeshoulder","tubesnout","tuna","tunny","turbot","turkeyfish","uaru","unicornfish","unicornfish","vanjaram","velvetfish","velvetfish","vendace","vimba","viperfish","viperfish","wahoo","wallago","walleye","walu","warmouth","wartyangler","waryfish","waspfish","weaselshark","weatherfish","weaver","weever","weeverfish","whalefish","whalefish","whalefish","whaleshark","whiff","whitebait","whitecroaker","whitefish","whitefish","whitemarlin","whiteshark","whiteshark","whitetip","whitetipshark","whiting","whiting","wobbegong","wolfeel","wolffish","wolfherring","wormeel","wormfish","wrasse","wrasse","wrymouth","yellowbass","yellowhead","yellowjack","yellowmargin","yellowtail","zander","zebrafish","zebraloach","zebrashark","ziege","zingel"];
TrainingDatas.french_forenames = ["adrien","agnès","alain","albert","alexandra","alexandre","alexis","alice","aline","amandine","amélie","andré","andrée","angélique","anne","annemarie","annick","annie","antoine","arlette","arnaud","arthur","audrey","aurore","aurélie","aurélien","baptiste","benjamin","benoît","bernadette","bernard","bertrand","brigitte","bruno","béatrice","camille","carole","caroline","catherine","chantal","charles","chloé","christelle","christian","christiane","christine","christophe","claire","clara","claude","claudine","clémence","clément","colette","coralie","corinne","cyril","cécile","cédric","céline","damien","daniel","danielle","danièle","david","delphine","denis","denise","didier","dominique","dominique","dylan","emma","emmanuel","emmanuelle","enzo","estelle","fabien","fabienne","fabrice","fanny","florence","florent","florian","francine","francis","franck","françois","françoise","frédéric","gabriel","gaétan","gaëlle","geneviève","georges","georgette","germaine","ghislaine","gilbert","gilles","ginette","gisèle","grégory","guillaume","guy","gérard","henri","henriette","hervé","hugo","huguette","hélène","inès","irène","isabelle","jacqueline","jacques","janine","jean","jeanclaude","jeanfrançois","jeanlouis","jeanluc","jeanmarc","jeanmarie","jeanmichel","jeanne","jeannine","jeanpaul","jeanpierre","jennifer","jessica","jocelyne","jonathan","joseph","josette","josé","joël","joëlle","julie","julien","juliette","justine","jérôme","karine","kevin","laetitia","laura","laure","laurence","laurent","liliane","lionel","louis","louise","loïc","luc","lucas","lucie","lucien","lucienne","ludovic","lydie","léa","madeleine","magali","manon","marc","marcel","marcelle","marguerite","maria","marie","mariechristine","marieclaude","mariethérèse","marine","marion","martine","mathieu","mathilde","matthieu","maurice","maxime","michaël","michel","micheline","michelle","michèle","mickaël","mireille","mohamed","monique","morgane","muriel","myriam","mélanie","mélissa","nadia","nadine","nathalie","nicolas","nicole","noémie","océane","odette","odile","olivier","pascal","pascale","patrice","patricia","patrick","paul","paulette","pauline","philippe","pierre","pierrette","quentin","raphaël","raymond","raymonde","rené","renée","richard","robert","roger","roland","romain","régine","régis","rémi","rémy","sabine","sabrina","samuel","sandra","sandrine","sarah","serge","simon","simone","solange","sonia","sophie","stéphane","stéphanie","suzanne","sylvain","sylvie","sébastien","séverine","thierry","thomas","théo","thérèse","valentin","valérie","vanessa","victor","vincent","virginie","véronique","william","xavier","yann","yannick","yves","yvette","yvonne","éliane","élisabeth","élise","élodie","émilie","éric","étienne","évelyne"];
TrainingDatas.fruit = ["acai","apple","avocado","banana","beachplum","bilberry","blackapple","blackberry","blackcherry","blackraspberry","blackwalnut","bloodorange","blueberry","breadfruit","breadnut","bushtomato","canarymelon","cantaloupe","carob","cherry","chestnut","chokeberry","clementine","coconut","cocoplum","coffee","colanut","crabapple","cranberry","cucumber","date","dateplum","dragonfruit","elderberry","elderberry","fig","gooseberry","grape","grapefruit","guava","hogplum","honeydew","huckleberry","juniperberry","keylime","kiwifruit","ladyapple","lemon","lime","lingonberry","loquat","lychee","mandarin","mango","mango","mangosteen","marula","miraclefruit","mulberry","muskmelon","nutmeg","olive","orange","papaya","passionfruit","pawpaw","peach","peanut","pear","pecan","persimmon","pineapple","pitaya","pomegranate","prickypear","pumpkin","quince","raisintree","redmulberry","roseapple","rosehip","satsuma","seagrape","snowberry","starfruit","sugarapple","tamarind","tangerine","watermelon"];
TrainingDatas.furniture = ["barstool","beanbag","bed","bench","bunkbed","cabinet","canopybed","chair","chest","closet","coffeetable","couch","cupboard","curtains","desk","divan","drawers","drawingboard","endtable","filingcabinet","fourposterbed","futon","hammock","hatstand","loveseat","mattress","nightstand","ottoman","ottoman","pantry","platformbed","recliner","sleighbed","stool","table","wardrobe","washstand","waterbed","winerack","workbench","writingdesk"];
TrainingDatas.german_towns = ["aach","aachen","aalen","abenberg","abensberg","achern","achim","adelsheim","adenau","adorf","ahaus","ahlen","ahrensburg","aichach","aichtal","aken","albstadt","alfeld","allendorf","allstedt","alpirsbach","alsdorf","alsfeld","alsleben","altdorf","altena","altenberg","altenburg","altenkirchen","altensteig","altentreptow","altlandsberg","altötting","alzenau","alzey","amberg","amorbach","amöneburg","andernach","angermünde","anklam","annaberg","annaburg","annweiler","ansbach","apolda","arendsee","arneburg","arnis","arnsberg","arnstadt","arnstein","arnstein","artern","arzberg","aschaffenburg","aschersleben","asperg","attendorn","aub","aue","auerbach","auerbach","augsburg","augustusburg","aulendorf","auma","aurich","aßlar","babenhausen","bacharach","backnang","baden","baesweiler","baiersdorf","balingen","ballenstedt","balve","bamberg","barby","bargteheide","barmstedt","barntrup","barsinghausen","barth","baruth","bassum","battenberg","baumholder","baunach","baunatal","bautzen","bayreuth","bebra","beckum","bedburg","beelitz","beerfelden","beeskow","beilngries","beilstein","belgern","bendorf","bensheim","berching","berga","bergen","bergen","bergheim","bergisch","bergkamen","bergneustadt","berka","berlin","bernau","bernburg","bernkastel","bernsdorf","bernstadt","bersenbrück","besigheim","betzdorf","betzenstein","beverungen","bexbach","biberach","biedenkopf","bielefeld","biesenthal","bietigheim","billerbeck","bingen","birkenfeld","bischofsheim","bischofswerda","bismark","bitburg","bitterfeld","blankenburg","blankenhain","blaubeuren","blaustein","bleckede","bleicherode","blieskastel","blomberg","blumberg","bobingen","bocholt","bochum","bockenem","bodenwerder","bogen","boizenburg","bonn","bonndorf","bopfingen","boppard","borgentreich","borgholzhausen","borken","borken","borkum","borna","bornheim","bottrop","boxberg","brackenheim","brake","brakel","bramsche","brand","brandenburg","brandis","braubach","braunfels","braunlage","braunsbedra","braunschweig","breckerfeld","bredstedt","breisach","bremen","bremerhaven","bremervörde","bretten","breuberg","brilon","brotterode","bruchköbel","bruchsal","brunsbüttel","bräunlingen","brück","brüel","brühl","brüssow","buchen","buchholz","buchloe","buckow","burg","burg","burgau","burgbernheim","burgdorf","burghausen","burgkunstadt","burglengenfeld","burgstädt","burgwedel","burladingen","burscheid","buttelstedt","buttstädt","butzbach","buxtehude","bärnau","böblingen","böhlen","bönnigheim","bückeburg","büdelsdorf","büdingen","bühl","bünde","büren","bürgel","bürstadt","bützow","calau","calbe","calw","castrop","celle","cham","chemnitz","clausthal","clingen","cloppenburg","coburg","cochem","coesfeld","colditz","cologne","coswig","coswig","cottbus","crailsheim","creglingen","creuzburg","creußen","crimmitschau","crivitz","cuxhaven","dachau","dahlen","dahme","dahn","damme","dannenberg","dargun","darmstadt","dassel","dassow","datteln","daun","deggendorf","deidesheim","delbrück","delitzsch","delmenhorst","demmin","dessau","detmold","dettelbach","dieburg","diemelstadt","diepholz","dierdorf","dietenheim","dietfurt","dietzenbach","diez","dillenburg","dillingen","dillingen","dingelstädt","dingolfing","dinkelsbühl","dinklage","dinslaken","dippoldiswalde","dissen","ditzingen","doberlug","dohna","dommitzsch","donaueschingen","donauwörth","donzdorf","dorfen","dormagen","dornburg","dornhan","dornstetten","dorsten","dortmund","dransfeld","drebkau","dreieich","drensteinfurt","dresden","drolshagen","duderstadt","duisburg","döbeln","döbern","dömitz","dülmen","düren","düsseldorf","ebeleben","eberbach","ebermannstadt","ebern","ebersbach","ebersbach","ebersberg","eberswalde","eckartsberga","eckernförde","edenkoben","egeln","eggenfelden","eggesin","ehingen","ehrenfriedersdorf","eibelstadt","eibenstock","eichstätt","eilenburg","einbeck","eisenach","eisenberg","eisenberg","eisenhüttenstadt","eisfeld","eisleben","eislingen","ellingen","ellrich","ellwangen","elmshorn","elsdorf","elsfleth","elsterberg","elsterwerda","elstra","elterlein","eltmann","eltville","elzach","elze","emden","emmelshausen","emmendingen","emmerich","emsdetten","endingen","engen","enger","ennepetal","ennigerloh","eppelheim","eppingen","eppstein","erbach","erbach","erbendorf","erding","erftstadt","erfurt","erkelenz","erkner","erkrath","erlangen","erlenbach","erlensee","erwitte","eschborn","eschenbach","eschershausen","eschwege","eschweiler","esens","espelkamp","essen","esslingen","ettenheim","ettlingen","euskirchen","eutin","falkenberg","falkensee","falkenstein","falkenstein","fehmarn","fellbach","felsberg","feuchtwangen","filderstadt","finsterwalde","fladungen","flensburg","florstadt","flöha","flörsheim","forchheim","forchtenberg","forst","frankenau","frankenberg","frankenberg","frankenthal","frankfurt","frankfurt","franzburg","frauenstein","frechen","freiberg","freiberg","freiburg","freilassing","freinsheim","freising","freital","freren","freudenberg","freudenberg","freudenstadt","freyburg","freystadt","freyung","fridingen","friedberg","friedberg","friedland","friedland","friedrichroda","friedrichsdorf","friedrichshafen","friedrichstadt","friedrichsthal","friesack","friesoythe","fritzlar","frohburg","fröndenberg","fulda","furth","furtwangen","fürstenau","fürstenberg","fürstenfeldbruck","fürstenwalde","fürth","füssen","gadebusch","gaggenau","gaildorf","gammertingen","garbsen","garching","gardelegen","garding","gartz","garz","gau","gebesee","gedern","geesthacht","geestland","gefell","gefrees","gehrden","gehren","geilenkirchen","geisa","geiselhöring","geisenfeld","geisenheim","geisingen","geislingen","geislingen","geithain","geldern","gelnhausen","gelsenkirchen","gemünden","gemünden","gengenbach","genthin","georgsmarienhütte","gera","gerabronn","gerbstedt","geretsried","geringswalde","gerlingen","germering","germersheim","gernsbach","gernsheim","gerolstein","gerolzhofen","gersfeld","gersthofen","gescher","geseke","gevelsberg","geyer","giengen","gießen","gifhorn","ginsheim","gladbeck","gladenbach","glashütte","glauchau","glinde","glücksburg","glückstadt","gnoien","goch","goldberg","goldkronach","golßen","gommern","goslar","gotha","grabow","grafenau","grafenwöhr","grafing","gransee","grebenau","grebenstein","greding","greifswald","greiz","greußen","greven","grevenbroich","grevesmühlen","griesheim","grimma","grimmen","groitzsch","gronau","gronau","groß","groß","groß","großalmerode","großbottwar","großbreitenbach","großenehrich","großenhain","großräschen","großröhrsdorf","großschirma","gräfenberg","gräfenhainichen","gräfenthal","gröditz","gröningen","grünberg","grünhain","grünsfeld","grünstadt","guben","gudensberg","gummersbach","gundelfingen","gundelsheim","gunzenhausen","göppingen","görlitz","göttingen","gößnitz","güglingen","günzburg","güsten","güstrow","gütersloh","gützkow","haan","hachenburg","hadamar","hagen","hagenbach","hagenow","haiger","haigerloch","hainichen","haiterbach","halberstadt","haldensleben","halle","halle","hallenberg","hallstadt","haltern","halver","hamburg","hameln","hamm","hammelburg","hamminkeln","hanau","hanover","harburg","hardegsen","haren","harsewinkel","hartenstein","hartha","harzgerode","haselünne","haslach","hattersheim","hattingen","hatzfeld","hausach","hauzenberg","havelberg","havelsee","hayingen","haßfurt","hechingen","hecklingen","heide","heideck","heidelberg","heidenau","heidenheim","heilbad","heilbronn","heiligenhafen","heiligenhaus","heilsbronn","heimbach","heimsheim","heinsberg","heitersheim","heldrungen","helmbrechts","helmstedt","hemau","hemer","hemmingen","hemmoor","hemsbach","hennef","hennigsdorf","heppenheim","herbolzheim","herborn","herbrechtingen","herbstein","herdecke","herdorf","herford","heringen","heringen","hermeskeil","hermsdorf","herne","herrenberg","herrieden","herrnhut","hersbruck","herten","herzberg","herzberg","herzogenaurach","herzogenrath","hessisch","hessisch","hettingen","hettstedt","heubach","heusenstamm","hilchenbach","hildburghausen","hilden","hildesheim","hillesheim","hilpoltstein","hirschau","hirschberg","hirschhorn","hitzacker","hochheim","hockenheim","hof","hofgeismar","hofheim","hofheim","hohen","hohenberg","hohenleuben","hohenmölsen","hohenstein","hohnstein","hollfeld","holzgerlingen","holzminden","homberg","homberg","homburg","horb","horn","hornbach","hornberg","horstmar","hoya","hoyerswerda","hungen","husum","höchstadt","höchstädt","höhr","hörstel","höxter","hückelhoven","hückeswagen","hüfingen","hünfeld","hürth","ibbenbüren","ichenhausen","idar","idstein","illertissen","ilmenau","ilsenburg","ilshofen","immenhausen","immenstadt","ingelfingen","ingelheim","ingolstadt","iphofen","iserlohn","isny","isselburg","itzehoe","jarmen","jena","jerichow","jessen","jever","joachimsthal","johanngeorgenstadt","jöhstadt","jülich","jüterbog","kaarst","kahla","kaisersesch","kaiserslautern","kalbe","kalkar","kaltenkirchen","kaltennordheim","kamen","kamenz","kamp","kandel","kandern","kappeln","karben","karlsruhe","karlstadt","kassel","kastellaun","katzenelnbogen","kaub","kaufbeuren","kehl","kelbra","kelheim","kelkheim","kellinghusen","kelsterbach","kemberg","kemnath","kempen","kempten","kenzingen","kerpen","ketzin","kevelaer","kiel","kierspe","kindelbrück","kirchberg","kirchberg","kirchberg","kirchen","kirchenlamitz","kirchhain","kirchheim","kirchheimbolanden","kirn","kirtorf","kitzingen","kitzscher","kleve","klingenberg","klingenthal","klötze","klütz","knittlingen","koblenz","kohren","kolbermoor","konstanz","konz","korbach","korntal","kornwestheim","korschenbroich","kraichtal","krakow","kranichfeld","krautheim","krefeld","kremmen","krempe","kreuztal","kronach","kronberg","kroppenstedt","krumbach","kröpelin","kulmbach","kupferberg","kuppenheim","kusel","kyllburg","kyritz","kölleda","königs","königsberg","königsbrunn","königsbrück","königsee","königslutter","königstein","königstein","königswinter","könnern","köthen","kühlungsborn","külsheim","künzelsau","laage","laatzen","ladenburg","lage","lahnstein","lahr","laichingen","lambrecht","lampertheim","landau","landau","landsberg","landsberg","landshut","landstuhl","langelsheim","langen","langenau","langenburg","langenfeld","langenhagen","langenselbold","langenzenn","langewiesen","lassan","laubach","laucha","lauchhammer","lauchheim","lauda","lauenburg","lauf","laufen","laufenburg","lauffen","lauingen","laupheim","lauscha","lauta","lauter","lauterbach","lauterecken","lauterstein","lebach","lebus","leer","lehesten","lehrte","leichlingen","leimen","leinefelde","leinfelden","leipheim","leipzig","leisnig","lemgo","lengenfeld","lengerich","lennestadt","lenzen","leonberg","leun","leuna","leutenberg","leutershausen","leutkirch","leverkusen","lich","lichtenau","lichtenau","lichtenberg","lichtenfels","lichtenfels","lichtenstein","liebenau","liebenwalde","lieberose","liebstadt","limbach","limburg","lindau","linden","lindenberg","lindenfels","lindow","lingen","linnich","linz","lippstadt","lohmar","lohne","lohr","loitz","lollar","lommatzsch","lorch","lorch","lorsch","lucka","luckau","luckenwalde","ludwigsburg","ludwigsfelde","ludwigshafen","ludwigslust","ludwigsstadt","lugau","lunzenau","lychen","löbau","löffingen","löhne","löningen","lörrach","löwenstein","lößnitz","lübbecke","lübben","lübbenau","lübeck","lübtheen","lübz","lüchow","lüdenscheid","lüdinghausen","lügde","lüneburg","lünen","lütjenburg","lützen","magdala","magdeburg","mahlberg","mainbernheim","mainburg","maintal","mainz","malchin","malchow","manderscheid","mannheim","mansfeld","marbach","marburg","marienberg","marienmünster","markdorf","markgröningen","markkleeberg","markneukirchen","markranstädt","marktbreit","marktheidenfeld","marktleuthen","marktoberdorf","marktredwitz","marktsteft","marl","marlow","marne","marsberg","maulbronn","maxhütte","mayen","mechernich","meckenheim","medebach","meerane","meerbusch","meersburg","meinerzhagen","meiningen","meisenheim","meißen","meldorf","melle","mellrichstadt","melsungen","memmingen","menden","mendig","mengen","meppen","merkendorf","merseburg","merzig","meschede","mettmann","metzingen","meuselwitz","meyenburg","meßkirch","meßstetten","michelstadt","miesbach","miltenberg","mindelheim","minden","mirow","mittenwalde","mitterteich","mittweida","moers","monheim","monheim","monschau","montabaur","moosburg","moringen","mosbach","munderkingen","munich","munster","murrhardt","mylau","märkisch","möckern","möckmühl","mölln","mönchengladbach","mörfelden","mössingen","mücheln","mügeln","mühlacker","mühlberg","mühldorf","mühlhausen","mühlheim","mühlheim","mülheim","mülheim","müllheim","müllrose","münchberg","müncheberg","münchenbernsdorf","münnerstadt","münsingen","münster","münstermaifeld","münzenberg","nabburg","nagold","naila","nassau","nastätten","nauen","naumburg","naumburg","naunhof","nebra","neckarbischofsheim","neckargemünd","neckarsteinach","neckarsulm","neresheim","netphen","nettetal","netzschkau","neu","neu","neu","neubrandenburg","neubukow","neubulach","neuburg","neudenau","neuenburg","neuenbürg","neuenhaus","neuenrade","neuenstadt","neuenstein","neuerburg","neuffen","neuhaus","neukalen","neukirchen","neukirchen","neukloster","neumark","neumarkt","neumarkt","neumünster","neunburg","neunkirchen","neuruppin","neusalza","neuss","neustadt","neustadt","neustadt","neustadt","neustadt","neustadt","neustadt","neustadt","neustadt","neustadt","neustadt","neustadt","neustadt","neustrelitz","neusäß","neutraubling","neuwied","neuötting","nidda","niddatal","nidderau","nideggen","niebüll","niedenstein","nieder","niederkassel","niedernhall","niederstetten","niederstotzingen","nieheim","niemegk","nienburg","nienburg","nierstein","niesky","nittenau","norden","nordenham","norderney","norderstedt","nordhausen","nordhorn","northeim","nortorf","nossen","nuremberg","nördlingen","nürtingen","ober","oberasbach","oberharz","oberhausen","oberhof","oberkirch","oberkochen","oberlungwitz","obermoschel","obernburg","oberndorf","obernkirchen","oberriexingen","obertshausen","oberursel","oberviechtach","oberweißbach","oberwesel","oberwiesenthal","ochsenfurt","ochsenhausen","ochtrup","oderberg","oebisfelde","oederan","oelde","oelsnitz","oelsnitz","oer","oerlinghausen","oestrich","oettingen","offenbach","offenburg","ohrdruf","olbernhau","olching","oldenburg","oldenburg","olfen","olpe","olsberg","oppenau","oppenheim","oranienbaum","oranienburg","orlamünde","ornbau","ortenberg","ortrand","oschatz","oschersleben","osnabrück","osterburg","osterburken","osterfeld","osterhofen","osterholz","osterode","osterwieck","ostfildern","ostheim","osthofen","ostritz","otterberg","otterndorf","ottweiler","overath","owen","paderborn","papenburg","pappenheim","parchim","parsberg","pasewalk","passau","pattensen","pausa","pegau","pegnitz","peine","peitz","penig","penkun","penzberg","penzlin","perleberg","petershagen","pfaffenhofen","pfarrkirchen","pforzheim","pfreimd","pfullendorf","pfullingen","pfungstadt","philippsburg","pinneberg","pirmasens","pirna","plattling","plau","plaue","plauen","plettenberg","pleystein","plochingen","plön","pockau","pocking","pohlheim","polch","porta","potsdam","pottenstein","preetz","premnitz","prenzlau","pressath","preußisch","prichsenstadt","pritzwalk","prüm","puchheim","pulheim","pulsnitz","putbus","putlitz","pößneck","püttlingen","quakenbrück","quedlinburg","querfurt","quickborn","rabenau","radeberg","radebeul","radeburg","radevormwald","radolfzell","raguhn","rahden","rain","ramstein","ranis","ransbach","rastatt","rastenberg","rathenow","ratingen","ratzeburg","rauenberg","raunheim","rauschenberg","ravensburg","ravenstein","recklinghausen","rees","regen","regensburg","regis","rehau","rehburg","rehna","reichelsheim","reichenbach","reichenbach","reinbek","reinfeld","reinheim","remagen","remda","remscheid","remseck","renchen","rendsburg","rennerod","renningen","rerik","rethem","reutlingen","rheda","rhede","rheinau","rheinbach","rheinberg","rheinböllen","rheine","rheinfelden","rheinsberg","rheinstetten","rhens","rhinow","ribnitz","richtenberg","riedenburg","riedlingen","riedstadt","rieneck","riesa","rietberg","rinteln","rochlitz","rockenhausen","rodalben","rodenberg","rodewisch","rodgau","roding","romrod","ronneburg","ronnenberg","rosbach","rosenfeld","rosenheim","rosenthal","rostock","rotenburg","rotenburg","roth","rothenburg","rothenburg","rothenfels","rottenburg","rottenburg","rottweil","roßleben","roßwein","rudolstadt","ruhla","ruhland","runkel","rutesheim","röbel","rödental","rödermark","römhild","rösrath","rötha","röthenbach","röttingen","rötz","rüdesheim","rüsselsheim","rüthen","saalburg","saalfeld","saarbrücken","saarburg","saarlouis","sachsenhagen","sachsenheim","salzgitter","salzkotten","salzwedel","sandau","sandersdorf","sangerhausen","sankt","sankt","sankt","sarstedt","sassenberg","sassnitz","sayda","schalkau","schauenstein","scheer","scheibenberg","scheinfeld","schelklingen","schenefeld","scheßlitz","schieder","schifferstadt","schillingsfürst","schiltach","schirgiswalde","schkeuditz","schkölen","schleiden","schleiz","schleswig","schlettau","schleusingen","schlieben","schlitz","schlotheim","schloß","schlüchtern","schlüsselfeld","schmalkalden","schmallenberg","schmölln","schnackenburg","schnaittenbach","schneeberg","schneverdingen","schongau","schopfheim","schorndorf","schortens","schotten","schramberg","schraplau","schriesheim","schrobenhausen","schrozberg","schwaan","schwabach","schwabmünchen","schwaigern","schwalbach","schwalmstadt","schwandorf","schwanebeck","schwarzenbach","schwarzenbach","schwarzenbek","schwarzenberg","schwarzenborn","schwarzheide","schwedt","schweich","schweinfurt","schwelm","schwentinental","schwerin","schwerte","schwetzingen","schwäbisch","schwäbisch","schömberg","schönau","schönau","schönberg","schönebeck","schöneck","schönewalde","schöningen","schönsee","schönwald","schöppenstedt","schüttorf","sebnitz","seehausen","seeland","seelow","seelze","seesen","sehnde","seifhennersdorf","selb","selbitz","seligenstadt","selm","selters","senden","sendenhorst","senftenberg","seßlach","siegburg","siegen","sigmaringen","simbach","simmern","sindelfingen","singen","sinsheim","sinzig","soest","solingen","solms","soltau","sondershausen","sonneberg","sonnewalde","sonthofen","sontra","spaichingen","spalt","spangenberg","speicher","spenge","speyer","spremberg","springe","sprockhövel","stade","stadt","stadtallendorf","stadtbergen","stadthagen","stadtilm","stadtlengsfeld","stadtlohn","stadtoldendorf","stadtprozelten","stadtroda","stadtsteinach","starnberg","staufen","staufenberg","stavenhagen","staßfurt","stein","steinach","steinau","steinbach","steinbach","steinfurt","steinheim","steinheim","stendal","sternberg","stockach","stolberg","stollberg","stolpen","storkow","straelen","stralsund","strasburg","straubing","strausberg","strehla","stromberg","stutensee","stuttgart","stößen","stühlingen","suhl","sulingen","sulz","sulzbach","sulzbach","sulzburg","sundern","syke","sömmerda","südliches","süßen","tambach","tangerhütte","tangermünde","tann","tanna","tauberbischofsheim","taucha","taunusstein","tecklenburg","tegernsee","telgte","teltow","templin","tengen","tessin","teterow","tettnang","teublitz","teuchern","teupitz","teuschnitz","thale","thalheim","thannhausen","tharandt","themar","thum","tirschenreuth","titisee","tittmoning","todtnau","torgau","torgelow","tornesch","traben","traunreut","traunstein","trebbin","trebsen","treffurt","trendelburg","treuchtlingen","treuen","treuenbrietzen","triberg","tribsees","trier","triptis","trochtelfingen","troisdorf","trossingen","trostberg","tuttlingen","twistringen","töging","tönisvorst","tönning","tübingen","uebigau","ueckermünde","uelzen","uetersen","uffenheim","uhingen","ulm","ulmen","ulrichstein","ummerstadt","unkel","unna","unterschleißheim","usedom","usingen","uslar","vacha","vaihingen","vallendar","varel","vechta","velbert","velburg","velden","velen","vellberg","vellmar","velten","verden","veringenstadt","verl","versmold","vetschau","viechtach","viernheim","viersen","villingen","vilsbiburg","vilseck","vilshofen","visselhövede","vlotho","voerde","vogtsburg","vohburg","vohenstrauß","volkach","volkmarsen","vreden","vöhrenbach","vöhringen","völklingen","wachenheim","wadern","waghäusel","wahlstedt","waiblingen","waibstadt","waischenfeld","waldbröl","waldeck","waldenbuch","waldenburg","waldenburg","waldershof","waldheim","waldkappel","waldkirch","waldkirchen","waldkraiburg","waldmünchen","waldsassen","waldshut","walldorf","walldürn","wallenfels","walsrode","waltershausen","waltrop","wanfried","wangen","wanzleben","warburg","waren","warendorf","warin","warstein","wassenberg","wasserburg","wassertrüdingen","wasungen","wedel","weener","wegberg","wegeleben","wehr","weida","weiden","weikersheim","weil","weil","weilburg","weilheim","weilheim","weimar","weingarten","weinheim","weinsberg","weinstadt","weismain","weiterstadt","weißenberg","weißenburg","weißenfels","weißenhorn","weißensee","weißenstadt","weißenthurm","weißwasser","welzheim","welzow","wemding","wendlingen","werben","werdau","werder","werdohl","werl","wermelskirchen","wernau","werne","werneuchen","wernigerode","wertheim","werther","wertingen","wesel","wesenberg","wesselburen","wesseling","westerburg","westerstede","wetter","wetter","wettin","wetzlar","widdern","wiehe","wiehl","wiesbaden","wiesensteig","wiesloch","wiesmoor","wildau","wildberg","wildenfels","wildeshausen","wilhelmshaven","wilkau","willebadessen","willich","wilsdruff","wilster","wilthen","windischeschenbach","windsbach","winnenden","winsen","winterberg","wipperfürth","wirges","wismar","wissen","witten","wittenberg","wittenberge","wittenburg","wittichenau","wittingen","wittlich","wittmund","wittstock","witzenhausen","woldegk","wolfach","wolfenbüttel","wolfhagen","wolframs","wolfratshausen","wolfsburg","wolfstein","wolgast","wolkenstein","wolmirstedt","worms","wriezen","wunsiedel","wunstorf","wuppertal","wurzbach","wurzen","wustrow","wyk","wächtersbach","wörrstadt","wörth","wörth","wörth","wülfrath","würselen","würzburg","xanten","zahna","zarrentin","zehdenick","zeil","zeitz","zell","zell","zell","zella","zerbst","zeulenroda","zeven","ziegenrück","zierenberg","ziesar","zirndorf","zittau","zossen","zschopau","zweibrücken","zwenkau","zwickau","zwiesel","zwingenberg","zwönitz","zörbig","zülpich","öhringen","östringen","übach","überlingen"];
TrainingDatas.home_appliances = ["airconditioner","airfryer","airioniser","aromalamp","atticfan","backboiler","barbecue","boxmangle","breadmaker","canopener","ceilingfan","cheesemelter","clothesdryer","clothesiron","coffeemaker","convectionoven","cornroaster","crepemaker","deepfryer","dishdrainer","dishwasher","espressomachine","fanheater","firepot","foodsteamer","futondryer","grill","hairdryer","hairiron","hotplate","humidifier","icebox","ironman","kettle","mangle","microwave","mousetrap","multicooker","oilheater","oven","oven","pancakemachine","patioheater","popcornmaker","pressurecooker","pressurefryer","radiator","refrigerator","ricecooker","ricepolisher","sandwichgrill","sandwichtoaster","sewingmachine","slowcooker","solarcooker","stove","stove","sumppump","television","tiepress","toaster","toasteroven","trouserpress","turkeyfryer","vacuumcleaner","vacuumfryer","waffleiron","washerdryer","washingmachine","waterboiler","watercooker","waterheater","windowfan"];
TrainingDatas.icelandic_forenames = ["aage","aagot","aaron","abel","abela","abigael","abraham","ada","adam","adda","addi","addú","addý","adel","adela","adelía","adrían","adríana","adríel","adíel","adólf","agata","agatha","agla","agnar","agnea","agnes","agneta","agni","agða","akira","alanta","alba","albert","alberta","albína","alda","aldar","aldný","aldís","alena","aleta","aletta","alex","alexa","alexander","alexandra","alexandría","alexis","alexstrasa","alexía","alexíus","alfa","alfons","alfred","alfreð","alfífa","ali","alice","alida","alla","allan","alli","allý","alma","almar","alrekur","alrún","alva","alvar","alvilda","alvin","alída","alína","alís","alísa","amadea","amal","amalía","amanda","amelía","amil","amilía","amos","amy","amír","amíra","amý","analía","anastasía","anders","andra","andrea","andreas","andri","andrá","andré","andrés","andríana","anes","anetta","anfinn","angantýr","angela","angelía","angelíka","angi","anika","anita","anja","ann","anna","annabella","annalísa","annar","annarr","annas","anne","annel","annelí","annes","annetta","anney","annika","annía","anný","anthony","anton","antonía","antoníus","antóníus","aníka","anína","aníta","apríl","ara","aran","ardís","arent","ares","arey","ari","arilíus","arinbjörg","arinbjörn","aris","arisa","arja","armenía","arna","arnald","arnaldur","arnar","arnberg","arnbergur","arnbjörg","arnbjörn","arnborg","arndís","arndór","arnes","arney","arnfinna","arnfinnur","arnfreyr","arnfríður","arngarður","arngeir","arngerður","arngils","arngrímur","arngunnur","arnheiður","arnhildur","arnika","arnkatla","arnkell","arnlaug","arnlaugur","arnleif","arnleifur","arnljót","arnljótur","arnlín","arnmundur","arnmóður","arnoddur","arnold","arnrós","arnrún","arnsteinn","arnviður","arnór","arnóra","arnúlfur","arnþrúður","arnþór","arnþóra","aron","arthur","arthúr","artúr","aría","aríana","aríanna","aríaðna","aríel","aríela","aríella","arín","arína","arís","aríus","asael","askja","askur","aspar","assa","astrid","asía","asírí","atalía","atena","athena","atla","atlanta","atlas","atli","aurora","austar","austmann","austmar","austri","auðberg","auðbergur","auðbert","auðbjörg","auðbjörn","auðbjört","auðdís","auðgeir","auðkell","auðlín","auðmundur","auðna","auðný","auðrún","auðun","auðunn","auður","auður","auðólfur","axel","axelma","axelía","aðalberg","aðalbergur","aðalbert","aðalbjörg","aðalbjörn","aðalbjört","aðalborg","aðalborgar","aðaldís","aðalfríður","aðalgeir","aðalheiður","aðalmundur","aðalráður","aðalrós","aðalsteina","aðalsteinn","aðalsteinunn","aðalveig","aðalvíkingur","aðólf","aþena","baldey","baldrún","baldur","baldvin","baldvina","baldwin","baltasar","bambi","barbara","barbára","barri","barði","bassi","bassí","bastían","baugur","bebba","begga","beinir","beinteinn","beitir","bekan","belinda","bella","benedikt","benedikta","bengta","benidikt","benidikta","benjamín","benna","benney","benný","benoný","bent","benta","bentey","bentína","benvý","benía","beníta","benóní","benóný","bera","berent","berg","bergdís","bergey","bergfinnur","bergfríður","bergheiður","berghildur","berghreinn","bergjón","berglaug","berglind","bergljót","berglín","bergmann","bergmannía","bergmar","bergmundur","bergný","bergrán","bergrín","bergrós","bergrún","bergsteinn","bergsveina","bergsveinn","bergur","bergvin","bergþór","bergþóra","berit","bernhard","bernharð","bernharður","berni","bernódus","bernódía","bersi","berta","bertel","bertha","bertram","bessi","bessí","bestla","beta","betanía","betsý","bettý","betúel","bil","bill","birgir","birgit","birgitta","birkir","birna","birnir","birta","birtingur","birtir","birtna","bjargar","bjargdís","bjargey","bjargheiður","bjarghildur","bjarglind","bjargmundur","bjargþór","bjarkan","bjarkar","bjarkey","bjarki","bjarklind","bjarma","bjarmar","bjarmi","bjarnar","bjarndís","bjarney","bjarnfinnur","bjarnfreður","bjarnfríður","bjarngerður","bjarnharður","bjarnheiður","bjarnhildur","bjarnhéðinn","bjarni","bjarnlaug","bjarnlaugur","bjarnleifur","bjarnrún","bjarnsteinn","bjarnveig","bjarnólfur","bjarný","bjarnþrúður","bjarnþór","bjarnþóra","bjartey","bjartmann","bjartmar","bjartmey","bjartur","bjartþór","bjólan","bjólfur","björg","björgey","björgheiður","björghildur","björgmundur","björgvin","björgólfur","björgúlfur","björk","björn","björney","björnfríður","björnólfur","björt","bláey","bláklukka","blædís","blængur","blær","blær","blævar","blín","blíða","blómey","bobba","boga","bogdís","bogey","bogga","boghildur","bogi","bolli","borg","borgar","borgdís","borghildur","borgný","borgrún","borgúlfur","borgþór","borgþóra","botnía","boði","braga","braghildur","bragi","branddís","brandur","brandís","breki","bresi","brestir","briet","brigitta","brimar","brimdís","brimhildur","brimi","brimir","brimrún","brit","britt","britta","brjánn","broddi","bruno","bryndís","brynfríður","bryngeir","bryngerður","brynheiður","brynhildur","brynja","brynjar","brynjólfur","brynjúlfur","brynleifur","brynmar","brynný","brynsteinn","bryntýr","brynþór","brá","brák","bríana","bríanna","bríet","brími","brímir","burkney","burkni","bylgja","bára","bárður","bæring","bæringur","bæron","bíbí","bína","bóas","bóel","bói","bót","bóthildur","bótólfur","börkur","böðvar","búi","búri","camilla","caritas","carl","carla","carmen","cathinca","cecil","cecilia","cecilía","cesar","charlotta","charlotte","christa","christel","christian","christina","christine","christopher","clara","cæsar","cýrus","dagbjartur","dagbjörg","dagbjört","dagfari","dagfinnur","dagfríður","daggeir","daggrós","dagheiður","dagmann","dagmar","dagmey","dagný","dagnýr","dagrún","dagur","dagþór","dalbert","daldís","daley","dalla","dalli","dallilja","dalmann","dalmar","dalrós","dalvin","dalía","damjan","damon","dan","dana","danelíus","daney","danfríður","danheiður","danhildur","daniel","danival","dante","danía","daníel","daníela","daníella","daníval","dara","darri","daría","daríus","davíð","daðey","daði","daðína","debora","debóra","demus","dendý","dennis","deníel","didda","dilja","diljá","dimma","dimmblá","dimmey","diðrik","dofri","dolli","dominik","donna","doris","dorothea","drauma","draumey","draupnir","dreki","drengur","droplaug","drífa","drótt","dröfn","dufgus","dufþakur","dugfús","dvalinn","dynþór","dæja","día","díana","díanna","díma","dís","dísa","dísella","díómedes","dóa","dómald","dómaldi","dómaldur","dómhildur","dónald","dónaldur","dór","dóra","dórey","dóri","dóris","dórothea","dórótea","dóróthea","dósóþeus","dögg","dögun","dúa","dúfa","dúi","dúna","dúnn","dúnna","dýrborg","dýrfinna","dýri","dýrleif","dýrley","dýrmundur","dýrunn","ebba","ebbi","ebeneser","ebenezer","eberg","ebonney","edda","eddi","edel","edgar","edil","edilon","edit","edith","edvard","edvin","edward","edílon","efemía","efraím","egedía","eggert","eggrún","eggþór","egill","egla","eik","eikar","eileiþía","eilífur","einar","einbjörg","eindís","einey","einfríður","einhildur","einir","einrún","einvarður","einína","einþór","eir","eirdís","eirfinna","eirný","eiríka","eiríkur","eirún","eivin","eivör","eiðar","eiðný","eiðunn","eiður","elba","elberg","elbert","eldar","eldbjörg","eldey","eldgrímur","eldjárn","eldlilja","eldmar","eldon","eldrún","eldur","eldór","eldþóra","eleina","elektra","elena","elenborg","elentínus","elfa","elfar","elfráður","elfur","elimar","elina","elinborg","elinór","elis","elisabeth","elka","ella","ellen","ellert","elley","elli","ellisif","elliði","elly","ellín","ellís","ellý","elma","elmar","elna","elsa","elsabet","elsie","elsí","elsý","elva","elvar","elvi","elvin","elvira","elvis","elvíra","elvý","elí","elía","elía","elíana","elías","elíeser","elímar","elín","elína","elínbergur","elínbet","elínbjörg","elínbjört","elínborg","elíndís","elíngunnur","elínheiður","elínmundur","elínrós","elíná","elínór","elírós","elís","elísa","elísabet","elísabeth","elíza","emanúel","embla","embrek","emelía","emelíana","emelína","emerald","emeralda","emil","emilía","emilíana","emilíanna","emilý","emma","emmanúel","emmý","emý","enea","eneka","engilbert","engilbjartur","engilbjört","engiljón","engill","engilráð","engilrós","engla","enika","enja","enok","eníta","enóla","eres","eric","erik","erika","erin","erla","erlar","erlen","erlendur","erling","erlingur","erlín","ermenrekur","erna","ernestó","ernir","ernst","eron","erpur","esekíel","esja","esjar","eskja","esmeralda","esra","estefan","ester","esther","estiva","ethel","etna","eufemía","eva","evald","evan","evelyn","evert","evey","evfemía","evgenía","evlalía","evían","evíta","ey","eyberg","eybjörg","eybjört","eyborg","eydís","eyfríður","eygerður","eygló","eyhildur","eyja","eyjalín","eyjólfur","eylaugur","eyleif","eyleifur","eylín","eymar","eymundur","eyríkur","eyrós","eyrún","eysteinn","eyvar","eyveig","eyvindur","eyvör","eyþrúður","eyþór","eyþóra","eðna","eðvald","eðvar","eðvarð","fabrisíus","falgeir","falur","fannar","fannberg","fanndís","fanney","fanngeir","fannlaug","fanny","fanný","febrún","felix","fema","fengur","fenrir","ferdinand","ferdínand","fertram","feykir","filip","filippa","filippus","filippía","filipía","finn","finna","finnbjörg","finnbjörk","finnbjörn","finnboga","finnbogi","finnborg","finndís","finney","finnfríður","finngeir","finnjón","finnlaug","finnlaugur","finnrós","finnur","finnvarður","fjalar","fjalldís","fjarki","fjóla","fjólar","fjólmundur","fjölnir","fjölvar","fjörnir","flemming","flosi","flóki","flóra","flórent","flóvent","folda","forni","fossmar","francis","frank","franklín","frans","fransiska","franz","franziska","fregn","freybjörn","freydís","freygarður","freygerður","freyja","freylaug","freyleif","freymar","freymundur","freymóður","freyr","freysteinn","freyviður","freyþór","friedrich","frigg","fritz","friðberg","friðbergur","friðbert","friðbjörg","friðbjörn","friðbjört","friðborg","friðdís","friðdóra","friðey","friðfinna","friðfinnur","friðgeir","friðgerður","friðjón","friðjóna","friðlaug","friðlaugur","friðleif","friðleifur","friðlín","friðmann","friðmar","friðmey","friðmundur","friðný","friðrik","friðrika","friðrikka","friðrós","friðrún","friðsemd","friðsteinn","friður","friðveig","friðvin","friðþjófur","friðþór","friðþóra","frosti","frostrós","frán","fránn","frár","frímann","fríða","fríðsteinn","fríður","fróði","fróðmar","fróðný","funi","fura","fylkir","fáfnir","fálki","fía","fídes","fífa","fífill","fólki","fönn","fúsi","gabriel","gabríel","gabríela","gabríella","gael","galdur","gamalíel","garibaldi","garpur","garri","garðar","gaui","gauja","gaukur","gauthildur","gauti","gautrekur","gautur","gautviður","gefjun","gefn","geir","geira","geirarður","geirbjörg","geirdís","geirfinna","geirfinnur","geirfríður","geirharður","geirhildur","geirhjörtur","geirhvatur","geiri","geirlaug","geirlaugur","geirleifur","geirlöð","geirmundur","geirný","geirríður","geirröður","geirrún","geirtryggur","geirvaldur","geirólfur","geirþjófur","geirþrúður","geisli","gellir","georg","georgía","gerald","geri","gerða","gerðar","gerður","gestheiður","gestný","gestrún","gestur","gilbert","gill","gillý","gilmar","gils","gilslaug","gissunn","gissur","gizur","gjaflaug","gjúki","gloría","gló","glóa","glóbjört","glódís","glóey","glói","glóð","glúmur","gneisti","gná","gnúpur","gnýr","gottskálk","gottsveinn","goði","goðmundur","grani","grankell","gregor","grein","greipur","greppur","gret","greta","gretar","grethe","grettir","grélöð","grét","gréta","grétar","gríma","grímar","grímey","grímheiður","grímhildur","grímkell","grímlaugur","grímnir","grímur","grímólfur","grímúlfur","gróa","gullbrá","gulli","gullveig","gullý","gumi","gumma","gunnar","gunnberg","gunnbjörg","gunnbjörn","gunnbjört","gunnborg","gunndís","gunndór","gunndóra","gunnella","gunnfinna","gunnfríður","gunngeir","gunnhallur","gunnharða","gunnheiður","gunnhildur","gunnjóna","gunnlaug","gunnlaugur","gunnleif","gunnleifur","gunnlöð","gunnröður","gunnrún","gunnsteinn","gunnur","gunnvaldur","gunnveig","gunnvör","gunnólfur","gunnóli","gunný","gunnþór","gunnþóra","gunnþórunn","gurrý","gustav","gutti","guttormur","guðberg","guðbergur","guðbjarni","guðbjartur","guðbjörg","guðbjörn","guðbjört","guðborg","guðbrandur","guðdís","guðfinna","guðfinnur","guðfreður","guðfríður","guðgeir","guðjón","guðjóna","guðlaug","guðlaugur","guðleif","guðleifur","guðleikur","guðlín","guðmann","guðmar","guðmey","guðmon","guðmunda","guðmundur","guðmundína","guðni","guðný","guðráður","guðríður","guðröður","guðrún","guðsteina","guðsteinn","guðvarður","guðveig","guðveigur","guðvin","guðþór","gylfi","gyrðir","gytta","gyða","gyðja","gyðríður","gæfa","gæflaug","gía","gídeon","gígja","gígjar","gígur","gísela","gísla","gísley","gísli","gíslný","gíslrún","gíslunn","gíslína","gíta","góa","gógó","gói","góði","gúa","gústaf","gústav","gýgjar","gýmir","hadda","haddi","haddur","haddý","hafberg","hafbjörg","hafborg","hafdís","hafey","hafgrímur","hafliða","hafliði","haflína","hafnar","hafni","hafný","hafrós","hafrún","hafsteina","hafsteinn","hafþór","hafþóra","hagalín","hagbarður","hagbert","haki","halla","hallbera","hallberg","hallbjörg","hallbjörn","hallborg","halldís","halldór","halldóra","halley","hallfreður","hallfríður","hallgarður","hallgeir","hallgerður","hallgils","hallgrímur","hallgunnur","hallkatla","hallkell","hallmann","hallmar","hallmundur","hallný","hallrún","hallsteinn","hallur","hallvarður","hallveig","hallvör","hallþór","hamar","hanna","hannes","hanney","hannibal","hans","hansa","hansína","harald","haraldur","harpa","harri","harry","harrý","hartmann","hartvig","hauksteinn","haukur","haukvaldur","hauður","heba","hebba","hedda","hedí","heida","heikir","heilmóður","heimir","heinrekur","heisi","heiða","heiðar","heiðarr","heiðberg","heiðbert","heiðbjörg","heiðbjörk","heiðbjört","heiðbrá","heiðdís","heiðlaug","heiðlindur","heiðlóa","heiðmann","heiðmar","heiðmundur","heiðný","heiðrekur","heiðrós","heiðrún","heiður","heiðveig","hekla","hektor","helen","helena","helga","helgi","hella","helma","helmút","hemmert","hendrik","hendrikka","henning","henný","henrietta","henrik","henrika","henry","henríetta","henrý","hera","herbert","herbjörg","herbjörn","herbjört","herborg","herdís","herfinnur","herfríður","hergeir","hergerður","hergill","hergils","herjólfur","herlaug","herlaugur","herleifur","herluf","hermann","hermundur","hermína","hermóður","hersilía","hersir","hersteinn","hersveinn","herta","hertha","hervar","hervarður","hervin","hervör","herþrúður","hilaríus","hilbert","hilda","hildar","hildegard","hildibergur","hildibjörg","hildibrandur","hildigeir","hildigerður","hildiglúmur","hildigunnur","hildimar","hildimundur","hildingur","hildir","hildiríður","hildisif","hildiþór","hildur","hilma","hilmar","hilmir","himinbjörg","himri","hind","hinrik","hinrika","hinrikka","hjallkár","hjalta","hjaltalín","hjaltey","hjalti","hjarnar","hjálmar","hjálmdís","hjálmey","hjálmfríður","hjálmgeir","hjálmgerður","hjálmrós","hjálmrún","hjálmtýr","hjálmur","hjálmveig","hjálmþór","hjördís","hjörfríður","hjörleif","hjörleifur","hjörný","hjörtfríður","hjörtur","hjörtþór","hjörvar","hlaðgerður","hleiðar","hleiður","hlini","hljómur","hlynur","hlédís","hlégestur","hlér","hlíf","hlífar","hlín","hlíðar","hlíðberg","hlökk","hlöðmundur","hlöður","hlöðvarður","hlöðver","hnefill","hnikar","hnikarr","holgeir","holger","holti","hrafn","hrafna","hrafnar","hrafnbergur","hrafnborg","hrafndís","hrafney","hrafnfífa","hrafngerður","hrafnheiður","hrafnhildur","hrafnkatla","hrafnkell","hrafnlaug","hrafntinna","hrafntýr","hrannar","hrappur","hraunar","hraundís","hrefna","hreggviður","hreimur","hreindís","hreinn","hreiðar","hreiðmar","hringur","hrollaugur","hrolleifur","hrund","hrærekur","hrímnir","hróaldur","hróar","hróbjartur","hrói","hrólfdís","hrólfur","hrómundur","hróðgeir","hróðmar","hróðný","hróðvar","hróðólfur","hrönn","hrútur","hugberg","hugbjörg","hugbjört","hugborg","hugdís","hugi","huginn","hugleikur","hugljúf","hugo","hugrún","hugó","huld","hulda","huldar","huldrún","huldís","huxley","hvannar","hvönn","hyltir","hylur","hákon","hákonía","háleygur","hálfdan","hálfdán","hámundur","hárekur","hárlaugur","hásteinn","hávar","hávarr","hávarður","hængur","hænir","héðinn","híram","hólm","hólmar","hólmbert","hólmbjörg","hólmdís","hólmfastur","hólmfríður","hólmgeir","hólmgrímur","hólmkell","hólmsteinn","hólmþór","hóseas","hödd","högna","högni","hörn","hörður","höskuldur","höður","húbert","húgó","húmi","húna","húnbjörg","húnbogi","húndís","húngerður","húni","húnn","húnröður","ida","idda","illugi","ilmur","ilse","ilías","immanúel","immý","ina","inda","india","indiana","indra","indriði","indí","indía","indíana","indíra","inga","ingberg","ingdís","ingeborg","inger","ingey","ingheiður","inghildur","ingi","ingiberg","ingibergur","ingibert","ingibjartur","ingibjörg","ingibjörn","ingibjört","ingiborg","ingifinna","ingifríður","ingigerður","ingilaug","ingileif","ingileifur","ingilín","ingimagn","ingimar","ingimaría","ingimunda","ingimundur","ingiríður","ingirós","ingisól","ingivaldur","ingiveig","ingiþór","ingjaldur","ingmar","ingrid","ingrún","ingunn","ingvaldur","ingvar","ingveldur","ingvi","ingólfur","ingþór","inna","irena","irene","irja","irma","irmelín","irmý","irpa","isabel","isabella","ismael","issi","iða","iðunn","jack","jafet","jagger","jaki","jakob","jakobína","jakop","jamil","jan","jana","jane","janetta","jannika","janus","jara","jarfi","jarl","jarla","jarún","jarþrúður","jasmín","jason","jenetta","jenna","jenni","jenny","jenný","jens","jensína","jeremías","jes","jesper","jessý","jochum","johan","john","joshua","jovina","judith","julian","járnbrá","járngerður","járngrímur","játgeir","játmundur","játvarður","jóa","jóakim","jóann","jóanna","jódís","jóel","jófríður","jóhann","jóhanna","jóhannes","jói","jólín","jómar","jómundur","jón","jóna","jónanna","jónar","jónas","jónasína","jónatan","jónbjörg","jónbjörn","jónbjört","jóndís","jóndór","jóndóra","jóney","jónfríður","jóngeir","jóngerð","jónheiður","jónhildur","jóninna","jónmundur","jónný","jónsteinn","jónída","jónína","jóný","jónþór","jóra","jórlaug","jórunn","jóríður","jósafat","jósavin","jósebína","jósef","jósefín","jósefína","jósep","jósteinn","jósúa","jóvin","jökla","jökull","jökulrós","jörfi","jörgen","jörgína","jörmundur","jörri","jörundur","jörvar","jörvi","júdea","júdit","júlí","júlía","júlían","júlíana","júlíanna","júlíetta","júlíhuld","júlína","júlírós","júlíus","júní","júní","júnía","júníana","júníus","júrek","kai","kaj","kaja","kakali","kaktus","kala","kaldi","kaleb","kali","kalla","kalman","kalmann","kalmar","kamal","kamilla","kamma","kamí","kapitola","kaprasíus","kapítóla","kara","karel","karen","karim","karin","karitas","karkur","karl","karla","karles","karli","karlinna","karlotta","karlína","karmen","karol","karolína","karvel","karí","karín","karína","karítas","karó","karólín","karólína","karún","kaspar","kasper","kassandra","kastíel","kata","katarína","katarínus","katerína","katharina","kathinka","katinka","katla","katrín","katrína","kató","katý","kaðlín","kellý","kendra","keran","ketilbjörg","ketilbjörn","ketilfríður","ketill","ketilríður","kiddý","kiljan","kilían","kira","kirsten","kirstín","kittý","kjalar","kjallakur","kjalvör","kjaran","kjartan","kjarval","kjárr","kjói","klara","klemens","klementína","klemenz","kleópatra","kládía","klængur","knörr","knútur","koggi","kolbeinn","kolbjörg","kolbjörn","kolbrá","kolbrún","koldís","kolfinna","kolfinnur","kolfreyja","kolgríma","kolgrímur","kolka","kolmar","kolskeggur","kolur","kolviður","konkordía","konný","konráð","konstantínus","korka","kormlöð","kormákur","kornelía","kornelíus","kort","koðrán","kraki","kris","krista","kristall","kristberg","kristbergur","kristbjörg","kristbjörn","kristborg","kristdór","kristel","kristens","kristensa","krister","kristey","kristfinnur","kristfríður","kristgeir","kristgerður","kristian","kristin","kristine","kristinn","kristjana","kristján","kristjón","kristjóna","kristlaug","kristlaugur","kristleifur","kristlind","kristlín","kristmann","kristmar","kristmundur","kristný","kristofer","kristrós","kristrún","kristvaldur","kristvarður","kristveig","kristvin","kristvina","kristíana","kristíanna","kristín","kristína","kristófer","kristólína","kristý","kristþór","kristþóra","krumma","krummi","kría","kvasir","kveldúlfur","kár","kára","kári","kæja","kókó","kópur","kórekur","laila","lambert","lana","lara","lars","laufar","laufey","laufheiður","laufhildur","lauga","laugey","laugheiður","laugi","lauritz","laíla","lea","leif","leifur","leiknir","leikný","leila","leiðólfur","lena","leo","leon","leonard","leonhard","leonóra","leví","lexí","leyla","leó","leóna","leónóra","leópold","lilja","liljar","liljurós","liljá","lill","lilla","lillian","lilly","lillý","lily","lilý","lind","linda","lindar","lindberg","linddís","lingný","lisbeth","listalín","liv","ljósbjörg","ljósbrá","ljósálfur","ljótunn","ljótur","ljúfur","lofn","loftur","loftveig","logey","logi","lokbrá","loki","lotta","louisa","louise","lovísa","loðmundur","ludvig","lukka","lundi","lydia","lydía","lyngar","lyngheiður","lár","lára","lárensína","lárent","lárentíus","láretta","lárey","lárus","læla","lér","líam","líba","líf","lífdís","lílý","lín","lína","línberg","línbjörg","líndís","líneik","líney","línhildur","líni","lísa","lísabet","lísandra","lísbet","lísebet","lív","lóa","lóreley","lórens","lórenz","lótus","lúcía","lúkas","lúna","lúsinda","lúsía","lúter","lúther","lúvísa","lúísa","lúðvíg","lúðvík","lúðvíka","lýdía","lýra","lýtingur","lýður","maddý","magda","magdalena","magga","maggey","maggi","maggý","magna","magndís","magnea","magnes","magney","magnfríður","magngeir","magnheiður","magnhildur","magni","magnús","magnúsína","magný","magnþór","magnþóra","magðalena","maj","maja","makan","malen","malena","malika","malla","malía","malín","malína","manda","manfred","manfreð","manúel","manúela","manúella","mar","mara","marbjörn","mardís","marel","marela","marella","maren","marey","marfríður","margeir","margit","margot","margret","margrjet","margrét","margrímur","margunnur","marheiður","mari","maria","marie","marijón","marikó","marinella","marinó","marit","marja","marjón","mark","markrún","markó","markús","markþór","marlaug","marlena","marlín","marlís","maron","marri","mars","marsa","marsellíus","marselía","marselína","marsibil","marsilía","marsý","marta","marteinn","marten","martha","marthen","martin","martína","marvin","mary","marzibil","marzilíus","marí","maría","maríam","marían","maríana","maríanna","marías","marín","marína","marínella","marínó","maríon","marís","marísa","marísól","marít","maríuerla","maríus","marólína","marý","mathilda","mathías","matta","mattea","matthea","matthilda","matthildur","matthía","matthías","matti","mattíana","mattías","mattína","mattý","max","maxima","maximus","maía","maídís","maísól","meda","mekkin","mekkinó","mekkín","melinda","melissa","melkorka","melkíor","melkólmur","melrakki","melrós","mensalder","merkúr","messíana","methúsalem","metta","metúsalem","mey","meyvant","michael","mikael","mikaela","mikaelína","mikjáll","mikkael","mikkalína","mikkel","milda","mildinberg","mildríður","milla","millý","minerva","minna","minney","minný","miriam","mirja","mirjam","mirra","mist","mjalldís","mjallhvít","mjaðveig","mjöll","mjöllnir","mjölnir","moli","mona","monika","morgan","morgunsól","moritz","mosi","muggur","munda","mundheiður","mundhildur","mundína","muni","muninn","myrk","myrkvi","myrra","mábil","málfríður","málhildur","málmfríður","mánadís","máney","máni","már","mára","márus","mía","mías","míla","mímir","mímósa","mínerva","mír","míra","míranda","míríel","mítra","míó","móa","módís","móeiður","móey","móheiður","mói","móna","mónika","móníka","móri","mórits","móses","móði","mörk","mörður","múli","mýr","mýra","mýrkjartan","mýrún","nadia","nadja","nadía","nana","nanna","nanný","nansý","naomí","narfi","natalie","natalía","natan","natanael","nataníel","nathan","naómí","neisti","nella","nellý","nenna","nenni","neptúnus","nicolas","nicole","nikanor","nikolai","nikolas","nikoletta","nikulás","nikíta","nikólína","nils","ninja","ninna","niðbjörg","njála","njáll","njóla","njörður","nonni","norbert","norma","normann","norðmann","náttmörður","náttsól","náttúlfur","náð","níels","níls","nína","níní","nóa","nóam","nóel","nói","nóni","nóra","nóri","nótt","nóvember","nökkvi","númi","nýbjörg","nývarð","obba","odda","oddbergur","oddbjörg","oddbjörn","oddfreyja","oddfreyr","oddfríður","oddgeir","oddgerður","oddhildur","oddi","oddkell","oddlaug","oddleif","oddleifur","oddmar","oddný","oddrún","oddsteinn","oddur","oddvar","oddveig","oddvör","oddþór","oktavía","oktavíus","októ","októvía","októvíus","olaf","olav","olga","olgeir","oliver","olivert","olivia","ollý","ora","orfeus","orka","ormar","ormheiður","ormhildur","ormur","orri","orvar","otkatla","otkell","otri","otta","otti","ottó","otur","pamela","parmes","parís","patrek","patrekur","patricia","patrick","patrik","patrisía","pedró","per","perla","peta","peter","petra","petrea","petronella","petrína","petrónella","petrós","petrún","petrúnella","pjetur","polly","pollý","pría","príor","pála","páldís","páley","pálfríður","pálhanna","pálheiður","pálhildur","páll","pálmar","pálmey","pálmfríður","pálmi","pálrún","pálín","pálína","pétrína","pétrún","pétur","pía","rafael","rafn","rafnar","rafney","rafnhildur","rafnkell","ragna","ragnar","ragnbjörg","ragney","ragnfríður","ragnheiður","ragnhildur","ragúel","rakel","ramóna","randalín","randver","randíður","randý","ranka","rannva","rannveig","rannver","rasmus","rea","rebekka","refur","reginbaldur","reginbjörg","reginn","regína","reidar","reifnir","reimar","rein","reinar","reinhart","reinhold","remek","renata","rex","reykdal","reyn","reynald","reynar","reyndís","reynheiður","reynhildur","reynir","reyr","richard","rikharð","rikharður","rikka","ripley","rita","robert","rolf","ronald","ronja","rorí","roxanna","rudolf","runi","runný","runólfur","rut","ruth","rán","ráðgeir","ráðhildur","ráðvarður","ríkarður","ríkey","ríkharð","ríkharður","rín","ríta","ríó","róbert","róberta","róbjörg","rólant","róman","rómeó","rós","rósa","rósalind","rósalía","rósanna","rósant","rósar","rósberg","rósbjörg","rósborg","róselía","rósenberg","rósey","rósfríður","róshildur","rósi","rósinberg","rósinkar","rósinkara","rósinkrans","rósinkransa","róska","róslaug","róslind","róslinda","róslín","rósmann","rósmary","rósmarý","rósmunda","rósmundur","rósný","röfn","rögn","rögnvald","rögnvaldur","rögnvar","rökkvi","röskva","röðull","rúbar","rúben","rúbý","rúdólf","rún","rúna","rúnar","rúndís","rúnhildur","rúrik","rúrí","rútur","sabrína","sabína","safír","saga","sakarías","salbjörg","saldís","salgerður","salka","salma","salmann","salmar","salný","salome","salvar","salvör","salín","salína","salóme","salómon","samson","samúel","sandel","sandra","sandri","sandur","sanna","santía","sara","sarína","saxi","sebastian","sebastían","sefanía","seifur","seimur","selena","selja","selka","selma","senía","septíma","sera","serena","sesar","seselía","sesil","sesilía","sesselja","sesselía","sessilía","sif","sigbergur","sigbert","sigbjartur","sigbjörn","sigdís","sigdór","sigdóra","sigfastur","sigfinnur","sigfreður","sigfríð","sigfríður","sigfús","sigga","siggeir","siggerður","sighvatur","sigjón","siglaugur","sigmann","sigmar","sigmunda","sigmundur","signa","signar","signhildur","signý","sigri","sigrid","sigríkur","sigríður","sigrún","sigsteinn","sigtryggur","sigtýr","sigur","sigurbaldur","sigurberg","sigurbergur","sigurbirna","sigurbjarni","sigurbjartur","sigurbjörg","sigurbjörn","sigurbjört","sigurborg","sigurbrandur","sigurbára","sigurdríf","sigurdrífa","sigurdís","sigurdór","sigurdóra","sigurey","sigurfinna","sigurfinnur","sigurfljóð","sigurgeir","sigurgeira","sigurgestur","sigurgrímur","sigurgísli","sigurhanna","sigurhans","sigurhelga","sigurhildur","sigurhjörtur","sigurjón","sigurjóna","sigurkarl","sigurlaug","sigurlaugur","sigurleif","sigurleifur","sigurlilja","sigurlinn","sigurlinni","sigurliði","sigurlogi","sigurlás","sigurlín","sigurlína","sigurmann","sigurmar","sigurmon","sigurmunda","sigurmundur","sigurnanna","sigurnýas","sigurnýjas","siguroddur","sigurpáll","sigurrós","sigursteina","sigursteinn","sigursveinn","sigurunn","sigurvaldi","sigurveig","sigurvin","sigurvina","sigurást","sigurásta","sigurða","sigurður","siguróli","sigurósk","sigurörn","sigurþór","sigurþóra","sigvalda","sigvaldi","sigvarður","sigyn","sigþrúður","sigþór","sigþóra","silfa","silfrún","silfá","silja","silka","silla","silli","silva","silvana","silvía","sindri","sirra","sirrí","sirrý","siv","sivía","sjafnar","sjana","sjöfn","skafti","skapti","skarpheiður","skarphéðinn","skefill","skeggi","skellir","skjöldur","skorri","skröggur","skugga","skuggi","skuld","skær","skæringur","skírnir","skíði","skúla","skúli","skúlína","skúta","smiður","smyrill","smári","snjáfríður","snjáka","snjófríður","snjóki","snjólaug","snjólaugur","snjólfur","snorra","snorri","snæbjartur","snæbjörg","snæbjörn","snæbjört","snæborg","snæbrá","snædís","snæfríður","snæhólm","snælaug","snælaugur","snær","snæringur","snærós","snærún","snævar","snævarr","snæþór","snót","soffanías","soffía","sofie","sofía","solveig","sonja","sonný","sophanías","sophia","sophie","sophus","spartakus","sporði","spói","stanley","stapi","starkaður","starri","stasía","stefan","stefana","stefanía","stefnir","stefán","stefánný","steina","steinar","steinarr","steinberg","steinbergur","steinbjörg","steinbjörn","steinborg","steindís","steindór","steindóra","steiney","steinfinnur","steinfríður","steingerður","steingrímur","steinhildur","steini","steinkell","steinlaug","steinmann","steinmar","steinmóður","steinn","steinrós","steinröður","steinrún","steinunn","steinvarður","steinvör","steinólfur","steinþór","steinþóra","stella","stirnir","stjarna","stjarney","stormur","sturla","sturlaugur","sturri","styr","styrbjörn","styrgerður","styrkár","styrmir","styrr","stígheiður","stígrún","stígur","stína","stórólfur","sumarliði","sumarlína","sumarrós","sunna","sunnefa","sunneva","sunniva","sunníva","susan","svafa","svafar","svala","svali","svalrún","svan","svana","svanberg","svanbergur","svanbjörg","svanbjörn","svanbjört","svanborg","svandís","svaney","svanfríður","svangeir","svanheiður","svanhildur","svanhvít","svanhólm","svani","svanlaug","svanlaugur","svanmundur","svanrós","svanur","svanþrúður","svanþór","svava","svavar","svea","sveina","sveinar","sveinberg","sveinbjartur","sveinbjörg","sveinbjörn","sveinborg","sveindís","sveiney","sveinfríður","sveingerður","sveinhildur","sveinjón","sveinlaug","sveinlaugur","sveinmar","sveinn","sveinrós","sveinrún","sveinsína","sveinungi","sveinveig","sveinþór","svend","sverre","sverrir","sváfnir","svölnir","svörfuður","sylgja","sylva","sylvia","sylvía","sæberg","sæbergur","sæbjartur","sæbjörg","sæbjörn","sæbjört","sæborg","sæbrá","sædís","sæfinna","sæfríður","sæhildur","sæi","sæla","sælaug","sælaugur","sæmann","sæmi","sæmunda","sæmundur","sæný","sær","særós","særún","sæsól","sæunn","sævald","sævaldur","sævar","sævarr","sævin","sævör","sæþór","sía","símon","símona","símonía","sírnir","sírus","sísí","síta","sívar","sófus","sófónías","sókrates","sól","sóla","sólberg","sólbergur","sólbjartur","sólbjörg","sólbjörn","sólbjört","sólborg","sólbrá","sólbrún","sóldís","sóldögg","sóley","sólfríður","sólgerður","sólhildur","sólimann","sólkatla","sóllilja","sólmar","sólmundur","sólný","sólon","sólrós","sólrún","sólveig","sólver","sólvin","sólvör","sólín","sónata","sölmundur","sölva","sölvar","sölvey","sölvi","sölvína","sören","sörli","súla","súlamít","súsan","súsanna","sýrus","tala","talía","tamar","tamara","tandri","tanja","tanya","tanya","tanía","tara","tarfur","tea","teitný","teitur","tekla","telma","tera","teresa","teresía","thea","thelma","theodór","theodóra","theresa","theódór","theódóra","thomas","thor","thorberg","thór","tindar","tindra","tindri","tindur","tinna","tinni","tirsa","tjaldur","tjörfi","tjörvi","tobías","todda","tolli","tonni","torbjörg","torfey","torfheiður","torfhildur","torfi","trausti","tristan","tristana","trostan","tryggva","tryggvi","tryggvína","trú","trúmann","tumas","tumi","tyrfingur","tía","tíalilja","tíbor","tíbrá","tími","tímon","tímoteus","tímóteus","tína","tístran","tóbías","tóbý","tói","tóka","tóki","tómas","tór","tóta","týr","týra","ubbi","uggi","ugla","ulrich","una","undína","uni","unna","unnar","unnbjörg","unnbjörn","unndís","unndór","unnsteinn","unnur","unnþór","urðar","urður","uxi","vagn","vagna","vagnbjörg","vagnfríður","vaka","vakur","vala","valberg","valbergur","valbjörg","valbjörk","valbjörn","valbjört","valborg","valbrandur","valdemar","valdheiður","valdi","valdimar","valdís","valdór","valentín","valentína","valentínus","valería","valey","valfríður","valgarð","valgarður","valgeir","valgerða","valgerður","valgý","valhildur","valka","valkyrja","vallaður","vallý","valmar","valmundur","valný","valrós","valrún","valsteinn","valter","valtýr","valur","valva","valves","valíant","valý","valþrúður","valþór","vanda","varmar","varða","vatnar","veig","veiga","veigar","veigur","venný","venus","ver","vera","vermundur","vernharð","vernharður","veronika","verónika","veróníka","vestar","vestmar","vetrarrós","veturliði","vibeka","victor","victoría","vigdís","vigfús","viggó","viglín","vignir","vigný","vigri","vigtýr","vigur","vikar","viktor","viktoria","viktoría","vilberg","vilbergur","vilbert","vilbjörn","vilbogi","vilborg","vilbrandur","vildís","vilfríður","vilgeir","vilgerður","vilhelm","vilhelmína","vilhjálmur","vili","viljar","vilji","villa","villi","villimey","vilma","vilmar","vilmundur","vilný","vinbjörg","vincent","vindar","vinjar","vinný","vinsý","virgill","virginía","viðar","viðja","viðjar","von","voney","vopni","vordís","vorm","váli","vápni","vár","vébjörg","vébjörn","védís","végeir","végerður","vékell","vélaug","vélaugur","vémundur","véný","vésteinn","víbekka","víf","vífill","vígberg","vígdögg","víggunnur","víglundur","vígmar","vígmundur","vígsteinn","vígþór","víkingur","vísa","víðar","víðir","víóla","víóletta","vöggur","völundur","vörður","vöttur","walter","werner","wilhelm","willard","william","willum","willy","ylfa","ylfur","ylja","ylur","ylva","ymir","yngvar","yngvi","ynja","yrja","yrkill","yrsa","zakaría","zakarías","zophanías","zophonías","zóphanías","zóphonías","ágúst","ágústa","ágústína","áki","álfar","álfdís","álfey","álfgeir","álfgerður","álfgrímur","álfheiður","álfhildur","álfrós","álfrún","álfsól","álfur","álfþór","ámundi","árbjartur","árbjörg","árbjörn","árbjört","árdís","árelía","árelíus","árgeir","árgils","árlaug","ármann","ármey","árna","árndís","árney","árnheiður","árni","árnína","árný","ársæl","ársæll","ársól","árveig","árvök","áróra","árún","árþóra","ás","ása","ásberg","ásbergur","ásbjörg","ásbjörn","ásborg","ásdís","ásdór","ásfríður","ásgautur","ásgeir","ásgerður","ásgils","ásgrímur","áshildur","ási","áskatla","áskell","ásla","áslaug","áslaugur","ásleif","áslákur","ásmar","ásmundur","ásný","ásrós","ásröður","ásrún","ást","ásta","ástbjörg","ástbjörn","ástbjört","ástdís","ástfríður","ástgeir","ástgerður","ástheiður","ásthildur","ástmar","ástmundur","ástráður","ástríkur","ástríður","ástrós","ástrún","ástvald","ástvaldur","ástvar","ástveig","ástvin","ástþrúður","ástþór","ástþóra","ásvaldur","ásvarður","ásvör","ásólfur","ásþór","ægileif","ægir","æsa","æsgerður","æsir","ævar","ævarr","ævör","ían","ída","ígor","íma","ími","ína","ír","íren","írena","íris","írunn","ísabel","ísabella","ísadóra","ísafold","ísak","ísalind","ísar","ísarr","ísbjörg","ísbjörn","ísdís","íseldur","ísey","ísfold","ísgeir","ísgerður","íshildur","ísidór","ísidóra","ísis","íslaug","ísleif","ísleifur","íslilja","ísmael","ísmar","ísmey","ísold","ísrael","ísrún","íssól","ísveig","ísól","ísólfur","íunn","íva","ívan","ívar","óda","ófeigur","ófelía","óla","ólaf","ólafur","ólafía","ólafína","ólavía","óli","óliver","ólivía","ólína","ólíver","ólöf","ómar","ómi","ósa","ósk","óskar","ósklín","ósvald","ósvaldur","ósvífur","ótta","óttar","óttarr","óðinn","óðný","ögmunda","ögmundur","ögn","ögri","ölnir","ölrún","ölveig","ölver","ölvir","öndólfur","önundur","örbrún","örk","örlaugur","örlygur","örn","örnólfur","örvar","ösp","össur","öxar","úa","úddi","úlfa","úlfar","úlfdís","úlfey","úlfgeir","úlfheiður","úlfhildur","úlfhéðinn","úlfkell","úlfljótur","úlfrún","úlftýr","úlfur","úlla","úlrik","úna","úndína","úranus","úranía","úrsúla","ýja","ýma","ýmir","ýr","ýrar","ýrr","þalía","þangbrandur","þeba","þengill","þeyr","þeódís","þeódóra","þingey","þinur","þiðrandi","þiðrik","þjálfi","þjóstar","þjóstólfur","þjóðann","þjóðar","þjóðbjörg","þjóðbjörn","þjóðgeir","þjóðhildur","þjóðleifur","þjóðmar","þjóðrekur","þjóðvarður","þjóðólfur","þoka","þollý","þorberg","þorbergur","þorbjörg","þorbjörn","þorbrandur","þorfinna","þorfinnur","þorgarður","þorgautur","þorgeir","þorgerður","þorgestur","þorgils","þorgnýr","þorgríma","þorgrímur","þorgísl","þorkatla","þorkell","þorlaug","þorlaugur","þorleif","þorleifur","þorleikur","þorlákur","þormar","þormundur","þormóður","þorri","þorsteina","þorsteinn","þorstína","þorvaldur","þorvar","þorvarður","þrastar","þrymur","þrá","þráinn","þrándur","þróttur","þröstur","þrúða","þrúðmar","þrúður","þula","þura","þurí","þuríður","þurý","þyri","þyrill","þyrnir","þyrnirós","þyrí","þór","þóra","þóranna","þórar","þórarinn","þórarna","þórbergur","þórbjarni","þórbjörg","þórbjörn","þórdís","þórelfa","þórelfur","þórey","þórfríður","þórgnýr","þórgrímur","þórgunna","þórgunnur","þórhaddur","þórhalla","þórhalli","þórhallur","þórhanna","þórheiður","þórhildur","þóri","þórinn","þórir","þórkatla","þórlaug","þórlaugur","þórleif","þórleifur","þórlindur","þórmar","þórmundur","þórný","þórodda","þóroddur","þórormur","þórsteina","þórsteinn","þórsteinunn","þórstína","þórunn","þórveig","þórvör","þórða","þórður","þórólfur","þórörn","þöll","þúfa"];
TrainingDatas.irish_forenames = ["abbán","affraic","agaistín","aibhilín","aibhne","aifric","ailbhe","ailin","ailín","aindriú","aindréas","ainm","ainníleas","aislin","aisling","aislinn","aithche","ambrós","amhalgaidh","amhlaoibh","anluan","anmchadh","anne","antóin","aodh","aodhagán","aodhamair","aodhnait","aodhán","aogán","aoibhe","aoibheann","aoibhin","aoibhinn","aoife","aonghus","ardghal","ardghar","art","artúr","athracht","aíbhinn","bairre","baothghalach","barra","barrdhubh","basil","beacán","bearach","bearchán","bearnárd","beinidict","blanche","blinne","bláth","bláthnaid","bran","breandán","breanndán","breasal","brian","brighdín","brighid","brochadh","bréanainn","bríd","brídín","brónach","buadhach","buadhnait","bébhinn","cacht","cailean","cainneach","cairbre","caitlín","caitrín","caitríona","calbhach","canice","caoilfhionn","caoimhe","caoimhghín","caoimhín","caolán","caomhán","carraig","cathal","cathaoir","cathbharr","catraoine","ceallach","ceallachán","cearbhall","charles","charles","charles","ciamhnait","cian","ciannait","cianán","ciara","ciarán","cillian","cinnéididh","cinnéidigh","cionaodh","ciothruadh","cliodhna","clodagh","clíona","cobhfhlaith","cobhlaith","coilean","coileán","coilín","coinneach","coireall","colla","colm","colmán","colum","comhghall","comhghan","comán","conaire","conall","conchobhar","conchubhar","conchúr","conghalach","conmhac","conn","connla","connlaodh","conán","cormac","cosnamhach","criomthann","críostóir","cróchán","crónán","cuan","cuileán","cuimín","cyril","cárthach","cúchonnacht","cúmhaighe","cúmheadha","dabhag","dabhóg","dainéal","daire","damhnait","damháin","daniel","dara","david","deaglán","dearbhfhorgaill","dearbhfhorghaill","dearbhla","dearbháil","deasmhumhnach","declan","deirdre","denis","dervilia","dianaimh","diarmaid","diarmait","doireann","domhnall","donn","donnchadh","donnchadha","donnán","dorothy","dubhaltach","dubhchobhlaigh","dubhghall","dubhghlas","dubhán","dubhóg","dymphna","dáithí","déaglán","dónall","dúnlang","eachaidh","eachann","eachdhonn","eachthighearn","eamon","earcán","earnait","earnán","easnadh","edwina","eibhlín","eibhlín","eignach","eigneachán","eilín","eilís","eimear","eimer","eimhear","eireamhán","eireamhón","eirnín","eithne","eochaidh","eoghainín","eoghan","eoin","eóin","fachtna","faoiltighearna","faolán","fearadhach","fearchar","fearganainm","fearghal","fearghus","feargus","feary","feichín","feidhelm","feidhlim","felix","fergus","fiach","fiacha","fiachra","fiadhnait","finghin","finian","finnian","fintan","fionghuine","fionn","fionnbharr","fionnghuala","fionntán","fionnuala","fitheal","flann","flann","flannait","flannán","flora","fodhla","forbhlaith","froinsias","fáilbhe","féilim","féthnaid","féthnat","fíneamhain","fíona","garbhán","gearóid","geiléis","glaisne","gobnait","gormfhlaith","gormlaith","grace","granya","greagoir","gráinne","gréagóir","honora","iarfhlaith","iarlaith","iodhnait","irial","iósaf","ióseph","iúdás","jeremiah","john","kyle","labhrás","lachtna","lann","laoighseach","laoiseach","lasairfhíona","lasairian","laurence","lewis","lewis","liam","lochlainn","lochlann","lomán","lonán","lorcán","lubhrás","lughaidh","maeleachlainn","maelsheachlainn","maelíosa","mainchín","mairghréad","mairéad","maitiú","malachy","maodhóg","maoilir","maoilín","maolcholm","maolcholuim","maolmhuire","maolmórdha","maolruadháin","marion","mathghamhain","meabh","meadhbh","mealla","meaveen","meibhín","meidhbhín","miodhnait","mortimer","muadhnait","muircheartach","muireach","muireadhach","muireann","muirgheal","muirgheas","muirinn","muiris","muirne","murchadh","máire","máirtín","máirín","mícheál","míde","móirín","mór","naomhán","naos","neachtan","neasán","niall","niallán","niamh","nioclás","nuala","nóirín","nóra","odharnait","odhrán","oilibhéar","oireachtach","oisín","onóra","oscar","peadar","peig","peigi","peigín","pilib","proinsias","pádraig","póil","pól","raghnailt","raibhilín","rathnait","riain","risteárd","ristéard","roger","roibeard","roibeárd","roibhilín","roibéard","ros","ruadhán","ruaidhri","ruairi","ruairí","ruari","ruaridh","ruarí","ruibhilín","ráichéal","réamann","réamonn","ríoghnach","ríona","ríonach","róis","róisín","rónán","rós","sadhbh","saerbhreathach","saev","saoirse","saorfhlaith","saorla","saorlaith","sarah","seachnasach","seathan","senán","seoirse","seosamh","seán","seárlas","siadhal","siaghal","sinéad","siobhán","sioda","sláine","sorcha","stíofán","suibhne","séadna","séafra","séamas","séamus","séan","séaonin","síle","síomón","síthmaith","tadhg","taichleach","terry","tiarnach","tiarnán","tiernan","tighearnán","tighernach","timothy","tiobóid","toirdhealbhach","toirleach","tomás","torna","treabhair","tuathal","tuathflaith","téodóir","uaithne","uaitéar","ualgharg","uallach","uasal","uilliam","uinseann","ultán","vivian","ágastas","áilís","áine","árdghal","árón","éabha","éadaoin","éadbhárd","éamon","éanna","éanán","éibhear","éignach","éigneachán","éimhear","éimhín","éinde","éireamhón","émer","étaín","íde","órfhlaith","órla","órlaith","úna"];
TrainingDatas.italian_forenames = ["achille","adamo","adelasia","adele","adelmo","adriana","adriano","agatha","agnolo","agostino","alberico","alberto","albina","aldo","alessandra","alessandro","alessia","alfredo","alina","alphons","amadeo","amanda","amedeo","amita","andrea","angelica","angelina","angelo","anita","annalisa","annetta","antonietta","antonio","arlo","armando","arsenio","arturo","aurora","baldassare","barbara","bartolomeo","beatrice","benedetto","benito","benvenuto","beppe","berenice","bernardo","bettina","bianca","biancamaria","bruno","camilla","camillo","carmelo","carmine","carolina","cassandra","caterina","cecilia","cesare","chiara","claudia","claudio","clelia","constantino","corrado","cosimo","costanzo","cristina","damiano","daniele","danilo","dante","daria","dario","davide","delfino","diana","dina","dino","domenico","donatella","durante","edoardo","elena","eliana","elisa","elmo","elvira","emiliana","emilio","emma","ennio","enrico","enzo","eraldo","erika","ermenegildo","ernesto","ettore","eugenia","eva","fabia","fabio","fabrizio","fausto","federico","federigo","ferdinando","fernanda","fiamma","filippa","filippo","fiorino","flavia","flavio","flora","francesca","francesco","fredo","fulvio","gabriele","gabriella","gaetano","gaspare","gastone","gemma","geppetto","giacinto","giacobbe","giacomo","giada","giampaolo","giampiero","gian","giancarlo","gianfrancesco","gianfranco","gianluca","gianluigi","gianmarco","gianna","gianni","gianpaolo","gianpietro","gilberto","gino","giorgia","giorgio","giovanna","giovanni","girolamo","giulia","giuliana","giuliano","giulietta","giulio","giuseppe","giuseppina","graziano","griselda","guarino","guglielmo","guido","gustavo","imelda","ingrid","irma","isa","isabella","ivo","jacopo","joseph","julia","lamberto","lando","lara","laureano","lauretta","leonardo","leone","liberto","licia","lilla","lina","livia","livio","lorenzo","luca","luchino","lucia","luciana","luciano","lucio","lucrezia","ludovica","ludovico","luigi","luisa","manuel","marcella","marcello","marco","maria","mariano","mariella","mario","marisa","marissa","martina","martino","massimiliano","massimo","matilda","matteo","maura","maurilio","maurizio","mauro","melania","melina","melissa","michela","michelangelo","michele","micheletto","michelotto","milena","milo","mirco","mirko","morena","nadia","napoleone","natalia","neri","niccolò","nicholas","nicola","nicole","nicoletta","nicolò","nina","nino","nunzio","omero","onofrio","orazio","oreste","orlando","ornella","osvaldo","ottavio","paloma","panfilo","paola","paolo","pascale","pasqual","pasquale","paulina","pellegrino","pierangelo","piergiorgio","piergiuseppe","pierluigi","piermaria","piersanti","pietro","pompeo","priscilla","puccio","rachel","raffaella","raffaello","renata","renato","renzo","riccardo","rita","roberto","rodolfo","rolando","romana","romina","romolo","rosa","rosalia","rosaria","rosario","rosina","ruggero","ruggiero","sabatino","salvatore","salvi","sandra","sandro","sante","santino","saverio","sebastian","serafina","serena","severino","silvestro","silvia","silvio","sonia","sophia","stefania","stefano","stella","susanna","tatiana","tazio","temistocle","tiziano","toni","torquato","tullio","ubaldo","ugo","umberto","valentina","valeria","valerio","vanessa","vanna","veronica","vincentio","vincenzo","virginia","viridiana","vito","vittoria","vittoria","vittorio","zaira","zanobi"];
TrainingDatas.japanese_cities = ["abashiri","abiko","adachi","agano","ageo","aioi","aira","aisai","aizuwakamatsu","akabira","akaiwa","akashi","aki","akiruno","akishima","akita","akitakata","akune","akō","ama","amagasaki","amakusa","amami","anan","anjō","annaka","aomori","arakawa","arao","arida","asago","asahi","asahikawa","asaka","asakuchi","asakura","ashibetsu","ashikaga","ashiya","aso","atami","atsugi","awa","awaji","awara","ayabe","ayase","azumino","bandō","beppu","bibai","bizen","bungotakada","bunkyo","buzen","chiba","chichibu","chigasaki","chikugo","chikuma","chikusei","chikushino","chino","chiryū","chita","chitose","chiyoda","chōfu","chōshi","chūō","chūō","daisen","daitō","date","date","dazaifu","ebetsu","ebina","ebino","echizen","edogawa","ena","eniwa","etajima","fuchū","fuchū","fuefuki","fuji","fujieda","fujiidera","fujimi","fujimino","fujinomiya","fujioka","fujisawa","fujiyoshida","fukagawa","fukaya","fukuchiyama","fukui","fukuoka","fukuroi","fukushima","fukutsu","fukuyama","funabashi","furano","fussa","futtsu","gamagōri","gero","gifu","ginowan","gobō","gojō","gose","gosen","goshogawara","gotenba","gotō","gujō","gyōda","gōtsu","habikino","hachimantai","hachinohe","hachiōji","hadano","hagi","hakodate","hakui","hakusan","hamada","hamamatsu","hamura","hanamaki","handa","hannan","hannō","hanyū","hashima","hashimoto","hasuda","hatsukaichi","hekinan","hida","hidaka","higashihiroshima","higashikagawa","higashikurume","higashimatsushima","higashimatsuyama","higashimurayama","higashine","higashiyamato","higashiōmi","higashiōsaka","hikari","hikone","himeji","himi","hino","hioki","hirado","hirakata","hirakawa","hiratsuka","hirosaki","hiroshima","hita","hitachi","hitachinaka","hitachiōmiya","hitachiōta","hitoyoshi","hokota","hokuto","hokuto","honjō","hyūga","hōfu","ibara","ibaraki","ibusuki","ichihara","ichikawa","ichikikushikino","ichinomiya","ichinoseki","iga","iida","iiyama","iizuka","ikeda","iki","ikoma","imabari","imari","imizu","ina","inabe","inagi","inashiki","inazawa","inuyama","inzai","iruma","isa","isahaya","ise","isehara","isesaki","ishigaki","ishikari","ishinomaki","ishioka","isumi","itabashi","itako","itami","itoigawa","itoman","itoshima","itō","iwade","iwaki","iwakuni","iwakura","iwamizawa","iwanuma","iwata","iyo","izu","izumi","izumi","izumisano","izumiōtsu","izumo","izunokuni","jōetsu","jōsō","jōyō","kadoma","kaga","kagoshima","kahoku","kai","kainan","kaizu","kaizuka","kakamigahara","kakegawa","kakogawa","kakuda","kama","kamagaya","kamaishi","kamakura","kameoka","kameyama","kami","kaminoyama","kamisu","kamo","kamogawa","kan'onji","kanazawa","kani","kanoya","kanuma","kanzaki","karatsu","kariya","kasai","kasama","kasaoka","kashiba","kashihara","kashima","kashima","kashiwa","kashiwara","kashiwazaki","kasuga","kasugai","kasukabe","kasumigaura","katagami","katano","katori","katsuragi","katsushika","katsuura","katsuyama","katō","kawachinagano","kawagoe","kawaguchi","kawanishi","kawasaki","kazo","kazuno","kesennuma","kikuchi","kikugawa","kimitsu","kinokawa","kirishima","kiryū","kisarazu","kishiwada","kita","kitaakita","kitahiroshima","kitaibaraki","kitakami","kitakata","kitakyūshū","kitami","kitamoto","kitanagoya","kitsuki","kiyose","kiyosu","kizugawa","kobayashi","kobe","kodaira","koga","koga","koganei","kokubunji","komae","komagane","komaki","komatsu","komatsushima","komoro","konan","kosai","koshigaya","koto","kudamatsu","kuji","kuki","kumagaya","kumamoto","kumano","kunisaki","kunitachi","kurashiki","kurayoshi","kure","kurihara","kurobe","kuroishi","kurume","kusatsu","kushima","kushiro","kuwana","kyoto","kyōtanabe","kyōtango","kōchi","kōfu","kōka","kōnan","kōnan","kōnosu","kōriyama","kōshi","kōshū","machida","maebashi","maibara","maizuru","makinohara","makurazaki","maniwa","marugame","masuda","matsubara","matsudo","matsue","matsumoto","matsusaka","matsuura","matsuyama","meguro","midori","mihara","mikasa","miki","mima","mimasaka","minamata","minamiashigara","minamiawaji","minamibōsō","minamikyūshū","minamisatsuma","minamishimabara","minamisōma","minato","mine","mino","minoh","minokamo","misato","misawa","mishima","mitaka","mito","mitoyo","mitsuke","miura","miyako","miyakojima","miyakonojō","miyama","miyawaka","miyazaki","miyazu","miyoshi","miyoshi","miyoshi","mizuho","mizunami","mobara","monbetsu","mooka","moriguchi","morioka","moriya","moriyama","motomiya","motosu","mukō","munakata","murakami","murayama","muroran","muroto","musashimurayama","musashino","mutsu","myōkō","nabari","nagahama","nagai","nagano","nagaoka","nagaokakyō","nagareyama","nagasaki","nagato","nago","nagoya","naha","naka","nakama","nakano","nakatsu","nakatsugawa","namegata","namerikawa","nan'yō","nanao","nanjō","nankoku","nantan","nanto","nara","narashino","narita","naruto","nasukarasuyama","nasushiobara","natori","nayoro","nemuro","nerima","neyagawa","nichinan","nihonmatsu","niigata","niihama","niimi","niiza","nikaho","nikkō","ninohe","nirasaki","nishinomiya","nishinoomote","nishio","nishitōkyō","nishiwaki","nisshin","nobeoka","noboribetsu","noda","nomi","nonoichi","noshiro","numata","numazu","nōgata","obama","obanazawa","obihiro","odawara","oga","ogi","ogōri","ojiya","okaya","okayama","okazaki","okegawa","okinawa","omaezaki","omitama","ono","onomichi","osaka","otaru","owariasahi","owase","oyabe","oyama","rikuzentakata","rittō","rumoi","ryūgasaki","sabae","sado","saga","sagae","sagamihara","saijō","saikai","saiki","saitama","saito","sakado","sakai","sakai","sakaide","sakaiminato","sakata","saku","sakura","sakura","sakuragawa","sakurai","sanda","sanjō","sanmu","sano","sanuki","sapporo","sasayama","sasebo","satsumasendai","satte","sayama","seiyo","seki","semboku","sendai","sennan","setagaya","seto","setouchi","settsu","shibata","shibetsu","shibukawa","shibushi","shibuya","shijōnawate","shiki","shikokuchūō","shima","shimabara","shimada","shimanto","shimoda","shimonoseki","shimotsuke","shimotsuma","shinagawa","shingū","shinjuku","shinjō","shinshiro","shiogama","shiojiri","shirakawa","shiroi","shiroishi","shisō","shizuoka","shōbara","shūnan","sodegaura","soo","special","suginami","suita","sukagawa","sukumo","sumida","sumoto","sunagawa","susaki","susono","suwa","suzaka","suzu","suzuka","sōja","sōka","sōma","sōsa","tachikawa","tagajō","tagawa","tahara","tainai","taitō","tajimi","takahagi","takahama","takahashi","takaishi","takamatsu","takaoka","takarazuka","takasago","takasaki","takashima","takatsuki","takayama","takehara","takeo","taketa","takikawa","takizawa","taku","tama","tamana","tamano","tamba","tamura","tanabe","tarumizu","tatebayashi","tateyama","tatsuno","tendō","tenri","toba","tochigi","toda","toki","tokoname","tokorozawa","tokushima","tomakomai","tome","tomigusuku","tomioka","tomisato","tonami","tondabayashi","toride","tosa","tosashimizu","toshima","tosu","tottori","towada","toyama","toyoake","toyohashi","toyokawa","toyonaka","toyooka","toyota","tsu","tsubame","tsuchiura","tsugaru","tsukuba","tsukubamirai","tsukumi","tsuru","tsuruga","tsurugashima","tsuruoka","tsushima","tsushima","tsuyama","tōgane","tōkai","tōkamachi","tōmi","tōno","tōon","ube","uda","ueda","uenohara","uji","uki","ukiha","unnan","unzen","uonuma","uozu","urasoe","urayasu","ureshino","uruma","usa","ushiku","usuki","utashinai","uto","utsunomiya","uwajima","wajima","wakayama","wakkanai","wakō","warabi","yabu","yachimata","yachiyo","yaita","yaizu","yamaga","yamagata","yamagata","yamaguchi","yamanashi","yamato","yamatokōriyama","yamatotakada","yame","yanagawa","yanai","yao","yashio","yasu","yasugi","yatomi","yatsushiro","yawata","yawatahama","yokkaichi","yokohama","yokosuka","yokote","yonago","yonezawa","yoshikawa","yoshinogawa","yotsukaidō","yufu","yukuhashi","yurihonjō","yuzawa","yūbari","yūki","zama","zentsūji","zushi","ōbu","ōda","ōdate","ōfunato","ōgaki","ōita","ōkawa","ōmachi","ōme","ōmihachiman","ōmura","ōmuta","ōno","ōnojō","ōsakasayama","ōsaki","ōshū","ōta","ōta","ōtake","ōtawara","ōtsu","ōtsuki","ōzu"];
TrainingDatas.japanese_forenames = ["ai","aiko","aimi","airi","akane","akari","akemi","aki","akie","akifumi","akihiko","akihiro","akihisa","akihito","akiko","akimasa","akimi","akimitsu","akina","akinobu","akinori","akio","akira","akisada","akishige","akito","akitoshi","akitsugu","akiyoshi","akiyuki","amane","ami","anri","anzu","aoi","arata","arihiro","arinaga","arinobu","aritomo","asako","asami","asao","asuka","asuka","asumi","asuna","atomu","atsuhiko","atsuhiro","atsuko","atsumi","atsuo","atsushi","atsuto","atsuya","aya","ayaka","ayako","ayame","ayana","ayane","ayano","ayu","ayuka","ayumi","ayumu","azuma","azumi","azusa","banri","bunji","bunta","chiaki","chie","chieko","chiemi","chiharu","chihiro","chiho","chika","chikara","chikayoshi","chinami","chinatsu","chisato","chitose","chiyako","chiyo","chiyoko","chizuko","chizuru","choki","chōei","chūichi","dai","daichi","daigo","daiki","dairoku","daishin","daisuke","daizō","eiichi","eiichiro","eiji","eijirō","eikichi","eiko","eimi","einosuke","eishun","eisuke","eizō","emi","emiko","emiri","eri","erika","eriko","etsuji","etsuko","fujiko","fujio","fukumi","fumiaki","fumie","fumihiko","fumihiro","fumika","fumiko","fumio","fumito","fumiya","fusako","fusanosuke","fusazane","futoshi","fuyuki","fuyuko","gaku","gakuto","gen'ichi","gen'ichirō","genjiro","genta","gentarō","genzo","giichi","gin","goichi","goro","hachirō","hajime","hakaru","hana","hanae","hanako","haru","haruaki","haruchika","harue","haruhi","haruhiko","haruhiro","haruhisa","haruka","haruki","haruko","harumi","haruna","harunobu","haruo","harutaka","haruto","haruyo","haruyoshi","hatsu","hatsue","hatsuo","hayanari","hayate","hayato","hazuki","heihachirō","heisuke","hideaki","hideharu","hidehiko","hidehito","hideji","hidekazu","hideki","hideko","hidemasa","hidemi","hidemi","hidemitsu","hidenobu","hidenori","hideo","hideshi","hidetaka","hideto","hidetoshi","hidetsugu","hideyo","hideyoshi","hideyuki","hikari","hikaru","himeko","hinata","hiro","hiroaki","hiroe","hirofumi","hirohide","hirohisa","hiroji","hirokatsu","hirokazu","hiroki","hiroko","hirokuni","hiromasa","hiromi","hiromichi","hiromitsu","hiromori","hiromu","hironari","hironobu","hironori","hiroshi","hiroshige","hirotaka","hirotami","hiroto","hirotoki","hirotomo","hirotoshi","hirotsugu","hiroya","hiroyasu","hiroyo","hiroyoshi","hiroyuki","hisae","hisahito","hisako","hisamitsu","hisamoto","hisanobu","hisanori","hisao","hisashi","hisataka","hisateru","hisato","hisaya","hisaya","hisayasu","hisayo","hisayoshi","hisayuki","hitomi","hitoshi","hokuto","honami","hotaru","hozumi","ichiei","ichiko","ichirō","ichizō","iehisa","iemasa","iemon","iesada","ikko","ikue","ikumi","ikuo","ikurō","iori","ippei","isami","isamu","isao","issei","itaru","itsuki","itsuko","itsumi","iwao","izumi","jiichirō","jin","jin'ichi","jinpachi","jiro","jitsuko","jun","jun'ichirō","jun'ya","junichi","junji","junki","junko","junpei","junzō","jōichirō","jōji","jōkichi","jōtarō","jūbei","jūkichi","jūshirō","jūtarō","jūzō","kaede","kagami","kagemori","kagetaka","kaguya","kaho","kahoru","kaiji","kaito","kakichi","kaku","kakuji","kan'ichi","kana","kanae","kanako","kaname","kanehira","kanehiro","kanematsu","kanemoto","kanesuke","kanetake","kaneto","kanetsugu","kaneyoshi","kankuro","kansuke","kaori","kaoru","karin","kasumi","katsuaki","katsuei","katsuhiko","katsuhiro","katsuhisa","katsuhito","katsuji","katsuki","katsukiyo","katsuko","katsumasa","katsumi","katsumoto","katsunaga","katsunari","katsunori","katsunosuke","katsuo","katsushi","katsusuke","katsutarō","katsuteru","katsutomo","katsutoshi","katsuya","katsuyoshi","katsuyuki","kawai","kayo","kayoko","kazu","kazuaki","kazue","kazuharu","kazuhiko","kazuhiro","kazuhisa","kazuhito","kazuki","kazuko","kazuma","kazumasa","kazumi","kazunari","kazunori","kazuo","kazuoki","kazurō","kazusa","kazushi","kazushige","kazutaka","kazuto","kazutoki","kazutoshi","kazuya","kazuyo","kazuyoshi","kazuyuki","kei","keigo","keiichi","keiichirō","keiji","keijirō","keijū","keiki","keiki","keiko","keinosuke","keishi","keisuke","keita","keizō","ken","ken'ichi","ken'ichirō","ken'yū","kengo","kenji","kenjirō","kenki","kenkichi","kensaku","kenshin","kensuke","kenta","kentaro","kento","kenzo","kesao","kihachi","kihachirō","kihei","kiichirō","kiko","kikue","kikuko","kikuo","kimiko","kimio","kimiya","kin'ichi","kin'ichirō","kin'ya","kinji","kinjirō","kintaro","kira","kisaburō","kishō","kiyoaki","kiyofumi","kiyohide","kiyohiko","kiyohiro","kiyoji","kiyokazu","kiyoko","kiyomoto","kiyonari","kiyonori","kiyoshi","kiyosue","kiyotaka","kiyotake","kiyoyuki","kogorō","koharu","koji","kojiro","konomi","koson","kotaro","kotomi","kotori","kouta","koya","kozue","kumatarō","kumi","kumiko","kuniaki","kunie","kunihiko","kunihiro","kunihisa","kuniko","kunimitsu","kunio","kunitake","kuniyuki","kuranosuke","kurenai","kurumi","kusuo","kyo","kyoko","kyukichi","kyōhei","kyōichi","kyōji","kyōsuke","kōhei","kōichi","kōichirō","kōki","kōkichi","kōnosuke","kōsaku","kōsei","kōshirō","kōsuke","kōzō","maaya","machi","machiko","madoka","mahiro","maho","maiko","maki","makiko","makio","mako","makoto","mami","mamiko","mamoru","mana","manabu","manami","manjirō","mantarō","mao","mareo","mari","mariko","marié","masaaki","masabumi","masachika","masae","masafumi","masaharu","masahide","masahiko","masahiro","masahisa","masahito","masaichi","masaie","masaji","masakage","masakatsu","masakazu","masaki","masako","masakuni","masami","masamichi","masamitsu","masamori","masamune","masamura","masanao","masanobu","masanori","masao","masaomi","masaru","masashi","masashige","masataka","masatake","masatane","masateru","masato","masatomo","masatoshi","masatsugu","masaya","masayoshi","masayuki","masazumi","masumi","masuo","masuzō","matabei","matsuchi","matsuki","matsuko","matsuo","matsushige","mayako","mayu","mayuko","mayumi","mayura","megu","megumi","mei","meiko","meisa","michiaki","michiharu","michihiko","michihiro","michihisa","michiko","michinori","michio","michiru","michirō","michitaka","michitarō","michiya","michiyo","michiyoshi","midori","mie","mieko","miho","miiko","mika","mikako","miki","mikiko","mikio","mikoto","miku","mikuni","mikuru","mimori","mina","minae","minako","minami","mineichi","mineko","mineo","minori","mirai","misaki","misako","misao","misato","mitsuaki","mitsugi","mitsugu","mitsuharu","mitsuhide","mitsuhiko","mitsuhira","mitsuhiro","mitsuhisa","mitsuki","mitsuko","mitsumasa","mitsumori","mitsunobu","mitsunori","mitsuo","mitsuomi","mitsuru","mitsusuke","mitsutaka","mitsuteru","mitsutoshi","mitsuyasu","mitsuyo","mitsuyo","mitsuyoshi","mitsuyuki","miu","miwa","miwako","miyabi","miyako","miyoko","miyu","miyuki","miyumi","miyū","mizuho","mizuki","mizuko","mochiaki","moe","mokichi","momo","momoe","momoka","momoko","morihiko","morihiro","morikazu","morimasa","morio","moritaka","mosuke","motoaki","motoharu","motohiko","motohiro","motoichi","motojirō","motoki","motoko","motomu","motonobu","motoshi","motoshige","motosuke","mototada","mototsugu","motoyasu","motoyuki","motozane","mukuro","munehiro","munemori","munenobu","munenori","muneo","muneshige","munetaka","munetoki","munetoshi","murashige","mutsuko","mutsumi","mutsuo","nagaharu","nagahide","nagako","nagamasa","nagamichi","naganao","naganori","nagatoki","nagatomo","nagisa","nami","namio","nana","nanako","nanami","nanase","nankichi","nao","naofumi","naohiko","naohiro","naohisa","naohito","naoji","naokatsu","naoki","naoko","naomasa","naomi","naomichi","naomori","naoshi","naotaka","naotake","naoto","naoya","naoyuki","naozumi","nariaki","nariakira","naritaka","nariyasu","nariyuki","naruhisa","naruhito","narumi","natsue","natsuki","natsuko","natsume","natsumi","noa","noboru","nobuaki","nobuatsu","nobuharu","nobuhiko","nobuhiro","nobuhisa","nobuhito","nobukatsu","nobukazu","nobuko","nobumasa","nobumitsu","nobumoto","nobunao","nobunari","nobuo","nobusada","nobusuke","nobutaka","nobuteru","nobutoki","nobutomo","nobutoshi","nobutsuna","nobuyasu","nobuyoshi","nobuyuki","nodoka","noriaki","norifumi","norifusa","norihiko","norihiro","norihito","norikazu","noriko","norimasa","norio","noriyasu","noriyo","noriyoshi","noriyuki","nozomi","nozomu","okimoto","okitsugu","omi","osamu","otoha","otohiko","otome","raizo","ran","rei","reiichi","reiji","reika","reiko","reizō","ren","rena","rentarō","rie","rieko","riho","riichi","rika","rikichi","rikiya","riku","rin","rina","rinshō","risa","ritsuko","rokurō","rumi","rumiko","runa","ruri","ruriko","ryoko","ryu","ryō","ryōhei","ryōichi","ryōji","ryōka","ryōma","ryōsei","ryōsuke","ryōta","ryōtarō","ryōzō","ryūhei","ryūichi","ryūji","ryūki","ryūnosuke","ryūsaku","ryūsei","ryūsuke","ryūta","ryūtarō","ryūya","ryūzō","saburō","sachie","sachiko","sachio","sadaaki","sadaharu","sadahiko","sadako","sadao","sadatoshi","sadayoshi","sadazane","saeko","saiichi","sakae","saki","sakichi","sakie","sakiko","sakura","sakurako","sanae","saori","satoko","satomi","satonari","satoru","satoshi","satsuki","satsuo","sawako","saya","sayaka","sayako","sayoko","sayumi","sayuri","seigen","seigo","seihō","seiichi","seiichirō","seiji","seijin","seijirō","seikichi","seiko","seishi","seishirō","seiya","seizō","senkichi","setsuko","setsuna","shichirō","shigeaki","shigefumi","shigeharu","shigehiro","shigehisa","shigekazu","shigeki","shigeko","shigemasa","shigematsu","shigemi","shigemitsu","shigenaga","shigenobu","shigenori","shigeo","shigeri","shigeru","shigetada","shigetaka","shigeto","shigetoshi","shigeyasu","shigeyoshi","shigeyuki","shiho","shiina","shikō","shimako","shin","shin'ichi","shin'ichirō","shinako","shingo","shinji","shinjirō","shinjō","shinkichi","shino","shinobu","shinpei","shinsaku","shinsuke","shinta","shintarō","shinya","shinzō","shion","shiori","shizue","shizuka","shizuko","shizuo","shoko","shuko","shuko","shun","shun'ichi","shun'ichirō","shun'ya","shunji","shunkichi","shunpei","shunsaku","shunsuke","shuntarō","shunzō","shō","shōgo","shōhei","shōichi","shōji","shōjirō","shōma","shōsuke","shōta","shōtarō","shōya","shōzō","shūgo","shūhei","shūichi","shūji","shūsaku","shūsuke","shūta","shūzō","sonosuke","sora","subaru","suehiro","suguru","sukehiro","sukemasa","suketoshi","suketsugu","sumika","sumiko","sumio","sumire","sumiyoshi","sunao","susumu","suzue","suzuko","sōgen","sōichi","sōichirō","sōji","sōsuke","sōtarō","tadaaki","tadachika","tadafumi","tadaharu","tadahiko","tadahiro","tadahito","tadakatsu","tadamasa","tadami","tadamori","tadanaga","tadanao","tadanari","tadanobu","tadanori","tadao","tadaoki","tadashi","tadataka","tadateru","tadatomo","tadatoshi","tadatsugu","tadatsune","tadayo","tadayoshi","tadayuki","taeko","taichi","taichirō","taiga","taiichi","taiji","taiki","taishi","taisuke","taka","takaaki","takafumi","takahide","takahiko","takahiro","takahisa","takahito","takaki","takako","takamasa","takamitsu","takanobu","takanori","takao","takashi","takatomi","takatoshi","takatsugu","takauji","takaya","takayasu","takayoshi","takayuki","takeaki","takefumi","takeharu","takehiko","takehiro","takehisa","takehito","takeichi","takejirō","takeko","takenaga","takenori","takeo","takeru","takeshi","taketo","taketora","taketoshi","takeya","takeyoshi","takezō","taku","takuji","takuma","takumi","takuo","takurō","takuto","takuya","takuzō","tamaki","tamao","tamiko","tamio","tamotsu","tarō","tateo","tatsuaki","tatsuhiko","tatsuhiro","tatsuhito","tatsuji","tatsuko","tatsuma","tatsumi","tatsunori","tatsuo","tatsurō","tatsushi","tatsuya","tatsuyoshi","tatsuyuki","teiji","teijirō","teiko","teiko","teizō","teppei","teru","teruaki","teruhiko","teruhisa","teruko","terumasa","terumi","terunobu","teruo","teruyoshi","teruyuki","tetsu","tetsuharu","tetsuji","tetsumasa","tetsuo","tetsurō","tetsushi","tetsutarō","tetsuya","tetsuzō","togo","tokihiko","tokiko","tokio","tokuji","tokujirō","tokuko","tokuo","tokurō","tokutarō","tomiko","tomio","tomo","tomoaki","tomochika","tomoe","tomoharu","tomohide","tomohiko","tomohiro","tomohisa","tomohito","tomoji","tomoka","tomokazu","tomoki","tomoko","tomomi","tomomichi","tomonobu","tomonori","tomotaka","tomoya","tomoyasu","tomoyo","tomoyoshi","tomoyuki","torahiko","toru","toshi","toshiaki","toshiharu","toshihide","toshihiko","toshihiro","toshihisa","toshihito","toshikatsu","toshikazu","toshiki","toshiko","toshimasa","toshimi","toshimichi","toshimitsu","toshinaga","toshinari","toshinobu","toshinori","toshio","toshirō","toshitada","toshitaka","toshitsugu","toshiya","toshiyasu","toshiyuki","toshizō","toyoaki","toyohiko","toyokazu","toyoko","toyomatsu","toyoshige","toyozō","tsubasa","tsugio","tsukasa","tsuneharu","tsunehisa","tsunejirō","tsuneko","tsunemi","tsunenori","tsuneo","tsuneyoshi","tsuneyuki","tsutomu","tsuyoshi","umanosuke","umeji","umeko","wakako","wataru","yaeko","yahiko","yahiro","yanosuke","yasuaki","yasue","yasufumi","yasuharu","yasuhide","yasuhiko","yasuhiro","yasuhisa","yasuji","yasujirō","yasukazu","yasuki","yasuko","yasumasa","yasumi","yasumichi","yasunari","yasunobu","yasunori","yasuo","yasurō","yasushi","yasutaka","yasutomo","yasutoshi","yasuyoshi","yasuyuki","yatarō","yayoi","yoko","yorimitsu","yorinobu","yorishige","yoritaka","yoritsugu","yoritsune","yoriyuki","yoshi","yoshifumi","yoshihide","yoshihiko","yoshihiro","yoshihisa","yoshihito","yoshiie","yoshika","yoshikane","yoshikatsu","yoshikazu","yoshiki","yoshikiyo","yoshiko","yoshikuni","yoshimasa","yoshimatsu","yoshimi","yoshimichi","yoshinaga","yoshinao","yoshinari","yoshino","yoshinobu","yoshinori","yoshio","yoshirō","yoshisada","yoshishige","yoshisuke","yoshitaka","yoshitake","yoshitarō","yoshiteru","yoshito","yoshitomo","yoshitsugu","yoshiya","yoshiyasu","yoshiyuki","yugi","yugo","yui","yuka","yukari","yuki","yukie","yukiharu","yukihiko","yukihiro","yukiko","yukimasa","yukimura","yukina","yukinobu","yukinori","yukio","yukitaka","yukito","yukiya","yumeko","yumi","yumika","yumiko","yuri","yurie","yurika","yuriko","yurina","yutaka","yuzuru","yō","yō","yōhei","yōichi","yōichirō","yōji","yōjirō","yōsuke","yōta","yōzō","yū","yūdai","yūhei","yūichi","yūichirō","yūji","yūjirō","yūkichi","yūko","yūsaku","yūsei","yūshi","yūsuke","yūta","yūtarō","yūto","yūya","yūzō","zenjiro","zenkichi","zentarō","zenzō"];
TrainingDatas.languages = ["afrikaans","arabic","belarusian","bengali","bosnian","bulgarian","catalan","cherokee","chinese","croatian","czech","danish","dutch","english","estonian","filipino","finnish","french","german","greek","hawaiian","hebrew","hungarian","indonesian","italian","japanese","korean","latvian","lithuanian","malay","moldavian","norwegian","persian","polish","pomeranian","portuguese","romani","romanian","russian","serbian","slovak","slovenian","somali","spanish","swedish","thai","turkish","ukranian","uzbek","vietnamese"];
TrainingDatas.meats = ["bacon","beef","beefliver","beefplate","beefshank","beefsteak","beeftongue","brisket","bushmeat","calfliver","chicken","crab","crabmeat","cutlet","darkmeat","duck","fishfillet","flanksteak","goat","goose","gooseliver","groundbeef","ham","horse","lamb","lean","loinchop","meat","meatball","meatchop","mince","mincemeat","mutton","patridge","pheasant","pigeon","pork","poultry","quail","rabbit","redmeat","ribchop","riblets","ribs","ribsteak","rumpsteak","shortribs","squab","steak","turkey","veal","venison","whitemeat","wildboar"];
TrainingDatas.minerals = ["abelsonite","abenakiite","abernathyite","abhurite","abramovite","abswurmbachite","acanthite","achavalite","actinolite","acuminite","adamantine","adamite","adamsite","adelite","admontite","aegirine","aenigmatite","aerinite","aerugite","aeschynite","aeschynite","aeschynite","afghanite","afwillite","agardite","agate","agrellite","agrinierite","aguilarite","aheylite","ahlfeldite","aikinite","ajoite","akaganéite","akatoreite","akdalaite","akhtenskite","akimotoite","akrochordite","aksaite","aktashite","alabandite","alabaster","alacránite","alamosite","alarsite","albite","albrechtschraufite","aldermanite","aleksite","alexandrite","alforsite","algodonite","aliettite","allabogdanite","allactite","allanite","allanpringite","allargentum","alleghanyite","allingite","alloclasite","allophane","alluaivite","alluaudite","almandine","almarudite","alsakharovite","alstonite","altaite","althausite","althupite","altisite","alum","aluminite","aluminium","alunite","alunogen","amakinite","amarantite","amazonite","amber","amblygonite","ameghinite","amesite","amethyst","amicite","ammolite","amosite","amphibole","analcime","anandite","anapaite","anatase","ancylite","andalusite","andersonite","andesine","andorite","andradite","andyrobertsite","anglesite","anhydrite","ankerite","annabergite","annite","anorthite","anorthoclase","antarcticite","anthonyite","anthophyllite","antigorite","antimony","antitaenite","antlerite","antozonite","anyolite","apachite","apatite","aphthitalite","apophyllite","aquamarine","aragonite","arcanite","archerite","arctite","arcubisite","ardaite","arfvedsonite","argentite","argentite","argutite","argyrodite","armalcolite","arsenic","arseniosiderite","arsenoclasite","arsenolite","arsenopyrite","arthurite","artinite","artroeite","asbestos","ashburtonite","ashoverite","asisite","astrophyllite","atacamite","athabascaite","atheneite","aubertite","auerlite","augelite","augite","aurichalcite","auricupride","aurostibite","austinite","autunite","avalite","aventurine","avicennite","avogadrite","awaruite","axinite","azurite","babefphite","babingtonite","baddeleyite","bakerite","balangeroite","banalsite","baotite","bararite","barbertonite","barrerite","barstowite","baryte","barytocalcite","bassanite","bastnäsite","baumhauerite","bauxite","bayldonite","bayleyite","bazzite","beckerite","becquerelite","benitoite","benstonite","bentonite","bentorite","beraunite","berborite","bergenite","berlinite","berryite","berthierite","bertrandite","beryl","beryllonite","beudantite","bicchulite","biehlite","billietite","billwiseite","biotite","birnessite","bischofite","bismite","bismuth","bismuthinite","bismutite","bityite","bixbite","bixbyite","blossite","blödite","bobfergusonite","boehmite","boleite","boltwoodite","bonaccordite","boracite","borax","bornite","botallackite","botryogen","boulangerite","bournonite","boussingaultite","bowenite","bowieite","braggite","brammallite","brassite","braunite","brazilianite","breithauptite","brewsterite","brezinaite","brianite","brianyoungite","briartite","bridgmanite","brochantite","brockite","brokenhillite","bromargyrite","bromellite","bronzite","brookite","brownleeite","brownmillerite","brucite","brushite","buddingtonite","buergerite","bukovite","bukovskyite","bultfonteinite","bunsenite","bursaite","bustamite","bystrite","bytownite","bílinite","cabalzarite","cabriite","cacoxenite","cadmium","cadmoindite","cadmoselite","cadwaladerite","cafarsite","cafetite","cahnite","calaverite","calciborite","calcite","calderite","caledonite","calumetite","campigliaite","campylite","canavesite","cancrinite","canfieldite","carletonite","carlosruizite","carlsbergite","carminite","carnallite","carnelian","carnotite","carobbiite","carpathite","carpholite","carrollite","caryopilite","cassiterite","cattierite","cavansite","celadonite","celestine","celsian","cementite","cerite","cerium","cerussite","cervandonite","cervantite","cesanite","cesbronite","ceylonite","chabazite","chaidamuite","chalcanthite","chalcedony","chalcocite","chalcophyllite","chalcopyrite","challacolloite","chambersite","chamosite","changbaiite","chaoite","chapmanite","charoite","chatkalite","chesterite","chiastolite","chibaite","childrenite","chlorargyrite","chlorastrolite","chlorite","chloritoid","chlormayenite","chlorocalcite","chloroxiphite","chondrodite","chrisstanleyite","christite","chromite","chromium","chrysoberyl","chrysocolla","chrysoprase","chrysotile","chrysotile","chvaleticeite","cinnabar","citrine","clarkeite","claudetite","clausthalite","clearcreekite","cleusonite","cleveite","clinochrysotile","clinoclase","clinohedrite","clinohumite","clinoptilolite","clinozoisite","clintonite","cobaltite","coccinite","coconinoite","coesite","coffinite","cohenite","colemanite","colimaite","collinsite","coloradoite","coltan","columbite","combeite","conichalcite","connellite","cooperite","copiapite","copper","corderoite","cordierite","corkite","cornubite","cornwallite","corundum","cotunnite","covellite","coyoteite","creedite","cristobalite","crocidolite","crocoite","cronstedtite","crookesite","crossite","cryolite","cryptomelane","cubanite","cumberlandite","cummingtonite","cupalite","cuprite","cuprosklodowskite","cuprospinel","curite","cuspidine","cyanotrichite","cylindrite","cymophane","cymrite","cyrilovite","danalite","danburite","datolite","daubréeite","daubréelite","davidite","dawsonite","delafossite","delessite","delvauxite","demesmaekerite","derriksite","descloizite","devilline","diaboleite","diadochite","diamond","diaspore","diatomite","dickite","digenite","dimorphite","diopside","dioptase","djerfisherite","djurleite","dmitryivanovite","dollaseite","dolomite","domeykite","donnayite","drysdallite","duftite","dumortierite","dundasite","dypingite","dyscrasite","dzhalindite","edenite","edingtonite","efremovite","ekanite","elbaite","elsmoreite","emerald","emery","emmonsite","empressite","enargite","enstatite","eosphorite","ephesite","epidote","epsomite","ericssonite","erionite","erythrite","eskolaite","esperite","ettringite","euchroite","euclase","eucryptite","eudialyte","euxenite","eveite","evenkite","eveslogite","fabianite","farneseite","fassaite","faujasite","faustite","fayalite","feldspar","feldspathoid","felsőbányaite","ferberite","fergusonite","feroxyhyte","ferricrete","ferrierite","ferrihydrite","ferrimolybdite","ferroactinolite","ferrocolumbite","ferrogedrite","ferrohortonolite","ferronigerite","ferropericlase","ferroselite","ferrotantalite","fettelite","fichtelite","fletcherite","fluckite","fluellite","fluoborite","fluocerite","fluorapatite","fluorapophyllite","fluorbuergerite","fluorcaphite","fluorellestadite","fluorite","fluorliddicoatite","fluororichterite","fluorspar","fluoruvite","fornacite","forsterite","fougèrite","fourmarierite","fraipontite","francevillite","franckeite","francolite","frankamenite","frankdicksonite","frankhawthorneite","franklinite","franklinphilite","freibergite","freieslebenite","fukuchilite","gabrielite","gadolinite","gagarinite","gahnite","galaxite","galena","galkhaite","gananite","garnet","garnierite","gaspeite","gatehouseite","gaylussite","gedanite","gedrite","geerite","gehlenite","geigerite","geikielite","geocronite","georgerobinsonite","germanite","gersdorffite","getchellite","gibbsite","gilalite","gismondine","glauberite","glaucochroite","glaucodot","glauconite","glaucophane","glessite","gmelinite","godovikovite","goethite","gold","goldmanite","gonnardite","gordaite","gormanite","goslarite","graftonite","grandidierite","grandreefite","graphite","gratonite","greenalite","greenockite","gregoryite","greifensteinite","greigite","grossite","grossular","groutite","grunerite","guettardite","gugiaite","guilleminite","gummite","gunningite","guyanaite","gwihabaite","gypsum","hafnon","hagendorfite","haggertyite","haidingerite","haiweeite","halite","halloysite","halotrichite","hambergite","hanksite","hapkeite","hardystonite","harmotome","hatchettite","hauerite","hausmannite","hauyne","hawleyite","haxonite","hazenite","heazlewoodite","hectorite","hedenbergite","heliodor","heliotrope","hellyerite","hematite","hemihedrite","hemimorphite","hemusite","herbertsmithite","hercynite","herderite","hessite","hessonite","heulandite","hexaferrum","hibonite","hidalgoite","hiddenite","hilgardite","hisingerite","hiärneite","hodgkinsonite","hoelite","hollandite","holmquistite","homilite","hopeite","hornblende","howlite","hsianghualite","hubeite","huemulite","humite","huntite","hureaulite","hutchinsonite","huttonite","hyalite","hyalophane","hydroboracite","hydrogrossular","hydrohalite","hydrokenoelsmoreite","hydromagnesite","hydrotalcite","hydroxylapatite","hydrozincite","hypersthene","håleniusite","hübnerite","ianbruceite","ice","icosahedrite","idocrase","idrialite","ikaite","illite","ilmenite","ilvaite","imogolite","indite","indium","inyoite","iodargyrite","iolite","iranite","iridium","iron","ixiolite","jacobsite","jadarite","jade","jadeite","jaffeite","jalpaite","jamesonite","janggunite","jarosewichite","jarosite","jasper","jeffersonite","jennite","jeremejevite","jerrygibbsite","jet","jimthompsonite","johannite","jolliffeite","jonesite","jordanite","julgoldite","junitoite","jurbanite","kaatialaite","kadyrelite","kaersutite","kainite","kainosite","kalininite","kalinite","kalsilite","kamacite","kambaldaite","kamiokite","kampfite","kanoite","kaolinite","karlite","kassite","kaňkite","kegelite","keilhauite","keilite","kermesite","kernite","kerolite","kesterite","keyite","khatyrkite","kieserite","kinoite","knebelite","knorringite","kobellite","kochite","kogarkoite","kolbeckite","kornerupine","kosmochlor","kostovite","kovdorskite","krantzite","kratochvílite","kremersite","krennerite","krieselite","krotite","krutovite","kröhnkite","kukharenkoite","kunzite","kuratite","kurnakovite","kutnohorite","kyanite","köttigite","labradorite","lanarkite","langbeinite","langite","lansfordite","lanthanite","lapislazuli","laplandite","larimar","larnite","laumontite","laurionite","laurite","lautite","lavendulan","lawsonite","lazulite","lazurite","lead","leadhillite","lechatelierite","legrandite","leifite","leightonite","lepidocrocite","lepidolite","letovicite","leucite","leucophanite","leucophoenicite","libethenite","liebigite","lignite","limonite","linarite","lindgrenite","linnaeite","lipscombite","liroconite","litharge","lithiophilite","livingstonite","lizardite","lodestone","loellingite","lonsdaleite","loparite","lorenzenite","lorándite","loveringite","lublinite","ludlamite","ludwigite","lulzacite","lyonsite","lévyne","lópezite","macaulayite","macdonaldite","mackinawite","madocite","magadiite","maghemite","magnesia","magnesioferrite","magnesiohastingsite","magnesiopascoite","magnesite","magnetite","majorite","malachite","malacolite","malayaite","manganite","manganocolumbite","manganosite","manganotantalite","manganvesuvianite","marcasite","margaritasite","margarite","marialite","maricite","mariposite","marrite","marthozite","mascagnite","massicot","masuyite","matlockite","maucherite","mawsonite","mckelveyite","meerschaum","meionite","melanite","melanophlogite","melanterite","melilite","mellite","melonite","mendipite","mendozite","meneghinite","menilite","mercury","mereheadite","merenskyite","meridianiite","merrillite","mesolite","messelite","metacinnabar","metatorbernite","metazeunerite","meyerhofferite","miargyrite","mica","microcline","microlite","millerite","millosevichite","mimetite","minium","minnesotaite","minyulite","mirabilite","mixite","moganite","mohite","mohrite","moissanite","molybdenite","molybdite","monazite","monohydrocalcite","monticellite","montmorillonite","mooihoekite","moolooite","mordenite","morganite","moschellandsbergite","mosesite","mottramite","motukoreaite","mullite","mundite","murdochite","muscovite","musgravite","nabalamprophyllite","nabesite","nacrite","nadorite","nagyágite","nahcolite","naldrettite","nambulite","narsarsukite","natrolite","natron","natrophilite","nekrasovite","nelenite","nenadkevichite","nepheline","nephrite","neptunite","nichromite","nickel","nickeline","niedermayrite","niningerite","niobite","niobitetantalite","nissonite","niter","nitratine","nobleite","nontronite","norbergite","normandite","northupite","nosean","nsutite","nyerereite","népouite","obsidian","okenite","oldhamite","olgite","oligoclase","olivenite","olivine","omphacite","onyx","opal","ordóñezite","oregonite","orpiment","orthochrysotile","orthoclase","osarizawaite","osmium","osumilite","otavite","ottrelite","otwayite","pabstite","painite","palagonite","palladium","palygorskite","panethite","panguite","papagoite","parachrysotile","paragonite","paralaurionite","paramelaconite","pararealgar","pargasite","parisite","parsonsite","parthéite","pascoite","patrónite","paulingite","paulscherrerite","pearceite","pecoraite","pectolite","pelagosite","penikisite","penroseite","pentagonite","pentlandite","perhamite","periclase","pericline","peridot ","perite","perlite","perovskite","petalite","petzite","pezzottaite","pharmacolite","pharmacosiderite","phenakite","phengite","phillipsite","phlogopite","phoenicochroite","phosgenite","phosphophyllite","phosphorite","phosphuranylite","pickeringite","picropharmacolite","piemontite","pigeonite","pimelite","pinalite","pinnoite","pitchblende","piypite","plagioclase","plancheite","platinum","plattnerite","playfairite","plessite","plumbogummite","polarite","pollucite","polybasite","polycrase","polydymite","polyhalite","portlandite","posnjakite","poudretteite","povondraite","powellite","prehnite","proustite","pseudobrookite","pseudomalachite","pseudowollastonite","psilomelane","pumicite","pumpellyite","purpurite","putnisite","pyrargyrite","pyrite","pyrochlore","pyrolusite","pyromorphite","pyrope","pyrophanite","pyrophyllite","pyroxene","pyroxferroite","pyroxmangite","pyrrhotite","pääkkönenite","qingsongite","quartz","quenstedtite","quintinite","rambergite","rameauite","rammelsbergite","rapidcreekite","rashleighite","raspite","realgar","reidite","reinerite","renierite","rheniite","rhodium","rhodochrosite","rhodolite","rhodonite","rhodplumsite","rhomboclase","richterite","rickardite","riebeckite","ringwoodite","roaldite","robertsite","rockcrystal","rodalquilarite","romanèchite","romeite","rosasite","roscoelite","roselite","rosenbergite","rosequartz","rosickýite","roumanite","routhierite","rozenite","rubicline","ruby","ruizite","russellite","ruthenium","rutherfordine","rutile","rynersonite","sabatierite","sabieite","sabinaite","sacrofanite","safflorite","salammoniac","saleeite","saliotite","salzburgite","samarskite","sampleite","samsonite","samuelsonite","sanbornite","saneroite","sanidine","santabarbaraite","santite","saponite","sapphire","sapphirine","sarabauite","sard","sarkinite","sassolite","satinspar","satterlyite","sauconite","sborgite","scapolite","scheelite","schmiederite","schoepite","schorl","schreibersite","schreyerite","schröckingerite","schwertmannite","schäferite","scolecite","scorodite","scorzalite","scrutinyite","seamanite","searlesite","seeligerite","segelerite","seifertite","sekaninaite","selenite","selenium","seligmannite","sellaite","semseyite","senarmontite","sepiolite","serendibite","serpentine","serpierite","sewardite","shandite","shattuckite","shigaite","shortite","shungite","siderite","siderophyllite","siderotil","siegenite","silicate","silicon","sillimanite","silver","simetite","simonellite","simpsonite","sincosite","sinkankasite","sinoite","skaergaardite","sklodowskite","skutterudite","smaltite","smectite","smithsonite","smokyquartz","soapstone","sodalite","sodaniter","soddyite","sonolite","spectrolite","sperrylite","spertiniite","spessartine","spessartite","sphalerite","sphene","spherocobaltite","spinel","spodumene","spurrite","stannite","stannoidite","stantienite","staurolite","steacyite","steatite","stellerite","stephanite","stercorite","stibarsen","stibiconite","stibiopalladinite","stibnite","stichtite","stilbite","stilleite","stillwaterite","stillwellite","stilpnomelane","stishovite","stolzite","strashimirite","strengite","stromeyerite","strontianite","struvite","studenitsite","studtite","stützite","suanite","suessite","sugilite","sulfur","sunstone","sursassite","susannite","sussexite","svanbergite","sweetite","switzerite","sylvanite","sylvite","synchysite","syngenite","sérandite","taaffeite","tachyhydrite","taenite","talc","talmessite","talnakhite","tamarugite","tangeite","tantalite","tantite","tanzanite","tapiolite","taranakite","tarapacaite","tarbuttite","tausonite","teallite","tellurite","tellurium","tellurobismuthite","temagamite","tennantite","tenorite","tephroite","terlinguaite","teruggite","tetradymite","tetrahedrite","tetrataenite","thaumasite","thenardite","thermonatrite","thiospinel","thomasclarkite","thomsenolite","thomsonite","thorianite","thorite","thortveitite","thulite","thuringite","tiemannite","tienshanite","tin","tinaksite","tincalconite","titanite","titanium","titanowodginite","tobermorite","todorokite","tokyoite","tongbaite","topaz","torbernite","tourmaline","tranquillityite","travertine","tremolite","trevorite","tridymite","triphylite","triplite","triploidite","tripuhyite","troilite","trona","tsavorite","tschermakite","tschermigite","tsumcorite","tsumebite","tugtupite","tungsten","tungstite","tuperssuatsiaite","turquoise","tusionite","tyrolite","tyrrellite","tyuyamunite","uchucchacuaite","uklonskovite","ulexite","ullmannite","ulrichite","ultramarine","ulvöspinel","umangite","umber","umbite","unakite","upalite","uralite","uraninite","uranocircite","uranophane","uranopilite","urea","uricite","urusovite","ussingite","utahite","uvarovite","uytenbogaardtite","vaesite","valentinite","valleriite","vanadinite","vanadiocarpholite","vanadium","vantasselite","vanuralite","variscite","vaterite","vauquelinite","vauxite","veatchite","vermiculite","vesuvianite","villiaumite","violarite","vishnevite","vivianite","vladimirite","vlasovite","volborthite","vulcanite","wad","wadsleyite","wagnerite","wairakite","wakabayashilite","wakefieldite","walfordite","wardite","warikahnite","warwickite","wassonite","wavellite","weddellite","weeksite","weilite","weissite","weloganite","whewellite","whiteite","whitlockite","willemite","wiluite","witherite","wodginite","wolframite","wollastonite","woodhouseite","wulfenite","wurtzite","wyartite","wüstite","xanthiosite","xanthoconite","xanthoxenite","xenophyllite","xenotime","xiangjiangite","xieite","xifengite","xilingolite","ximengite","xingzhongite","xitieshanite","xocolatlite","xocomecatlite","xonotlite","yeelimite","yttrialite","yttrocerite","yttrocolumbite","yttropyrochlore","yuksporite","zabuyelite","zaccagnaite","zaherite","zajacite","zakharovite","zanazziite","zaratite","zaïrite","zektzerite","zemannite","zeolite","zeunerite","zhanghengite","zharchikhite","zhemchuzhnikovite","zhonghuacerite","ziesite","zimbabweite","zinalsite","zincite","zinclipscombite","zincmelanterite","zincobotryogen","zincochromite","zincolivenite","zinkenite","zinnwaldite","zippeite","zircon","zirconolite","zircophyllite","zirkelite","znucalite","zoisite","zorite","zunyite","zussmanite","zykaite","åkermanite"];
TrainingDatas.modern_pokemon = ["abomasnow","abra","absol","accelgor","aegislash","aerodactyl","aggron","aipom","alakazam","alomomola","altaria","amaura","ambipom","amoonguss","ampharos","anorith","arbok","arcanine","arceus","archen","archeops","ariados","armaldo","aromatisse","aron","articuno","audino","aurorus","avalugg","axew","azelf","azumarill","azurill","bagon","baltoy","banette","barbaracle","barboach","basculin","bastiodon","bayleef","beartic","beautifly","beedrill","beheeyem","beldum","bellossom","bellsprout","bergmite","bewear","bibarel","bidoof","binacle","bisharp","blastoise","blaziken","blissey","blitzle","boldore","bonsly","bouffalant","braixen","braviary","breloom","bronzong","bronzor","bruxish","budew","buizel","bulbasaur","buneary","bunnelby","burmy","butterfree","cacnea","cacturne","camerupt","carbink","carnivine","carracosta","carvanha","cascoon","castform","caterpie","celebi","chandelure","chansey","charizard","charjabug","charmander","charmeleon","chatot","cherrim","cherubi","chesnaught","chespin","chikorita","chimchar","chimecho","chinchou","chingling","cinccino","clamperl","clauncher","clawitzer","claydol","clefable","clefairy","cleffa","cloyster","cobalion","cofagrigus","combee","combusken","conkeldurr","corphish","corsola","cottonee","cradily","cranidos","crawdaunt","cresselia","croagunk","crobat","croconaw","crustle","cryogonal","cubchoo","cubone","cutiefly","cyndaquil","darkrai","darmanitan","darumaka","dedenne","deerling","deino","delcatty","delibird","delphox","deoxys","dewgong","dewott","dialga","diancie","diggersby","diglett","ditto","dodrio","doduo","donphan","doublade","dragalge","dragonair","dragonite","drampa","drapion","dratini","drifblim","drifloon","drilbur","drowzee","druddigon","ducklett","dugtrio","dunsparce","duosion","durant","dusclops","dusknoir","duskull","dustox","dwebble","eelektrik","eelektross","eevee","ekans","electabuzz","electivire","electrike","electrode","elekid","elgyem","emboar","emolga","empoleon","entei","escavalier","espeon","espurr","excadrill","exeggcute","exeggutor","exploud","farfetchd","fearow","feebas","fennekin","feraligatr","ferroseed","ferrothorn","finneon","flaaffy","flabébé","flareon","fletchinder","fletchling","floatzel","floette","florges","flygon","foongus","forretress","fraxure","frillish","froakie","frogadier","froslass","furfrou","furret","gabite","gallade","galvantula","garbodor","garchomp","gardevoir","gastly","gastrodon","genesect","gengar","geodude","gible","gigalith","girafarig","giratina","glaceon","glalie","glameow","gligar","gliscor","gloom","gogoat","golbat","goldeen","golduck","golem","golett","golurk","goodra","goomy","gorebyss","gothita","gothitelle","gothorita","gourgeist","granbull","graveler","greninja","grimer","grotle","groudon","grovyle","growlithe","grubbin","grumpig","gulpin","gurdurr","gyarados","happiny","hariyama","haunter","hawlucha","haxorus","heatmor","heatran","heliolisk","helioptile","heracross","herdier","hippopotas","hippowdon","hitmonchan","hitmonlee","hitmontop","hooh","honchkrow","honedge","hoopa","hoothoot","hoppip","horsea","houndoom","houndour","huntail","hydreigon","hypno","igglybuff","illumise","infernape","inkay","ivysaur","jellicent","jigglypuff","jirachi","jolteon","joltik","jumpluff","jynx","kabuto","kabutops","kadabra","kakuna","kangaskhan","karrablast","kecleon","keldeo","kingdra","kingler","kirlia","klang","klefki","klink","klinklang","koffing","komala","krabby","kricketot","kricketune","krokorok","krookodile","kyogre","kyurem","lairon","lampent","landorus","lanturn","lapras","larvesta","larvitar","latias","latios","leafeon","leavanny","ledian","ledyba","lickilicky","lickitung","liepard","lileep","lilligant","lillipup","linoone","litleo","litten","litwick","lombre","lopunny","lotad","loudred","lucario","ludicolo","lugia","lumineon","lunala","lunatone","luvdisc","luxio","luxray","machamp","machoke","machop","magby","magcargo","magearna","magikarp","magmar","magmortar","magnemite","magneton","magnezone","makuhita","malamar","mamoswine","manaphy","mandibuzz","manectric","mankey","mantine","mantyke","maractus","mareep","marill","marowak","marshtomp","masquerain","mawile","medicham","meditite","meganium","meloetta","meowstic","meowth","mesprit","metagross","metang","metapod","mewtwo","mew","mienfoo","mienshao","mightyena","milotic","miltank","mimejr","mimikkyu","minccino","minun","misdreavus","mismagius","moltres","monferno","mothim","mrmime","mudkip","muk","munchlax","munna","murkrow","musharna","natu","nidoking","nidoqueen","nidoran","nidoran","nidorina","nidorino","nincada","ninetales","ninjask","noctowl","noibat","noivern","nosepass","numel","nuzleaf","octillery","oddish","omanyte","omastar","onix","oshawott","pachirisu","palkia","palpitoad","pancham","pangoro","panpour","pansage","pansear","paras","parasect","patrat","pawniard","pelipper","persian","petilil","phanpy","phantump","phione","pichu","pidgeot","pidgeotto","pidgey","pidove","pignite","pikachu","pikipek","piloswine","pineco","pinsir","piplup","plusle","politoed","poliwag","poliwhirl","poliwrath","ponyta","poochyena","popplio","porygon","porygon","porygonz","primeape","prinplup","probopass","psyduck","pumpkaboo","pupitar","purrloin","purugly","pyroar","quagsire","quilava","quilladin","qwilfish","raichu","raikou","ralts","rampardos","rapidash","raticate","rattata","rayquaza","regice","regigigas","regirock","registeel","relicanth","remoraid","reshiram","reuniclus","rhydon","rhyhorn","rhyperior","riolu","rockruff","roggenrola","roselia","roserade","rotom","rowlet","rufflet","sableye","salamence","salandit","samurott","sandile","sandshrew","sandslash","sawk","sawsbuck","scatterbug","sceptile","scizor","scolipede","scrafty","scraggy","scyther","seadra","seaking","sealeo","seedot","seel","seismitoad","sentret","serperior","servine","seviper","sewaddle","sharpedo","shaymin","shedinja","shelgon","shellder","shellos","shelmet","shieldon","shiftry","shinx","shroomish","shuckle","shuppet","sigilyph","silcoon","simipour","simisage","simisear","skarmory","skiddo","skiploom","skitty","skorupi","skrelp","skuntank","slaking","slakoth","sliggoo","slowbro","slowking","slowpoke","slugma","slurpuff","smeargle","smoochum","sneasel","snivy","snorlax","snorunt","snover","snubbull","solgaleo","solosis","solrock","spearow","spewpa","spheal","spinarak","spinda","spiritomb","spoink","spritzee","squirtle","stantler","staraptor","staravia","starly","starmie","staryu","steelix","stoutland","stunfisk","stunky","sudowoodo","suicune","sunflora","sunkern","surskit","swablu","swadloon","swalot","swampert","swanna","swellow","swinub","swirlix","swoobat","sylveon","taillow","talonflame","tangela","tangrowth","tapu koko","tauros","teddiursa","tentacool","tentacruel","tepig","terrakion","throh","thundurus","timburr","tirtouga","togedemaru","togekiss","togepi","togetic","torchic","torkoal","tornadus","torterra","totodile","toxicroak","tranquill","trapinch","treecko","trevenant","tropius","trubbish","turtwig","tympole","tynamo","typhlosion","tyranitar","tyrantrum","tyrogue","tyrunt","umbreon","unfezant","unown","ursaring","uxie","vanillish","vanillite","vanilluxe","vaporeon","venipede","venomoth","venonat","venusaur","vespiquen","vibrava","victini","victreebel","vigoroth","vikavolt","vileplume","virizion","vivillon","volbeat","volcanion","volcarona","voltorb","vullaby","vulpix","wailmer","wailord","walrein","wartortle","watchog","weavile","weedle","weepinbell","weezing","whimsicott","whirlipede","whiscash","whismur","wigglytuff","wingull","wobbuffet","woobat","wooper","wormadam","wurmple","wynaut","xatu","xerneas","yamask","yanma","yanmega","yungoos","yveltal","zangoose","zapdos","zebstrika","zekrom","zigzagoon","zoroark","zorua","zubat","zweilous","zygarde"];
TrainingDatas.musical_instruments = ["accordion","airhorn","arpeggione","autoharp","bagpipes","bass","bassdrum","bassethorn","bassflute","bassguitar","bongo","bugle","bullroarer","celesta","clapsticks","clarinet","clavinet","cornet","crumhorn","doublebass","drum","drumkit","electricguitar","euphonium","flugelhorn","flumpet","flute","flutina","glockenspiel","guitar","handpan","harmonica","harp","harpsichord","horn","keyboard","lute","lyre","marimba","obo","oud","piano","piccolo","pipe","pitchpipe","psaltery","recorder","saxhorn","saxophone","saxotromba","saxtuba","steelpan","tinwhistle","triangle","trombone","trumpet","trumpet","tuba","turntable","vibraphone","viola","violin","violino","wheelharp","wobbleboard","woodblock","xylophone"];
TrainingDatas.musical_styles = ["acappella","acidhouse","acidjazz","acidrock","acoustic","afrobeat","afrocubanjazz","afropop","aleatoric","alternativecountry","alternativedance","alternativehiphop","alternativemetal","alternativerock","ambient","ambientindustrial","americana","anarchopunk","anime","antifolk","apala","arabicpop","argentinerock","arsnova","artpop","artpunk","artrock","avantgarde","avantgardejazz","avantgardemetal","bacbal","ballad","ballata","ballet","barndance","baroque","bass","bassline","batárumba","beatboxing","bebop","bigbeat","biomusic","bitpop","blackmetal","bluegrass","blues","bluesballad","bluesrock","bossanova","bounce","brass","breakbeat","breakcore","breakstep","britfunk","britishblues","britpop","brokenbeat","brostep","bubblegumdance","bubblegumpop","bunraku","bushballad","cabaret","cadencelypso","calypso","canon","cantiga","cantopop","carol","cellorock","celtic","celticfusion","celtichiphop","celticmetal","celticpunk","celticreggae","celticrock","chachacha","chamber","chamberjazz","chamberpop","charanga","chicagoblues","chicagohouse","chicagosoul","chickenscratch","chillout","chillwave","chiptune","christiancountry","christianelectronic","christianhardcore","christianhiphop","christianmetal","christianpunk","christianrock","christianska","christmascarol","christmasmusic","churchmusic","classical","classiccountry","classicrock","coldwave","concerto","cooljazz","country","countryblues","countrypop","countryrap","countryrock","crunk","crunkcore","dance","dancehall","dancepop","dancepunk","dancerock","darkambient","darkcabaret","darkcore","darkstep","darkwave","deathcore","deathdoom","deathgrind","deathindustrial","deathmetal","deathrock","deephouse","deltablues","descarga","detroitblues","detroittechno","digitalhardcore","dirtyrap","disco","discopolo","divahouse","dixieland","doommetal","dreampop","drone","dronemetal","drumstep","dub","dubstep","dubstyle","dubtronica","dutchjazz","easycore","easylistening","electricblues","electricfolk","electro","electroclash","electroindustrial","electronica","electronicdance","electronicmusic","electronicrock","electropop","electropunk","electroswing","elevatormusic","emo","eurobeat","eurodance","eurodisco","eurohouse","europop","eurotrance","experimental","experimentalrock","extrememetal","fingerstyle","flamenco","folk","folkock","folkjazz","folkmetal","folkpop","folkpunk","folktronica","freakbeat","freejazz","freemusic","freestyle","funk","funkmetal","funkrock","funkyhouse","furnitureusic","fusionjazz","futurepop","gangsterrap","garagehouse","garagerock","ghettohouse","ghettotech","girlgroup","glammetal","glampunk","glamrock","glitch","gospel","gothicmetal","gothicrock","gregorianchant","grime","grindcore","groovemetal","grunge","grupera","gypsyjazz","gypsypunk","hardbop","hardcorehiphop","hardcorepunk","hardcoretechno","hardhouse","hardrock","hardstep","hardstyle","hardtrance","harmonicablues","heavymetal","highlife","hiphop","hiphouse","hiplife","horrorcore","horrorpunk","hymn","impressionist","improvisational","incidental","indie","indiefolk","indiepop","indierock","indietronica","indojazz","industrial","industrialdeathmetal","industrialhiphop","industrialmetal","industrialrock","instrumental","instrumentalrock","irishfolk","irishrebel","jam","janglepop","jazz","jazzblues","jazzfunk","jazzfusion","jazzrap","jingle","jitterbug","jive","jpop","jrock","jungle","kpop","latinmetal","latinpop","liquidfunk","louisianablues","lounge","loversrock","mathcore","mathrock","medievalfolkrock","medievalmetal","melodic","melodichardcore","melodicmetalcore","memphisblues","memphissoul","metalcore","miamibass","microhouse","minijazz","minimal","minimaltechno","minimaltrance","minstrel","minuet","modernclassical","modernrock","musicdrama","musichall","neoclassical","neoclassicaldarkwave","neoclassicalmetal","neofolk","neoprogressiverock","neopsychedelia","neosoul","nerdcore","newprog","newrave","newwave","nintendocore","noise","noisepop","noiserock","nordicfolk","northernsoul","numetal","opera","orchestra","organum","paganmetal","paganrock","palmwine","pianoblues","plainchant","popfolk","popmusic","poppunk","poprap","poprock","pornocore","postdisco","postgrunge","postindustrial","postmetal","postminimalism","postpunk","postrock","postromanticism","powerduo","powerelectronics","powermetal","powernoise","powerpop","powertrio","powerviolence","praisesong","progressivebluegrass","progressiveelectronic","progressivefolk","progressivehouse","progressivemetal","progressiverock","progressivetrance","protopunk","psychedelicrock","psychedelictrance","psychobilly","pubrock","punkblues","punkjazz","punkrock","queercore","raggamuffin","ragtime","rave","reggae","reggaedancehall","reggaefusion","reggaehighlife","reggaeton","renaissancemusic","requiem","retro","rhapsody","rhumba","rhymingspiritual","rock","rockabilly","rockopera","rocksteady","rococo","rootsreggae","rootsrock","rootsrockreggae","rumba","sadcore","salsa","salsaerotica","salsaromantica","saltarello","samba","sambareggae","sambarock","shockrock","ska","skapunk","skatepunk","sludgemetal","smoothjazz","softrock","soulblues","souljazz","soulmusic","southerngospel","southernharmony","southernhiphop","southernmetal","southernrock","southernsoul","spaceagepop","spacemusic","spacerock","speedcore","speedgarage","speedmetal","stonermetal","stonerrock","straightedge","streetbass","stringquartet","sunshinepop","surfballads","surfinstrumental","surfmusic","surfpop","surfrock","swampblues","swamppop","swamprock","symphonicmetal","symphonicpoem","symphonicrock","symphony","synthpop","synthwave","techhouse","techno","technoid","techstep","techtonik","techtrance","texasblues","thrashmetal","thrashcore","turbofolk","tweepop","undergroundmusic","urbanfolk","vaporwave","vaudeville","vikingmetal","vocalhouse","vocaljazz","vocalmusic","vocaloid","waltz","westernswing","worldbeat","worldmusic","yodeling","yopop"];
TrainingDatas.mythical_humanoids = ["adlet","ala","angel","asterius","aswang","bannik","blafard","boggart","brownie","bugbear","bunyip","caliban","centaur","changeling","clurichaun","cyclopes","demon","devil","doppelganger","draugar","dryad","duduri","dullahan","dwarf","elf","empusa","encantado","ent","erinyes","fairy","faun","fiura","gargoyle","garuda","ghoul","giant","giantess","gigantes","gnome","goblin","gorgon","gremlin","grendel","gwishin","hag","haltija","harpy","hibagon","hobbit","hobgoblins","huldra","imp","incubus","incubus","jengu","jinn","jorogumo","jotuns","kappa","kikimora","kitsune","knocker","kobold","korrigan","lamia","lamia","lares","leprechaun","lich","little people","lycanthrope","manticore","menehune","mermaid","merman","minotaur","monaciello","monopod","mothman","mummy","naga","naiad","nereid","nix","nukekubi","nuno","nymph","oceanid","ogre","ogre","ogress","oni","orc","ork","pan","pixie","poltergeist","pombero","pugot","redcap","rusalka","samebito","sandman","satyr","seelie","selkie","sidhe","siren","sphinx","spriggan","sprite","succubus","sylph","tengu","tennin","tikbalang","titan","tiyanak","triton","troll","troll","trow","tyress","undine","valkyrie","vampire","vetter","vila","wendigo","werecat","werehyena","werewolf","yeren","yeti","yukionna","zombie"];
TrainingDatas.norse_deity_forenames = ["baduhenna","baldr","beyla","bil","bragi","brynhildr","dellingr","eir","eir","forseti","freyja","freyr","frigg","fulla","gefjun","geirahöð","geiravör","geirdriful","geirskögul","geirönul","gersemi","gerðr","gná","gullveig","gunnr","guðr","göll","göndul","hariasa","heimdallr","herfjötur","herja","hermóðr","hervör","hildr","hjalmþrimul","hjörþrimul","hlaðguðr","hlín","hlökk","hnoss","hretha","hrist","hrund","höðr","hœnir","ilmr","irpa","iðunn","kára","lofn","loki","lóðurr","meili","mist","máni","nanna","nerthus","njörun","njörðr","odin","randgríðr","reginleif","rindr","rán","ráðgríðr","róta","sandraudiga","sanngriðr","saxnōt","sif","sigrdrífa","sigrún","sigyn","sinthgunt","sjöfn","skalmöld","skaði","skeggöld","skuld","skögul","snotra","sveið","svipul","syn","sága","sól","tanfana","thor","týr","ullr","vili","viðarr","váli","vár","vé","vör","zisa","óðr","ölrún","þorgerðr","þrima","þrúðr","þrúðr","þögn","ēostre"];
TrainingDatas.original_pokemon = ["abra","aerodactyl","alakazam","arbok","arcanine","articuno","beedrill","bellsprout","blastoise","bulbasaur","butterfree","caterpie","chansey","charizard","charmander","charmeleon","clefable","clefairy","cloyster","cubone","dewgong","diglett","ditto","dodrio","doduo","dragonair","dragonite","dratini","drowzee","dugtrio","eevee","ekans","electabuzz","electrode","exeggcute","exeggutor","farfetchd","fearow","flareon","gastly","gengar","geodude","gloom","golbat","goldeen","golduck","golem","graveler","grimer","growlithe","gyarados","haunter","hitmonchan","hitmonlee","horsea","hypno","ivysaur","jigglypuff","jolteon","jynx","kabuto","kabutops","kadabra","kakuna","kangaskhan","kingler","koffing","krabby","lapras","lickitung","machamp","machoke","machop","magikarp","magmar","magnemite","magneton","mankey","marowak","meowth","metapod","mew","mewtwo","mime","moltres","muk","nidoking","nidoqueen","nidoran","nidoran","nidorina","nidorino","ninetales","oddish","omanyte","omastar","onix","paras","parasect","persian","pidgeot","pidgeotto","pidgey","pikachu","pinsir","poliwag","poliwhirl","poliwrath","ponyta","porygon","primeape","psyduck","raichu","rapidash","raticate","rattata","rhydon","rhyhorn","sandshrew","sandslash","scyther","seadra","seaking","seel","shellder","slowbro","slowpoke","snorlax","spearow","squirtle","starmie","staryu","tangela","tauros","tentacool","tentacruel","vaporeon","venomoth","venonat","venusaur","victreebel","vileplume","voltorb","vulpix","wartortle","weedle","weepinbell","weezing","wigglytuff","zapdos","zubat"];
TrainingDatas.places_in_cumbria = ["abbeytown","ackenthwaite","adgarley","aglionby","aiketgate","aikhead","aikshaw","aikton","ainstable","aisgill","albyfield","aldingham","aldoth","allenwood","allerdale","allerdale","allhallows","allithwaite","allonby","alston","alstonmoor","ambleside","angerton","annaside","anthorn","appleby","applethwaite","arkleby","arlecdon","armaside","armathwaite","arnaby","arnside","arradfoot","arthuret","asby","ashgill","askerton","askham","aspatria","aughertree","ayside","backbarrow","baggrow","baldwinholme","bampton","bamptongrange","bandrakehead","banks","barbergreen","barbon","barclose","bardsea","barepot","barras","barrow","barrowisland","barrowsgreen","barton","bassenthwaite","baycliff","bayles","beanthwaite","beaumont","beckbottom","beckces","beckermet","beckfoot","beckhead","beckside","beetham","belah","bellevue","berrier","bewaldeth","bewcastle","biggar","biglands","birkby","birkerthwaite","blackbeck","blackcombe","blackdyke","blackford","blackpoolgate","blackwell","blagill","blawith","bleatarn","blencarn","blencogo","blencow","blindbothel","blindcrake","blitterlees","bolton","boltongate","boltonlowhouses","boltonnewhouses","boltons","boltonwoodlane","bomby","bonninggate","boot","bootle","borrowdale","botcherby","bothel","bousteadhill","bouth","bowlandbridge","bowmanstead","bowscale","bowston","brackenber","brackenlands","brackenthwaite","braithwaite","brampton","brandlingill","bransty","branthwaite","brathay","braystones","braytonpark","bretherdalehead","bridekirk","bridgefield","bridgefoot","briery","brigham","brigsteer","brisco","briscoe","broadoak","broadwath","brockleymoor","bromfield","broom","brothybeck","brough","brougham","broughsowerby","broughton","broughtonbeck","broughtoncross","broughtoneast","broughtonmills","broughtonmoor","broughtonwest","brownber","browtop","brunstock","brunthwaite","buckabank","bullgill","burghbysands","burneside","burnrigg","burrells","burtholme","burthwaite","busk","buttermere","butterwick","caldbeck","calder","calderbridge","calthwaite","calva","cambeckbridge","camerton","canalfoot","cardew","cardewlees","cardurnock","cargo","cark","carlatton","carlisle","carrbank","cartmel","cartmelfell","carwinley","casterton","castlecarrock","castlesowerby","castletown","catbank","catlowdy","catterlen","causewayend","causewayhead","cautley","chalkfoot","chapel","chapelstile","chestnuthill","churchbrough","claife","clappersgate","clawthorpe","cleabarrow","cleator","cleatormoor","cliburn","clifton","cliftondykes","cockermouth","cocklake","cockleybeck","colby","coldbeck","colthouse","colton","commonend","coniston","corbyhill","corkickle","corney","cotehill","cotes","coulderton","coupland","cowenhead","cowgill","crackenthorpe","croasdale","crofton","croglin","crook","crooklands","crosby","crosbygarrett","crosbyravensworth","crosbyvilla","croslandspark","crosscanonby","crossend","crossgates","crosslands","crosthwaite","culgaith","cumbria","cumdivock","cummersdale","cumrew","cumwhinton","cumwhitton","currock","dacre","dale","dalebottom","dalemain","dalston","dalton","dean","deanscales","dearham","deepthwaite","dendron","dent","dentonholme","distington","dockray","dovenby","downhall","dragleybeck","drigg","drumburgh","drumleaning","drybeck","dubwath","duddonbridge","dufton","dundraw","dungeonghyll","durdar","dykesfield","eaglesfield","eamontbridge","eastcurthwaite","edderside","edenhall","edentown","egremont","egtonwithnewland","ellenborough","ellonby","elterwater","embleton","endmoor","ennerdalebridge","eskdale","eskdalegreen","eskett","etterby","ewanrigg","fairhill","fararnside","farend","farlam","farleton","farsawrey","faugh","fawcettforest","fellside","fenton","fieldbroughton","fingland","finsthwaite","firbank","fletchertown","flimby","flitholme","flookburgh","floristonrigg","forceforge","foresthead","fornside","fothergill","foulbridge","foxfield","frizington","gaisgill","galligill","gamblesby","gamelsby","garlands","garnettbridge","garrigill","garsdale","garsdalehead","garthrow","garths","gatebeck","gatefoot","gatesgarth","gawthrop","gawthwaite","geltsdale","gilcrux","gilsland","glasson","glasson","glassonby","gleaston","glencoyne","glenridding","goadsbarrow","goodyhills","goosegreen","gosforth","grangefell","grasmere","grassgarth","grayrigg","graysongreen","greatasby","greatblencow","greatbroughton","greatclifton","greatcorby","greatcrosthwaite","greatlangdale","greatmusgrave","greatormside","greatorton","greatsalkeld","greatstrickland","greaturswick","greenbank","greengill","greenhead","greenhill","greenholme","greenodd","greenquarter","greenrow","greenwell","greysouthen","greystoke","greystone","grinsdale","grisedale","grizebeck","grizedale","gullomholme","hackthorpe","haile","hailforth","hale","halfpenny","hallbankgate","hallbeck","halldunnerdale","hallowbank","hallsanton","hallthwaites","hallwaberthwaite","haltcliff","hampsfield","hardendale","haresceugh","harker","harkermarsh","harraby","harrington","harriston","hartley","hartsop","hassness","haverigg","haverthwaite","hawcoat","hawksdale","hawkshead","hawksheadhill","hawsbank","hayton","hayton","hazelrigg","hazelslack","headsnook","heaning","heathwaite","hegglelane","helbeck","helsington","helton","helvellyn","hensingham","hesket","hethersgill","highbankhill","highbewaldeth","highbiggins","highbridge","highcasterton","highcrosby","highcunsey","highgreen","highhesket","highhill","highireby","highknipe","highlaws","highlorton","highmoor","highnewton","highoaks","highrigg","highrow","highscales","highside","highwray","hilltop","hilton","hincaster","hodbarrow","holker","hollins","holme","holmeabbey","holmelow","holmrook","holmwrangle","honisterpass","hopebeck","hornsby","houghton","how","howgate","howgill","hugill","hunsonby","hurst","hutton","huttonend","huttonsoil","hycemoor","hyton","ireleth","irthington","isel","ivegill","jericho","johnby","kaber","keekle","keisley","kelbarrow","keld","kelleth","kells","kelsick","kendal","kentmere","kentrigg","kentsbank","keswick","killington","kilnhill","kingmoor","kingsmeaburn","kingstown","kingwater","kinkryhill","kirkbampton","kirkhouse","kirklandguards","kirklinton","kirklintonmiddle","kirkoswald","kirksanton","lakeside","lambfoot","langdale","langwathby","leadgate","leasgill","legburthwaite","lessonhall","levens","littlebeck","littlebroughton","littleclifton","littlelangdale","littletown","lockhills","longburgh","longlands","longmarton","longpark","longthwaite","loweswater","lowick","lowther","martindale","mawbray","mealbank","mealsgate","melmerby","micklethwaite","middleton","midgeholme","milburn","millom","milnthorpe","milton","mockerkin","monkhill","moorrow","moresby","morland","morton","mosedale","muncaster","mungrisdale","murton","nateby","natland","nearsawrey","nenthall","nenthead","nethertown","netherwasdale","newcowper","newhutton","newland","newlands","newton","newtonarlosh","newtonreigny","newtonrigg","newtown","northdykes","northscale","oddendale","oldhutton","ormside","orthwaite","orton","oughterside","oulton","ousby","outhgill","oxenholme","oxenpark","papcastle","parsonby","parton","patterdale","pennington","penrith","penruddock","petterilgreen","pielisland","plumbland","plumpton","ponsonby","pooleybridge","rampside","raughtonhead","ravenglass","ravenstonedale","renwick","rickerby","roanhead","rockcliffe","roose","roosebeck","rosside","rosthwaite","roundthwaite","ruckcroft","ruleholme","rusland","rydal","sadgill","santonbridge","satterthwaite","scaleby","scalebyhill","scotby","seascale","seathwaite","seatoller","seaton","sedbergh","sedgwick","selside","shap","shoregill","siddick","silecroft","silloth","silverband","skelton","skelwithbridge","skinburness","skirwith","skitby","slackhead","smithfield","sockbridge","southwaite","sparkbridge","stair","stanah","stapleton","staveley","stbees","stockdalewath","stonehouse","sunderland","swarthmoor","swindale","tarns","templesowerby","thiefside","thornhill","thornthwaite","threapland","threlkeld","thursby","thwaites","tirril","todhills","torpenhow","torver","troutbeck","troutbeckbridge","uldale","ulpha","ulverston","underbarrow","underskiddaw","upperdenton","upton","vickerstown","waberthwaite","walton","warcop","warwickbridge","wasdale","wasdalehead","watchgate","watendlath","watermillock","waverton","westnewton","westward","wetheral","wetsleddale","whale","whicham","whitehaven","wiggonby","wigton","wilton","windermere","winscales","winton","witherslack","wolsty","woodend","woodend","woodland","workington","wreay","wythburn","wythopmill","yanwath","yarlside","yearngill","yottenfews"];
TrainingDatas.plants_common_names = ["africanrice","alder","almond","ambrosia","amyroot","apple","apricot","arfaj","arrowwood","ash","ashleavedmaple","asianrice","azolla","babyrose","bamboo","banana","bankcress","baobab","bay","baylaurel","bean","bearberry","bearcorn","beech","bermudacress","bindweed","birch","birdsnest","bittercress","bittersweet","bitterweed","blackalder","blackash","blackberry","blackbirch","blackcap","blackcherry","blackhaw","blackiehead","blackmaple","blackoak","blackraspberry","blackweed","blueash","blueberry","blueoak","boleanbirch","bowwood","box","boxelder","boxwood","brier","brittlebush","broadleaf","brownbetty","buckeye","buffaloweed","bulbouscress","bullnettle","buroak","butterflyweed","cabbage","caneash","canoebirch","carrot","carrotweed","championoak","cherry","cherrybirch","chestnut","chiggerflower","christmasfern","chrysanthemum","cinnamon","clove","clover","clumpfoot","coakum","coastliveoak","coconut","coffeeplant","colicweed","collard","colwort","commonalder","coneflower","corkoak","cornel","cornelian","cornsowthistle","cornthistle","corydalis","cottonplant","creekmaple","cress","crowfoot","crowsnest","crowstoes","cucumber","cursedthistle","cutleafmaple","daisy","damerocket","deadlynightshade","deadnettle","devilsbite","devilsnose","devilsplague","dewberry","dindle","dogwood","drumstick","duckretten","duscle","dyeleaves","dyersoak","earthgall","eucalyptus","eytelia","falsealder","falsebox","fellenwort","felonwood","felonwort","fennel","ferns","feverbush","feverfew","fig","flax","fluxroot","fumewort","gallberry","garget","garlic","garlicmustard","garlicroot","gilliflower","goldenbuttons","goldengarlic","goldenglow","goosetongue","gordaldo","grapefruit","grapevine","grayalder","graybirch","greenash","greenthistle","groundberry","gutweed","haldi","hardthistle","haresthistle","harlequin","hayfever","healingblade","hedgeplant","hellebore","hemp","hempdogbane","henplant","hogweed","holly","honeymesquite","horsecane","horsenettle","houndsberry","houseleek","huckleberry","indianhemp","indianposy","inkberry","inkberryholly","ironwood","islandoak","itchweed","ivy","jackinthebush","jalap","judastree","juneberry","juniper","keek","kinnikinnik","kousa","kudzu","laceflower","lambscress","lambsfoot","landcress","lavender","leek","lemon","lettuce","lilac","lilyleek","lovevine","lowrose","mahoganybirch","maize","mango","maple","mapleash","mapleash","meadowholly","mesquite","milfoil","milkthistle","milkweed","milkytassel","mirbeckoak","moosemaple","moosewood","morel","mosquitofern","mulberry","neem","nettle","nightshade","noddingthistle","northernoak","nosebleed","oak","olive","onion","orangeroot","osage","osageapple","paperbirch","parsley","parsnip","pea","peach","peanut","pear","pellitory","pennyhedge","pepperroot","perennialthistle","pigeonberry","pine","pineapple","pinoak","pistachio","plane","plantain","pleurisyroot","poisonberry","poisonflower","poisonivy","poke","pokeroot","pokeweed","polecatweed","polkweed","poplar","poppy","possumhaw","potato","prairierose","pricklythistle","pudina","purpleraspberry","quercitron","radicalweed","ragweed","ragwort","ramblerrose","rantipole","rapeseed","raspberry","redash","redbirch","redbrush","redbud","redmulberry","redoak","redweed","rheumatismroot","rhubarb","ribwort","rice","riverash","riverbirch","rivermaple","roadweed","rocket","rocketcress","rose","rosemary","rumcherry","rye","sandbrier","sanguinary","saskatoon","scarletberry","scoke","scotchcap","scruboak","scurvycress","scurvygrass","serviceberry","shadblow","shadbush","silkweed","silverbirch","silvermaple","skunkcabbage","skunkweed","snakeberry","sneezeweed","sneezewort","snowdrop","softmaple","sorrel","sowthistle","spanishoak","speckledalder","speedwell","spicebirch","spoolwood","spottedoak","springcress","squawbush","stagbush","stammerwort","stickweed","strawberry","stripedalder","stripedmaple","sugarcane","sugarmaple","sugarplum","summerlilac","sunflower","swallowwort","swallowwort","swampash","swampcabbage","swampholly","swampmaple","swampoak","swampsilkweed","sweetbirch","sweetpotato","sweetrocket","swinethistle","swinies","swordferns","sycamore","tansy","tasselweed","tea","thimbleberry","thimbleweed","thistle","thousandleaf","thousandseal","thyme","tickleweed","tobaccoplant","tomato","toothwort","touchmenot","treadsoftly","treeonion","trillium","tuberroot","tulip","tulsi","uplandcress","valleyoak","vanillaorchid","viburnum","violet","violetbloom","virginbower","wakerobin","walnut","waterash","waterbirch","waterfern","watermaple","waybread","waythistle","weepingbirch","weepingbirch","wheat","whitealder","whiteash","whitebirch","whitebirch","whitemaple","whitemulberry","whiteoak","whiteroot","whitetansy","wildblackcherry","wildcherry","wildcotton","wildgarlic","wildhops","wildrose","wildtansy","willow","windroot","wineberry","winterberry","wintercress","winterrocket","woodbine","woodynightshade","wormwood","woundrocket","woundwort","yam","yarrow","yellowbirch","yellowdaisy","yellowfumewort","yellowrocket","yellowwood","zedoary"];
TrainingDatas.pokemon = ["abra","aerodactyl","alakazam","arbok","arcanine","articuno","beedrill","bellsprout","blastoise","bulbasaur","butterfree","caterpie","chansey","charizard","charmander","charmeleon","clefable","clefairy","cloyster","cubone","dewgong","diglett","ditto","dodrio","doduo","dragonair","dragonite","dratini","drowzee","dugtrio","eevee","ekans","electabuzz","electrode","exeggcute","exeggutor","farfetchd","fearow","flareon","gastly","gengar","geodude","gloom","golbat","goldeen","golduck","golem","graveler","grimer","growlithe","gyarados","haunter","hitmonchan","hitmonlee","horsea","hypno","ivysaur","jigglypuff","jolteon","jynx","kabuto","kabutops","kadabra","kakuna","kangaskhan","kingler","koffing","krabby","lapras","lickitung","machamp","machoke","machop","magikarp","magmar","magnemite","magneton","mankey","marowak","meowth","metapod","mew","mewtwo","mime","moltres","muk","nidoking","nidoqueen","nidoran","nidoran","nidorina","nidorino","ninetales","oddish","omanyte","omastar","onix","paras","parasect","persian","pidgeot","pidgeotto","pidgey","pikachu","pinsir","poliwag","poliwhirl","poliwrath","ponyta","porygon","primeape","psyduck","raichu","rapidash","raticate","rattata","rhydon","rhyhorn","sandshrew","sandslash","scyther","seadra","seaking","seel","shellder","slowbro","slowpoke","snorlax","spearow","squirtle","starmie","staryu","tangela","tauros","tentacool","tentacruel","vaporeon","venomoth","venonat","venusaur","victreebel","vileplume","voltorb","vulpix","wartortle","weedle","weepinbell","weezing","wigglytuff","zapdos","zubat"];
TrainingDatas.pokemon_modern = ["abomasnow","abra","absol","accelgor","aegislash","aerodactyl","aggron","aipom","alakazam","alomomola","altaria","amaura","ambipom","amoonguss","ampharos","anorith","arbok","arcanine","arceus","archen","archeops","ariados","armaldo","aromatisse","aron","articuno","audino","aurorus","avalugg","axew","azelf","azumarill","azurill","bagon","baltoy","banette","barbaracle","barboach","basculin","bastiodon","bayleef","beartic","beautifly","beedrill","beheeyem","beldum","bellossom","bellsprout","bergmite","bewear","bibarel","bidoof","binacle","bisharp","blastoise","blaziken","blissey","blitzle","boldore","bonsly","bouffalant","braixen","braviary","breloom","bronzong","bronzor","bruxish","budew","buizel","bulbasaur","buneary","bunnelby","burmy","butterfree","cacnea","cacturne","camerupt","carbink","carnivine","carracosta","carvanha","cascoon","castform","caterpie","celebi","chandelure","chansey","charizard","charjabug","charmander","charmeleon","chatot","cherrim","cherubi","chesnaught","chespin","chikorita","chimchar","chimecho","chinchou","chingling","cinccino","clamperl","clauncher","clawitzer","claydol","clefable","clefairy","cleffa","cloyster","cobalion","cofagrigus","combee","combusken","conkeldurr","corphish","corsola","cottonee","cradily","cranidos","crawdaunt","cresselia","croagunk","crobat","croconaw","crustle","cryogonal","cubchoo","cubone","cutiefly","cyndaquil","darkrai","darmanitan","darumaka","dedenne","deerling","deino","delcatty","delibird","delphox","deoxys","dewgong","dewott","dialga","diancie","diggersby","diglett","ditto","dodrio","doduo","donphan","doublade","dragalge","dragonair","dragonite","drampa","drapion","dratini","drifblim","drifloon","drilbur","drowzee","druddigon","ducklett","dugtrio","dunsparce","duosion","durant","dusclops","dusknoir","duskull","dustox","dwebble","eelektrik","eelektross","eevee","ekans","electabuzz","electivire","electrike","electrode","elekid","elgyem","emboar","emolga","empoleon","entei","escavalier","espeon","espurr","excadrill","exeggcute","exeggutor","exploud","farfetch'd","fearow","feebas","fennekin","feraligatr","ferroseed","ferrothorn","finneon","flaaffy","flabébé","flareon","fletchinder","fletchling","floatzel","floette","florges","flygon","foongus","forretress","fraxure","frillish","froakie","frogadier","froslass","furfrou","furret","gabite","gallade","galvantula","garbodor","garchomp","gardevoir","gastly","gastrodon","genesect","gengar","geodude","gible","gigalith","girafarig","giratina","glaceon","glalie","glameow","gligar","gliscor","gloom","gogoat","golbat","goldeen","golduck","golem","golett","golurk","goodra","goomy","gorebyss","gothita","gothitelle","gothorita","gourgeist","granbull","graveler","greninja","grimer","grotle","groudon","grovyle","growlithe","grubbin","grumpig","gulpin","gurdurr","gyarados","happiny","hariyama","haunter","hawlucha","haxorus","heatmor","heatran","heliolisk","helioptile","heracross","herdier","hippopotas","hippowdon","hitmonchan","hitmonlee","hitmontop","hooh","honchkrow","honedge","hoopa","hoothoot","hoppip","horsea","houndoom","houndour","huntail","hydreigon","hypno","igglybuff","illumise","infernape","inkay","ivysaur","jellicent","jigglypuff","jirachi","jolteon","joltik","jumpluff","jynx","kabuto","kabutops","kadabra","kakuna","kangaskhan","karrablast","kecleon","keldeo","kingdra","kingler","kirlia","klang","klefki","klink","klinklang","koffing","komala","krabby","kricketot","kricketune","krokorok","krookodile","kyogre","kyurem","lairon","lampent","landorus","lanturn","lapras","larvesta","larvitar","latias","latios","leafeon","leavanny","ledian","ledyba","lickilicky","lickitung","liepard","lileep","lilligant","lillipup","linoone","litleo","litten","litwick","lombre","lopunny","lotad","loudred","lucario","ludicolo","lugia","lumineon","lunala","lunatone","luvdisc","luxio","luxray","machamp","machoke","machop","magby","magcargo","magearna","magikarp","magmar","magmortar","magnemite","magneton","magnezone","makuhita","malamar","mamoswine","manaphy","mandibuzz","manectric","mankey","mantine","mantyke","maractus","mareep","marill","marowak","marshtomp","masquerain","mawile","medicham","meditite","meganium","meloetta","meowstic","meowth","mesprit","metagross","metang","metapod","mewtwo","mew","mienfoo","mienshao","mightyena","milotic","miltank","mimejr","mimikkyu","minccino","minun","misdreavus","mismagius","moltres","monferno","mothim","mrmime","mudkip","muk","munchlax","munna","murkrow","musharna","natu","nidoking","nidoqueen","nidoran","nidoran♂","nidorina","nidorino","nincada","ninetales","ninjask","noctowl","noibat","noivern","nosepass","numel","nuzleaf","octillery","oddish","omanyte","omastar","onix","oshawott","pachirisu","palkia","palpitoad","pancham","pangoro","panpour","pansage","pansear","paras","parasect","patrat","pawniard","pelipper","persian","petilil","phanpy","phantump","phione","pichu","pidgeot","pidgeotto","pidgey","pidove","pignite","pikachu","pikipek","piloswine","pineco","pinsir","piplup","plusle","politoed","poliwag","poliwhirl","poliwrath","ponyta","poochyena","popplio","porygon","porygon","porygonz","primeape","prinplup","probopass","psyduck","pumpkaboo","pupitar","purrloin","purugly","pyroar","quagsire","quilava","quilladin","qwilfish","raichu","raikou","ralts","rampardos","rapidash","raticate","rattata","rayquaza","regice","regigigas","regirock","registeel","relicanth","remoraid","reshiram","reuniclus","rhydon","rhyhorn","rhyperior","riolu","rockruff","roggenrola","roselia","roserade","rotom","rowlet","rufflet","sableye","salamence","salandit","samurott","sandile","sandshrew","sandslash","sawk","sawsbuck","scatterbug","sceptile","scizor","scolipede","scrafty","scraggy","scyther","seadra","seaking","sealeo","seedot","seel","seismitoad","sentret","serperior","servine","seviper","sewaddle","sharpedo","shaymin","shedinja","shelgon","shellder","shellos","shelmet","shieldon","shiftry","shinx","shroomish","shuckle","shuppet","sigilyph","silcoon","simipour","simisage","simisear","skarmory","skiddo","skiploom","skitty","skorupi","skrelp","skuntank","slaking","slakoth","sliggoo","slowbro","slowking","slowpoke","slugma","slurpuff","smeargle","smoochum","sneasel","snivy","snorlax","snorunt","snover","snubbull","solgaleo","solosis","solrock","spearow","spewpa","spheal","spinarak","spinda","spiritomb","spoink","spritzee","squirtle","stantler","staraptor","staravia","starly","starmie","staryu","steelix","stoutland","stunfisk","stunky","sudowoodo","suicune","sunflora","sunkern","surskit","swablu","swadloon","swalot","swampert","swanna","swellow","swinub","swirlix","swoobat","sylveon","taillow","talonflame","tangela","tangrowth","tapu koko","tauros","teddiursa","tentacool","tentacruel","tepig","terrakion","throh","thundurus","timburr","tirtouga","togedemaru","togekiss","togepi","togetic","torchic","torkoal","tornadus","torterra","totodile","toxicroak","tranquill","trapinch","treecko","trevenant","tropius","trubbish","turtwig","tympole","tynamo","typhlosion","tyranitar","tyrantrum","tyrogue","tyrunt","umbreon","unfezant","unown","ursaring","uxie","vanillish","vanillite","vanilluxe","vaporeon","venipede","venomoth","venonat","venusaur","vespiquen","vibrava","victini","victreebel","vigoroth","vikavolt","vileplume","virizion","vivillon","volbeat","volcanion","volcarona","voltorb","vullaby","vulpix","wailmer","wailord","walrein","wartortle","watchog","weavile","weedle","weepinbell","weezing","whimsicott","whirlipede","whiscash","whismur","wigglytuff","wingull","wobbuffet","woobat","wooper","wormadam","wurmple","wynaut","xatu","xerneas","yamask","yanma","yanmega","yungoos","yveltal","zangoose","zapdos","zebstrika","zekrom","zigzagoon","zoroark","zorua","zubat","zweilous","zygarde"];
TrainingDatas.roman_deities = ["abeona","abudantia","adeona","aequitas","aera","aeternitas","africus","alemonia","angerona","angita","anna","antevorte","aphrodite","apollo","aquilo","ares","artemis","asclepius","athena","attis","aurora","auster","bacchus","bellona","bona","bubona","camenaees","candelifera","cardea","carmenta","carnea","ceres","cinxia","clementia","cloacina","coelus","concordia","conditor","consus","convector","copia","corus","cunina","cupid","cybele","dea","dea","decima","demeter","devera","deverra","dia","diana","dis","disciplina","discordia","dius","egestes","empanda","endovelicus","eventus","fabulinus","fama","fauna","faunus","faunus","faustitas","favonius","febris","felicitas","feronia","fides","flora","fontus","fornax","fortuna","fulgora","furies","furina","hephaestus","hera","hercules","hermes","hestia","honos","indivia","isis","janus","juno","jupiter","juturna","juventas","lactans","lares","laverna","liber","libera","liberalitas","libertas","libitina","lima","lucifer","lucina","luna","maia","maiesta","manes","mania","mars","matuta","meditrina","mefitas","mellona","mena","menrva","mens","mercury","messor","minerva","mithras","moneta","mors","morta","muta","mutinus","naenia","necessitas","nemestrinus","neptune","nona","nox","nundina","obarator","occator","ops","orbona","orcus","pales","parcaes","pax","penates","picus","pietas","poena","pomona","portunes","porus","poseidon","postverta","potina","priapus","prorsa","providentia","pudicitia","puta","quirinus","quiritis","robigo","robigus","roma","rumina","salus","sancus","saritor","saturn","securitas","semonia","serapis","silvanus","sol","sol","somnus","sors","spes","stata","stimula","strenua","suadela","subrincinator","summanus","tellus","tempestes","terminus","terra","trivia","vacuna","veiovis","venus","veritas","vertumnus","vesta","victoria","viduus","viriplacaa","virtus","vitumnus","volturnus","volumna","vulcan","vulturnus","zeus"];
TrainingDatas.roman_emperor_forenames = ["aemilian","alexander","alexios","anastasios","anastasius","andronikos","anthemius","antoninus","arcadius","artabasdos","augustus","aurelian","avitus","balbinus","basil","basiliscus","caligula","caracalla","carinus","carus","claudius","claudius","commodus","constans","constans","constantine","constantius","constantius","didius","diocletian","domitian","elagabalus","florian","galba","galerius","gallienus","geta","glycerius","gordian","gordian","gratian","hadrian","heraclius","heraklonas","honorius","hostilian","irene","isaac","joannes","john","jovian","julian","julius","justin","justinian","leo","leontios","libius","licinius","lucius","macrinus","magnus","majorian","manuel","marcian","marcus","maurice","maxentius","maximian","maximinus","michael","nero","nerva","nikephoros","numerian","olybrius","otho","pertinax","petronius","philippikos","phocas","probus","pupienus","quintillus","romanos","romulus","septimius","severus","staurakios","tacitus","theodora","theodosios","theodosius","theodosius","theophilos","tiberius","tiberius","titus","trajan","trebonianus","valens","valentinian","valerian","vespasian","vetranio","vitellius","zeno","zoe"];
TrainingDatas.russian_forenames = ["aaron","abagor","abamon","abataly","abdaikl","abdullah","abel","abelyar","abid","abijah","abily","abnody","abo","abram","aburom","adrian","afanasy","agafa","agafangel","agafiya","agafodor","agafokliya","agafon","agafonik","agafonika","agap","agapa","agapion","agapit","agapiya","agapy","agat","agatha","agav","agavva","albert","alexey","alla","alya","amvrosy","anastasia","anatoly","andrey","angelika","anna","anton","anya","arina","artemy","artyom","aurora","avda","avdakt","avdelay","avdey","avdifaks","avdiky","avdiyes","avdon","avdotya","avel","avelina","avenir","avenira","aventin","aventina","averky","avessalom","avgar","avgury","avgust","avgusta","avgustin","avgustina","aviafa","avian","avim","avimelekh","avip","avit","aviv","aviva","avksenty","avksily","avksivy","avkt","avlida","avram","avrelian","avreliya","avrely","avrey","avreya","avros","avsey","avtonom","avtonoma","avudim","avundy","avva","avvakir","avvakum","bogdan","boris","borislav","boyan","branislav","damir","danica","daniel","daniil","danilo","daria","dario","darko","david","diana","dmitry","ekaterina","elena","elina","galenka","galina","gennadiya","gennady","genrikh","georgy","gerasim","gniewomir","grigory","grischa","igor","ilarion","ilya","inal","inna","irina","ivan","jaroslav","joseph","katja","katya","kira","kirill","konstantin","konstantine","lada","lana","lena","leonid","liběna","ljuba","lubomir","ludmila","ludomir","lukyan","lyubov","magdalena","margarita","maria","marta","masha","maxim","mikhail","milan","milena","milica","milorad","mira","miroslav","mstislav","nadezhda","nadia","nail","nastja","natacha","natalia","natasha","nicholas","nicole","nikita","nina","nonna","odette","oksana","oleg","olga","osip","ossip","panteley","pavel","pavsikakiy","petya","piotr","polina","pyotr","rachel","radmila","radomir","radoslav","radul","raisa","rasim","ratimir","robert","roman","rostislav","ruslan","rustem","sambor","snežana","sobieslaw","sonia","sophia","stanimir","stanislav","stanislava","stefania","svetlana","svetoslav","sviatoslav","tamara","tanya","tatiana","timofey","timur","tonya","vadim","valentina","valeria","valery","vanya","vasilisa","velimir","veniamin","vera","viacheslav","viktor","viktoriya","vitomir","vlada","vladan","vladimir","vladislav","volodymyr","vsevolod","yakov","yefim","yegor","yekaterina","yelena","yermolay","yulia","yury","zenaida","zinoviy","zinovy","zora","zoran","zoya"];
TrainingDatas.satellites_natural = ["adrastea","aegaeon","aegir","aitne","albiorix","amalthea","ananke","anthe","aoede","arche","ariel","atlas","autonoe","bebhionn","belinda","bergelmir","bestla","bianca","caliban","callirrhoe","callisto","calypso","carme","carpo","ceres","chaldene","cordelia","cressida","cupid","cyllene","daphnis","deimos","desdemona","despina","dia","dione","dysnomia","earth","elara","enceladus","erinome","eris","erriapus","euanthe","eukelade","euporie","europa","eurydome","farbauti","fenrir","ferdinand","fornjot","francisco","galatea","ganymede","greip","halimede","harpalyke","hati","haumea","hegemone","helene","helike","hermippe","herse","himalia","hyperion","hyrrokkin","iapetus","ijiraq","io","iocaste","isonoe","janus","jarnsaxa","juliet","jupiter","kale","kallichore","kalyke","kari","kerberos","kiviuq","kore","laomedeia","larissa","leda","loge","lysithea","mab","margaret","mars","megaclite","mercury","methone","metis","mimas","miranda","mneme","mundilfari","naiad","namaka","narvi","neptune","nereid","neso","oberon","ophelia","orthosie","paaliaq","pallene","pan","pandora","pasiphae","pasithee","perdita","phobos","phoebe","pluto","polydeuces","portia","praxidike","prometheus","prospero","proteus","psamathe","puck","rhea","rosalind","sao","saturn","setebos","siarnaq","sinope","skathi","skoll","sponde","stephano","styx","surtur","suttungr","sycorax","tarqeq","tarvos","taygete","telesto","tethys","thalassa","thebe","thelxinoe","themisto","thrymr","thyone","titan","titania","trinculo","triton","umbriel","uranus","venus","xi","ymir"];
TrainingDatas.scottish_surnames = ["aileanach","ailpeanach","allanach","ambarsan","andarsan","anndrasdan","arasgain","baran","barrach","beitean","bhodhsa","bhàsa","blacach","blàr","blàrach","bochanan","boid","breac","breathnach","brothaigh","bruis","brus","bràigheach","brùn","buideach","buidheach","buids","buiseid","bànach","bòideach","cailbhin","caileanach","caimbeul","caimbeulach","camran","camshron","camshronach","cananach","canonach","caoidheach","caolaisdean","catach","catan","catanach","ceallach","ceanadach","ceannaideach","cearrach","ceiteach","ciar","ciarach","ciogach","coineagan","crannach","creag","criatharach","cuimeanach","cuimein","cuimeineach","càidh","cèamp","cèampach","còmhan","dalais","deòir","deòireach","druimeanach","druimein","druimeineach","druiminn","dubh","dubhach","dunaid","dunaidh","dòmhnallach","dùbhghlas","dùghallach","dùghlas","dùghlasach","eabarcrombaigh","fearghasdan","fionnlasdan","flimean","foirbeis","foirbeiseach","forsàidh","friseal","frisealach","fòlais","gall","gallach","geadais","geadasach","gearailteach","gilios","gillandrais","gilleasbaig","gilleasbuig","gillechriosd","gillechrìost","giobsan","glas","gobha","grannd","grannda","granndach","greum","greumach","griogal","griogalach","griogarach","guaire","guinne","gunnach","gutraidh","gòrdan","gòrdanach","latharnach","lathurna","leamhanach","leamhnach","leòideach","lobhdain","loganach","loudain","lìos","lìosach","lùtair","macabhra","macabhsalain","macadaidh","macadhaimh","macaididh","macailein","macailpein","macalasdair","macambrais","macamhalghaidh","macamhlaidh","macamhlaigh","macanndaidh","macanndra","macanndrais","macaodhagain","macaoidh","macaoidhein","macaomalain","macaonghais","macara","macartain","macartair","macasgaidh","macasgaill","macasgain","macbeatha","macbeathag","macbharrais","macbheatha","macbheathaig","macbheathain","macbhigein","macbhiocair","macbhlàthain","macbhradain","macbhraonaigh","macbhrìghdeinn","macbhàididh","macbhàtair","maccaibe","maccailein","maccain","maccaisgein","maccalmain","maccaluim","maccaog","maccaoig","maccardaidh","maccarmaig","maccathachaidh","maccathail","maccathain","maccathasaigh","maccathbhaidh","maccathbharra","macceallaig","macceallaigh","macceallair","maccearnaigh","maccearraich","macceasain","macchoinnich","maccianain","macciarain","maccinidh","macciomalain","maccionadha","macclambroch","maccnaimhin","maccnusachainn","maccodrum","maccoinnich","maccoinnigh","maccolla","maccomhainn","macconaill","macconnain","maccorcadail","maccormaig","maccosgraigh","maccrain","maccreamhain","maccriomain","maccrithein","maccrosain","maccruimein","maccrìsdein","maccròin","maccuaig","maccuidhein","maccuilcein","maccuinn","maccuinnleis","maccuirc","maccuithein","maccullach","maccullaich","maccumasgaigh","maccumhais","maccuthais","maccàba","maccòiseam","maccòmhain","maccòmhghan","maccùga","macdheòrsa","macdhiarmaid","macdhonnchaidh","macdhrostain","macdhubhaich","macdhubhaig","macdhubhshìth","macdhubhthaich","macdhuibh","macdhunlèibhe","macdhàibhidh","macdhòmhnaill","macdhùghaill","macdhùnshléibhe","macdiarmaid","maceachaidh","maceachainn","maceachairn","maceacharna","macealair","macealar","maceamailinn","maceanain","maceanraig","maceòghainn","macfhearchair","macfhearghail","macfhearghais","macfhilib","macfhiongain","macfhionghain","macfhionnlaigh","macfhitheachain","macfhlaithbheartaich","macfhraing","macfhraingein","macfigeinn","macfrìdeinn","macfuirigh","macgairbheith","macgaradh","macghearailt","macghille","macgille","macgilleain","macgillearnain","macgilleasbaig","macgilleathain","macgillebhreac","macgillebhràth","macgillebhrìghde","macgillebhàin","macgillechaluim","macgillechrìosd","macgilledhonaghart","macgilledhuibh","macgillefhialain","macgilleghlais","macgillemhartainn","macgilleriabhaich","macgilleseathanaich","macgilleòin","macgillfhaolagain","macgillfhiontag","macgilliosa","macgilloig","macgillonaidh","macgiobain","macglaisein","macgobhainn","macgoraidh","macgoraidh","macgriogair","macguaire","macgumaraid","maciain","macillanndrais","macillanndrais","macillaodhagain","macilldheòra","macille","macillearnain","macilleasbaig","macilleathain","macilleathainn","macillebheathain","macillebhlàthain","macillebhreac","macillebhris","macillebhràth","macillebhrìghde","macillebhuidh","macillebhuidhe","macillebhàin","macillebhàin","macillechaluim","macillechatain","macillechathbhaidh","macillechiar","macillechiar","macillechiarain","macillechomhghain","macillechonaill","macillechruim","macillechrìosd","macilledhonaghart","macilledhubhthaich","macilledhuibh","macilledhuibh","macilledhuinn","macilledhòmhnaich","macilleghlais","macilleghuinnein","macilleghuirm","macillemhaoil","macillemhearnaig","macillemhoire","macillemhàrtainn","macillemhìcheil","macillemhìcheil","macillemhòire","macillenaoimh","macillenaoimh","macillepheadair","macillephàdraig","macilleriabhaich","macilleriabhaich","macilleruaidh","macilleruaidh","macillesheathain","macillesheathanaich","macillesheathnaich","macillethòmhais","macilleòin","macillfhaolagain","macillfhaolain","macillfheargain","macillfhialain","macillfhinnein","macillfhinnein","macillfhinntain","macillfhionndaig","macillfhionndaig","macillfhionndain","macillianain","macilliomchadha","macilliosa","macilloig","macillonchon","macillonfhaidh","macillosa","macilluidhir","macilléidich","macillìmheir","macillìosa","maciomhair","macionmhainn","maciosaig","maclabhrainn","maclabhruinn","maclachlainn","maclagain","maclamraich","maclaomainn","maclathagain","macleòid","macleòir","maclianain","macliuthar","maclothaidh","maclughaidh","macluinge","macluirg","maclulaich","maclùcaidh","maclùcais","macmhaighstir","macmhanachain","macmhannain","macmhaoilein","macmhaoirn","macmhaolagain","macmhaolain","macmhaolbheatha","macmhaolchaluim","macmhaoldòmhnaich","macmhaolìosa","macmharais","macmharcais","macmhata","macmhatha","macmhathain","macmhiadhchain","macmhoirein","macmhorgain","macmhuircheartaich","macmhuirich","macmhunna","macmhurardaich","macmhurchaidh","macmhànais","macmhàrtainn","macmhèinn","macmhìcheil","macmhòrdha","macnaois","macnaomhain","macneacail","macneachdain","macneis","macnia","macniallghais","macniallghuis","macniocail","macnobaill","macnèill","macnìll","macphaid","macphaidein","macphail","macphairce","macpheadair","macpheadarain","macpheadrais","macpheidearain","macphilip","macphàdraig","macphàic","macphàidein","macphàil","macphàrlain","macphòil","macrabaidh","macraghnaill","macraibeirt","macraoimhin","macraoiridh","macraonaill","macrath","macriada","macriocaird","macrisnidh","macrob","macrobaidh","macroibeirt","macroithridh","macruairidh","macrusachainn","macràild","macrìdeinn","macrìgh","macshanndaidh","macshealbhaigh","macsheòrais","macsheòrsa","macshimidh","macshithich","macshitrig","macshomhairle","macshuibhne","macshìm","macsiridh","macsporain","macsuain","macsual","macthaidhg","mactheàrlaich","macthom","macthomaidh","macthorcadail","macthorcaill","macthàmhais","macthòmais","mactiridh","mactuirc","macualraig","macuaraig","macuchtraigh","macuilleim","macuirigh","macuirigh","macuisdein","macurardaidh","macurardaigh","macurchadain","macurchaidh","macusbaig","macàidh","macùisdein","maoileanach","maoliosa","matasan","mathanach","matharnach","mawr","moireach","moireasdan","moireasdanach","morgan","morganach","munna","màrnach","màrr","màrtainn","mèinn","mèinnearach","niocalsan","padarsan","paorach","peadarsan","peucag","peutan","preas","puidreach","rathais","robasan","robasdan","roid","roideach","ros","rosach","rothach","ruadh","ruiseal","ròs","ròsach","sailcirc","salmond","scottish","scottish","seadh","seadhg","seagha","seaghach","seathanach","sginnearach","sgot","sgèin","singleir","siosal","siosalach","smios","stiùbhart","stiùbhartach","sutharlainn","sutharlan","suthurlanach","sùdrach","talmhach","tod","todt","tolmach","tuairnear","tulach","tàileach","tàillear","ualas","umphraidh","urchadainn","urchardan","ìomharach"];
TrainingDatas.sports = ["abseiling","aerobatics","aikido","air acing","airsoft","angling","archery","autocross","autograss","axethrowing","backpacking","backstroke","badminton","bagatelle","balancebeam","ball","ballooning","bando","bandy","bangerracing","barbilliards","barrelracing","bartitsu","baseball","basejumping","basketball","batontwirling","beachsoccer","beachtennis","beachvolleyball","beagling","billiards","biribol","blackball","bobsleigh","bodyboarding","bodybuilding","bottlepool","bouldering","bowlliards","boxing","breaststroke","broomball","bucketball","bullriding","bushwhacking","campdrafting","canoeing","canyoneering","cardstacking","casterboarding","casting","catchwrestling","coastalrowing","coasteering","cockfighting","corkball","cowboy","creeking","cribbage","cricket","crosscountry","curling","cutting","cycling","cyclocross","deerhunting","desertracing","dicestacking","dinghysailing","dirtjumping","discdog","discgolf","diving","dodgeball","dodgedisc","dragracing","drifting","eightball","fastnet","fencing","figureskating","fistball","fivepins","fives","floor","floorball","flutterguts","flyfishing","flyingtrapeze","folkrace","folkwrestling","football","footvolley","formularacing","foxhunting","freeboarding","freeboating","freediving","freerunning","freestyle","geocaching","gigracing","gliding","goalball","grasstrack","greekwrestling","gymnastics","handball","handball","hanggliding","harecoursing","harnessracing","highbar","hiking","hillclimbing","hockey","hoop","hooverball","horseracing","iceclimbing","icefishing","icehockey","iceracing","icespeedway","iceyachting","jousting","judo","juggling","jujutsu","karate","kartracing","kendo","kenjutsu","kickball","kickboxing","kilikiti","kiteboarding","kitebuggying","kitefighting","kitelandboarding","kitesurfing","kneeboarding","kungfu","lacrosse","landsailing","lasertag","letterboxing","longball","longboarding","luge","matball","matchplay","medleyrelay","miniaturegolf","motocross","mountainboarding","mountaineering","mudbogging","netball","ninjutsu","offroading","orienteering","paintball","parachuting","paragliding","paramotoring","parasailing","parkour","poleclimbing","polo","polocrosse","pool","powerlifting","punchball","racewalking","racketlon","racquetball","racquets","rafting","rallycross","rallying","reining","ribbon","ringball","ringette","ringo","riverboarding","rodeo","rope","ropeclimbing","ropejumping","roping","rundown","sailing","sandboarding","sanshou","scootering","scubadiving","seakayaking","shootboxing","shootfighting","showjumping","skateboarding","skibobbing","skijumping","skimboarding","skitouring","skydiving","skysurfing","slacklining","slamball","snooker","snooker","snorkelling","snowboarding","snowkiting","softball","softball","softtennis","spearfishing","speedball","speedgolf","speedminton","speedpool","speedskiing","squash","steeplechase","streetball","streetboarding","streetracing","sumowrestling","supercross","supermoto","surfboat","surfing","swordfighting","tennis","testcricket","throwball","tobogganing","trackcycling","trackracing","trampolining","trapeze","truckracing","ultimate","unicycling","vault","volleyball","wakeboarding","wakesurfing","walking","wallyball","waterpolo","watervolleyball","windsurfing","wireball","wrestling"];
TrainingDatas.stars_proper_names = ["acamar","achernar","achird","acrab","acrux","acubens","adhafera","adhara","ain","aladfar","alamak","alathfar","alaraph","albaldah","albali","albireo","alchiba","alcor","alcyone","aldebaran","alderamin","aldhafera","aldhibah","aldib","alfirk","algedi","algenib","algenib","algieba","algol","algorab","alhajoth","alhena","alioth","alkaid","alkalurops","alkes","alkurah","almach","alnasl","alnilam","alnitak","alniyat","alphard","alphecca","alpheratz","alrai","alrakis","alrami","alrischa","alsafi","alsciaukat","alshain","alshat","altair","altais","altarf","alterf","aludra","alwaid","alya","alzir","ancha","angetenar","ankaa","antares","arcturus","arich","arided","arkab","armus","arneb","arrakis","ascella","asellus","ashlesha","askella","aspidiske","asterion","asterope","atik","atlas","atria","auva","avior","azaleh","azelfafage","azha","azimech","azmidiske","baham","baten","becrux","beid","bellatrix","benetnasch","betelgeuse","botein","brachium","canopus","capella","caph","caphir","castor","castula","celbalrai","celaeno","chara","chara","cheleb","chertan","coxa","caiam","cursa","cynosura","dabih","decrux","deneb","denebola","dheneb","diadem","diphda","dnoces","dschubba","dubhe","duhr","edasich","electra","elmuthalleth","elnath","eltanin","enif","errai","etamin","fomalhaut","furud","gacrux","gatria","gemma","gianfar","giedi","giennah","girtab","gomeisa","gorgonea","graffias","grafias","grassias","grumium","hadar","hadir","haedus","haldus","hamal","hassaleh","hydrus","heka","heze","hoedus","homam","hyadum","hydrobius","izar","jabbah","jih","kabdhilinan","kaffaljidhma","kajam","kastra","keid","kitalpha","kleeia","kochab","kornephoros","kraz","ksora","kuma","lesath","maasym","mahasim","maia","marfark","marfik","markab","matar","mebsuta","media","megrez","meissa","mekbuda","menchib","menkab","menkalinan","menkar","menkent","menkib","merak","merga","merope","mesarthim","miaplacidus","mimosa","minchir","minelava","minkar","mintaka","mira","mirach","miram","mirfak","mirzam","misam","mizar","mothallah","muliphein","muphrid","murzim","naos","nash","nashira","navi","nekkar","nembus","neshmet","nihal","nunki","nusakan","okul","peacock","phact","phad","pherkad","pherkard","pleione","pollux","porrima","praecipua","procyon","propus","proximacentauri","pulcherrim","rana","rasalas","rastaban","regor","regulus","rigel","rotanev","ruchba","ruchbah","rukbat","sabik","sadachbia","sadalbari","sadalmelik","sadalsuud","sadatoni","sadira","sadr","sadlamulk","saiph","saiph","salm","sargas","sarin","sceptrum","scheat","scheddi","schedar","segin","seginus","sham","shaula","sheliak","sheratan","sinistra","sirius","situla","skat","spica","sterope","sualocin","subra","suhail","suhel","sulafat","sol","syrma","tabit","tarazet","taygeta","terebellum","thabit","theemin","unukalhai","vega","vindemiatrix","wasat","wei","wezen","wezn","yildun","zaniah","zaurak","zavijava","zedaron","zelphah","zibal","zosma","zubenelgenubi","zubenelgubi","zubeneschemali","zubenhakrabi"];
TrainingDatas.swedish_forenames = ["adam","adrian","agnes","albin","alex","alexander","alfred","ali","alice","alicia","alma","alva","alvin","amanda","amelia","anna","anton","aron","arvid","astrid","august","axel","benjamin","carl","casper","celine","charlie","colin","cornelia","daniel","dante","david","ebba","ebbe","eddie","edith","edvin","edward","elias","elin","elina","elis","elisa","elise","ella","ellen","ellie","ellinor","elliot","elsa","elton","elvin","elvira","emelie","emil","emilia","emma","emmy","erik","ester","felicia","felix","filip","filippa","frank","freja","gabriel","greta","gustav","hampus","hanna","harry","hedda","henry","hilda","hilma","hjalmar","hugo","ida","ines","ingrid","iris","isabella","isabelle","isak","ivar","jack","jacob","jasmine","joel","john","joline","jonathan","josef","julia","julian","juni","kevin","klara","leah","leia","leo","leon","liam","lilly","linn","linnea","linus","lisa","liv","livia","loke","loui","lova","love","lovis","lovisa","lucas","ludvig","luna","lykke","maja","majken","malte","maria","matilda","matteo","max","maximilian","meja","melissa","melker","melvin","milo","milton","minna","mio","mira","moa","mohamed","molly","my","märta","nathalie","nellie","neo","nicole","nils","noah","noel","nora","nova","novalie","oliver","olivia","olle","oscar","otto","rasmus","ronja","rut","saga","sally","sam","samuel","sara","sebastian","selma","sigge","signe","sigrid","simon","siri","sixten","sofia","stella","stina","svante","svea","tage","thea","theo","theodor","tilda","tilde","tindra","tuva","tyra","valter","vera","victoria","vidar","viggo","viktor","vilgot","ville","vincent","wilhelm","william","wilma","wilmer"];
TrainingDatas.swiss_cities = ["aarau","aarberg","aarburg","adliswil","agno","aigle","allschwil","altdorf","altstätten","amriswil","appenzell","arbon","ascona","aubonne","avenches","baar","baden","basel","bellinzona","bern","beromünster","biasca","biel","bienne","binningen","birsfelden","bischofszell","boudry","bremgarten","brig","brugg","buchs","bulle","burgdorf","bülach","carouge","cham","chur","conthey","coppet","cossonay","croglio","cudrefin","cully","davos","delémont","diessenhofen","dietikon","dübendorf","ebikon","eglisau","einsiedeln","elgg","emmen","erlach","frauenfeld","freienbach","fribourg","geneva","gland","glarus","gordola","gossau","grandcour","grandson","greifensee","grenchen","gruyères","grüningen","herisau","hermance","horgen","horw","huttwil","ilanz","ittigen","kaiserstuhl","klingnau","kloten","kreuzlingen","kriens","köniz","küsnacht","küssnacht","lachen","lancy","langenthal","laufen","laufenburg","laupen","lausanne","lenzburg","leuk","lichtensteig","liestal","locarno","losone","lucerne","lugano","lutry","lyss","maienfeld","martigny","meilen","mellingen","mendrisio","meyrin","monthey","montreux","morcote","morges","moudon","moutier","muri","murten","muttenz","münchenstein","münsingen","neuchâtel","neuhausen","neunkirch","nidau","nyon","oftringen","olten","onex","opfikon","orbe","orsières","ostermundigen","payerne","porrentruy","pratteln","prilly","pully","regensberg","regensdorf","reinach","renens","rheinau","rheineck","rheinfelden","richterswil","riehen","rolle","romainmôtier","romont","rorschach","rue","rüti","saillon","sala","sargans","sarnen","schaffhausen","schlieren","schwyz","sembrancher","sempach","sierre","sion","solothurn","spiez2","splügen","spreitenbach","stans","steckborn","steffisburg","stäfa","sursee","thalwil","thun","thusis","thônex","unterseen","uster","uznach","uzwil","valangin","vernier","versoix","vevey","villeneuve","visp","volketswil","waldenburg","walenstadt","wallisellen","werdenberg","wettingen","wetzikon","wiedlisbach","wil","willisau","winterthur","wohlen","worb","wädenswil","zofingen","zollikon","zug","zurich","zurzach","échallens"];
TrainingDatas.theological_angels = ["abaddon","abathar","adriel","ahriman","ambriel","amesha","anael","angel","arariel","archangel","ariel","azazel","azrael","barachiel","bene","camael","cassiel","cherub","cherubim","daniel","dardail","dominions","dumah","eremiel","gabriel","gadreel","grigori","hadraniel","hahasiah","hamalat","haniel","harut","hashmal","hesediel","imamiah","israfil","jegudiel","jehoel","jequn","jerahmeel","jophiel","kerubiel","kiraman","kushiel","leliel","lucifer","maalik","marut","mebahiah","metatron","michael","muaqqibat","munkar","muriel","nakir","nanael","netzach","nithael","nuriel","pahaliah","penemue","phanuel","powers","poyel","principalities","puriel","qaphsiel","raguel","raphael","raziel","remiel","sachiel","samael","sandalphon","sariel","schemhampharae","selaphiel","seraph","seraphiel","seraphim","shamsiel","simiel","temeluchus","tennin","thrones","tzaphqiel","uriel","uzziel","vehuel","virtues","wormwood","zachariel","zadkiel","zaphkiel","zephon","zophiel"];
TrainingDatas.theological_demons = ["abaddon","abezethibou","abraxas","abyzou","adramelech","aeshma","agaliarept","agares","agiel","agrat","ahriman","aim","aka","ala","alal","alastor","allocer","alloces","allu","amaymon","amdusias","amy","anamalech","ancitif","andhaka","andras","andrealphus","andromalius","angra","antichrist","anzu","apollyon","archon","armaros","arunasura","asag","asakku","asbel","asmodai","asmodeus","astaroth","asura","azazel","azi","baal","babi","bael","bakasura","balam","balberith","bali","banshee","baphomet","barbas","barbatos","barong","bathin","bathym","beelzebub","behemoth","beherit","beleth","belial","belphegor","berith","bhūta","bifrons","boruta","botis","buer","bukavac","bune","bushyasta","caacrinolaas","caassimolar","cain","canio","cerbere","charun","chax","chemosh","choronzon","cimeies","cimejes","classyalabolas","corson","crocell","culsu","daeva","dagon","dajjal","danjal","dantalion","davy","decarabia","demiurge","demogorgon","devil","drekavac","dzoavits","eblis","eisheth","eligos","flauros","flavros","focalor","foraii","foras","forcas","forcas","forneus","furcas","furfur","gaap","gaderel","gaki","gamigin","ghoul","glasya","gomory","gorgon","gremory","grigori","gualichu","guayota","gusion","gusoin","gusoyn","haagenti","haborym","halphas","hantu","hauras","haures","havres","ifrit","incubus","ipes","ipos","jikininki","jinn","kabandha","kabhanda","kali","kasadya","killakee","kimaris","kokabiel","krampus","kroni","kumbhakarna","lechies","legion","lempo","leraie","leraje","leviathan","leyak","lili","lilim","lilin","lilith","lucifer","lucifuge","malaphar","malephar","malphas","malthus","mammon","mara","marax","marchosias","maricha","marthim","masih","mastema","mathim","mephistopheles","merihem","moloch","morax","morpheus","murmur","naamah","naberius","naberus","namtar","ninurta","onoskelis","orcus","orias","oriax","ornias","orobas","ose","paimon","pazuzu","pelesit","penemue","phenex","pithius","pocong","pontianak","procell","pruflas","puloman","rahab","rakshasa","rangda","raum","ravan","ronove","rusalka","sabnock","saleos","samael","satan","seir","semyaz","shax","shedim","sitri","solas","sthenno","stolas","suanggi","succubus","surgat","tannin","toyol","tuchulcha","ukobach","valac","valefar","vanth","vapula","vassago","vepar","vine","wendigo","xaphan","xezbeth","yeqon","yeterel","zagan","zepar","ziminiar","ördög"];
TrainingDatas.tolkienesque_forenames = ["abattârik","adalgrim","adanedhel","adanel","adrahil","adûnakhôr","aegnor","aerin","agarwaen","aikanáro","aiwendil","alatar","alatáriel","alcarin","aldamir","aldarion","aldaron","aldor","alfwine","amandil","amandil","amdír","amlaith","amras","amrod","amroth","amrothos","anairë","anardil","anborn","ancalagon","ancalimon","ancalimë","andrast","andreth","andróg","anducal","anfauglir","angbor","angrod","annatar","anárion","arador","araglas","aragorn","aragost","arahad","arahael","aranarth","arantar","aranuir","araphant","araphor","arassuil","aratan","aratar","arathorn","araval","aravir","aravorn","aredhel","argeleb","argon","argonui","arien","aros","arthedain","arthedain","arvedui","arvegil","arveleg","arwen","asfaloth","atanamir","atanatar","aulë","ausir","avranc","azaghâl","azog","baldor","balin","baragund","barahir","barahir","baran","bard","barliman","bauglir","belecthor","beleg","belegorn","belegund","belemir","belladonna","beorn","bereg","beregond","beren","bergil","bert","berylla","berúthiel","berúthiel","bifur","bofur","boldog","bolg","bolger","bombadil","bombur","borin","boromir","boron","borondir","brand","brandir","brego","bregolas","bregor","brodda","brytta","bucca","bëor","bór","calembel","calimehtar","calion","calmacil","calmacil","caranthir","carcharoth","castamir","celeborn","celebrimbor","celebrindor","celebrían","celegorm","celepharn","cemendur","ceorl","cirion","ciryaher","ciryandil","ciryatan","ciryon","cotton","curufin","curunír","círdan","daeron","denethor","dernhelm","deórwine","dior","dori","dorlas","draugluin","duilin","durin","dwalin","dáin","déagol","déor","dís","ecthelion","egalmoth","eilinel","elanor","elbereth","eldacar","eldarion","elemmakil","elendil","elendor","elendur","elenna","elenwë","elessar","elfhelm","elfhild","elfwine","elladan","elmar","elmo","elrohir","elrond","elros","elu","elven","elwing","elwë","emeldir","emerië","enel","enelyë","eorl","eradan","erendis","erestor","erkenbrand","estel","estelmo","estë","eärendil","eärendur","eärnil","eärnur","eärwen","eöl","eönwë","falassion","faniel","faramir","fastred","felaróf","fengel","ferumbras","finarfin","findis","finduilas","finduilas","fingolfin","fingon","finrod","finvain","finwë","folcwine","fortinbras","freca","frerin","fréa","fréaláf","fréawine","frór","fuinur","fundin","fëanor","fíli","fíriel","galador","galadriel","galdor","gamil","gamling","gandalf","gerontius","ghânburi","gildor","gilgalad","gilrain","gimilkhâd","gimilzôr","gimli","ginglith","girion","glanhír","glaurung","glorfindel","glóin","glóredhel","goldberry","goldwine","golfimbul","gollum","gorbag","gorlim","gormadoc","gorthaur","gothmog","gram","grimbold","grishnákh","gríma","grór","gwaihir","gwathir","gwindor","hador","halbarad","haldad","haldan","haldar","haldir","haleth","hallas","halmir","handir","hardang","hareth","helm","herion","herucalmo","herumor","herunúmen","hirgon","hiril","hostamir","huan","hundar","huor","hyarmendacil","háma","húrin","ibûn","idril","ilmarë","ilúvatar","ilúvatar","imbar","imin","iminyë","imrahil","indis","inglor","ingwë","inziladûn","inzilbêth","irimë","irmo","isildur","isilmo","isilmë","isumbras","ivriniel","khamûl","khîm","king","kíli","kúvion","lagduf","lalaith","legolas","lenwë","lindir","lobelia","lotho","lugdush","lurtz","léod","lúthien","mablung","maedhros","maeglin","maglor","magor","mahtan","maiar","malach","mallor","malvegil","manthor","manwë","marach","mauhúr","meleth","melian","meneldil","meneldur","meriadoc","minalcar","minardil","minastir","minyatur","mithrandir","morgoth","morwen","morwen","muzgash","mírielar","mírielserindë","mîm","nahar","narmacil","narvi","nerdanel","nessa","nienna","nienor","nimloth","nimrodel","nori","náin","námo","níniel","nólimon","nóm","ohtar","olwë","olórin","ondoher","ori","ornendil","orodreth","oromë","oropher","orophin","ossë","ostoher","paladin","palantir","pallando","pelendur","pengolodh","peregrin","pervinca","pharazôn","primula","radagast","rían","rómendacil","rúmil","sador","saeros","sakalthôr","salgant","salmar","saruman","sauron","scatha","shadowfax","shagrat","shelob","silmariën","singollo","siriondil","smaug","sméagol","snowmane","soronto","strider","súrion","tarannon","tarcil","tarondor","tata","tatië","telchar","telemmaitë","telemnar","telperiën","telumehtar","thengel","thingol","thorin","thorondir","thorondor","thranduil","thráin","thrór","théoden","théodred","théodwyn","tilion","tindomiel","tinúviel","tulkas","tuor","turambar","turgon","túrin","ufthak","uglúk","uinen","uldor","ulfang","ulfast","ulmo","ulwarth","umbardacil","undómiel","ungoliant","uolë","urwen","vairë","valacar","valandil","valandur","vanimeldë","varda","vardamir","vidugavia","vidumavi","vinyarion","vorondil","voronwë","voronwë","vána","walda","wormtongue","yavanna","yávien","zimraphel","zimraphel","zimrathôn","éomer","éomund","éothain","éothéod","éowyn","írildë","óin"];
TrainingDatas.websites = ["adobe","alibaba","aliexpress","amazon","amazon","apple","ask","baidu","bing","bitbucket","blogger","blogspot","bongacams","chase","craigslist","digg","diply","dropbox","ebay","facebook","flipkart","github","google","google","haosou","imgur","instagram","linkedin","microsoft","naver","netflix","nicovideo","outbrain","paypal","pinterest","pixnet","rakuten","reddit","sina","slashdot","sohu","stackoverflow","taobao","tencent","tmall","tumblr","twitter","weibo","whatsapp","wikipedia","windowslive","wordpress","xvideos","yahoo","yahoo","yandex","youtube"];
TrainingDatas.werewolf_forenames = ["accalia","adalwolf","adalwolfa","adolpha","adolphus","amaguk","amarog","amoux","amwolf","ardolf","ardwolf","audolf","bardalph","bardolf","beowulf","biryuk","bleddyn","bledig","bleidd","bodolf","botewolf","botolf","botwolf","cana","canagan","chann","chanteloup","conall","conan","cuan","dolph","dolphus","ethelwulf","eyolf","faolan","farkas","felan","fenris","freki","fridolf","friduwulf","geirolf","guadalupe","gunnolf","honiahaka","hrolf","hrolleif","ingolf","ivaylo","landga","leidolf","leloo","lobo","loup","lowell","lupe","luperca","lupo","lupu","lupus","lyall","lykaios","maccon","maengun","maheegan","mahigan","maicoh","maiyun","makoce","mingan","mohegan","nashoba","nuntis","odolf","odwolfe","olcan","onai","phelan","radolf","raff","ralph","rand","randale","randall","randi","randolph","ranulfo","raoul","raul","rendall","reule","rezso","rodolfo","rolf","rudi","rudolph","sandalio","seff","shunkaha","singarti","sirhaan","sköll","susi","tala","tasha","tate","tchono","toralu","udolf","udolph","ujku","ulf","ulfred","ulger","ullok","ulmar","ulmer","ulric","ulvelaik","uwais","varg","velvel","vilkas","vilks","vuk","vukasin","weylyn","wolfgang","wolfram","wolfrik","woolsey","wulfgar","ylva"];
Main.topicGroups = [[new Topic("American Desserts","#35203b"),new Topic("British Desserts","#cf4a30")],[new Topic("Musical Styles","#28687c"),new Topic("Musical Instruments","#0f384a")],[new Topic("Clothing","#16193b"),new Topic("Colours","#35478c")],[new Topic("Fruit","#93004f"),new Topic("Meats","#009f43"),new Topic("Breakfast Cereals","#000093")],[new Topic("Original Pokemon","#222222"),new Topic("Animals","#444444"),new Topic("Modern Pokemon","#666666")],[new Topic("American Forenames","#ff8000"),new Topic("Japanese Forenames","#cccc52"),new Topic("Tolkienesque Forenames","#129b33")],[new Topic("English Towns","#8cbeb2"),new Topic("German Towns","#f3b562"),new Topic("Japanese Cities","#aa6060")]];
Main.backgroundTappingTopic = Main.topicGroups[0][0];
nape_Config.epsilon = 1e-8;
nape_Config.fluidAngularDragFriction = 2.5;
nape_Config.fluidAngularDrag = 100;
nape_Config.fluidVacuumDrag = 0.5;
nape_Config.fluidLinearDrag = 0.5;
nape_Config.collisionSlop = 0.2;
nape_Config.collisionSlopCCD = 0.5;
nape_Config.distanceThresholdCCD = 0.05;
nape_Config.staticCCDLinearThreshold = 0.05;
nape_Config.staticCCDAngularThreshold = 0.005;
nape_Config.bulletCCDLinearThreshold = 0.125;
nape_Config.bulletCCDAngularThreshold = 0.0125;
nape_Config.dynamicSweepLinearThreshold = 17;
nape_Config.dynamicSweepAngularThreshold = 0.6;
nape_Config.angularCCDSlipScale = 0.75;
nape_Config.arbiterExpirationDelay = 6;
nape_Config.staticFrictionThreshold = 2;
nape_Config.elasticThreshold = 20;
nape_Config.sleepDelay = 60;
nape_Config.linearSleepThreshold = 0.2;
nape_Config.angularSleepThreshold = 0.4;
nape_Config.contactBiasCoef = 0.3;
nape_Config.contactStaticBiasCoef = 0.6;
nape_Config.contactContinuousBiasCoef = 0.4;
nape_Config.contactContinuousStaticBiasCoef = 0.5;
nape_Config.constraintLinearSlop = 0.1;
nape_Config.constraintAngularSlop = 1e-3;
nape_Config.illConditionedThreshold = 2e+8;
nape_constraint_Constraint.zpp_internalAlloc = false;
nape_phys_Interactor.zpp_internalAlloc = false;
nape_shape_Shape.zpp_internalAlloc = false;
zpp_$nape_ZPP_$ID._Interactor = 0;
zpp_$nape_ZPP_$ID._Constraint = 0;
zpp_$nape_ZPP_$ID._CbType = 0;
zpp_$nape_ZPP_$ID._CbSet = 0;
zpp_$nape_ZPP_$ID._Listener = 0;
zpp_$nape_callbacks_ZPP_$Callback.internal = false;
zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT = new nape_callbacks_CbType();
zpp_$nape_util_ZPP_$Flags.internal = false;
zpp_$nape_callbacks_ZPP_$Listener.internal = false;
zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.UCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_callbacks_ZPP_$InteractionListener.VCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_callbacks_ZPP_$InteractionListener.WCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
zpp_$nape_dynamics_ZPP_$Arbiter.COL = 1;
zpp_$nape_dynamics_ZPP_$Arbiter.FLUID = 4;
zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR = 2;
zpp_$nape_dynamics_ZPP_$Contact.internal = false;
zpp_$nape_geom_ZPP_$Collide.flowpoly = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
zpp_$nape_geom_ZPP_$Collide.flowsegs = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
zpp_$nape_geom_ZPP_$ConvexRayResult.internal = false;
zpp_$nape_phys_ZPP_$Body.types = (function($this) {
	var $r;
	if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	var tmp = zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
	if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	var tmp1 = zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
	if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	$r = [null,tmp,tmp1,zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC];
	return $r;
}(this));
zpp_$nape_phys_ZPP_$Material.WAKE = 1;
zpp_$nape_phys_ZPP_$Material.PROPS = 2;
zpp_$nape_phys_ZPP_$Material.ANGDRAG = 4;
zpp_$nape_phys_ZPP_$Material.ARBITERS = 8;
zpp_$nape_shape_ZPP_$Edge.internal = false;
zpp_$nape_space_ZPP_$AABBTree.tmpaabb = new zpp_$nape_geom_ZPP_$AABB();
zpp_$nape_util_ZPP_$EdgeList.internal = false;
zpp_$nape_util_ZPP_$ShapeList.internal = false;
zpp_$nape_util_ZPP_$BodyList.internal = false;
zpp_$nape_util_ZPP_$CompoundList.internal = false;
zpp_$nape_util_ZPP_$InteractorList.internal = false;
zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
zpp_$nape_util_ZPP_$RayResultList.internal = false;
zpp_$nape_util_ZPP_$Vec2List.internal = false;
zpp_$nape_util_ZPP_$ArbiterList.internal = false;
zpp_$nape_util_ZPP_$ContactList.internal = false;
zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
zpp_$nape_util_ZPP_$ConstraintList.internal = false;
zpp_$nape_util_ZPP_$CbTypeList.internal = false;
zpp_$nape_util_ZPP_$ListenerList.internal = false;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
